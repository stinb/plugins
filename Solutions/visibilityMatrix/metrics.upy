# Access Visibility Matrix Metrics from Understand

import understand
from matrix import DepMatrix

about_visibility_matrics = '''
  <p>The paper <span style="color:#8f8f8f"> (Baldwin, Carliss, Alan MacCormack,
  and John Rusnak. "Hidden structure: Using network methods to map system
  architecture." Research Policy 43.8 (2014): 1381-1397.) </span> presents a way
  to classify projects based on dependencies. This metric is based on that
  paper.</p>

  <h2>Research</h2>

  <h3>Dependency Matrices</h3>
  <p>Dependencies are first plotted in a matrix with files on the axis. If
  a file directly or indirectly depends on another file, the value at the
  matrix is true. The inclusion of indirect dependencies makes the matrix
  a "Visibility" matrix. The following metrics can be calculated from the
  matrix:</p>

  <br><img src=".doc/matrix_fan_metrics.png"/>

  <ul>
    <li><a href="und://plugin/metric/VisibleFanIn">Visible Fan In</a>
      the number of files that directly or indrectly depend on the target file.
      This is the sum of the file's column.</li>
    <li><a href="und://plugin/metric/VisibleFanOut">Visible Fan Out</a>
      the number of files the target file directly or indrectly depends on.
      This is the sum of the file's row.</li>
    <li><a href="und://plugin/metric/PropagationCost">Propagation Cost</a>
      the density of the matrix expressed as a percentage. This is a measure of
      how hard it is to modify the project.</li>
  </ul>

  <p>There are also versions of the above metrics that consider only direct
  dependencies:
  <a href="und://plugin/metric/DirectFanIn">Direct Fan In</a>,
  <a href="und://plugin/metric/DirectFanOut">Direct Fan Out</a>,
  and <a href="und://plugin/metric/DirPropagationCost">Direct Propagation Cost</a>.
  <p>

  <h3>Project Classification</h3>
  <p>The authors found that plotting the Visible Fan In and Visible Fan Out
  values revealed a pattern.</p>

  <br><img src=".doc/metrics_pattern.png"/>

  <p>The "Core" is the largest cyclical group in the project. There are metrics
  for the <a href="und://plugin/metric/CoreSize">number</a> and <a href=
  "und://plugin/metric/CorePercentage">percentage</a> of files in the core. The
  <a href="und://plugin/arch/Visibility%20Matrix%20Cores">Visibility Matrix Cores
  </a> architecture can be used to find all the cyclical groups in the project.
  </p>

  <p>Most projects were "Core-Periphery" projects with a single core and
  periphery files. However, not all projects have a clear single core.
  "Hierarchical" projects  have no core and "Multi-Core" projects have more than
  one. "Multi-Core" and "Hierarchical" projects are split into four groups using
  median visible fan metrics instead of the core's visible fan metrics. The
  <a href="und://plugin/arch/Visibility%20Matrix">Visibility Matrix</a>
  architecture classifies the project and splits the files into the four
  groups.</p>

  <p>See also the Project Quality
  <a href="und://plugins/Solutions/.doc/manager_project_quality.md?filter=Solution%3A%22Project%20Quality%22">
  solution</a> and the blog article
  <a href="https://blog.scitools.com/dependency-networks-with-understand/">
  Dependency Networks with Understand</a>.</p>
'''

depMets = {
  "DirectFanIn" : {
    "name" : "Direct Fan In (DFI)",
    "desc" : "<p>The number of resolved files that depend on this file.</p>" + about_visibility_matrics,
    "global" : False,
    "key" : "dfi"
  },
  "DirectFanOut" : {
    "name" : "Direct Fan Out (DFO)",
    "desc" : "<p>The number of resolved files this file depends on.</p>" + about_visibility_matrics,
    "global" : False,
    "key" : "dfo"
  },
  "VisibleFanIn" : {
    "name" : "Visible Fan In (VFI)",
    "desc" : "<p>The number of resolved files that directly or indirectly depend on this file.</p>" + about_visibility_matrics,
    "global" : False,
    "key" : "vfi"
  },
  "VisibleFanOut" : {
    "name" : "Visible Fan Out (VFO)",
    "desc" : "<p>The number of resolved files that this file directly or indirectly depends on.</p>" + about_visibility_matrics,
    "global" : False,
    "key" : "vfo"
  },
  "PropagationCost": {
    "name" : "Propagation Cost",
    "desc" : "<p>The density of the visibility matrix as a percentage.</p>" + about_visibility_matrics,
    "global" : True,
    "key" : "propagation_cost",
    "integer" : False
  },
  "DirPropagationCost": {
    "name" : "Direct Propagation Cost",
    "desc" : "<p>The density of the direct dependency matrix as a percentage.</p>" + about_visibility_matrics,
    "global" : True,
    "key" : "dir_propagation_cost",
    "integer" : False
  },
  "CoreSize": {
    "name" : "Core Size",
    "desc" : "<p>The number of files in the largest cyclic group.</p>" + about_visibility_matrics,
    "global" : True,
    "key" : "core_size"
  },
  "CorePercentage": {
    "name" : "Core Percentage",
    "desc" : "<p>The percentage of files in the largest cyclic group.</p>" + about_visibility_matrics,
    "global" : True,
    "key" : "core_percent",
    "integer" : False
  },
  "SecondCoreSize": {
    "name" : "Second Core Size",
    "desc" : "<p>The number of files in the second largest cyclic group.</p>" + about_visibility_matrics,
    "global" : True,
    "key" : "second_largest_cycle_size"
  }
}

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return list(depMets.keys())

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return depMets.get(id,dict()).get("name","")

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return depMets.get(id,dict()).get("desc","")

def tags(id):
  taglist = [
    'Solution: Project Quality',
    'Language: Any',
    'Dependencies',
  ]
  if depMets.get(id,dict()).get("global",True):
    taglist.extend([
      'Target: Architectures',
      'Target: Project'
    ])
  else:
    taglist.extend([
      'Target: Files',
      'Batch Metric'
    ])
  return taglist

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return depMets.get(id,dict()).get("integer",True)

def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return not depMets.get(metric.id(),dict()).get("global",True) and ent.kind().check("file ~unknown ~unresolved")

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return depMets.get(metric.id(),dict()).get("global",False)

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  return depMets.get(metric.id(),dict()).get("global",False)

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  if depMets.get(metric.id(),dict()).get("global",True):
    return False # not an entity metric

  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity("file ~unknown ~unresolved"))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # File dependencies are available for all languages
  return True

def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  # Invalid Metric
  key = depMets.get(metric.id(),dict()).get("key")
  if not key:
    return None

  # Directory Structure = Database which can use cache. Any other architectures
  # are caclulated on demand every time
  if isinstance(target, understand.Arch) and target.longname() != "Directory Structure":
    m = DepMatrix(entities=target.ents(True))
    if not key in m.values:
      m.calcCycles()
    return m.values.get(key)

  # Check for cached value
  und_cache = None
  if hasattr(metric, "cache"):
    und_cache = metric.cache()

  if und_cache is not None and not und_cache.is_empty():
    if isinstance(target, understand.Ent):
      return und_cache.value(key=key, ent=target)
    else:
      return und_cache.value(key=key)

  # No cached value, create the DepMatrix for the database
  m = DepMatrix(set(metric.db().ents("file ~unknown ~unresolved")))

  if und_cache is not None:
    # Caching is allowed, build cache
    m.calcCycles()
    ent_keys = []
    for v in depMets.values():
      if v["global"]:
        und_cache.insert(m.values[v["key"]], key=v["key"])
      else:
        ent_keys.append(v["key"])

    for i in range(m.size()):
      ent = m.entityAt(i)
      for k in ent_keys:
        und_cache.insert(m.valueAt(i,k), key=k,ent=ent)

  if isinstance(target, understand.Ent):
    return m.entityValue(target,key)
  else:
    if not key in m.values:
      m.calcCycles()
    return m.values.get(key)
