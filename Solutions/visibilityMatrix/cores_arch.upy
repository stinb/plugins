# Access the visibility matrix groups as an architecture in Understand

from matrix import DepMatrix

MINIMUM_SIZE = 5

def name():
  return "Visibility Matrix Cores"

def description():
  return '''Identify core groups of files with strong visibility relationships
    <p>This plugin analyzes the visibility relationships between files in your project to identify "core" groups of files that have strong interdependencies. A core group is a set of files where each file can "see" or is "seen by" all the other files in the group, indicating a high degree of coupling.</p>
    <p>The plugin uses a dependency matrix and cycle detection algorithms to find these core groups. Only groups with at least 5 files are considered, ensuring that the identified cores represent significant clusters of interconnected code.</p>
    <p>By identifying core groups, this plugin helps you understand the essential building blocks of your project and how different parts of the codebase are interconnected. This information can be valuable for architectural analysis, refactoring decisions, and identifying potential areas of code complexity or risk.</p>
  '''

def build(arch, db):
  m = DepMatrix(set(db.ents("file ~unknown ~unresolved")))
  last = 0
  cnt = 0
  zeros = len(str(m.size()))
  for core in m.calcCycles():
    size = len(core)
    if size >= MINIMUM_SIZE:
      if size == last:
        cnt += 1
      else:
        cnt = 0
        last = size
      label = str(size).zfill(zeros)
      if cnt > 0:
        label += " (" + str(cnt) + ")"
      for ent in core:
        arch.map(ent, label)
