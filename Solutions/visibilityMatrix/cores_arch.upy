# Access the visibility matrix groups as an architecture in Understand

from matrix import DepMatrix

MINIMUM_SIZE = 5

def name():
  return "Visibility Matrix Cores"

def description():
  return '''Identify file dependency cycles
    <p>This architecture finds dependency cycles among files and groups files
    belonging to the same cyclical group together. The groups are called
    "Cores" following this research paper: <span style="color:#8f8f8f">
    (Baldwin, Carliss, Alan MacCormack, and John Rusnak. "Hidden structure:
    Using network methods to map system architecture." Research Policy  43.8
    (2014): 1381-1397.) </span></p>

    <h2>Research</h2>
    <p>Dependencies are first plotted in a matrix with files on the axis. If
    a file directly or indirectly depends on another file, the value at the
    matrix is true. The inclusion of indirect dependencies makes the matrix
    a "Visibility" matrix. The following metrics can be calculated from the
    matrix:</p>

    <br><img src=".doc/matrix_fan_metrics.png"/>

    <ul>
      <li><b>Visible Fan In</b> the number of files that directly or
        indrectly depend on the target file. This is the sum of the file's
        column.</li>
      <li><b>Visible Fan Out</b> the number of files the target file directly
        or indrectly depends on. This is the sum of the file's row.</li>
      <li><b>Propagation Cost</b> the density of the matrix. This is a measure
        of how hard it is to modify the project.
    </ul>

    <p>The authors found that plotting the Visible Fan In and Visible Fan Out
    values revealed a pattern.</p>

    <br><img src=".doc/metrics_pattern.png"/>

    <p>The "Core" is the largest cyclical group in the project. However, not all
    projects have a clear single core. "Hierarchical" projects have no core
    and "Multi Core" projects have more than one. Those projects are split
    into four groups using median visible fan metrics instead of the core's
    visible fan metrics.</p>
  '''

def tags():
  return [
    'Solution: Visibility Matrix',
    'Dependencies',
    'Cycles'
  ]

def build(arch, db):
  m = DepMatrix(set(db.ents("file ~unknown ~unresolved")))
  last = 0
  cnt = 0
  zeros = len(str(m.size()))
  for core in m.calcCycles():
    size = len(core)
    if size >= MINIMUM_SIZE:
      if size == last:
        cnt += 1
      else:
        cnt = 0
        last = size
      label = str(size).zfill(zeros)
      if cnt > 0:
        label += " (" + str(cnt) + ")"
      for ent in core:
        arch.map(ent, label)
