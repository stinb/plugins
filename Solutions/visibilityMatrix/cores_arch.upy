# Access the visibility matrix groups as an architecture in Understand

from matrix import DepMatrix

MINIMUM_SIZE = 5

def name():
  return "Visibility Matrix Cores"

def description():
  return '''Identify file dependency cycles
    <p>This architecture finds dependency cycles among files and groups files
    belonging to the same cyclical group together. The groups are called
    "Cores" following this research paper: <span style="color:#8f8f8f">
    (Baldwin, Carliss, Alan MacCormack, and John Rusnak. "Hidden structure:
    Using network methods to map system architecture." Research Policy  43.8
    (2014): 1381-1397.) </span></p>

    <h2>Research</h2>

    <h3>Dependency Matrices</h3>
    <p>Dependencies are first plotted in a matrix with files on the axis. If
    a file directly or indirectly depends on another file, the value at the
    matrix is true. The inclusion of indirect dependencies makes the matrix
    a "Visibility" matrix. The following metrics can be calculated from the
    matrix:</p>

    <br><img src=".doc/matrix_fan_metrics.png"/>

    <ul>
      <li><a href="und://plugin/metric/VisibleFanIn">Visible Fan In</a>
        the number of files that directly or indrectly depend on the target file.
        This is the sum of the file's column.</li>
      <li><a href="und://plugin/metric/VisibleFanOut">Visible Fan Out</a>
        the number of files the target file directly or indrectly depends on.
        This is the sum of the file's row.</li>
      <li><a href="und://plugin/metric/PropagationCost">Propagation Cost</a>
        the density of the matrix expressed as a percentage. This is a measure of
        how hard it is to modify the project.</li>
    </ul>

    <p>There are also versions of the above metrics that consider only direct
    dependencies:
    <a href="und://plugin/metric/DirectFanIn">Direct Fan In</a>,
    <a href="und://plugin/metric/DirectFanOut">Direct Fan Out</a>,
    and <a href="und://plugin/metric/DirPropagationCost">Direct Propagation Cost</a>.
    <p>

    <h3>Project Classification</h3>
    <p>The authors found that plotting the Visible Fan In and Visible Fan Out
    values revealed a pattern.</p>

    <br><img src=".doc/metrics_pattern.png"/>

    <p>The "Core" is the largest cyclical group in the project. There are metrics
    for the <a href="und://plugin/metric/CoreSize">number</a> and <a href=
    "und://plugin/metric/CorePercentage">percentage</a> of files in the core. The
    <a href="und://plugin/arch/Visibility%20Matrix%20Cores">Visibility Matrix Cores
    </a> architecture can be used to find all the cyclical groups in the project.
    </p>

    <p>Most projects were "Core-Periphery" projects with a single core and
    periphery files. However, not all projects have a clear single core.
    "Hierarchical" projects  have no core and "Multi-Core" projects have more than
    one. "Multi-Core" and "Hierarchical" projects are split into four groups using
    median visible fan metrics instead of the core's visible fan metrics. The
    <a href="und://plugin/arch/Visibility%20Matrix">Visibility Matrix</a>
    architecture classifies the project and splits the files into the four
    groups.</p>

    <p>See also the Project Quality
    <a href="und://plugins/Solutions/.doc/manager_project_quality.md?filter=Solution%3A%22Project%20Quality%22">
    solution</a> and the blog article
    <a href="https://blog.scitools.com/dependency-networks-with-understand/">
    Dependency Networks with Understand</a>.</p>
  '''

def tags():
  return [
    'Solution: Project Quality',
    'Language: Any',
    'Dependencies',
    'Cycles'
  ]

def build(arch, db):
  m = DepMatrix(set(db.ents("file ~unknown ~unresolved")))
  last = 0
  cnt = 0
  zeros = len(str(m.size()))
  for core in m.calcCycles():
    size = len(core)
    if size >= MINIMUM_SIZE:
      if size == last:
        cnt += 1
      else:
        cnt = 0
        last = size
      label = str(size).zfill(zeros)
      if cnt > 0:
        label += " (" + str(cnt) + ")"
      for ent in core:
        arch.map(ent, label)
