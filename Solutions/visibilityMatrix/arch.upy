# Access the visibility matrix groups as an architecture in Understand

from matrix import DepMatrix

def name():
  return "Visibility Matrix"

def define_options(arch):
  arch.options().radio_vert("strategy", "Clustering Strategy", ["Automatic", "Core", "Median"], "Automatic")

def description():
  return '''Group files by visibility relationships
    <p>This plugin analyzes the visibility relationships between files in your project and groups them accordingly. It uses a dependency matrix to determine how much each file can "see" or is "seen by" other files, based on factors like function calls, variable access, and include directives. This analysis helps to identify clusters of files that are closely related and may form natural modules or subsystems within your project.</p>
    <p>The plugin offers different clustering strategies (Automatic, Core, Median) to group the files. These strategies offer varying levels of granularity in how the clusters are formed, allowing you to tailor the analysis to your specific needs.</p>
    <p>By visualizing the visibility relationships between files, this plugin can help you understand the overall structure of your project, identify potential areas of code entanglement, and guide refactoring efforts to improve modularity and maintainability.</p>
  '''

def build(arch, db):
  m = DepMatrix(set(db.ents("file ~unknown ~unresolved")))
  strategy = "auto"
  if hasattr(arch, "options") and arch.options().lookup("strategy") != "Automatic":
    strategy = arch.options().lookup("strategy").lower()
  m.classify(strategy)
  type = m.type
  for i in range(m.size()):
    arch.map(m.entityAt(i), type + "/" + m.categories[m.valueAt(i,"class")])

