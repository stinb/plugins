# Compliance Report
import codecheck_compliance


def name():
  return "Compliance\\Ignores List"

def test_inspection(inspection):
  return inspection.config()

# Report generation
def generate(report, inspection):
  codecheck_compliance.printheading(report, inspection, "Ignores List")

  # Find not ignored violations
  vlist = []
  for v in inspection.violations():
    if v.ignores():
      vlist.append(v)

  # Other Counts
  analysis_errors = 0
  for viol in report.db().violations():
    if viol.check_id() == "UND_ERROR":
      analysis_errors += 1

  inspection_errors = len(inspection.errors())

  codecheck_compliance.printSummaryRow(report,[("Analysis Errors", analysis_errors),
                                        ("Inspection Errors", inspection_errors),
                                        ("Ignores", len(vlist))])

  severities = dict()
  report.table(["Check ID", "File", "Entity", "Violation", "Notes"])
  for v in vlist:
    report.tablecell()
    report.print(v.check_id())

    report.tablecell()
    report.print(v.file())

    report.tablecell()
    if v.ent_uniquename():
      ent = report.db().lookup_uniquename(v.ent_uniquename())
      if ent:
        report.print(ent.longname())

    report.tablecell()
    report.print(v.text())

    report.tablecell()
    notes = []
    for source,note in v.ignores():
      if note:
        notes.append(note)
    if notes:
      report.print('\n'.join(notes))
