# Compliance Report
import codecheck_compliance


def name():
  return "Compliance\\Coverage"

def test_inspection(inspection):
  return inspection.config() # config is required

# Report generation
def generate(report, inspection):
  codecheck_compliance.printheading(report, inspection, "Coverage", True)

  # Categories Table
  checks = inspection.config().checks()
  categorySupported = dict()
  categoryTotal = dict()
  checkCategory = dict()
  supported = 0
  total = len(checks)
  for check in checks:
    category = "Other"
    for tag in inspection.config().check_tags(check):
      if tag.startswith("Category: "):
        category = tag[10:]
    checkCategory[check] = category
    if inspection.config().check_kind(check) != "Not Supported":
      categorySupported[category] = categorySupported.get(category,0) + 1
      supported += 1
    categoryTotal[category] = categoryTotal.get(category,0) + 1

  categories = sorted(categoryTotal.keys())
  if "Other" in categories:
    categories.remove("Other")

  cols = [" ", "All Rules"] + categories
  report.table(cols)

  report.tablecell()
  report.print("Understand % Coverage")
  report.tablecell()
  report.print("{:.0%}".format(supported/total if total else 0))
  for category in categories:
    report.tablecell()
    t = categoryTotal.get(category,0)
    report.print("{:.0%}".format(categorySupported.get(category,0)/t if t else 0))

  report.tablecell()
  report.print("Understand Coverage")
  report.tablecell()
  report.print(str(supported))
  for category in categories:
    report.tablecell()
    report.print(str(categorySupported.get(category,0)))

  report.tablecell()
  report.print("Total Rules")
  report.tablecell()
  report.print(str(total))
  for category in categories:
    report.tablecell()
    report.print(str(categoryTotal.get(category,0)))

  report.table()

  # Checks Table
  report.table(["Check ID", "Description", "Category", "Supported"])
  for check in codecheck_compliance.natural_sort(checks):
    report.tablecell()
    report.print(check)

    report.tablecell()
    report.print(inspection.config().check_name(check))

    report.tablecell()
    category = checkCategory.get(check, "Other")
    if category == "Other":
      category = ""
    report.print(category)

    report.tablecell()
    if inspection.config().check_kind(check) == "Not Supported":
      report.print("No")
    else:
      report.print("Yes")
