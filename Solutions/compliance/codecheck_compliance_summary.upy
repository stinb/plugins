# Compliance Report
import codecheck_compliance


def name():
  return "Compliance\\Summary"

def test_inspection(inspection):
  return inspection.config() # config is required

# Report generation
def generate(report, inspection):
  codecheck_compliance.printheading(report, inspection, "Compliance Summary")

  # Find Violation Counts By Check
  ignoreCnts = {}
  violCnts = {}
  allIgnored = 0
  allViolations = 0
  for v in inspection.violations():
    if v.ignores():
      ignoreCnts[v.check_id()] = ignoreCnts.get(v.check_id(), 0) + 1
      allIgnored += 1
    else:
      violCnts[v.check_id()] = violCnts.get(v.check_id(), 0) + 1
      allViolations += 1

  # Other Counts
  analysis_errors = 0
  for viol in report.db().violations():
    if viol.check_id() == "UND_ERROR":
      analysis_errors += 1

  inspection_errors = len(inspection.errors())

  compliance = "Compliant"
  if violCnts or analysis_errors > 0 or inspection_errors > 0:
    compliance = "Not Compliant"
  codecheck_compliance.printSummaryRow(report, [("Compliance", compliance),
                                        ("Analysis Errors", analysis_errors),
                                        ("Inspection Errors", inspection_errors)])

  # Categories Table
  checks = inspection.config().checks()
  categoryIgnored = dict()
  categoryViolations = dict()
  checkCategory = dict()
  for check in checks:
    category = "Other"
    for tag in inspection.config().check_tags(check):
      if tag.startswith("Category: "):
        category = tag[10:]
    checkCategory[check] = category
    categoryIgnored[category] = categoryIgnored.get(category,0) + ignoreCnts.get(check, 0)
    categoryViolations[category] = categoryViolations.get(category,0) + violCnts.get(check, 0)

  categories = sorted(categoryViolations.keys())
  cols = [" ", "All Rules"] + categories
  report.table(cols)

  report.tablecell()
  report.print("Non Ignored Violations")
  report.tablecell()
  report.print(str(allViolations))
  for category in categories:
    report.tablecell()
    report.print(str(categoryViolations.get(category,0)))

  report.tablecell()
  report.print("Ignored Violations")
  report.tablecell()
  report.print(str(allIgnored))
  for category in categories:
    report.tablecell()
    report.print(str(categoryIgnored.get(category,0)))

  report.tablecell()
  report.print("Total Violations")
  report.tablecell()
  report.print(str(allViolations + allIgnored))
  for category in categories:
    report.tablecell()
    report.print(str(categoryViolations.get(category,0) + categoryIgnored.get(category,0)))

  report.table()

  # Checks Table
  show_footnote = False
  report.table(["Check ID", "Category", "Violations", "Ignored", "Compliance"])
  for check in codecheck_compliance.natural_sort(checks):
    report.tablecell()
    report.print(check)

    report.tablecell()
    category = checkCategory.get(check, "Other")
    if category == "Other":
      category = ""
    report.print(category)

    kind = inspection.config().check_kind(check)
    if kind == "Implicitly Supported" or kind == "Not Supported":
      report.tablecell()
      report.print("N/A")
      report.tablecell()
      report.print("N/A")

      report.tablecell()
      if kind == "Not Supported":
        report.print(kind)
      elif inspection_errors:
        report.print("Inspection Errors({})".format(inspection_errors))
      else:
        report.print("Compliant*")
        show_footnote = True
    else:
      report.tablecell()
      report.print(str(ignoreCnts.get(check, 0) + violCnts.get(check, 0)))

      report.tablecell()
      report.print(str(ignoreCnts.get(check, 0)))

      report.tablecell()
      cnt = violCnts.get(check, 0)
      if cnt == 0:
        report.print("Compliant")
      elif category == "Required":
        report.print("Not Compliant ({})".format(cnt))
      else:
        report.print("Violations ({})".format(cnt))

  report.table()
  if show_footnote:
    report.print("* This check is always run by the Understand strict parser and violations are included as Analysis errors.")
