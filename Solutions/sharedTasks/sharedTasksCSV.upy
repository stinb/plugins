# Command line interface for creating a CSV of an architecture of shared tasks


from sharedTasksCSV import *


def name() -> str:
    return 'Shared Tasks CSV'

def description():
  return '''Export a CSV report of objects accessed from multiple call trees.

    <p>Architectures are used to tag the root functions definng the call trees.
    This report runs on such architectures to highlight global objects accessed
    from multiple call trees. </p>

    <h2>Architecture Structure</h2>

    <p>Working with multiple call trees means working with multiple root
    functions. To pass multiple entities to a plugin, the entities must be
    grouped together in an architecture. A simple architecture can have the
    format:</p>

    <ul><li>Name of root architecture can be anything
      <ul><li>Any name containing the word tasks (case insensitive)
        <ul>
          <li>function1()</li>
          <li>function2()</li>
        </ul></li>
      </ul></li>
    </ul>

    <p>The shared tasks plugins also support additional fields for the tasks.
    These fields are displayed on the graph under the task name, and in the
    table as columns. Currently supported fields are 'core' and 'priority'.
    A field can be used instead of an architecture name containing the word
    tasks.</p>

    <ul><li>Name of root architecture can be anything
      <ul><li>Any name containing the the word core or priority (case insensitive)
        <ul><li>Field value like 1
          <ul><li>function1()</li></ul>
        <li>Another field value like 2
          <ul><li>function2()</li></ul>
        </li></ul>
      </li></ul>
    </li></ul>

    <p>Finally, the architecture can be used to identify functions that enable
    and disable interrupts. References protected by these functions
    (preceded by a call to the disable function and followed by a call to the
    enable function) are identified by the plugins. The naming pattern interrupt
    control is (ommitting the tasks): </p>

    <ul><li>Name of root architecture can be anything
      <ul><li>name containing the word interrupt or the word control (case insensitive)
        <ul><li>any name here. This layer allows multiple pairs of interrupt functions
          <ul><li>enable
            <ul><li>enableFunction()</li></ul>
          <li>disable
            <ul><li>disableFunction()</li></ul>
          </li></ul>
        </li></ul>
      </li></ul>
    </li></ul>


    <h2>See Also</h2>
    <p>More documentation and scripts are available in the <a href=
    "https://github.com/stinb/plugins/blob/main/Solutions/sharedTasks/README.md">
    README</a> file in the repository.</p>

    <p>Related plugins are the "Shared Tasks - By Object" and
    "Shared Tasks - By Function" graphs</p>
   '''

def tags():
  return [
    'Solution: Shared Tasks',
    'Target: Architectures',
    'Concurrency'
  ]


def test_architecture(arch: Arch) -> bool:
    return True


def init(report: IReport):
    for option in CSV_OPTIONS:
        # Checkbox
        if option.choices == OPTION_BOOL_CHOICES:
            report.options().checkbox(option.key, option.name, option.default == OPTION_BOOL_TRUE)
        # Choice
        elif option.choices:
            report.options().choice(option.key, option.name, option.choices, option.default)
        # Text
        else:
            report.options().text(option.key, option.name, option.default)


def generate(report: IReport, target: Arch | Ent | Db):
    # Options
    options = dict() # type: dict[str, str | bool]
    for option in CSV_OPTIONS:
        options[option.key] = report.options().lookup(option.key)

    # Export file and print lines to report
    generateCSV(report.db(), target, options, report)
