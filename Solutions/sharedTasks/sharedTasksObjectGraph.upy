# A modified Object References With Calledby Graph that allows choosing
# a tasks architecture which determines interrupt controls, task node labels,
# and sorting

import re
import sharedTasks

callbykind = ("ada callby,"
              "c callby ~inactive, c useby ptr,"
              "cobol callby,"
              "csharp callby, csharp useby ptr,"
              "fortran callby,"
              "java callby,"
              "jovial callby, jovial asm useby,"
              "pascal callby,"
              "vhdl callby,"
              "php callby")
objectrefkind = "setby, useby, modifyby, definein"

def name():
  return 'Shared Tasks'

def style():
  return 'By Object'

def description():
  return '''
The shared tasks plugins find global objects accessed from multiple call trees, starting from the specified object

This plugin displays all the call trees and objects in a single graph, highlighting global objects that are accessed from multiple root functions.
<br>
<a href="https://github.com/stinb/plugins/blob/main/Solutions/sharedTasks/README.md">Full instructions for using this plugin</a>
<br>
<b>Example:</b><br>
<img src="sharedTasks.png">
'''

def test_entity(entity):
  return entity.kind().check("Object, Macro, Variable, Field, Property")

def init(graph, entity):
  # Options
  graph.options().define("Type", ["Off", "On"], "Off")
  graph.options().define("Called By Depth", [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ], "3")
  graph.options().define("Name", ["Shortname", "Fullname", "None (Overview Mode)"], "Shortname")
  graph.options().define("Filename", ["Shortname", "Fullname", "Relative", "None"], "None")
  graph.options().define("Unresolved", ["On", "Off"], "On")
  graph.options().define("References", ["Simple", "All"], "All")

  graph.options().define("Tasks Architecture", ["None"] + [arch.name() for arch in graph.db().root_archs()], "None")

  # Legend
  graph.legend().define("entStart", "ellipse", "Object Graphed", "#90c4e4", "", 0,0)
  graph.legend().define("entOther", "roundedrect", "General Entity", "#90c4e4", "", 1,0)

  graph.legend().define("refUseby", "arrow", "Ref: Use by", "#4e8cb9", "#4e8cb9", 0,1)
  graph.legend().define("refSetby", "arrow", "Ref: Set by", "#569f38", "#569f38", 1,1)
  graph.legend().define("refModby", "arrow", "Ref: Modify by", "#e45721", "#e45721", 2,1)
  graph.legend().define("refDefDec", "arrow", "Ref: Define/Declare in", "#8f8f8f", "#8f8f8f", 3,1)


def draw(graph, entity):
  # Defaults
  graph.default('rankdir', 'LR', 'graph')
  graph.default('color', '#90c4e4', 'node')
  graph.default('shape', 'box', 'node')
  graph.default('color', '#4e8cb9', 'edge')

  interruptDisabledRefs = set() # { str(ref), ... }
  tasks = dict()
  archName = graph.options().lookup("Tasks Architecture")
  if archName != "None":
    arch = graph.db().lookup_arch(archName)
    if arch:
      tasks, enableDisable = sharedTasks.parseArch(arch)[0:2]
      if enableDisable:
        interruptDisabledRefs = sharedTasks.findInterruptDisabledRefs(graph.db(), enableDisable)

  def refSort(ref):
    try:
      priority = int(tasks.get(ref.ent(),dict()).get('priority',-1))
    except:
      priority = -1
    return priority

  depth = int(graph.options().lookup("Called By Depth"))

  curLevel = []
  curLevel.append(entity)
  visited = set()
  nodes = dict()

  # Make sure initial node shows when depth = 0
  grab_node(graph,nodes,entity)

  for i in range(depth):
    nextLevel = []
    for ent in curLevel:
      # Avoid visiting nodes multiple times
      if ent in visited:
        continue
      visited.add(ent)

      # Get a graphviz node for the entity
      head = grab_node(graph,nodes,ent)

      if i == 0:
        refs = ent.refs(objectrefkind, unique=False)
      else:
        refs = ent.refs(callbykind, unique=True)

      for ref in sorted(refs, key = refSort):
        tailEnt = ref.ent()
        if (graph.options().lookup("Unresolved") == "Off" and
            tailEnt.kind().check("unresolved, unknown, undefined")):
          continue
        nextLevel.append(tailEnt)
        tail = grab_node(graph,nodes,tailEnt)
        edge = graph.edge(tail,head)

        if ref.kind().check("UseBy"):
          edge.set("color", "#4e8cb9")
        if ref.kind().check("Setby"):
          edge.set("color", "#569f38")
        if ref.kind().check("Modifyby"):
          edge.set("color", "#e45721")
        if ref.kind().check("Definein, Declarein"):
          edge.set("color", "#8f8f8f")
        if sharedTasks.refStr(ref) in interruptDisabledRefs:
          edge.set("style", "dashed")

        if (graph.options().lookup("References") == "All" and
            not ref.kind().check("Callby")):
          edge.set("label", ref.kindname())
          edge.sync(ref)
    # End of loop over current level
    curLevel = nextLevel

def grab_node(graph, nodes, ent):
  if ent in nodes:
    return nodes[ent]

  label = ""

  # Type Option
  if (graph.options().lookup("Type") == "On" and
      ent.kind().check("Object, Variable, Field, Property")):
    type = ent.type()
    if not type:
      type = "unknown"
    label += type + "\n"

  # Name Option
  if graph.options().lookup("Name") == "Fullname":
    label += ent.longname()
  elif graph.options().lookup("Name") == "Shortname":
    label += ent.name()

  # Filename option
  filename = graph.options().lookup("Filename")
  if filename != "None" and not ent.kind().check("file"):
    defref = ent.ref("definein,declarein")
    if defref:
      if filename == "Relative":
        label += "\n" + defref.file().relname()
      elif filename == "Fullname":
        label += "\n" + defref.file().longname()
      else:
        label += "\n" + defref.file().name()

  # Tasks Option
  isRoot = False
  archName = graph.options().lookup("Tasks Architecture")
  if archName != "None":
    fields = dict()
    for arch in graph.db().archs(ent):
      parts = arch.longname().split('/')
      if parts[0] == archName and len(parts) > 1:
        field = next((field for field in sharedTasks.TASK_FIELDS if field in parts[1].lower()), False)
        if field and len(parts) > 2:
          isRoot = True
          fields[field] = parts[2]
        elif "task" in parts[1].lower():
          isRoot = True

    for field in sharedTasks.TASK_FIELDS:
      if field in fields:
        label += "\n" + field.capitalize() + ": " + fields[field]


  label = re.sub('\\\\','\\\\\\\\', label)

  # Create node
  node = graph.node(label, ent)
  if ent.kind().check("Object, Variable, Field, Property"):
    node.set("shape","oval")
  if ent.kind().check("unresolved, unknown, undefined"):
    node.set("shape","octagon")
    node.set("color","#8f8f8f")
  if isRoot:
    node.set('penwidth', '5')
  nodes[ent] = node
  return node
