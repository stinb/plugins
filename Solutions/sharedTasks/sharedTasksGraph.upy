# Graph of shared tasks starting from an architecture


import understand
from understand import Ent

from sharedTasks import *


orange = '#e45721'
green  = '#569f38'
blue   = '#4e8cb9'
purple = '#974eb9'
gray   = '#777777'

opacity = '55'


def name():
    return 'Shared Tasks'

def style():
  return 'By Function'

def description():
  return '''
The shared tasks plugins find global objects accessed from multiple call trees, starting from the specified function

This plugin displays all the call trees and objects in a single graph, highlighting global objects that are accessed from multiple root functions.
<br>
<a href="https://github.com/stinb/plugins/blob/main/Solutions/sharedTasks/README.md">Full instructions for using this plugin</a>
<br>
<b>Example:</b><br>
<img src="sharedTasks.png">
'''


def test_architecture(arch):
    return True


def init(graph, target):
    # Options
    for option in COMMON_OPTIONS:
        graph.options().define(option.name, option.choices, option.default)

    # Legend - Nodes
    graph.legend().define('function', 'rectangle', 'Function', '', '', 0, 0)
    graph.legend().define('globalObject', 'ellipse', 'Global Object', '', gray + opacity, 1, 0)
    graph.legend().define('sharedGlobalObject', 'ellipse', 'Shared Global Object', '', blue + opacity, 2, 0)
    # Legend - Edges
    graph.legend().define('refCall', 'arrow', 'Ref: Call', '', '', 0, 1)
    graph.legend().define('refModify', 'arrow', 'Ref: Modify', orange, orange, 1, 1)
    graph.legend().define('refSet', 'arrow', 'Ref: Set', green, green, 2, 1)
    graph.legend().define('refUse', 'arrow', 'Ref: Use', blue, blue, 3, 1)
    graph.legend().define('refMany', 'arrow', 'Ref: (Many)', purple, purple, 4, 1)
    graph.legend().define('interruptProtected', 'dasharrow', 'Interrupt Protected (All Colors)', '', '', 5, 1)
    graph.legend().define('filtered', 'dotarrow', 'Filtered Out (All Colors)', '', '', 6, 1)


def drawNode(graph, ent, name, **kwargs):
    node = graph.node(name, ent)

    if 'box' in kwargs and kwargs['box']:
        node.set('shape', 'box')
    if 'bold' in kwargs and kwargs['bold']:
        node.set('penwidth', '5')
    if 'color' in kwargs and kwargs['color']:
        node.set('fillcolor', kwargs['color'])

    return node


def drawEdge(graph, head, tail, name, **kwargs):
    edge = graph.edge(head, tail, name)

    if 'color' in kwargs and kwargs['color']:
        edge.set('color', kwargs['color'])
    if 'style' in kwargs and kwargs['style']:
        edge.set('style', kwargs['style'])
        if kwargs['style'] == 'dotted':
            edge.set('penwidth', '2')

    return edge


def getNodeName(ent: Ent, options: dict[str, str | bool], tasks: dict) -> str:
    result = getLongName(ent, options)

    # Add the fields like the priority on the next line
    if ent in tasks:
        for field in TASK_FIELDS:
            if field in tasks[ent]:
                result += '\n' + field.capitalize() + ': ' + tasks[ent][field]

    return result


def draw(graph, target):
    # Get a dictionary that maps an option key to the value
    options = dict() # type: dict[str, str | bool]
    for commonOption in COMMON_OPTIONS:
        value = graph.options().lookup(commonOption.name)
        if commonOption.choices == OPTION_BOOL_CHOICES:
            if value == OPTION_BOOL_TRUE:
                value = True
            elif value == OPTION_BOOL_FALSE:
                value = False
        options[commonOption.key] = value

    edgeInfo, tasks, incoming, interruptDisabledRefs = buildEdgeInfo(graph.db(), target, options)[0:4]

    # Draw the graph
    nodes = dict()
    graph.set('rankdir', 'LR')
    for edgeObj in edgeInfo.values():

        # Draw or get head node
        scope = edgeObj['scope']
        if scope not in nodes:
            # Style node
            name = getNodeName(scope, options, tasks)
            box = checkIsCallable(scope)
            bold = edgeObj['root'] and box
            color = None

            # Draw and add
            head = drawNode(graph, scope, name, box=box, bold=bold, color=color)
            nodes[scope] = head
        else:
            head = nodes[scope]

        # Draw or get tail node
        ent = edgeObj['ent']
        isGlobalObject = ent.kind().check('Global Object')
        isCallable = checkIsCallable(ent)
        if ent not in nodes:
            # Edge options
            name = getNodeName(ent, options, tasks)
            box = isCallable and not isGlobalObject
            bold = False
            # Edge option: color
            if isGlobalObject:
                color = (blue + opacity) if edgeObj['shared'] else (gray + opacity)
            else:
                color = None

            # Draw and add
            tail = drawNode(graph, ent, name, box=box, bold=bold, color=color)
            nodes[ent] = tail
        else:
            tail = nodes[ent]

        # Edge option: color
        kindnames = edgeObj['kindnames']
        if len(kindnames) == 1:
            if 'Modify' in kindnames:
                color = orange
            elif 'Set' in kindnames:
                color = green
            elif 'Use' in kindnames:
                color = blue
            else:
                color = None
        elif len(kindnames) > 1:
            color = purple
        else:
            color = None
        # Edge option: style
        if refStr(edgeObj['ref']) in interruptDisabledRefs:
            style = 'dashed'
        elif edgeObj['filtered']:
            style = 'dotted'
        else:
            style = None

        # Edge text
        kindnames = list(kindnames)
        kindnames.sort()

        # Draw edge
        edge = drawEdge(graph, head, tail, '/'.join(kindnames), color=color, style=style)
