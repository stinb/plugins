# Graph of shared tasks starting from an architecture


import understand
from understand import Ent

from sharedTasks import *


orange = '#e45721'
green  = '#569f38'
blue   = '#4e8cb9'
purple = '#974eb9'
gray   = '#777777'

opacity = '55'


def name():
    return 'Shared Tasks'

def style():
  return 'By Function'

def description():
  return '''The shared tasks plugins find global objects accessed from multiple call trees.

    <p>Architectures are used to tag the root functions definng the call trees.
    This graph runs on such architectures to highlight global objects accessed
    from multiple call trees. </p>

    <br>
    <b>Example:</b><br>
    <img src="sharedTasks.png">

    <h2>Architecture Structure</h2>

    <p>Working with multiple call trees means working with multiple root
    functions. To pass multiple entities to a plugin, the entities must be
    grouped together in an architecture. A simple architecture can have the
    format:</p>

    <ul><li>Name of root architecture can be anything
      <ul><li>Any name containing the word tasks (case insensitive)
        <ul>
          <li>function1()</li>
          <li>function2()</li>
        </ul></li>
      </ul></li>
    </ul>

    <p>The shared tasks plugins also support additional fields for the tasks.
    These fields are displayed on the graph under the task name, and in the
    table as columns. Currently supported fields are 'core' and 'priority'.
    A field can be used instead of an architecture name containing the word
    tasks.</p>

    <ul><li>Name of root architecture can be anything
      <ul><li>Any name containing the the word core or priority (case insensitive)
        <ul><li>Field value like 1
          <ul><li>function1()</li></ul>
        <li>Another field value like 2
          <ul><li>function2()</li></ul>
        </li></ul>
      </li></ul>
    </li></ul>

    <p>Finally, the architecture can be used to identify functions that enable
    and disable interrupts. References protected by these functions
    (preceded by a call to the disable function and followed by a call to the
    enable function) are identified by the plugins. The naming pattern interrupt
    control is (ommitting the tasks): </p>

    <ul><li>Name of root architecture can be anything
      <ul><li>name containing the word interrupt or the word control (case insensitive)
        <ul><li>any name here. This layer allows multiple pairs of interrupt functions
          <ul><li>enable
            <ul><li>enableFunction()</li></ul>
          <li>disable
            <ul><li>disableFunction()</li></ul>
          </li></ul>
        </li></ul>
      </li></ul>
    </li></ul>


    <h2>See Also</h2>
    <p>More documentation and scripts are available in the <a href=
    "https://github.com/stinb/plugins/blob/main/Solutions/sharedTasks/README.md">
    README</a> file in the repository.</p>

    <p>Related plugins are the "Shared Tasks - By Object" graph and the
    "Shared Tasks CSV" interactive report</p>
   '''

def tags():
  return [
    'Solution: Shared Tasks',
    'Target: Architectures',
    'Concurrency'
  ]

def test_architecture(arch):
    return True


def init(graph, target):
    # Options
    for option in COMMON_OPTIONS:
        graph.options().define(option.name, option.choices, option.default)

    # Legend - Nodes
    graph.legend().define('function', 'rectangle', 'Function', '', '', 0, 0)
    graph.legend().define('globalObject', 'ellipse', 'Global Object', '', gray + opacity, 1, 0)
    graph.legend().define('sharedGlobalObject', 'ellipse', 'Shared Global Object', '', blue + opacity, 2, 0)
    # Legend - Edges
    graph.legend().define('refCall', 'arrow', 'Ref: Call', '', '', 0, 1)
    graph.legend().define('refModify', 'arrow', 'Ref: Modify', orange, orange, 1, 1)
    graph.legend().define('refSet', 'arrow', 'Ref: Set', green, green, 2, 1)
    graph.legend().define('refUse', 'arrow', 'Ref: Use', blue, blue, 3, 1)
    graph.legend().define('refMany', 'arrow', 'Ref: (Many)', purple, purple, 4, 1)
    graph.legend().define('interruptProtected', 'dasharrow', 'Interrupt Protected (All Colors)', '', '', 5, 1)
    graph.legend().define('filtered', 'dotarrow', 'Filtered Out (All Colors)', '', '', 6, 1)


def drawNode(graph, ent, name, **kwargs):
    node = graph.node(name, ent)

    if 'box' in kwargs and kwargs['box']:
        node.set('shape', 'box')
    if 'bold' in kwargs and kwargs['bold']:
        node.set('penwidth', '5')
    if 'color' in kwargs and kwargs['color']:
        node.set('fillcolor', kwargs['color'])

    return node


def drawEdge(graph, head, tail, name, **kwargs):
    edge = graph.edge(head, tail, name)

    if 'color' in kwargs and kwargs['color']:
        edge.set('color', kwargs['color'])
    if 'style' in kwargs and kwargs['style']:
        edge.set('style', kwargs['style'])
        if kwargs['style'] == 'dotted':
            edge.set('penwidth', '2')

    return edge


def getNodeName(ent: Ent, options: dict[str, str | bool], tasks: dict) -> str:
    result = getLongName(ent, options)

    # Add the fields like the priority on the next line
    if ent in tasks:
        for field in TASK_FIELDS:
            if field in tasks[ent]:
                result += '\n' + field.capitalize() + ': ' + tasks[ent][field]

    return result


def draw(graph, target):
    # Get a dictionary that maps an option key to the value
    options = dict() # type: dict[str, str | bool]
    for commonOption in COMMON_OPTIONS:
        value = graph.options().lookup(commonOption.name)
        if commonOption.choices == OPTION_BOOL_CHOICES:
            if value == OPTION_BOOL_TRUE:
                value = True
            elif value == OPTION_BOOL_FALSE:
                value = False
        options[commonOption.key] = value

    edgeInfo, tasks, incoming, interruptDisabledRefs = buildEdgeInfo(graph.db(), target, options)[0:4]

    # Draw the graph
    nodes = dict()
    graph.set('rankdir', 'LR')
    for edgeObj in edgeInfo.values():

        # Draw or get head node
        scope = edgeObj['scope']
        if scope not in nodes:
            # Style node
            name = getNodeName(scope, options, tasks)
            box = checkIsCallable(scope)
            bold = edgeObj['root'] and box
            color = None

            # Draw and add
            head = drawNode(graph, scope, name, box=box, bold=bold, color=color)
            nodes[scope] = head
        else:
            head = nodes[scope]

        # Draw or get tail node
        ent = edgeObj['ent']
        isObject = ent.kind().check(OBJ_ENT_KINDS)
        isCallable = checkIsCallable(ent)
        if ent not in nodes:
            # Edge options
            name = getNodeName(ent, options, tasks)
            box = isCallable and not isObject
            bold = False
            # Edge option: color
            if isObject:
                color = (blue + opacity) if edgeObj['shared'] else (gray + opacity)
            else:
                color = None

            # Draw and add
            tail = drawNode(graph, ent, name, box=box, bold=bold, color=color)
            nodes[ent] = tail
        else:
            tail = nodes[ent]

        # Edge option: color
        kindnames = edgeObj['kindnames']
        if len(kindnames) == 1:
            if 'Modify' in kindnames:
                color = orange
            elif 'Set' in kindnames:
                color = green
            elif 'Use' in kindnames:
                color = blue
            else:
                color = None
        elif len(kindnames) > 1:
            color = purple
        else:
            color = None
        # Edge option: style
        if refStr(edgeObj['ref']) in interruptDisabledRefs:
            style = 'dashed'
        elif edgeObj['filtered']:
            style = 'dotted'
        else:
            style = None

        # Edge text
        kindnames = list(kindnames)
        kindnames.sort()

        # Draw edge
        edge = drawEdge(graph, head, tail, '/'.join(kindnames), color=color, style=style)
