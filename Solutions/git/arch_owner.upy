# Group files by the author(s) who made the most commits to each file.
# Make sure to also install git_util.py
import und_lib.git_util as git_util

def name():
  return "Git Owner"

def description():
  return '''Groups files by the Git author(s) who made the most commits to each file.
    <p>Authors can be broken into three categories:</p>
    <ul>
      <li>Owner: the author(s) with the most commits</li>
      <li>Major Contributor: at least 5% of the commits</li>
      <li>Minor Contributor: less than 5% of the commits</li>
    </ul>

    <p>Files with strong ownership are preferred, and files with many minor
    contributors are more bug prone. <span style="color:#8f8f8f"> (Bird,
    Christian, et al. "Don't touch my code! Examining the effects of ownership
    on software quality."Â Proceedings of the 19th ACM SIGSOFT symposium and the
    13th European conference on Foundations of software engineering. 2011.)
    </span> </p>

    <p>This architecture groups files by the Owner of each file.</p>

    <p>Related metrics are: "Git Ownership", "Git Major Contributors", and
    "Git Minor Contributors". See also the interactive report "Git Authors"</p>

    <p>Compare to the "Git Author" architecture which groups by the most
    recent author. </p>
  '''

def tags():
  return [
    'Solution: Git'
  ]


def build(arch, db):
  authors = git_util.gitAuthors(arch,db)
  for file, authorList in authors.items():
    authorCounts = dict()
    for author in authorList:
      authorCounts[author] = authorCounts.get(author,0) + 1
    max = 0
    owners = []
    for author,cnt in authorCounts.items():
      if cnt > max:
        max = cnt
        owners = [author]
      elif cnt == max:
        owners.append(author)
    for owner in owners:
      arch.map(file, owner)
