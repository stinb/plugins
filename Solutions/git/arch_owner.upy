def description():
  return '''Groups files in a Git repository by the author(s) who made the most commits to each file.
    <p>This plugin leverages Git metadata to identify the primary contributors to each file within a repository. It analyzes
the commit history to determine the author with the highest number of commits for each file. In cases where multiple authors
have an equal number of commits, all such authors are considered owners. This information can be useful for understanding
code ownership, assigning code reviews, or identifying subject matter experts within a project.</p>
'''


# Group files by the author(s) who made the most commits to each file.
# Make sure to also install git_util.py
import und_lib.git_util as git_util

def name():
  return "Git Owner"


def build(arch, db):
  authors = git_util.gitAuthors(arch,db)
  for file, authorList in authors.items():
    authorCounts = dict()
    for author in authorList:
      authorCounts[author] = authorCounts.get(author,0) + 1
    max = 0
    owners = []
    for author,cnt in authorCounts.items():
      if cnt > max:
        max = cnt
        owners = [author]
      elif cnt == max:
        owners.append(author)
    for owner in owners:
      arch.map(file, owner)
