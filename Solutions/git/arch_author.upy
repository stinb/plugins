# Generate an architecture from the last author to touch the file.
# Make sure to also install git_util.py
import und_lib.git_util as git_util

def name():
  return "Git Author"

def description():
  return '''Group files by Git author.
    <p>By default, this plugin uses the most recent author, showing the last
    author to modify a file. It can also be configured to show the creator
    (first author).</p>

    <p>Example: the "Top 5" chart of this architecture for the CMake project.
    </p><br>
    <img src=".doc/arch_author.png">

    <p>Compare to
    the <a href="und://plugin/arch/Git%20Owner">Git Owner</a>
    architecture which groups by the author with the most commits. See also
    the <a href="und://plugins/Solutions/git/.doc/manager_git.md?filter=Solution%3A%22Git%22"> Git Solution</a>,
    the <a href="https://blog.scitools.com/git-plugins-for-understand/">blog
    article</a> describing the Git plugins,
    the interactive report <a href="und://plugin/ireport/Git%20Authors">Git Authors</a>,
    and the metric <a href="und://plugin/metric/GitAuthors">Authors</a>
    .</p>
  '''

def tags():
  return [
    'Solution: Git',
    'Language: Any',
  ]

def is_enabled_by_default():
  return True

def define_options(arch):
  arch.options().radio_horiz("author", "Author", ["Creator", "Most Recent"], "Most Recent")

def build(arch, db):
  idx = 0
  if arch.options().lookup("author") == "Creator":
    idx = -1

  authors = git_util.gitAuthors(arch,db)
  for file, authorList in authors.items():
    if authorList:
      arch.map(file, authorList[idx])

