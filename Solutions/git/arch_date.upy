import datetime
import und_lib.git_util as git_util

def name():
  return "Git Date"

def description():
  return '''Group files by Git dates.
  <p>This architecture can group by the first commit (creation date) or
  last commit (most recently modified date). The architecture can be structured
  with absolute dates (YYYY/MM) or relative dates (This Week, This Month, etc).
  </p><br>

  <img src=".doc/last_modified_relative.png">

  <p>The full list of of relative date categories is:</p>
  <ul>
    <li>Today</li>
    <li>Yesterday</li>
    <li>This Week</li>
    <li>This Month</li>
    <li>This Quarter</li>
    <li>This Year</li>
    <li>Earlier</li>
  </ul>

  <p>Compare to the
  <a href="und://plugin/arch/Git%20Stability">Git Stability</a>
  architecture which allows identifying frequently modified files. See also
  the <a href="und://plugins/Solutions/git/.doc/manager_git.md?filter=Solution%3A%22Git%22"> Git Solution</a>,
  the <a href="https://blog.scitools.com/git-plugins-for-understand/">blog
  article</a> describing the Git plugins,
  the interactive report <a href="und://plugin/ireport/Git%20Commits">Git Commits</a>,
  and the metrics <a href="und://plugin/metric/GitCommits">Commits</a>,
  <a href="und://plugin/metric/GitDaysSinceCreated">Days since creation</a>
  and <a href="und://plugin/metric/GitDaysSinceLastModified">Days since modified</a>
  .</p>
  '''

def tags():
  return [
    'Solution: Git',
    'Language: Any',
  ]

def is_enabled_by_default():
  return True

def define_options(arch):
  # Builds 1194 and later allow defining architecture options
  arch.options().radio_horiz("date", "Date", ["Creation Date", "Modified Date"], "Modified Date")
  arch.options().radio_horiz("style", "Style", ["Absolute", "Relative"], "Relative")

def build(arch, db):
  idx = 0
  if arch.options().lookup("date") == "Creation Date":
    idx = -1

  if arch.options().lookup("style") == "Relative":
    relativeDate(arch, db, idx)
  else:
    absoluteDate(arch, db, idx)


def absoluteDate(arch, db, idx):
  isoDates = git_util.gitIsoDates(arch,db)
  for file, dateList in isoDates.items():
    if dateList:
      dt = datetime.datetime.fromisoformat(dateList[idx])
      arch.map(file, dt.strftime("%Y/%m"))

def relativeDate(arch, db, idx):
  today = datetime.date.today()
  relativeTo = [
    ("Today", today),
    ("Yesterday", today - datetime.timedelta(days=1)),
    ("This Week", today - datetime.timedelta(days=7)),
    ("This Month", datetime.date(year=today.year, month=today.month, day=1)),
    ("This Quarter", datetime.date(year=today.year, month=today.month - ((today.month-1)%3), day=1)),
    ("This Year", datetime.date(year=today.year, month=1, day=1))
  ]

  isoDates = git_util.gitIsoDates(arch,db)
  for file, dateList in isoDates.items():
    if dateList:
      dt = datetime.datetime.fromisoformat(dateList[idx]).date()
      label = "Earlier"
      for relTo in relativeTo:
        if dt >= relTo[1]:
          label = relTo[0]
          break;
      arch.map(file, label)



