# A graph plugin for Git coupling
# This depends on git_util.py
# The sfdp layout this graph plugin uses requires build 1165 or later

import und_lib.git_util as git_util
import understand

colors = ["#90c4e4", "#afd870", "#fcad56", "#4e8cb9", "#569f38", "#e45721", "#133a52", "#315015", "#71290d", "#acd3eb", "#c6e39a", "#fcc281", "#5aa7d7", "#84c968", "#fa8504", "#2774a4", "#47641b", "#b54216"]

def name():
  """
  Required, the name of the graph.
  """
  return "Git Coupling"

def description():
  return '''A graph showing the file coupling based on Git history.
    <p>Files are nodes, and the edges represent if files were changed in the
     same commit more than "Minimum Coupling"% of the time. The size of nodes is
     related to the number of commits involving the file. The color of the
     nodes/edges indicate what architecture the file belongs to.</p>

    <p><b>Options:</b></p>
    <ul>
      <li><b>Minimum Coupling %:</b> Filter out edges that represent a coupling
          less than this percentage</li>
    </ul>

    <p>See also
    the <a href="und://plugins/Solutions/git/.doc/manager_git.md?filter=Solution%3A%22Git%22"> Git Solution</a>,
    the <a href="https://blog.scitools.com/git-plugins-for-understand/">blog
    article</a> describing the Git plugins,
    the interactive report <a href="und://plugin/ireport/Git%20Coupling">Git Coupling</a>,
    and the metrics <a href="und://plugin/metric/GitAvgCoupling">Git Average Coupling</a>,
    <a href="und://plugin/metric/GitMaxCoupling">Git Max Coupling</a>,
    <a href="und://plugin/metric/GitCoupledFiles">Git Coupled Files</a>
    and <a href="und://plugin/metric/GitStrongCoupledFiles">Git Strongly Coupled Files</a>.
    Also related is the architecture metric
    <a href="und://plugin/metric/GitCohesion">Git Cohesion</a>
    .</p>

    <br>
    <img src=".doc/graph_coupling.png">
  '''

def tags():
  return [
    'Solution: Git',
    'Target: Architectures',
    'Layout: Graphviz SFDP'
  ]

def test_architecture(arch):
  return True;

def init(graph, arch):

  # Options

  # Force a cutoff. If there are too many edges, the UI will freeze trying to
  # draw them all.
  graph.options().define("Minimum Coupling %", ["50","60","70","75","80","90"], "50");
  graph.options().define("Arch Labels", ["Off", "On"], "On")

  # Create a Legend for coloring by architecture
  maxRows = len(colors)
  color = 0

  archList = [arch] + arch.children()
  recursive = False
  for a in archList:
    if a.ents(recursive):
      graph.legend().define(a.longname(), "circle", a.name(), colors[color%len(colors)], colors[color%len(colors)], color % maxRows, int(color / maxRows))
      color += 1
    recursive = True


def draw(graph, arch):
  """
  Draw the graph

  The second argument can be a database, an architecture or an entity depending
  on whether the graph was created at a project, architecture, or entity level.
  """
  graph.set("layout", "sfdp") # Override default layout algorithm (Usually dot)
  graph.set("overlap_scaling", "6")
  graph.set("overlap", "prism")

  graph.default("htmllabels", "on") # Understand attribute to interpret labels as html
  graph.default("shape","circle","node")
  graph.default("arrowhead", "none", "edge")

  # Determine the entities (and their colors) in the graph
  fileToArch = dict()
  archList = [arch] + arch.children()
  archNames = []
  recursive = False
  color = 0
  for a in archList:
    entList = a.ents(recursive)
    for e in entList:
      fileToArch[e] = color
    if entList:
      # The formatting for File Dependencies Graph is achieved by an html label,
      # which uses a semi-transparent background color. From a plugin, it's not
      # possible to determine light mode / dark mode changes so this assumes
      # light mode. Normally, transparent colors are expected to be RRGGBBAA
      # format because they're interpreted by the graph layout engine. However
      # colors inside html style arguments are interpreted only by QT which
      # uses AARRGGBB.
      archNames.append('<span style="font-weight:600; color:{}; background-color:{};">{}</span>'.format(colors[color%len(colors)], "#8FFFFFFF", a.name()))

      color += 1
    recursive = True

  # Find the commits for the relevant files
  fileToCommits = git_util.gitHashes(graph, graph.db())
  if hasattr(graph, "aborted") and graph.aborted():
    return

  # Track range of commits for node size scale
  minCommits = 0
  maxCommits = 0
  commitToFiles = dict()
  for file in fileToArch.keys():
    commitList = fileToCommits.get(file,[])
    if commitList:
      for commit in commitList:
        commitToFiles.setdefault(commit,set()).add(file)
      if minCommits == 0 or len(commitList) < minCommits:
        minCommits = len(commitList)
      if maxCommits == 0 or len(commitList) > maxCommits:
        maxCommits = len(commitList)

  # Node Creation
  fileToNode = dict()
  def fileNode(file):
    if file in fileToNode:
      return fileToNode[file]
    node = graph.node("",file) # No labels

    # Color By Architecture
    c = colors[fileToArch.get(file,0)%len(colors)]
    node.set("color",c)
    node.set("fillcolor",c)
    commitCount = len(fileToCommits.get(file,[]))

    # Size by number of commits
    s = str(0.025 + ((commitCount - minCommits) / maxCommits * (0.25 - 0.025)))
    node.set("width",s)
    node.set("height",s)
    fileToNode[file] = node
    return node

  cutoff = float(graph.options().lookup("Minimum Coupling %")) / 100
  edgecounts = dict()
  # Build Graph
  for file in fileToArch.keys():
    # Find weight of this file's coupling
    coupling = dict()
    for commit in fileToCommits.get(file,[]):
      for toFile in commitToFiles.get(commit):
        if toFile != file:
          coupling[toFile] = coupling.get(toFile,0) + 1

    # Create nodes and edges
    if len(coupling):
      c = colors[fileToArch.get(file,0)%len(colors)]
      s = len(fileToCommits.get(file,[]))
      tail = fileNode(file)
      for toFile, weight in coupling.items():
        if weight >= (cutoff * s): # Add edges with coupling greater than cutoff
          edge = graph.edge(tail,fileNode(toFile))
          edge.set("color", c + "2F") # Make edges semi-transparent
          edgecounts[file] = edgecounts.get(file, 0) + 1
          edgecounts[toFile] = edgecounts.get(toFile, 0) + 1

  # If arch labels, use the node with the most edges to label the architecture
  # since visually that will probably be the most dense area of that architecture's
  # color.
  if graph.options().lookup("Arch Labels") == "On":
    bestnode = dict()
    for file, archId in fileToArch.items():
      if archId not in bestnode or edgecounts.get(file, 0) > edgecounts.get(bestnode[archId], 0):
        bestnode[archId] = file
    for archId, file in bestnode.items():
      if file in fileToNode:
        fileToNode[file].set("xlabel", archNames[archId])

