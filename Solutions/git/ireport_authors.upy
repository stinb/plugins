import und_lib.git_util as git_util

def name():
  """
  Required, the name of the ireport.
  """
  return "Git Authors"

def description():
  return '''Identify and report on the commit authors for a given target.
    <p>This interactive report provides a summary pie chart and overview metrics
    in addition to a table detailing each author's contribution.</p>

    <p>Authors can be broken into three categories:</p>
    <ul>
      <li>Owner: the author(s) with the most commits</li>
      <li>Major Contributor: at least 5% of the commits</li>
      <li>Minor Contributor: less than 5% of the commits</li>
    </ul>

    <p>Files with strong ownership are preferred, and files with many minor
    contributors are more bug prone. <span style="color:#8f8f8f"> (Bird,
    Christian, et al. "Don't touch my code! Examining the effects of ownership
    on software quality."Â Proceedings of the 19th ACM SIGSOFT symposium and the
    13th European conference on Foundations of software engineering. 2011.)
    </span> </p>

    <p>See also the chart "Git Authors Pie Chart", the architectures "Git Owner"
    and "Git Author", and the metrics "Authors", "Ownership",
    "Major Contributors" and "Minor Contributors".</p>

    <br><img src=".doc/ireport_authors.png"/>
  '''

def tags():
  return [
    'Solution: Git',
    'Target: Files',
    'Target: Architectures',
    'Target: Project',
    'Technical Debt'
  ]

#
# Report object is not provided to test functions, so always return True and
# test for Git in generate
#
def test_global(db):
  """
  Optional method, return true for project level reports
  """
  return True

def test_entity(ent):
  """
  Optional method, return true if report is valid for the entity
  """
  return ent.kind().check("file ~unknown ~unresolved")

def test_architecture(arch):
  """
  Optional method, return true if report is valid for the architecture
  """
  return True

# Report generation
def generate(report, target):
  """
  Required, generate the report
  """
  if not git_util.hasGit(report):
    report.print("No Git Repository Found\n")
    return

  authors, sum = git_util.targetAuthorCounts(report, target)

  report.heading(2)
  report.print("{} Authors ({} Commits)".format(len(authors), sum))
  report.heading()

  if not sum or not len(authors):
    return

  report.draw(target, "Git Authors Pie Chart", title="Authors")

  max = 0
  major = 0
  cutoff = 0.05 * sum
  owners = 1
  for count in authors.values():
    if count > max:
      max = count
      owners = 1
    elif count == max:
      owners += 1
    if count > cutoff:
      major += 1

  minor = len(authors) - major

  report.print("Tip: files without clear ownership or with many minor ")
  report.print("contributors can be error prone. {}".format(target.name()))
  report.print(" has an ownership of {:.2f}% and {} minor contributors".format(max/sum*100, minor))

  report.table("""
    [{
      "name" : "Author",
      "filtertype": "string"
     },{
      "name" : "Role",
      "filtertype": ["Owner","Major Contributor", "Minor Contributor"]
     },{
      "name" : "Commits",
      "filtertype": "numeric",
      "sort": "descending"
     },{
      "name" : "Percentage",
      "filtertype": "numeric"
    }]""")

  for author, cnt in authors.items():
    if cnt == max:
      color = "#569f38"
      role = "Owner"
    elif cnt > cutoff:
      color = "#4e8cb9"
      role = "Major Contributor"
    else:
      color ="#e45721"
      role = "Minor Contributor"

    report.tablecell()
    report.print(author)

    report.tablecell()
    report.print(role)

    report.tablecell()
    report.print(str(cnt))

    report.tablecell()
    report.fontcolor(color)
    report.print("{:.2f}".format(cnt/sum*100))
    report.fontcolor()

  report.table()



