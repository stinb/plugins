import git_util

def name():
  """
  Required, the name of the ireport.
  """
  return "Git Authors"

def description():
  return '''Identify and report on the commit authors for a given target.
    <p>This plugin analyzes the Git history of your project and provides detailed
 information about the authors who contributed to the codebase. It breaks down
 contributions by commit count and percentage, highlighting major contributors
 and owners.</p>
'''

#
# Report object is not provided to test functions, so always return True and
# test for Git in generate
#
def test_global(db):
  """
  Optional method, return true for project level reports
  """
  return True

def test_entity(ent):
  """
  Optional method, return true if report is valid for the entity
  """
  return ent.kind().check("file ~unknown ~unresolved")

def test_architecture(arch):
  """
  Optional method, return true if report is valid for the architecture
  """
  return True

# Report generation
def generate(report, target):
  """
  Required, generate the report
  """
  if not git_util.hasGit(report):
    report.print("No Git Repository Found\n")
    return

  authors, sum = git_util.targetAuthorCounts(report, target)

  report.heading(2)
  report.print("{} Authors ({} Commits)".format(len(authors), sum))
  report.heading()

  if not sum or not len(authors):
    return

  report.draw(target, "Git Authors Pie Chart", title="Authors")

  max = 0
  major = 0
  cutoff = 0.05 * sum
  owners = 1
  for count in authors.values():
    if count > max:
      max = count
      owners = 1
    elif count == max:
      owners += 1
    if count > cutoff:
      major += 1

  minor = len(authors) - major

  report.print("Tip: files without clear ownership or with many minor ")
  report.print("contributors can be error prone. {}".format(target.name()))
  report.print(" has an ownership of {:.2f}% and {} minor contributors".format(max/sum*100, minor))

  report.table("""
    [{
      "name" : "Author",
      "filtertype": "string"
     },{
      "name" : "Role",
      "filtertype": ["Owner","Major Contributor", "Minor Contributor"]
     },{
      "name" : "Commits",
      "filtertype": "numeric",
      "sort": "descending"
     },{
      "name" : "Percentage",
      "filtertype": "numeric"
    }]""")

  for author, cnt in authors.items():
    if cnt == max:
      color = "#569f38"
      role = "Owner"
    elif cnt > cutoff:
      color = "#4e8cb9"
      role = "Major Contributor"
    else:
      color ="#e45721"
      role = "Minor Contributor"

    report.tablecell()
    report.print(author)

    report.tablecell()
    report.print(role)

    report.tablecell()
    report.print(str(cnt))

    report.tablecell()
    report.fontcolor(color)
    report.print("{:.2f}".format(cnt/sum*100))
    report.fontcolor()

  report.table()



