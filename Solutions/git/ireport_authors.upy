import git_util

def name():
  """
  Required, the name of the ireport.
  """
  return "Git Authors"

#
# Report object is not provided to test functions, so always return True and
# test for Git in generate
#
def test_global(db):
  """
  Optional method, return true for project level reports
  """
  return True

def test_entity(ent):
  """
  Optional method, return true if report is valid for the entity
  """
  return ent.kind().check("file ~unknown ~unresolved")

def test_architecture(arch):
  """
  Optional method, return true if report is valid for the architecture
  """
  return True

# Report generation
def generate(report, target):
  """
  Required, generate the report
  """
  if not git_util.hasGit(report):
    report.print("No Git Repository Found\n")
    return

  authors, sum = git_util.targetAuthorCounts(report, target)

  report.bold()
  report.print(target.name())
  report.nobold()
  report.print(": {} Commits, {} Authors\n\n".format(sum, len(authors)))

  max = 0
  major = 0
  cutoff = 0.05 * sum
  owners = 1
  for count in authors.values():
    if count > max:
      max = count
      owners = 1
    elif count == max:
      owners += 1
    if count > cutoff:
      major += 1

  minor = len(authors) - major
  major -= owners

  report.bold()
  if owners > 1:
    report.print("{} Owners\n".format(owners))
  else:
    report.print("Owner\n".format(owners))
  report.nobold()

  processed = 0
  for k,v in sorted(authors.items(), key=lambda item: item[1], reverse=True):
    report.print("{} - {} Commits ({:.2f}%)\n".format(k,v, v/sum*100))
    processed += 1
    if processed == owners and major > 0:
      report.bold()
      report.print("\n{} Major Contributor{}\n".format(major, "" if major == 1 else "s"))
      report.nobold()
    if processed == (owners + major) and minor > 0:
      report.bold()
      report.print("\n{} Minor Contributor{}\n".format(minor, "" if minor == 1 else "s"))
      report.nobold()
