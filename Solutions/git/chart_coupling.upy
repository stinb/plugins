# A Graph Chart Plugin for Git
# This depends on git_util.py

import und_lib.git_util as git_util
import understand

def name():
  return "Git Coupling Pie Chart"

def description():
  return '''Shows a pie chart of git coupling.'''

def test_entity(ent):
  return ent.kind().check("file ~unknown ~unresolved")

def init(graph, target):
  graph.options().define("Legend", ["None", "top", "left", "right", "bottom"], "right")


def draw(graph, target):
  fileToCommits = git_util.gitHashes(graph, graph.db())

  if not target in fileToCommits:
    return

  graph.set("layout", "sunburst") # Override default layout algorithm (Usually dot)

  legendCluster = None
  legend = graph.options().lookup("Legend")
  if legend != "None":
    legendCluster = graph.cluster()
    legendCluster.set("legend", legend)

  commits = set(fileToCommits.get(target))
  total = len(commits)

  cutoffs = [ total * 0.5, total * 0.4, total * 0.3, total * 0.2, total *0.1 ]
  counts = [0, 0, 0, 0, 0]

  for file, commitList in fileToCommits.items():
    if file == target:
      continue
    c = len(commits.intersection(set(commitList)))
    if c > 5:
      for i in range(len(cutoffs)):
        if c >= cutoffs[i]:
          counts[i] += 1
          break

  labels = [">= 50 %", "[40,50) %", "[30,40) %", "[20,30) %", "[10,20) %"]
  colors = ["#e45721", "#fcad56", "#4e8cb9", "#afd870", "#569f38"]
  for cnt, lbl, color in zip(counts, labels, colors):
    n = graph.node()
    n.set("area", str(cnt))

    n.set("color", color)
    n.set("fillcolor", color)

    n.set("tooltip", "{} - {} File(s)".format(lbl, cnt))

    if legendCluster:
      ln = legendCluster.node("{} - {} File(s)".format(lbl, cnt))
      ln.set("color", color)
      ln.set("fillcolor", color)
