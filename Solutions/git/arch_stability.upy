# Categorize files as active (modified at least twice in the last 30 days)
# recurrently active (active for multiple 30 day periods) or stable.
# Make sure to also install git_util.py

import datetime
import und_lib.git_util as git_util

def name():
  return "Git Stability"

def description():
  return '''Categorize files as active, recurrently active or stable based on Git history.

  <p>This plugin categorizes files based on their Git commit history. Files are
  classified as:</p>

  <ul>
  <li><b>Active:</b> Modified at least twice in the last 30 days.</li>
  <li><b>Recurrently Active:</b> Active for multiple 30 day periods.</li>
  <li><b>Stable:</b> Not meeting the criteria for active or recurrently active.</li>
  </ul>

  <p>Recurrently active files can be a sign that a file is poorly designed
  or has many bugs <span style="color:#8f8f8f"> (Schulte, Lukas, Hitesh Sajnani,
  and Jacek Czerwonka. "Active files as a measure of software maintainability."
  Companion Proceedings of the 36th International Conference on Software
  Engineering. 2014.)</span></p>

  <p>Example: a treemap of the "Recurrently Active" files from this architecture
  for the CMake project.
  </p><br>
  <img src=".doc/arch_stability.png">

  <p>Compare to the "Git Date" architecture to group directly by the
  last modified date. </p>

  '''

def tags():
  return [
    'Solution: Git',
    'Technical Debt'
  ]

def define_options(arch):
  # Builds 1194 and later allow defining architecture options
  arch.options().radio_vert("date", "Date Relative to:", ["Today", "Most Recent Commit"], "Today")


def build(arch, db):
  isoDates = git_util.gitIsoDates(arch,db)

  today = None
  if arch.options().lookup("date") == "Most Recent Commit":
    recent = None
    for dateList in isoDates.values():
      if dateList and (not recent or dateList[0] > recent):
        recent = dateList[0]
    if recent:
      today = datetime.datetime.fromisoformat(recent).date()
  if not today:
    today = datetime.date.today()
  past30 = today - datetime.timedelta(30)
  past60 = today - datetime.timedelta(60)


  for file, dateList in isoDates.items():
    if dateList:
      active = 0
      recActive = 0
      for dtStr in dateList:
        dt = datetime.datetime.fromisoformat(dtStr).date()
        if dt > past30:
          active += 1
        elif dt > past60:
          recActive += 1
        else:
          break;

      label = ["Stable"]
      if active >= 2:
        if recActive >= 2:
          label = ["Recurrently Active"]
        else:
          label = ["Active"]
      path = file.relname()
      path.replace("\\","/")
      label.extend(path.split("/"))
      arch.map(file, "/".join(label[:-1]))

