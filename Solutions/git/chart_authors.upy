# A Graph Chart Plugin for Git
# This depends on git_util.py

import und_lib.git_util as git_util
import understand

owner_colors = [ "#569f38", "#a1d870" ]
major_colors = [ "#4e8cb9", "#90c4e4" ]
minor_colors = [ "#e45721", "#fcad56" ]

def name():
  return "Git Authors Pie Chart"

def description():
  return '''A pie chart of Git authors

    <p>Authors can be broken into three categories:</p>
    <ul>
      <li>Owner: the author(s) with the most commits</li>
      <li>Major Contributor: at least 5% of the commits</li>
      <li>Minor Contributor: less than 5% of the commits</li>
    </ul>

    <p>Files with strong ownership are preferred, and files with many minor
    contributors are more bug prone. <span style="color:#8f8f8f"> (Bird,
    Christian, et al. "Don't touch my code! Examining the effects of ownership
    on software quality."Â Proceedings of the 19th ACM SIGSOFT symposium and the
    13th European conference on Foundations of software engineering. 2011.)
    </span> </p>

    <p>This pie chart displays the percentage of commits by each author. If
    there are a lot of authors, all minor contributors are grouped into a
    single slice. Slices are colored green for owners, blue for major
    contributors, and orange for minor contributors.</p>

    <p>See also
    the <a href="und://plugins/Solutions/git/.doc/manager_git.md?filter=Solution%3A%22Git%22"> Git Solution</a>,
    the <a href="https://blog.scitools.com/git-plugins-for-understand/">blog
    article</a> describing the Git plugins,
    the interactive report <a href="und://plugin/ireport/Git%20Authors">Git Authors</a>,
    the architecture <a href="und://plugin/arch/Git%20Owner">Git Owner</a>,
    and the metrics <a href="und://plugin/metric/GitMajorContributors">Major Contributors</a>,
    <a href="und://plugin/metric/GitMinorContributors">Minor Contributors</a>,
    <a href="und://plugin/metric/GitOwnership">Ownership</a>
    and <a href="und://plugin/metric/GitAuthors">Authors</a>
    .</p>

    <br><img src=".doc/chart_authors.svg"/>
    '''

def tags():
  return [
    'Solution: Git',
    'Target: Files',
    'Target: Architectures',
    'Target: Project',
    'Layout: Pie'
  ]

def test_architecture(arch):
  return True;

def test_entity(ent):
  return ent.kind().check("file ~unknown ~unresolved")

def test_global(db):
  return True

def init(graph, arch):
  graph.options().define("Legend", ["None", "top", "left", "right", "bottom"], "right")


def draw(graph, target):
  graph.set("layout", "sunburst") # Override default layout algorithm (Usually dot)

  legendCluster = None
  legend = graph.options().lookup("Legend")
  if legend != "None":
    legendCluster = graph.cluster()
    legendCluster.set("legend", legend)

  authors, sum = git_util.targetAuthorCounts(graph, target)
  cutoff = 0.05 * sum
  first = None
  processed = 0
  processedCommits = 0
  isMinor = False
  for author, cnt in sorted(authors.items(), key=lambda item: item[1], reverse=True):
    if not isMinor and cnt <= cutoff:
      # first minor contributor
      if len(authors) > 7 and processed > 1:
        break # group all minor contributors as a single entry
      isMinor = True # Show each minor contributor

    if first is None or cnt == first:
      color = owner_colors[processed%2]
      first = cnt
    else:
      color = minor_colors[processed%2] if isMinor else major_colors[processed%2]

    processed += 1
    processedCommits += cnt

    add(graph, legendCluster, cnt, "{} ({} commits)".format(author,cnt), color)

  minor = sum - processedCommits
  if minor > 0:
    label = "Minor Contributors ({} contributors, {} commits)".format(len(authors) - processed,minor)
    add(graph, legendCluster, minor, label, minor_colors[processed%2])


def add(graph, legendCluster, cnt, label, color):
  n = graph.node()
  n.set("area", str(cnt))

  n.set("color", color)
  n.set("fillcolor", color)

  n.set("tooltip", label)

  if legendCluster:
    ln = legendCluster.node(label)
    ln.set("color", color)
    ln.set("fillcolor", color)

