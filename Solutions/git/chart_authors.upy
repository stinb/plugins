def description():
  return '''Shows a pie chart of git authors and their commit contributions for a specific file, directory, or the entire project.
    <p>This plugin uses the git log command to collect information about authors and commit counts. 
    It displays a pie chart where each slice represents an author and their contribution to the selected code.
    Authors are categorized into three groups: owners, major contributors, and minor contributors. 
    Owners are the top contributors and have their slices colored distinctively. Major contributors have their slices colored differently from owners. 
    Minor contributors, who fall below a certain contribution threshold, are grouped and displayed as a single slice. 
    Hovering over each slice reveals the author's name and their commit count.</p>
    <p>This plugin requires git to be installed and accessible from the command line.</p>'''

# A Graph Chart Plugin for Git
# This depends on git_util.py

import git_util
import understand

owner_colors = [ "#569f38", "#a1d870" ]
major_colors = [ "#4e8cb9", "#90c4e4" ]
minor_colors = [ "#e45721", "#fcad56" ]

def name():
  return "Git Authors Pie Chart"

def test_architecture(arch):
  return True;

def test_entity(ent):
  return ent.kind().check("file ~unknown ~unresolved")

def test_global(db):
  return True

def init(graph, arch):
  graph.options().define("Legend", ["None", "top", "left", "right", "bottom"], "right")


def draw(graph, target):
  graph.set("layout", "sunburst") # Override default layout algorithm (Usually dot)

  legendCluster = None
  legend = graph.options().lookup("Legend")
  if legend != "None":
    legendCluster = graph.cluster()
    legendCluster.set("legend", legend)

  authors, sum = git_util.targetAuthorCounts(graph, target)
  cutoff = 0.05 * sum
  first = None
  processed = 0
  processedCommits = 0
  isMinor = False
  for author, cnt in sorted(authors.items(), key=lambda item: item[1], reverse=True):
    if not isMinor and cnt <= cutoff:
      # first minor contributor
      if len(authors) > 7 and processed > 1:
        break # group all minor contributors as a single entry
      isMinor = True # Show each minor contributor

    if first is None or cnt == first:
      color = owner_colors[processed%2]
      first = cnt
    else:
      color = minor_colors[processed%2] if isMinor else major_colors[processed%2]

    processed += 1
    processedCommits += cnt

    add(graph, legendCluster, cnt, "{} ({} commits)".format(author,cnt), color)

  minor = sum - processedCommits
  if minor > 0:
    label = "Minor Contributors ({} contributors, {} commits)".format(len(authors) - processed,minor)
    add(graph, legendCluster, minor, label, minor_colors[processed%2])


def add(graph, legendCluster, cnt, label, color):
  n = graph.node()
  n.set("area", str(cnt))

  n.set("color", color)
  n.set("fillcolor", color)

  n.set("tooltip", label)

  if legendCluster:
    ln = legendCluster.node(label)
    ln.set("color", color)
    ln.set("fillcolor", color)

