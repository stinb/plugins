# A Metrics Plugin for Git Coupling
# This depends on git_util.py

import und_lib.git_util as git_util

about_coupling="""
  <p> A file is coupled to another file through Git if they are
  both modified in the same commit. The coupling is measured by the number of
  commits the two files co-occur in divided by the number of commits for the
  target file. Files that frequently change together, especially without
  dependencies, can indicate design flaws.</p>

  <p>To reduce the noise in the metrics, two thresholds are imposed. A pair
  of files is coupled only if the number of shared commits is greater than 5 and
  is greater than 10% of the total commits of the target file. </p>

  <p>This metric is part of a set of related metrics to measure coupling:</p>
  <ul>
  <li>Git Max Coupling (GitMaxCoupling)</li>
  <li>Git Average Coupling (GitAvgCoupling)</li>
  <li>Git Coupled Files (GitCoupledFiles) </li>
  <li>Git Strongly Coupled Files (GitStrongCoupledFiles) </li>
  </ul>


  <p>See also the interactive report "Git Coupling", and the chart "Git Coupling
  Pie Chart". Also related is the architecture metric "Git Cohesion". </p>
"""

gitMets = {
  "GitMaxCoupling" : ["Git Max Coupling", "<p>The maximum coupling percentage.</p>\n" + about_coupling],
  "GitAvgCoupling" : ["Git Average Coupling", "<p>The average coupling percentage.</p>\n" + about_coupling],
  "GitCoupledFiles" : ["Git Coupled Files", "<p>The number of coupled files</p>\n" + about_coupling],
  "GitStrongCoupledFiles" : ["Git Strongly Coupled Files", "<p>The number of coupled files with a coupling percentage greater than 50%.</p>\n" + about_coupling],
}

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return list(gitMets.keys())

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return gitMets.get(id,["",""])[0]

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return gitMets.get(id,["",""])[1]

def tags(id):
  return [
    'Solution: Git',
    'Target: Files'
  ]


def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return id in ["GitCoupledFiles", "GitStrongCoupledFiles"]

def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check("file ~unknown ~unresolved") and git_util.hasGit(metric)

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  return git_util.kindstringHasGit(metric, entkindstr)

def value(metric, ent):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  fileToCommits = git_util.gitHashes(metric, metric.db())
  if ent not in fileToCommits:
    return None

  commits = set(fileToCommits.get(ent))
  sum = len(commits)
  if sum == 0:
    return 0

  coupling_cutoff = 0.1 * sum
  cutoff = 0.5 * sum
  max = 0
  files = 0
  avg = 0
  strong = 0
  for file, commitList in fileToCommits.items():
    if file == ent:
      continue
    c = len(commits.intersection(set(commitList)))
    if c > 5 and c > coupling_cutoff:
      files += 1
      avg += c
      if c > max:
        max = c
      if c >= cutoff:
        strong += 1

  if metric.id() == "GitCoupledFiles":
    return files
  if metric.id() == "GitStrongCoupledFiles":
    return strong
  if metric.id() == "GitMaxCoupling":
    return max/sum * 100
  return 0 if files == 0 else avg * 100 / files / sum
