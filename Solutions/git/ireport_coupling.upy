# A report for git coupling
# This depends on git_util.py

import und_lib.git_util as git_util

def name():
  """
  Required, the name of the ireport.
  """
  return "Git Coupling"

def description():
  return '''Report Coupling between files based on shared commits.
    <p>This report shows the coupling between files within a Git repository,
    based on the number of shared commits. It helps identify files that are
    frequently changed together, potentially indicating a high degree of
    interdependence. </p> '''


#
# Report object is not provided to test functions, so always return True and
# test for Git in generate
#

def test_entity(ent):
  """
  Optional method, return true if report is valid for the entity
  """
  return ent.kind().check("file ~unknown ~unresolved")


# Report generation
def generate(report, target):
  """
  Required, generate the report
  """
  if not git_util.hasGit(report):
    report.print("No Git Repository Found\n")
    return

  fileToCommits = git_util.gitHashes(report, report.db())

  if not target in fileToCommits:
    report.print("No Commits for file {}\n".format(target.longname()))
    return

  commits = set(fileToCommits.get(target))
  total = len(commits)

  colors = ["#e45721", "#fcad56", "#4e8cb9", "#afd870", "#569f38"]
  cutoffs = [ total * 0.5, total * 0.4, total * 0.3, total * 0.2, total *0.1 ]

  coupling = dict()
  for file, commitList in fileToCommits.items():
    if file == target:
      continue
    c = len(commits.intersection(set(commitList)))
    if c > cutoffs[-1] and c > 5:
      coupling[file] = c

  report.heading(2)
  report.print("{} Coupled Files ({} Commits)\n\n".format(len(coupling), total))
  report.heading()


  if not coupling:
    return

  report.draw(target, "Git Coupling Pie Chart",title="Coupling")

  report.print(("Tip: Files that change together without obvious dependencies "
                "can indicate design problems."))

  report.table("""
    [{
      "name" : "File",
      "filtertype": "string"
     },{
      "name" : "Commits",
      "filtertype": "numeric",
      "sort": "descending"
     },{
      "name" : "Percentage",
      "filtertype": "numeric"
     },{
      "name" : "To Dependency References",
      "filtertype": "numeric"
     },{
      "name" : "From Dependency References",
      "filtertype": "numeric"
    }]""")

  to_deps = target.depends()
  from_deps = target.dependsby()

  for file,cnt in sorted(coupling.items(), key=lambda item: item[1], reverse=True):

    report.tablecell()
    report.entity(file)
    report.print(file.relname())
    report.entity()

    report.tablecell()
    report.print(str(cnt))

    report.tablecell()
    cidx = 0
    while cnt < cutoffs[cidx]:
      cidx += 1
    report.fontcolor(colors[cidx])
    report.print("{:.2f}%".format(cnt / total * 100))
    report.fontcolor()

    report.tablecell()
    report.print(str(len(to_deps.get(file, []))))

    report.tablecell()
    report.print(str(len(from_deps.get(file, []))))
