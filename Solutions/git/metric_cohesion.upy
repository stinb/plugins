# A Metrics Plugin for Git Cohesion

import und_lib.git_util as git_util

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return ["GitCohesion"]

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return "Git Cohesion"

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return """<p>The percentage of commits that are cohesive.</p>

  <p>A cohesive commit is a commit whose changed files are all in the same
  architecture. A non-cohesive commit changes files across architectures.
  The value for a root architecture considers each sub-architecture as a
  separate group. The value for a non-root architecture forms a group with all
  descendants and everything else is a different group. So, for this sample
  architecture: </p>

  <ul><li>Root
    <ul><li>A
      <ul>
        <li><i>A1</i></li>
        <li><i>A2</i></li>
        <li>AA
          <ul>
            <li><i>AA1</i></li>
            <li><i>AA2</i></li>
          </ul>
        </li>
      </ul></li>
      <li>B
      <ul>
        <li><i>B1</i></li>
        <li><i>B2</i></li>
      </ul></li>
    </li></ul>
  </li></ul>

  <p>When calculating cohesion for "Root":</p>
  <ol>
    <li>A commit touching <i>A1</i> and <i>A2</i> is cohesive because it
        only changes the sub-architecture "A".
    <li>A commit touching <i>A1</i> and <i>B1</i> is not cohesive because
        it changes the sub-architectures "A" and "B".</li>
    <li>A commit touching <i>A1</i> and <i>AA2</i> is not cohesive because
        it changes the sub-architectures "A" and "AA".</li>
  </ol>

  <p>When calculating cohesion for "A":</p>
  <ol>
    <li>A commit touching <i>A1</i> and <i>A2</i> is cohesive because it
        only changes files within "A".
    <li>A commit touching <i>A1</i> and <i>B1</i> is not cohesive because
        it changes a file outside of "A" (in "B").</li>
    <li>A commit touching <i>A1</i> and <i>AA2</i> is cohesive because it
        only changes files within "A".
  </ol>

  <p>Note the difference in the 3rd bullet point for the two scenarios. For
  a root architecture, each nested architecture is considered as it's
  own architecture. For a non-root architecture, nested architectures within
  the target are considered as part of the target.</p>

  <p>See also
  the <a href="und://plugins/Solutions/git/.doc/manager_git.md?filter=Solution%3A%22Git%22"> Git Solution</a>,
  the <a href="https://blog.scitools.com/git-plugins-for-understand/">blog
  article</a> describing the Git plugins,
  and the related coupling plugins which work on files:
  the interactive report <a href="und://plugin/ireport/Git%20Coupling">Git Coupling</a>,
  and the metrics <a href="und://plugin/metric/GitAvgCoupling">Git Average Coupling</a>,
  <a href="und://plugin/metric/GitMaxCoupling">Git Max Coupling</a>,
  <a href="und://plugin/metric/GitCoupledFiles">Git Coupled Files</a>
  and <a href="und://plugin/metric/GitStrongCoupledFiles">Git Strongly Coupled Files</a>
  .</p>
  """

def tags(id):
  return [
    'Solution: Git',
    'Target: Architectures',
    'Language: Any',
  ]

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return git_util.archHasGit(metric,arch)

def value(metric, arch):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  fileToArch = dict()

  if arch.parent() is None:
    # For root architecture, map files to direct parent
    archlist = [arch]
    while archlist:
      cur = archlist.pop(0)
      for ent in cur.ents(False):
        fileToArch[ent] = cur
      archlist.extend(cur.children())
  else:
    # For non-child, all ents recursively count towards parent
    for ent in arch.ents(True):
      fileToArch[ent] = arch

  commitToArchs = dict()
  fileToHashList = git_util.gitHashes(metric, metric.db())
  for file, commitList in fileToHashList.items():
    fileArch = fileToArch.get(file)
    for commit in commitList:
      commitToArchs.setdefault(commit,set()).add(fileArch)

  total = 0
  cohesive = 0
  if arch.parent() is None:
    total = len(commitToArchs)
    for archset in commitToArchs.values():
      if len(archset) == 1:
        cohesive += 1
  else:
    for archset in commitToArchs.values():
      if arch in archset:
        total += 1
        if len(archset) == 1:
          cohesive += 1

  return 0 if total < 1 else cohesive / total * 100
