import duplicates
import understand

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return ["DuplicateLinesOfCode"]

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return "Number of duplicated lines of code"

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return "The number of unique lines that are duplicated. If the ireport or codecheck is run, those numbers are reported. Otherwise, the metric script calculates duplicates using a 5 line window ignoring comments and whitespace."

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return True

def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return hasattr(metric, "cache") and ent.kind().check("file ~unknown ~unresolved")

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return hasattr(metric, "cache")

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  return hasattr(metric, "cache")

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity("file ~unknown ~unresolved"))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  return True

def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """

  cache = metric.cache("Duplicates")
  if cache.is_empty():
    # Calculate Duplicate Lines if another plugin has not
    matches = duplicates.Matches(5)
    for file in metric.db().ents("file ~unknown ~unresolved"):
      matches.processFile(file, duplicates.fileLines(file)[0])
    duplicates.addToPluginCache(matches.duplicateLines(), metric)

  # Return count from cache
  if isinstance(target, understand.Db):
    return cache.value(value=0)
  elif isinstance(target, understand.Arch):
    total = 0
    for ent in target.ents(True):
      if ent.kind().check("file ~unresolved ~unknown"):
        total += cache.value(file=ent,value=0)
    return total
  else:
    return cache.value(file=target, value=0)
