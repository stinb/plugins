import und_lib.duplicates as duplicates
import understand

def name():
  """
  Required, the name of the ireport.
  """
  return "Duplicate Lines of Code"

def description():
  return '''Finds duplicate lines of code within a project.
    <p>This plugin searches for duplicate lines of code within a project,
    helping to identify potential areas for code refactoring and simplification.
    It allows you to specify the minimum number of lines to match and
    provides options to ignore whitespace and comments during the analysis.</p>

    <p>See also the metric <a href="und://plugin/metric/DuplicateLinesOfCode">
    Number of duplicated lines of code</a> and the check "Duplicate Lines of
    Code". There is also a
    <a href="https://blog.scitools.com/duplicate-lines-of-code/">blog
    article &#8599;</a> describing how duplicate lines are calculated. Duplicate
    lines of code are part of the Project Quality
    <a href="und://plugins/Solutions/.doc/manager_project_quality.md?filter=Solution%3A%22Project%20Quality%22">
    solution</a>.</p>

    <br><img src=".doc/duplicate_lines.png">
    '''

def tags():
  return [
    'Target: Architectures',
    'Target: Project',
    'Language: Any',
    'Solution: Project Quality',
    'Duplicate Code',
    'Blog Article',
  ]

def test_global(db):
  """
  Optional method, return true for project level reports
  """
  return True

def test_architecture(arch):
  """
  Optional method, return true if report is valid for the architecture
  """
  return True

def init(report):
  """
  Optional method, define options that can be changed by the user
  """
  duplicates.defineOptions(report)

# Report generation
def generate(report, target):
  """
  Required, generate the report
  """
  fileents = []
  if isinstance(target, understand.Db):
    fileents = target.ents("file ~unknown ~unresolved")
  elif isinstance(target, understand.Arch):
    for ent in target.ents(True):
      if ent.kind().check("file ~unresolved ~unknown"):
        fileents.append(ent)

  if not fileents:
    report.print("No files\n")
    return

  # Load Options
  ignores = duplicates.ignoresOption(report)
  matches = duplicates.Matches(duplicates.lineOption(report))

  # Scan files
  percent = 0
  filePercent = 90.0 / len(fileents)
  for file in fileents:
    matches.processFile(file, duplicates.fileLines(file, ignores)[0])
    percent += filePercent
    report.progress(int(percent), "Scanning Files")

  report.progress(90, "Finding Matches")
  matchlist = matches.findMatches()

  dupl = matches.duplicateLines()
  total = 0
  for lineset in dupl.values():
    total += len(lineset)

  report.progress(100)

  report.print("Found {} duplicated regions, {} duplicated lines".format(len(matchlist), total))

  lineNumbers = dict()
  for m in sorted(matchlist, key = lambda m: (m.length, m.weight()), reverse=True):
    report.tree(1,True)
    report.print("Found {} duplicated lines in {} locations".format(m.length, m.weight()))
    for loc in m.locations:
      if loc.file not in lineNumbers:
        lineNumbers[loc.file] = duplicates.fileLines(loc.file, ignores)[1]
      report.tree(2)
      report.syncfile(loc.file.longname(), lineNumbers[loc.file][loc.line])
      report.print("{} ({} - {})".format(loc.file.relname(), lineNumbers[loc.file][loc.line], lineNumbers[loc.file][loc.line + m.length - 1]))
      report.syncfile()
  report.tree()

