# Duplicate lines of code CodeCheck
import und_lib.duplicates as duplicates
import understand

def id():
    return 'CC_PLUG_DUPLICATES'

def name():
    return 'Duplicate Lines of Code'

def detailed_description():
    return """
    <p><b>Rationale</b></p>
    <p>Duplicate code can not only increase the size of the project, but it also
    makes it more difficult to fix or update as all instances of the code would
    need to be updated, which can be time-consuming and error-prone.</p>
    """

def tags():
  return [ "Severity: 0", "plugin" ]

def test_global():
    return True

def define_options(check):
    duplicates.defineOptions(check)

def check(check):
    # Load Options
    ignores = duplicates.ignoresOption(check)

    # Find matches
    matches = duplicates.Matches(duplicates.lineOption(check))
    for file in check.files():
      matches.processFile(file, duplicates.fileLines(file, ignores)[0])

    lineNumbers = dict()
    for match in matches.findMatches():
      # Sort by file long name and location to keep results more stable
      locs = sorted(match.locations, key = lambda l: (l.file.longname(), l.line))

      # Convert line numbers back to file line numbers
      for loc in locs:
        if loc.file not in lineNumbers:
          lineNumbers[loc.file] = duplicates.fileLines(loc.file, ignores)[1]

      # Create violations
      weight = len(locs)
      for i in range(weight):
        loc = locs[i]
        prev = locs[i-1]
        check.violation(loc.file, loc.file, lineNumbers[loc.file][loc.line], 0,
                        "%1 duplicated lines in %2 of %3 locations. Next location %4 (%5)",
                        match.length, i+1, weight, prev.file.longname(), lineNumbers[prev.file][prev.line])

