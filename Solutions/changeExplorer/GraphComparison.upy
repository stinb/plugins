# =====================================================
import understand
# =====================================================
import sys
import re
import argparse
import os
import collections
import time
import threading
import os, time
import traceback
# =====================================================
sys.path.insert(0, '___D___')
import comparison
# =====================================================
def name():
  return "Comparison Call Graph"

def description():
  return '''Visualize changes in the call or call-by graph between project versions
    <p>This plugin visualizes changes in the call or call-by graph of an entity
    between two versions of a project. It highlights added, removed, and
    modified relationships, providing a clear picture of how the entity's
    interactions have evolved.</p>

    <p>The plugin offers several customization options:</p>
    <ul>
    <li><b>Depth:</b> Control how many levels of relationships to display.</li>
    <li><b>Mode:</b> Choose between "Call" (outgoing calls) and "CallBy" (incoming calls).</li>
    <li><b>Display Change Only:</b> Show only changed relationships or the full graph.</li>
    <li><b>Orientation:</b> Arrange the graph vertically or horizontally.</li>
    </ul>

    <p>This visualization helps you understand the impact of changes on an
    entity's dependencies and interactions within the codebase. By highlighting
    modifications, it aids in identifying potential issues and facilitates a
    focused review process during development.</p>

    <p>View the <a href=
    "https://github.com/stinb/plugins/tree/main/Solutions/changeExplorer">
    Readme file</a> for setup information</p>

  '''

def tags():
  return [
    'Solution: Change Explorer',
    'Target: Functions'
  ]

def test_global(db):
  return False

def test_entity(ent):
  return True

def test_architecture(arch):
  return False

def init(graph):
  graph.options().define("Depth",["1","2","3","4","5","6","7"],"2")
  graph.options().define("Mode",["Call","CallBy"],"Call")
  graph.options().define("Display Change Only",["on","off"],"off")
  graph.options().define("Orientation", ["Vertical","Horizontal"], "Horizontal")

def graphDataSet(graph,dataset,cacheDraw,changeOnly,ForceDisplay,isForward):
  ####################################################################
  if not dataset:
    return
  ####################################################################
  if changeOnly and not dataset["hasChangedInTree"] and dataset["isSameContent"]:
    if not ForceDisplay:
      return
  ####################################################################
  key="KEY"
  if dataset["AFTER_Entity"]:
    key=key+str(dataset["AFTER_Entity"].id())+","
  if dataset["BEFORE_Entity"]:
    key=key+str(dataset["BEFORE_Entity"].id())
  ####################################################################
  if key in cacheDraw:
    return cacheDraw[key]
  ####################################################################
  mainNode = None
  isUnknown = False
  #cluster = graph.cluster()
  if dataset["AFTER_Entity"]:
    mainNode = graph.node(dataset["AFTER_Entity"].longname())
    if dataset["AFTER_Entity"].kind().check("Unresolved,Unknown"):
      isUnknown = True
    mainNode.sync(dataset["AFTER_Entity"])
    if dataset["BEFORE_Entity"]:
      mainNode.sync(dataset["AFTER_Entity"],dataset["BEFORE_Entity"])
      #oldNode = cluster.node("...")
      #oldNode.set("shape","plaintext")
      #oldNode.set("color","grey")
      #oldNode.set("fontcolor","grey")
      #oldNode.sync(dataset["BEFORE_Entity"])
  else:
    if dataset["BEFORE_Entity"]:
       mainNode = graph.node(dataset["BEFORE_Entity"].longname())
       mainNode.set("shape","rectangle")
       mainNode.sync(dataset["BEFORE_Entity"])
       if dataset["BEFORE_Entity"].kind().check("Unresolved,Unknown"):
        isUnknown = True
  ####################################################################
  cacheDraw[key] = mainNode
  ####################################################################
  if mainNode:
    if isUnknown:
      mainNode.set("shape","plaintext")
    else:
      mainNode.set("shape","rectangle")
    if dataset["isAdded"]:
      mainNode.set("color","green")
      mainNode.set("fontcolor","green")
    if dataset["isRemoved"]:
      mainNode.set("color","red")
      mainNode.set("fontcolor","red")
    if not dataset["isSameContent"]:
      mainNode.set("penwidth","4")
    if dataset["hasChangedInTree"]:
      mainNode.set("shape","note")
    if not dataset["isComputed"]:
      mainNode.set("color","grey")
      mainNode.set("fontcolor","grey")
      mainNode.set("shape","cds")
    for link in dataset["ListOfLinks"]:
      nextNode = None
      if link["targetdata_AFTER"]:
        nextNode = graphDataSet(graph,link["targetdata_AFTER"],cacheDraw,changeOnly,(link["isAdded"] or link["isRemoved"] or link["isChanged"]),isForward)
      else:
        nextNode = graphDataSet(graph,link["targetdata_BEFORE"],cacheDraw,changeOnly,(link["isAdded"] or link["isRemoved"] or link["isChanged"]),isForward)
      if nextNode:
        if isForward:
          edge = graph.edge(mainNode, nextNode)
        else:
          edge = graph.edge(nextNode, mainNode)
        if link["isAdded"]:
          edge.set("color","green")
          edge.set("label",link["Reference Kind"])
        if link["isRemoved"]:
          edge.set("color","red")
          edge.set("label",link["Reference Kind"])
        if link["isChanged"]:
          edge.set("color","orange")
          edge.set("label",link["Reference Kind"]+" ("+str(len(link["ListOfBEFORE_Refs"]))+" to "+str(len(link["ListOfAFTER_Refs"]))+")")
  ####################################################################
  return mainNode

def draw(graph, target):
  try:
    # =====================================================
    if (graph.options().lookup("Orientation") == "Horizontal"):
      graph.set("rankdir","LR")
    else:
      graph.set("rankdir","TB")
    # =====================================================
    comparisonLoader = comparison.Loader(graph.db())
    if (graph.options().lookup("Mode") == "CallBy"):
        comparisonLoader.setSearchOptions("CallBy","")
    # =====================================================
    levelMAX = int(graph.options().lookup("Depth"))
    comparisonLoader.computeData(target,levelMAX+1)
    # =====================================================
    changeOnly = graph.options().lookup("Display Change Only") == "on"
    cacheDraw = {}
    graphDataSet(graph,comparisonLoader.dataset,cacheDraw,changeOnly,False,(graph.options().lookup("Mode") == "Call"))
    # =====================================================

  # Handling Exception
  except understand.UnderstandError as err:
    node = graph.node(traceback.format_exc())
    node.set("shape","rectangle")
    print(traceback.format_exc())
    print(f"Understand Error {err=}")
  except BaseException as err:
    node = graph.node(traceback.format_exc())
    node.set("shape","rectangle")
    print(traceback.format_exc())
    print(f"Unexpected Error {err=}")



		################# PROBLEM: There is a loop on ... graph, should not happen
		################# Critical are the one that also have more than one out !!!! We need to fix this... or do we not? yes we do
