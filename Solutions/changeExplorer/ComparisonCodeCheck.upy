# =====================================================
import understand
# =====================================================
import sys
import re
import argparse
import os
import collections
import time
import threading
import os, time
import traceback
import itertools
# ===============================================================================
sys.path.insert(0, '___D___')
import architectureparser
import pather
# ===============================================================================
def name():
	return 'Critical Path Comparison'
def id():
	return 'CRITICAL_PATH_CMP'
def tags():
  return [ "Severity: 0", "plugin" ]
def test_global():
	return True
def test_entity(file):
	return False
def test_language(language):
	return language == "C++"       
# ===============================================================================	
def description():
  return '''Compare critical paths between project versions
    <p>This plugin compares critical paths between two versions of a project, identifying changes in those paths that require review. It analyzes architectural models marked with "[CRITICAL]" to understand how key processes or workflows have evolved between versions.</p>
    <p>The plugin identifies entities involved in changed or altered paths and reports them as violations. Each violation includes information about the number of affected paths and architectures, helping you prioritize review efforts. For paths with fewer changes (below a configurable threshold), the plugin provides detailed information about the start and end points of the affected paths. This detailed view aids in understanding the specific modifications within each critical path.</p>
    <p>By highlighting deviations in critical paths, this plugin helps ensure that significant changes are not overlooked during development. It facilitates a focused review process, enabling efficient assessment and mitigation of potential issues arising from modifications to essential workflows.</p>
 		<p>View the <a href="https://github.com/stinb/plugins/tree/main/Solutions/changeExplorer">Readme file</a> for setup information</p>
	'''
def detailed_description():
	return """
	"""
# ===============================================================================
def define_options(check):
	check.options().integer("threshold", "Show Path Details under threshold", 10)
	#check.option().choice("choice", "Aggregate by", ["1 by 1","independent","by start","by end","by start and end","off"], "off");
	return
# ===============================================================================
def flush_violation(check,data):
	# =================================================
	ent = data["ent"]
	if not ent:
		return
	# =================================================
	violationstring = ""
	# =================================================
	Priority = data["nbPath"] * ( data["nbArch"] ) 
	if data["isMiddleOnly"]:
		Priority = 2 * Priority
	# =================================================
	violationstring = "[PRIORITY "+str(Priority)+"] "+ent.longname()+"\n\npath(s):"+str(data["nbPath"])+"\narchitecture(s):"+str(data["nbArch"])+"\ninternal:"+str(data["isMiddleOnly"])+"\n\n"
	for archname in data["details"]:
		architecture_name = data["details"][archname]["arch"].name()
		violationstring = violationstring + architecture_name + ":" + data["details"][archname]["string"]
	# =================================================
	definitionReference = ent.ref("DefineIn")
	if definitionReference:
		check.violation(ent, definitionReference.file(), definitionReference.line(), definitionReference.column(),violationstring)
	else:
		check.violation(ent, None, -1, -1,violationstring)
# ===============================================================================
# violation_list is a {} where key is the entity ID
# violation_list[ID]["ent"] is the entity
# violation_list[ID]["nbArch"] is the number of architecture with problem
# violation_list[ID]["nbPath"] is the number of violations created
# violation_list[ID]["isStart"] is whether this is at Start of any path
# violation_list[ID]["isEnd"] is whether this is at End of any path
# violation_list[ID]["isMiddleOnly"] is whether this is never a End or a Start
# violation_list[ID]["details"] is {} with key is the architecture names (longname)
# violation_list[ID]["details"][ARCH_LONGNAME]["arch"] is the architecture object
# violation_list[ID]["details"][ARCH_LONGNAME]["string"] is the list of paths (or a warning too many paths)
def create_violation(check,isStart,isEnd,changedActor,scenario_arch,result,FromResult,ToResult,violation_list,threshold):
	if not (changedActor[0].id() in violation_list):
		violation_list[changedActor[0].id()] = {"ent":changedActor[0],"nbArch":0,"nbPath":0,"isStart":False,"isEnd":False,"isMiddleOnly":True,"details":{}}
	violation_list[changedActor[0].id()]["nbPath"] += changedActor[4] # We increase the number of paths with problems
	if not (scenario_arch.longname() in violation_list[changedActor[0].id()]["details"]):
		violation_list[changedActor[0].id()]["nbArch"] += 1 # We increase the number of architecture with problems
		violation_list[changedActor[0].id()]["details"][scenario_arch.longname()] = {"arch":scenario_arch,"string":""}
	if isStart:
		violation_list[changedActor[0].id()]["isStart"] = True
		violation_list[changedActor[0].id()]["isMiddleOnly"] = False
	if isEnd:
		violation_list[changedActor[0].id()]["isEnd"] = True
		violation_list[changedActor[0].id()]["isMiddleOnly"] = False
	# =================================================
	architectureViolationData = violation_list[changedActor[0].id()]["details"][scenario_arch.longname()]
	if (changedActor[4] <= threshold):
		start_end_pair = {}
		for path in result:
			for element in path:
				if element[0].id() == changedActor[0].id():
					Key = str(path[0][0].id()) + "-" + str(path[len(path)-1][0].id())
					if not Key in start_end_pair:
						start_end_pair[Key] = [1,path[0][0].longname(),FromResult[path[0][0].id()][1],path[len(path)-1][0].longname(),ToResult[path[len(path)-1][0].id()][1]]
					else:
						start_end_pair[Key][0] += 1
					break
		for Key in start_end_pair:
			data = start_end_pair[Key]
			architectureViolationData["string"] = architectureViolationData["string"] + str(data[0]) + " path(s) from '"+data[1]+"' ("+data[2]+") to "+data[3]+"' ("+data[4]+")\n"
	else:
		architectureViolationData["string"] = "Too many paths to show here. Refer to graph 'CRITICAL PATHS Graph' to see the paths.\n"
# ===============================================================================
aPather = None
def check(check):
	global aPather
	# ===============================================================================
	architecture_filter = "[CRITICAL]"
	# ===============================================================================
	try:
		# ===============================================================================
		threshold = check.options().lookup('threshold')
		# ===============================================================================
		aArchitectureParser = architectureparser.ArchitectureParser(check.db())
		architecturechoices = []
		architectures = aArchitectureParser.findArchitecturesWithName(architecture_filter)
		# ===============================================================================
		for architecture in architectures:		
			architecturechoices.append(architecture.longname())			
		# ===============================================================================
		# violation_list is a list of violation by entitys
		# The key is the entity ID
		violation_list = {}
		# ===============================================================================
		for architecturechoice in architecturechoices:
			if (check.is_aborted()):
				return
			from_ents = []			
			archFromName = architecturechoice+"/from"
			archFrom = check.db().lookup_arch(archFromName)
			FromResult = aArchitectureParser.createListOfObjectFromDescriptionArchitecture(archFrom)
			for x in FromResult:
				from_ents.append(FromResult[x][0])
			to_ents = []
			archToName = architecturechoice+"/to"
			archTo = check.db().lookup_arch(archToName)
			ToResult = aArchitectureParser.createListOfObjectFromDescriptionArchitecture(archTo)
			for x in ToResult:
				to_ents.append(ToResult[x][0])
			# ===============================================================================	
			archChoice = check.db().lookup_arch(architecturechoice)
			architecturechoicename = archChoice.name()
			# ===============================================================================	
			result = []
			BEFORE_db = check.db().comparison_db()	
			if aPather == None:
				aPather = pather.Pather(check.db())		
			aPather.computePaths(from_ents,to_ents)
			if (check.is_aborted()):
				return
			result = aPather.getChangedPaths()
			if (check.is_aborted()):
				return
			# ===============================================================================
			resultChanged = aPather.getChangeActors()
			if (check.is_aborted()):
				return
			for changedActor in resultChanged:
				create_violation(check,False,False,changedActor,archChoice,result,FromResult,ToResult,violation_list,threshold)
			# ===============================================================================
			resultEndpoints = aPather.getChangedEndpoints()
			if (check.is_aborted()):
				return
			for endpointActor in resultEndpoints:
				create_violation(check,endpointActor[3],endpointActor[2],endpointActor,archChoice,result,FromResult,ToResult,violation_list,threshold)
			# ===============================================================================
		for violation_item in violation_list:
			flush_violation(check,violation_list[violation_item])
	except understand.UnderstandError as err:
		check.violation(None, None, -1, -1, traceback.format_exc())
		print(traceback.format_exc())
		print(f"Understand Error {err=}")
	except BaseException as err:
		check.violation(None, None, -1, -1, traceback.format_exc())
		print(traceback.format_exc())
		print(f"Unexpected Error {err=}")      