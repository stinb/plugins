# CodeCheckResultsByViolation
import os
import cccompatability

def name():
  return "CodeCheck Results By Violation"

def description():
  return '''Displays CodeCheck results grouped by violation.
    <p>This plugin displays CodeCheck results grouped by violation.  It provides a hierarchical view of the violations, organized by check name and file. You can also choose to flatten the tree to view all violations directly.</p>'''

def test_inspection(inspection):
  return True

def init(report):
  cccompatability.init(report)
  report.options().checkbox("flattentree",  "Flatten Tree", False)

def test_options(report):
  return cccompatability.test_options(report)

# Report generation
def generate(report, inspection):
  # check info
  checkname, checkseverity = cccompatability.checkinfo(inspection)
  vlist = cccompatability.violations(report, inspection)

  treeDict = dict()
  isTree = not report.options().lookup("flattentree")

  if isTree:
    filenames = cccompatability.fileNamesDict(report, "relative")

  for v in vlist:
    # Check long name not available, just use short name
    key = [checkname.get(v.check_id(), v.check_id())]
    if isTree:
      key.extend(filenames.get(v.file(), v.file()).split(os.sep))
    else:
      key.append(v.file())
    cccompatability.addToTree(treeDict, key, v)


  cols = ["Results", "CheckID", "Line", "Column", "Entity","Ignored", "Note", "Severity"]

  cccompatability.printTreeDict(report, treeDict, cols, checkname, checkseverity, len(vlist))

