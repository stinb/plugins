# CodeCheckResultsByFile
import os
import cccompatability

def name():
  return "CodeCheckResultsByFile"

def test_inspection(inspection):
  return True

def init(report):
  cccompatability.init(report)
  report.options().checkbox("flattentree",  "Flatten Tree", False)

def test_options(report):
  return cccompatability.test_options(report)

# Report generation
def generate(report, inspection):
  vlist = cccompatability.violations(report, inspection)

  treeDict = dict()
  isTree = not report.options().lookup("flattentree")

  if isTree:
    filenames = cccompatability.fileNamesDict(report, "relative")
  for v in vlist:
    if isTree:
      key = filenames.get(v.file(), v.file()).split(os.sep)
    else:
      key = [v.file()]
    cccompatability.addToTree(treeDict, key, v)

  cols = ["Results", "Entity", "Line", "Column", "CheckID", "Check Name", "Ignored", "Note", "Severity"]

    # check info
  checkname, checkseverity = cccompatability.checkinfo(inspection)
  cccompatability.printTreeDict(report, treeDict, cols, checkname, checkseverity, len(vlist))

