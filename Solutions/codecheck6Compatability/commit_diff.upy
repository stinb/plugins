def name():
  return "Commit Diff"

def description():
  return """
  A sample plugin used to notify engineers when they commit new violations.

  <p>SciTools runs CodeCheck on each Git commit as part of continuous integration.
  If there are violations on the changed lines of code, or other violations in
  the changed files, this plugin is used to generate the email that's sent to
  the engineer who made the commit.</p>
      <br><br>
      <b>Example:</b>
      <br><img src=\".doc/commit_diff.png\">
  """

def test_inspection(inspection):
  return True

# Report generation
def generate(report, inspection):
  vlist = []
  elist = []
  files = inspection.files()

  # A violation is excluded when it is outside the requested inspection regions.
  # It may be excluded because the regions were line specific and it was in an
  # inspected file but not on an inspected line, or because a global check
  # reported violations outside the target files. This report was assumed to
  # run with results from git and separates violations on changed lines with
  # other violations in changed code.
  for v in inspection.violations():
    ignored = False
    excluded = False
    for source,note in v.ignores():
      if source == "Excluded" and v.file() in files:
        excluded = True # A violation in changed code but not on a changed line
      else:
        ignored = True
    if excluded:
      elist.append(v)
    elif not ignored:
      vlist.append(v)

  if vlist:
    report.heading(2)
    report.print("Violations in your commit ({}):".format(len(vlist)))
    report.heading()

    violationsTable(report, vlist)

  if elist:
    report.heading(2)
    report.print("Other violations in this code ({}):".format(len(elist)))
    report.heading()

    violationsTable(report, elist)

def violationsTable(report, vlist):
  report.table(["File", "Line", "Violation"])
  for v in sorted(vlist,key=lambda item: (item.file(),item.line(),item.column()) ):
    report.tablecell()
    report.print(report.db().relative_file_name(v.file()))

    report.tablecell()
    report.print(str(v.line()))

    report.tablecell()
    report.print(v.text())
  report.table()

