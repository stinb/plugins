
def name():
  return "Long Name"

def description():
  return '''An architecture for grouping entities by long name.

  <p>By default, this architecture groups class entities by long name
  assuming "::" as a separator, appropriate for C++ projects. The entity
  kind string and separator can be configured. For example,
  the kind string can be set to "functions" to group functions instead of
  classes, or the separator can be set to "." for C# instead of C++.<p>
  '''

def tags():
  return [
    'Sample Template'
  ]

def define_options(arch):
  # Builds 1194 and later allow defining architecture options
  arch.options().text("kinds", "Kind String", "class ~unresolved ~member")
  arch.options().text("sep", "Separator", "::")

def build(arch, db):
  sep = arch.options().lookup("sep")
  for ent in db.ents(arch.options().lookup("kinds")):
    parts = ent.longname().split(sep)
    if len(parts) > 1:
      arch.map(ent, '/'.join(parts[:-1]))
