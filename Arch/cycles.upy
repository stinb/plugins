import und_lib.kind_util as kind_util
import understand

def name():
  return "Cycles"

def description():
  return '''Identify and report cycles
    <p>This is a generic method using reference and entity kinds. The default
    options find cycles in function calls (indirect recursion). To find file
    dependency cycles, use the <a href="und://plugin/arch/Visibility%20Matrix%20Cores">
    Visibility Matrix Cores</a> architecture instead. </p>
  '''

def tags():
  return [
    'Cycles'
  ]

def define_options(arch):
  arch.options().text("entkindstr", "Entities", kind_util.FUNCTION_KIND_STR)
  arch.options().text("refkindstr", "References", "call ~inactive")

def build(arch, db):
  # Tarjan's algorithm for finding strongly connected components
  # https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm
  index = 0
  indices = dict()
  lowlink = dict()
  stack = list()
  direct = set()
  cycleCount = dict()

  refKindStr = arch.options().lookup("refkindstr")
  entKindStr = arch.options().lookup("entkindstr")

  def connectRecursive(ent):
    nonlocal index
    indices[ent] = index
    lowlink[ent] = index
    index += 1
    stack.append(ent)

    for toEnt in sorted(ent.ents(refKindStr, entKindStr), key= lambda ent: ent.name()):
      if toEnt not in indices:
        connectRecursive(toEnt)
        lowlink[ent] = lowlink[ent] if lowlink[ent] < lowlink[toEnt] else lowlink[toEnt]
      elif toEnt in stack:
        lowlink[ent] = lowlink[ent] if lowlink[ent] < lowlink[toEnt] else lowlink[toEnt]

    if lowlink[ent] == indices[ent]:
      idx = stack.index(ent)
      cycle_size = len(stack[idx:])
      if cycle_size > 1:
        cycleId = cycleCount.get(cycle_size, 0)
        cycleCount[cycle_size] = cycleId + 1
        for cycle_ent in stack[idx:]:
          arch.map(cycle_ent, '{:03d}/{:03d}'.format(cycle_size, cycleId))
        cycleId += 1
      del stack[idx:]

  for ent in sorted(db.ents(entKindStr), key= lambda ent: ent.name()):
    if ent not in indices:
      connectRecursive(ent)
