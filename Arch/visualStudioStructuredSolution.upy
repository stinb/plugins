# Make a Visual Studio Architecture using the structure in the solution and
# filter files
import glob
import os.path
import re


def name():
  return "Structured Visual Studio"

def translateFromVSToUnderstand(name):
  # / is no path separator in vs filter
  # \ is path separator in vs filter
  return name.replace("/", "-").replace("%28", "(").replace("%29", ")").replace("&amp;", "&").replace("\\", "/")

def findSolutionsForPath(path):
  solutions = glob.glob(os.path.join(path, "*.sln"))
  if len(solutions)>0:
    return solutions

def findSolutions(db):
  # If your solution file(s) are not in the same directory hierarchy as your Understand
  # project, update this search
  slnRoot = os.path.dirname(db.name())
  solutions = findSolutionsForPath(slnRoot)
  if not solutions:
    solutions = findSolutionsForPath(slnRoot + '/..')
  if not solutions:
    solutions = findSolutionsForPath(slnRoot + '/../..')
  if solutions:
    return [ os.path.normpath(solution).replace('\\','/') for solution in solutions ]
  return []

def generate(arch, db):
  solutions = findSolutions(db)

  fileDict = dict()
  for file in db.ents("file ~unknown ~unresolved"):
    fileDict[file.longname()] = file

  for solution in solutions:
    projects = parseSolutionFile(solution)
    files = filesToArch(projects)
    for path, name in files.items():
      if path in fileDict:
        arch.map(fileDict[path], name)

projectLineRE = re.compile(r"Project\(\"{[a-zA-Z0-9-_]+}\"\)\s*=\s*\"([^\"]*)\"\s*,\s*\"([^\"]*)\"\s*,\s*\"{([a-zA-Z0-9-_]+)}\"")
parentLineRE = re.compile(r"\s*{([a-zA-Z0-9-_]+)}\s*=\s*{([a-zA-Z0-9-_]+)}")
def parseSolutionFile(filename):
  names = dict()
  paths = dict()
  parents = dict()
  with open(filename, 'r', -1, "utf-8") as f:
    subdir = os.path.normpath(os.path.dirname(filename)).replace('\\','/')+'/'
    inParentsSection = False
    for line in f:
      m = projectLineRE.search(line)
      if m:
        names[m.group(3)] = m.group(1)
        projPath = m.group(2).replace('\\','/')
        path = os.path.join(subdir, projPath)
        if os.path.exists(path):
          paths[m.group(3)] = path
      if inParentsSection:
        m = parentLineRE.search(line)
        if m:
          parents[m.group(1)] = m.group(2)
        if "EndGlobalSection" in line:
          inParentsSection = False
      elif "GlobalSection(NestedProjects)" in line:
        inParentsSection = True

  projToArch = dict()
  for hash, path in paths.items():
    arch = []
    while hash in names:
      arch.append(names[hash])
      hash = parents.get(hash)
    projToArch[path] = '/'.join(reversed(arch))
  return projToArch

includeRE = re.compile(r'<Cl(Compile|Include)[^>]*Include="([^"]*)"[^>]*>')
filterRE = re.compile(r'<Filter>([^<]*)</Filter>')
def parseProjXML(filename, pathDict, defaultFilter):
  dir = os.path.abspath(os.path.dirname(filename))
  with open(filename, 'r', -1, "utf-8") as f:
    contents = f.read()
    # Search for ClCompile and ClInclude tags
    for m in includeRE.finditer(contents):
      # find filter if present
      filter = defaultFilter
      if contents[m.end() - 2] != "/":
        close = contents.find("</Cl" + m.group(1) + ">", m.end())
        if close > m.end():
          fm = filterRE.search(contents[m.end():close])
          if fm:
            filter += "/" + translateFromVSToUnderstand(fm.group(1))

      # map path to filter
      inc = m.group(2)
      inc = os.path.normpath(os.path.join(dir, inc))
      pathDict[inc] = filter

def filesToArch(projToArch):
  pathDict = dict()
  for proj, arch in projToArch.items():
    parseProjXML(proj, pathDict, arch)
    if os.path.exists(proj + ".filters"):
      parseProjXML(proj + ".filters", pathDict, arch)
  return pathDict
