"""
Create an Author architecture based on the last person to modify the file in git
The first run of this script can take some time since the git commands are called
for each file in the project. Successive runs should be much quicker since those
commands are only called on modified files.
"""
import os
import tempfile
from subprocess import run
from pathlib import PurePath

output_file=None  #Set this to override where the outputfile is saved
byHand=False

def name():
  return "Git Author"

def generate(arch, db):
  global output_file
  lastRun={}
  newLines=[]
  changedFiles=[]
  gitRev=None

  #Save the output file to the temp directory unless a different path is specified
  if (output_file==None):
    projectName=PurePath(db.name()).stem
    output_file = tempfile.gettempdir()+os.sep+projectName+"_git_author.txt"


  #If the old file exists, read the previous authors from it
  if os.path.exists(output_file):
    with open(output_file, 'r') as f:
      lines = f.readlines()
    lastRun = dict(line.strip().split('=') for line in lines)

  fileList = db.ents("file ~unknown ~unresolved")

  startinfo = None
  if os.name == 'nt':
    startinfo = subprocess.STARTUPINFO()
    startinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW

  #Loop through each file in the project
  for i, file in enumerate(fileList):

    if (byHand):
      #Show Status if running manually
      if(i % 10 == 0):
        sys.stdout.write('\r')
        percent=i/(len(fileList))
        sys.stdout.write("%.2f%%" % (percent * 100))
        sys.stdout.flush()

    fullpath = PurePath(file.longname())
    parentDir = str(fullpath.parent)
    fullpath=str(fullpath)
    author = lastRun.get(fullpath)

    if os.path.exists(fullpath):
      if (gitRev==None):
        #We need the first valid file to find a directory to run git commands from
        gitRev= run(["git", "rev-parse", "HEAD"], check=True, capture_output=True, cwd=parentDir, startupinfo=startinfo).stdout
        gitRev= str(gitRev, "utf-8").strip()
        newLines.append("gitRev="+gitRev)
        prefix= run(["git", "rev-parse", "--show-toplevel"], check=True, capture_output=True, cwd=parentDir, startupinfo=startinfo).stdout
        prefix= str(prefix, "utf-8").strip()+"/"
        newLines.append("prefix="+prefix)
        #Get the list of changed files
        if (len(lastRun)>0):
          if 'gitRev' in lastRun.keys():
            changedFiles= run(["git", "diff-tree", "--name-only","-r","--line-prefix="+prefix+"",lastRun['gitRev'],gitRev], check=True, capture_output=True, cwd=parentDir, startupinfo=startinfo).stdout
            changedFiles= str(changedFiles, "utf-8").strip()
            changedFiles=changedFiles.replace('/',os.sep) #Handle Windows paths

      #If the file has changed or is new, do a lookup, otherwise use the previous value
      if (fullpath in changedFiles or author==None):
        author = run(["git", "log", "-s", "-n1","--pretty=format:%an",fullpath], check=True, capture_output=True, cwd=parentDir, startupinfo=startinfo).stdout
        author = str(author, "utf-8")

      newLines.append(fullpath+"="+author)
      if(not byHand):
        arch.map(file, author)

  #write the date to the file
  with open(output_file, 'w') as filehandle:
    for listitem in newLines:
      filehandle.write('%s\n' % listitem)

### Not executed when run as a plugin within Understand
### For manual execution/debugging
### e.g.  upython changed.upy myrpoject.und
import sys
import time
import understand
startTime = time.time()
if __name__ == '__main__':
  args = sys.argv
  db = understand.open(args[1])
  byHand=True
  generate("",db)
  executionTime = (time.time() - startTime)
  sys.stdout.write('\r')
  sys.stdout.flush()
  print("Architectures saved to "+output_file)
  print('Execution time in seconds: ' + str(executionTime))
