# Group files by the author(s) who made the most commits to each file.
import os
import understand
import subprocess

def name():
  return "Git Owner"

def generate(arch, db):
  # Prefer the built-in cache if it exists
  if hasattr(arch, "cache") and arch.cache("Git") and not arch.cache("Git").is_empty():
    und_cache = arch.cache("Git")
    for file in db.ents("file ~unknown ~unresolved"):
      mapToOwners(arch, file, und_cache.value(file=file,key="authors",value=[]))
    return

  # Calculate from Git Log
  # The git repository is assumed to be in the same folder as the Understand
  # project. If this is not True for your project, update the working directory
  # accordingly.
  wd = os.path.dirname(db.name())
  startinfo = None
  if os.name == 'nt':
    startinfo = subprocess.STARTUPINFO()
    startinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
  try:
    gitlog = subprocess.run(["git", "log", "--format=#%an", "--name-only"], check=True, capture_output=True, cwd=wd, text=True, startupinfo=startinfo, encoding='latin-1')
  except Exception as e:
    return # no repository ?

  curAuthor = ""
  pathToAuthorList = dict()
  for line in gitlog.stdout.splitlines():
    line = line.strip()
    if line.startswith("#"):
      curAuthor = line[1:]
    elif line:
      line.replace('\\','/')
      pathToAuthorList.setdefault(line,[]).append(curAuthor)

  wd.replace('\\','/')
  if not wd.endswith('/'):
    wd += '/'
  for file in db.ents("file ~unknown ~unresolved"):
    path = file.longname()
    path.replace('\\','/')
    if path.startswith(wd):
      path = path[len(wd):]
    mapToOwners(arch, file, pathToAuthorList.get(path,[]))


def mapToOwners(arch, file, authorlist):
  authors = dict()
  for author in authorlist:
    authors[author] = authors.get(author,0) + 1
  max = 0
  owners = []
  for author,cnt in authors.items():
    if cnt > max:
      max = cnt
      owners = [author]
    elif cnt == max:
      owners.append(author)
  for owner in owners:
    arch.map(file, owner)

