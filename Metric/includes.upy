import und_lib.kind_util as kind_util
import understand

def ids():
  return ["CountIncludes", "CountIncludeBy"]

def name(id):
  if id == "CountIncludes":
    return "Includes"
  if id == "CountIncludeBy":
    return "Included By"

def description(id):
  if id == "CountIncludes":
    return '''<p>The number of includes</p>

    <p>See also <a href="und://plugin/metric/CountIncludeBy">CountIncludeBy</a>
    .</p>
    '''

  if id == "CountIncludeBy":
    return '''<p>The number of times this file is included</p>

    <p>See also <a href="und://plugin/metric/CountIncludes">CountIncludes</a>
    .</p>
    '''

def tags(id):
  return [
    'Target: Files',
    'Language: C',
    'Language: C++'
  ]

def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity(kindstr(metric)))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  return True

def is_integer(id):
   return True

def test_entity(metric, ent):
  return ent.kind().check(kindstr(metric))

def value(metric, ent):
  if metric.id() == "CountIncludes":
    return len(ent.filerefs("include"))
  if metric.id() == "CountIncludeBy":
    return len(ent.refs("includeby"))

def kindstr(metric):
  if metric.id() == "CountIncludes":
    return "c file ~unresolved"
  return "c header file"
