import und_lib.kind_util as kind_util
import understand

def ids():
  return ["CountCalls", "CountCallby", "CountCallsUnique", "CountCallbyUnique"]

def name(id):
  if id == "CountCalls":
    return "Calls"
  if id == "CountCallby":
    return "Called By"
  if id == "CountCallsUnique":
    return "Unique Calls"
  if id == "CountCallbyUnique":
    return "Unique Called By"

def description(id):
  if id == "CountCalls":
    return '''<p>The number of calls this function makes</p>
    <h3>Example:</h3>
    <pre><code language="C++">
    void func();
    void doSomething()
    {
      func();             // +1
      func();             // +1
    }                     // CountCalls = 2
    </code></pre>

    <p>Compare to <a href="und://plugin/metric/CountCallsUnique">
    CountCallsUnique</a> which counts unique functions this function calls.
    </p>
    '''
  if id == "CountCallby":
    return '''<p>The number of calls to this function</p>
    <h3>Example:</h3>
    <pre><code language="C++">
    void func();          // CountCallby = 2
    void doSomething()
    {
      func();             // +1
      func();             // +1
    }
    </code></pre>

    <p>Compare to <a href="und://plugin/metric/CountCallbyUnique">
    CountCallbyUnique</a> which counts unique functions that call this function.
    </p>
    '''
  if id == "CountCallsUnique":
    return '''<p>The number of unique entities that this function calls</p>
    <p>Also known as
    <a href="und://plugins/Solutions/.doc/manager_his.md?filter=Solution%3A%22Hersteller%20Initiative%20Software%20(HIS)%22">
    Hersteller Initiative Software (HIS)</a> CALLS metric.</p>
    <h3>Example:</h3>
    <pre><code language="C++">
    void func();
    void doSomething()
    {
      func();             // +1
      func();             // func() already counted
    }                     // CountCallsUnique = 1
    </code></pre>

    <p>Compare to <a href="und://plugin/metric/CountCalls">CountCalls</a>
    which counts all call references.</p>
    '''
  if id == "CountCallbyUnique":
    return '''<p>The number of unique entities that call the function</p>
    <p>Also known as
    <a href="und://plugins/Solutions/.doc/manager_his.md?filter=Solution%3A%22Hersteller%20Initiative%20Software%20(HIS)%22">
    Hersteller Initiative Software (HIS)</a> CALLING metric.</p>

    <h3>Example:</h3>
    <pre><code language="C++">
    void func();          // CountCallbyUnique = 1
    void doSomething()
    {
      func();             // +1
      func();             // func() already counted
    }
    </code></pre>

    <p>Compare to <a href="und://plugin/metric/CountCallby">CountCallby</a>
    which counts all callby references.</p>
    '''
def tags(id):
  taglist = [
    'Target: Functions',
    'Language: Any',
  ]
  if id.endswith("Unique"):
    taglist.append('Solution: Hersteller Initiative Software (HIS)')
  return taglist

def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity(kindstr(metric)))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  return True

def is_integer(id):
   return True

def test_entity(metric, ent):
  return ent.kind().check(kindstr(metric))

def value(metric, ent):
  if metric.id() == "CountCallby":
    return len(ent.refs("callby"))
  if metric.id() == "CountCalls":
    return len(ent.refs("call"))
  if metric.id() == "CountCallbyUnique":
    return len(ent.refs("callby",unique=True))
  if metric.id() == "CountCallsUnique":
    return len(ent.refs("call",unique=True))

def kindstr(metric):
  if metric.id() in ["CountCallby", "CountCallbyUnique"]:
    return kind_util.FUNCTION_KIND_STR_WITH_UNRESOLVED
  return kind_util.FUNCTION_KIND_STR

