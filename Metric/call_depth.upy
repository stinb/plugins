import understand

ENT_KINDS=("ada entry, ada function, ada procedure, ada protected, ada task,"
  "c function,"
  "csharp method,"
  "fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
  "java method,"
  "jovial subroutine,"
  "pascal compunit, pascal function, pascal procedure,"
  "vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
  "web function, web method")

def ids():
  return ["MaxCallDepth"]

def name(id):
  if id == "MaxCallDepth":
    return "Maximum Call Depth"

def description(id):
  if id == "MaxCallDepth":
    return '''<p>The maximum depth of the call tree or -1 for recursive</p>
    <h3>Example:</h3>
    <pre><code language="C++">
    void depth0() {}            // MaxCallDepth = 0
    void depth1() { depth0(); } // MaxCallDepth = 1
    void depth2() { depth1(); } // MaxCallDepth = 2

    void depth2b()              // MaxCallDepth = 2
    {
      depth0();
      depth1();
    }

    void recursive()            // MaxCallDepth = -1 recursion
    {
      reecurisve();
    }

    void a();
    void b() { a(); }           // MaxCallDepth = -1 recursion
    void c() { b(); }           // MaxCallDepth = -1 recursion
    void a() { c(); }           // MaxCallDepth = -1 recursion

    void callsCycle() { a(); }  // MaxCallDepth = -1 recursion
    </code></pre>
    <p>Also known as Hersteller Initiative Software (HIS) LEVEL metric.<p>
    '''

def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity(ENT_KINDS))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  return True

def is_integer(id):
   return True

def test_entity(metric, ent):
  return ent.kind().check(ENT_KINDS)

def value(metric, ent):
  known = dict()
  return depth(known, ent)

def depth(known, ent):
  if ent in known:
    return known[ent]

  known[ent] = -1 # recursive

  calls = ent.refs('call ~inactive, use ptr ~inactive', ENT_KINDS, True)
  max_d = -1
  for call in calls:
    d = depth(known, call.ent())
    if d == -1:
      return -1
    max_d = max(max_d, d)

  known[ent] = max_d + 1
  return max_d + 1

