import inspect
import json
import os


import understand

def ids():
  return ["HISNOMV"]

def name(id):
  if id == "HISNOMV":
    return "MISRA HIS Subset Violations (NOMV)"

def description(id):
  if id == "HISNOMV":
    return '''<p>Number of MISRA Herseteller Initiative Software (HIS) Subset Violations (NOMV) </p>
    <p>Count the number of violations of the MISRA HIS Subset (see
    CodeCheck/Configs/MISRA_HIS.json for the checks list) whose location
    occurred in the entity. The relevant violations must be part of the
    Violation Browser either by running the configuration in the background
    or syncing a manual inspection's results.</p>
    '''

def is_integer(id):
   return True

def test_available(metric,entkindstr):
  # Assume anything with a range of lines can be counted
  return "CountLine" in metric.list(entkindstr)

def test_entity(metric, ent):
  return ent.kind().check("file") or ent.ref("end")

def value(metric, ent):
  try:
    conf_path = os.path.join(os.path.dirname(inspect.getfile(lambda: None)), "..", "CodeCheck", "Configs", "MISRA_HIS.json")
    conf = json.loads(open(conf_path).read())
    ids = conf["checks"]
  except:
    return

  sline = None
  eline = None
  viols = []
  if ent.kind().check("file"):
    viols = ent.violations()
  else:
    defref = ent.ref("begin")
    if not defref:
      defref = ent.ref("definein, body declarein")
    endref = ent.ref("end")
    if defref and endref and defref.file() == endref.file():
      viols = defref.file().violations()
      sline = defref.line()
      eline = endref.line()

  count = 0
  for v in viols:
    if (v.check_id() in ids and
        (sline is None or v.line() >= sline) and
        (eline is None or v.line() <= eline)):
      count += 1
  return count
