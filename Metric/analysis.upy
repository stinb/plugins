# A sample metrics plugin.
#
# A sample plugin reporting the number of analysis errors and warnings

import understand

metDict = {
  "CountAnalysisError" : ["Analysis Errors", "The number of analysis errors"],
  "CountAnalysisWarning" : ["Analysis Warnings", "The number of analysis warnings"]
}

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return list(metDict.keys())

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return metDict.get(id,["",""])[0]

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return metDict.get(id,["",""])[1]

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return True

# One of the following three test functions should return True.
def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check("file ~unknown, ~unresolved");

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return arch.longname().startswith("Directory Structure/") or arch.name() == "Directory Structure"

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  return True

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity("file ~unknown ~unresolved"))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # Violation counts are always available
  return True

def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  viols = []
  if isinstance(target, understand.Arch):
    for file in target.ents(True):
      viols += file.violations()
  else:
    viols = target.violations()

  counts = dict()
  for v in viols:
    counts[v.check_id()] = counts.get(v.check_id(),0) + 1

  if metric.id() == "CountAnalysisError":
    return counts.get("UND_ERROR",0)
  else:
    return counts.get("UND_WARNING",0)


