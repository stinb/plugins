# A sample metrics plugin.
#
# A sample plugin reporting the number of analysis errors and warnings

import understand

import und_lib.kind_util as kind_util

metDict = {
  "CountAnalysisError" : ["Analysis Errors", "The number of analysis errors"],
  "CountAnalysisWarning" : ["Analysis Warnings", "The number of analysis warnings"]
}

def ids():
  return [
    "CountAnalysisError",
    "CountAnalysisWarning",
  ]

def name(id):
  return {
    "CountAnalysisError" : "Analysis Errors",
    "CountAnalysisWarning": "Analysis Warnings",
  }.get(id, "")

def description(id):
  if id == "CountAnalysisError":
    return """<p>The number of analysis errors</p>

    <p>It's important to fix analysis errors to get an accurate project. Check
    out the top level "Project" menu's "Improve Project Accuracy" menu for help
    fixing analysis errors. There's also a <a
    href="https://support.scitools.com/support/solutions/articles/70000582619-creating-accurate-c-c-projects">
    support article</a>.</p>

    <p>See also <a href="und://plugin/metric/CountAnalysisWarning">Analysis
    Warnings</a> for a count of analysis warnings.</p>
    """

  if id == "CountAnalysisWarning":
    return """<p>The number of analysis warnings</p>

    <p>Check out the top level "Project" menu's "Improve Project Accuracy" menu
    for help with analysis accuracy. There's also a <a
    href="https://support.scitools.com/support/solutions/articles/70000582619-creating-accurate-c-c-projects">
    support article</a>.</p>

    <p>See also <a href="und://plugin/metric/CountAnalysisError">Analysis
    Errors</a> for a count of analysis errors.</p>
    """

def tags(id):
  return [
    'Target: Functions',
    'Target: Files',
    'Target: Architectures',
    'Target: Project',
    'Language: Any',
    'Line Metric'
  ]

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return True

# One of the following three test functions should return True.
def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check(kind_util.LEXER_ENTS_KIND_STR)

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return True

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  return True

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  # Kind check if requested
  if entkindstr:
    my_kinds = set(kind_util.LEXER_ENTS_KIND_STR)
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # Violation counts are always available
  return True

def test_line(metric):
  """
  Optional, return True if the metric has values for line.

  Values per line are returned as a dictionary from line number to line
  value from the lines function (see below).
  """
  return True

def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  viols = []
  if isinstance(target, understand.Arch):
    for ent in target.ents(True):
      viols += ent_violations(ent)
  elif isinstance(target, understand.Db):
    viols = target.violations()
  else:
    viols = ent_violations(target)

  counts = dict()
  for v in viols:
    counts[v.check_id()] = counts.get(v.check_id(),0) + 1

  if metric.id() == "CountAnalysisError":
    return counts.get("UND_ERROR",0)
  else:
    return counts.get("UND_WARNING",0)

def lines(metric, file):
  """
  Optional, return a dictionary from line number to line value.

  This method is called if test_line returns True. The dictionary does
  not have to include values for every line.
  """
  if not file.kind().check("file ~unresolved ~unknown"):
    return

  id = "UND_WARNING"
  if metric.id() == "CountAnalysisError":
    id = "UND_ERROR"

  linedict = dict()
  for v in file.violations():
    if v.check_id() == id:
      linedict[v.line()] = linedict.get(v.line(),0) + 1

  return linedict

def ent_violations(ent):
  if ent.kind().check("file ~unresolved ~unknown"):
    return ent.violations()

  if not ent.kind().check(kind_util.FUNCTION_KIND_STR):
    return [] # Violations not supported

  defref = ent.ref("begin")
  if not defref:
    defref = ent.ref("definein, body declarein")
  endref = ent.ref("end")
  if not defref or not endref or defref.file() != endref.file():
    return []

  viols = []
  for v in defref.file().violations():
    if v.line() >= defref.line() and v.line() <= endref.line():
      viols.append(v)
  return viols


