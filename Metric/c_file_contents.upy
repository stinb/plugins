import und_lib.ib_util as ib_util
import und_lib.kind_util as kind_util
import understand

IB_DICT= {
  "CountCFileLocalMacros" : "C++ File Local Macros",
  "CountCFileLocalTypes" : "C++ File Local Types",
  "CountCFileLocalConstants" : "C++ File Local Constants",
  "CountCFileLocalVariables" : "C++ File Local Variables",
  "CountCFileLocalFunctionStaticVariables" : "C++ File Local Function-Static Variables",
  "CountCFileLocalFunctions": "C++ File Local Functions",
  "CountCFileGlobalMacros" : "C++ File Global Macros",
  "CountCFileGlobalTypes" : "C++ File Global Types",
  "CountCFileGlobalConstants" :"C++ File Global Constants",
  "CountCFileGlobalVariables" :"C++ File Global Variables",
  "CountCFileGlobalFunctions" :"C++ File Global Functions",
  "CountCFileMemberTypes" : "C++ File Member Types",
  "CountCFileMemberVariables" : "C++ File Member Variables",
  "CountCFileMemberFunctions" : "C++ File Member Functions",
  "CountCFileExternalFunctionsUsed" : "C++ External Functions Used",
  "CountCFileExternalVariablesUsed" : "C++ External Variables Used",
  "CountCFileExternalTypesUsed" : "C++ External Types Used",
  "CountCFileExternalMacrosUsed" : "C++ External Macros Used"
}

def ids():
  return list(IB_DICT.keys())

def name(id):
  return IB_DICT.get(id, "").replace("C++","").replace("File","").strip()

def description(id):
  return """<p>For C/C++ files, the number of {}. </p>

  <p>This is approximately how many entities would appear in the Information
  Browser for that category.</p>
  """.format(name(id))

def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity("c file ~unresolved"))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  return "C++" in metric.db().language()

def is_integer(id):
   return True

def test_entity(metric, ent):
  return ent.kind().check("c file ~unresolved")

def value(metric, ent):
  ib = ib_util.IBFields()
  val = ib.field_value(ent, IB_DICT[metric.id()], metric.db())
  # These fields are expected to be a list of references
  return len(val) if val else 0
