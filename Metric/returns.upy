import kind_util
import understand

def ids():
  return ["CountExit", "CountEarlyExit"]

def name(id):
  if id == "CountExit":
    return "Exits"
  if id == "CountEarlyExit":
    return "Early Exits"

def description(id):
  if id == "CountExit":
    return '''<p>The number of explicit exits/returns from a function</p>
    <h3>Example:</h3>
    <pre><code language="C++">
    void none() { }           // CountExit = 0
    void one() { return; }    // CountExit = 1
    int two(int x)
    {
      if (x > 0)
        return x;             // +1
      return -x;              // +1
    }                         // CountExit = 2

    void otherExits(int x)
    {
      if (x > 0)
        goto label;           // +1 goto counts as exit
      else
        return;               // +1

    #if 0
      return;                 // inactive code does not count
    #endif

    label:
      return;                 // +1
    }                         // CountExit = 3
    </code></pre>
    <p>See also CountEarlyExit</p>
    '''
  if id == "CountEarlyExit":
    return '''<p>The number of explicit exits/returns from a function excluding the final statement</p>
    <p>Also known as Hersteller Initiative Software (HIS) RETURN metric.</p>
    <h3>Example:</h3>
    <pre><code language="C++">
    void none() { }           // CountEarlyExit = 0
    void one() { return; }    // CountEarlyExit = 0, return is the last statement
    int two(int x)
    {
      if (x > 0)
        return x;             // +1
      return -x;              // return is the last statement
    }                         // CountEarlyExit = 1

    void otherExits(int x)
    {
      if (x > 0)
        goto label;           // +1 goto counts as exit
      else
        return;               // +1

    #if 0
      return;                 // inactive code does not count
    #endif

    label:
      return;                 // return is the last statement
    }                         // CountEarlyExit = 2
    </code></pre>
    <p>See also CountEarlyExit</p>
    '''

def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity(kind_util.FUNCTION_KIND_STR))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # GoTo is C++
  return "C++" in metric.db().language()

def is_integer(id):
   return True

def test_entity(metric, ent):
  return ent.control_flow_graph()

def value(metric, ent):
  count = 0
  # if only counting early, stop two nodes from the end (final node is always
  # the end node of the graph
  end = -1 if metric.id() == "CountExit" else -2
  for node in ent.control_flow_graph().nodes()[:end]:
    if any(str in node.kind() for str in ["return","goto","exit"]):
      count += 1
  return count
