import understand
import math

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return [
    "HalsteadDistinctOperators",
    "HalsteadDistinctOperands",
    "HalsteadTotalOperators",
    "HalsteadTotalOperands",
    "HalsteadVocabulary",
    "HalsteadLength",
    "HalsteadVol",
    "HalsteadDifficulty",
    "HalsteadEffort",
    "HalsteadMaintainIdx"
    ]

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return {
    "HalsteadDistinctOperators" : "Halstead Distinct Operators (n1)",
    "HalsteadDistinctOperands" : "Halstead Distinct Operands (n2)",
    "HalsteadTotalOperators" : "Halstead Total Operators (N1)",
    "HalsteadTotalOperands" : "Halstead Total Operands (N2)",
    "HalsteadVocabulary" : "Halstead Vocabulary (n)",
    "HalsteadLength" : "Halstead Length (N)",
    "HalsteadVol" : "Halstead Volume (V)",
    "HalsteadDifficulty" : "Halstead Difficulty (D)",
    "HalsteadEffort" : "Halstead Effort (E)",
    "HalsteadMaintainIdx" : "Halstead Maintainability Index",
  }.get(id,"")

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return {
    "HalsteadDistinctOperators" : '''<p>Halstead Distinct Operators (n1) counts unique operators</p>
      <p>Operators include things like + - = as well as keywords and punctuation
        excluding ), }, and ].<p>
      <pre><code language="C++">
      int                   // + 1 int
      sample(               // + 1 (
      )                     //     ) excluded
      {                     // + 1 {
        int x               //     int already counted
          =                 // + 1 =
          strlen(           //     ( already counted
            "abc"
          );                // + 1 ';'
        return x            // + 1 return
          *                 // + 1 *
          2;                //     ; already counted
      }                     //     } excluded
                            // = 7
      </code></pre>
      ''',

    "HalsteadDistinctOperands" :  '''<p>Halstead Distinct Operands (n2) counts unique operands (identifiers and literals)</p>
      <pre><code language="C++">
      int
      sample(               // + 1 sample
      )
      {
        int x               // + 1 x
          =
          strlen(           // + 1 strlen
            "abc"           // + 1 "abc"
          );
        return x            //     x already counted
          *
          2;                // + 1 2
      }                     // = 5
      </code></pre>
      ''',

    "HalsteadTotalOperators" : '''<p>Halstead Total Operators (N1) counts total operators</p>
      <p>Operators include things like + - = as well as keywords and punctuation
        excluding ), }, and ].<p>
      <pre><code language="C++">
      int                   // + 1 int
      sample(               // + 1 (
      )                     //     ) excluded
      {                     // + 1 {
        int x               // + 1
          =                 // + 1 =
          strlen(           // + 1 (
            "abc"
          );                // + 1 ';'
        return x            // + 1 return
          *                 // + 1 *
          2;                // + 1 ;
      }                     //     } excluded
                            // = 10
      </code></pre>
      ''',

    "HalsteadTotalOperands" : '''<p>Halstead Total Operands (N2) counts total operands (identifiers and literals)</p>
      <pre><code language="C++">
      int
      sample(               // + 1 sample
      )
      {
        int x               // + 1 x
          =
          strlen(           // + 1 strlen
            "abc"           // + 1 "abc"
          );
        return x            // + 1 x
          *
          2;                // + 1 2
      }                     // = 6
      </code></pre>
      ''',

    "HalsteadVocabulary" : '''<p>Halstead Length (n) is the sum of unique operators (n1) and unique operands (n2)</p>
      <p>It's calculated as</p>
      <ul>
        <li>n1 = unique operators</li>
        <li>n2 = unique operands</li>
        <li>n = n1 + n2</li>
      </ul>
      ''',

    "HalsteadLength" : '''<p>Halstead Length (N) is the sum of total operators (N1) and total operands (N2)</p>
      <p>It's calculated as</p>
      <ul>
        <li>N1 = total operators</li>
        <li>N2 = total operands</li>
        <li>N = n1 + N2</li>
      </ul>
      ''',

    "HalsteadVol" : '''<p>Halstead Volume (V) measures the amount of space needed to store a program</p>
      <p>It's calculated using the Halstead Length (N) and Halstead Vocabulary
      (n) with:</p>
      <ul>
        <li>n1 = unique operators</li>
        <li>n2 = unique operands</li>
        <li>N1 = total operators</li>
        <li>N2 = total operands</li>
        <li>n = n1 + n2</li>
        <li>N = n1 + N2</li>
        <li>V = N * log2(n)</li>
      </ul>
      ''',

    "HalsteadDifficulty" : '''<p>Halstead Difficulty (D) measures how hard a program is to write or understand</p>
      <p>It's calculated as:</p>
      <ul>
        <li>n1 = unique operators</li>
        <li>n2 = unique operands</li>
        <li>N2 = total operands</li>
        <li>D = (n1 / 2) * (N2 / n2) </li>
      </ul>
      ''',

    "HalsteadEffort" : '''<p>Halstead Effort (E) measures coding time</p>
      <p>Where Time is E/18 seconds. It's calculated from the Halstead
      Difficult (D) and Halstead Volume (V) as:</p>
      <ul>
        <li>n1 = unique operators</li>
        <li>n2 = unique operands</li>
        <li>N1 = total operators</li>
        <li>N2 = total operands</li>
        <li>n = n1 + n2</li>
        <li>N = n1 + N2</li>
        <li>V = N * log2(n)</li>
        <li>D = (n1 / 2) * (N2 / n2) </li>
        <li>E = D * V</li>
      </ul>
      ''',

    "HalsteadMaintainIdx" : '''<p>Original Halstead Maintainability Index</p>
      <p>This metric measures how easy it is to maintain and change code. It is
      calculated using the Halstead Volume metric, Cyclomatic Complexity and
      Lines of Code (SLOC).</p>
      <p>The higher the metric the easier the code is to maintain.</p>
      <p>Maintainability Index = 171
                                 - 5.2 * ln(HalsteadVol)
                                 - 0.23 * CyclomaticStrict
                                 - 16.2 * ln(CountLineCode)
                                 + 50 * sqrt(2.46 * RatioCommentToCode)
      </p>
      <br><br>
      <h3>Example:</h3>
      <p><i>Treemap with red functions being the hardest to maintain</i></p><br>
      <img src=".doc/Maintainability.png">
      ''',
  }.get(id,"")
  if id == "HalsteadVol":
    return '''<p>Halstead Volume</p>
    <p>A metric that measures the amount of space needed to store a program.
    It's calculated using the Halstead Length and Halstead Vocabulary</p>

    <pre>Halstead Volume = (Total Operators + Total Operands) *
        log_2(Unique Operators + Unique Operands)" </pre>
    '''
  elif id == "HalsteadMaintainIdx":
    return '''<p>Original Halstead Maintainability Index</p>
    <p>This metric measures how easy it is to maintain and change code. It is
    calculated using the Halstead Volume metric, Cyclomatic Complexity and
    Lines of Code (SLOC).</p>
    <p>The higher the metric the easier the code is to maintain.</p>
    <p>Maintainability Index = 171
                               - 5.2 * ln(HalsteadVol)
                               - 0.23 * CyclomaticStrict
                               - 16.2 * ln(CountLineCode)
                               + 50 * sqrt(2.46 * RatioCommentToCode)
    </p>
    <br><br>
    <h3>Example:</h3>
    <p><i>Treemap with red functions being the hardest to maintain</i></p><br>
    <img src=".doc/Maintainability.png">
    '''

def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity("file,function"))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # Available for any database
  return True

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return id in  [
    "HalsteadDistinctOperators",
    "HalsteadDistinctOperands",
    "HalsteadTotalOperators",
    "HalsteadTotalOperands",
    "HalsteadVocabulary",
    "HalsteadLength",
    ]


def test_entity(metric, ent):
  """
  Required, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check("file,function")

def value(metric, ent):
  """
  Required, return the metric value for the entity.
  """
  n1, n2, N1, N2 = scan_entity(ent)
  if metric.id() == "HalsteadDistinctOperators":
    return n1
  if metric.id() == "HalsteadDistinctOperands":
    return n2
  if metric.id() == "HalsteadTotalOperators":
    return N1
  if metric.id() == "HalsteadTotalOperands":
    return N2

  if metric.id() == "HalsteadVocabulary":
    return halstead_vocabulary(n1, n2, N1, N2)
  if metric.id() == "HalsteadLength":
    return halstead_length(n1, n2, N1, N2)
  if metric.id() == "HalsteadDifficulty":
    return halstead_difficulty(n1, n2, N1, N2)
  if metric.id() ==  "HalsteadEffort":
    return halstead_effort(n1, n2, N1, N2)

  hv = halstead_volume(n1, n2, N1, N2)
  if metric.id() == "HalsteadVol":
    return hv
  if metric.id() == "HalsteadMaintainIdx":
    metlist = ["CyclomaticStrict","CountLineCode","RatioCommentToCode"]
    if ent.kind().check("file"):
      metlist[0] = "SumCyclomaticStrict"
    metdict = ent.metric(metlist)
    cc = metdict[metlist[0]]
    lines = metdict[metlist[1]]
    ratioComToCode = metdict[metlist[2]]
    try:
      return 171 - 5.2 * math.log(hv) \
                 - 0.23 * float(cc) \
                 - 16.2 * math.log(lines) \
                 + 50 * math.sqrt(2.46 * float(ratioComToCode))
    except Exception as e:
      pass


# Functions for this demo

def scan_entity(ent):
  lexemes = []
  try:
    if ent.kind().check("file"):
      lexemes = ent.lexer().lexemes()
    else:
      defref = ent.ref("begin")
      if not defref:
        defref = ent.ref("definein, body declarein")
      endref = ent.ref("end")
      if defref and endref and defref.file() == endref.file():
        lexemes = defref.file().lexer().lexemes(defref.line(), endref.line())
  except understand.UnderstandError:
    pass
  unique_operators = set()
  unique_operands = set()
  total_operators = 0
  total_operands = 0

  for lexeme in lexemes:
    if (lexeme.token() in ["Operator","Keyword","Punctuation"] and
        not lexeme.text() in [')','}',']']):
      unique_operators.add(lexeme.text())
      total_operators += 1
    elif (lexeme.token() in ["Identifier","Literal","String"]):
      unique_operands.add(lexeme.text())
      total_operands += 1
  return len(unique_operators), len(unique_operands), total_operators, total_operands

def halstead_vocabulary(n1, n2, N1, N2):
  return n1 + n2

def halstead_length(n1, n2, N1, N2):
  return N1 + N2

def halstead_volume(n1, n2, N1, N2):
  n = halstead_vocabulary(n1, n2, N1, N2)
  if n <= 0:
    return 0
  return halstead_length(n1, n2, N1, N2) * math.log2(n)

def halstead_difficulty(n1, n2, N1, N2):
  if n2 <= 0:
    return 0
  return (n1/2) * (N2/n2)

def halstead_effort(n1, n2, N1, N2):
  return halstead_volume(n1, n2, N1, N2) * halstead_difficulty(n1, n2, N1, N2)

