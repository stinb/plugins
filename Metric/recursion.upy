import und_lib.kind_util as kind_util
import understand

def ids():
  return ["MinRecursiveDepth"]

def name(id):
  if id == "MinRecursiveDepth":
    return "Minimum Recursive Depth"

def description(id):
  if id == "MinRecursiveDepth":
    return '''<p>The depth of the call tree at which a call to the initial function is first detected.</p>
    <h3>Example:</h3>
    <pre><code language="C++">
    void directlyRecursive()    // MinRecursiveDepth = 1
    {
      directlyRecursive();
    }

    void indirectRecursive1();
    void indirectRecursive2()   // MinRecursiveDepth = 2
    {
      indirectRecursive1();
    }
    void indirectRecursive1()   // MinRecursiveDepth = 2
    {
      indirectRecursive2();
    }

    void a();
    void b() { a(); }           // MinRecursiveDepth = 3
    void c() { b(); }           // MinRecursiveDepth = 3
    void a() { c(); }           // MinRecursiveDepth = 3

    void callsCycle() { a(); }  // MinRecursiveDepth = 0, not recursive
    </code></pre>
    <p>Related to Hersteller Initiative Software (HIS) AP_CG_CYCLE metric.<p>
    '''

def tags(id):
  return [
    'Solution: Hersteller Initiative Software (HIS)',
    'Target: Functions'
  ]

def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity(kind_util.FUNCTION_KIND_STR))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  return True

def is_integer(id):
   return True

def test_entity(metric, ent):
  return ent.kind().check(kind_util.FUNCTION_KIND_STR)

def value(metric, ent):
  visited=set()
  level=0
  curlevel = [ent]
  while curlevel:
    level += 1
    nextlevel = []
    for callEnt in curlevel:
      for ref in callEnt.refs("call ~inactive", unique=True):
        if ref.ent() == ent:
          return level
        if ref.ent() in visited:
          continue
        visited.add(ref.ent())
        nextlevel.append(ref.ent())
    curlevel = nextlevel
  return 0 # not recursive
