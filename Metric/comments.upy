import understand

ENT_KINDS=("ada entry ~unresolved, ada function ~unresolved, ada procedure ~unresolved, ada protected ~unresolved, ada task ~unresolved,"
   "c function ~unresolved,"
   "csharp method ~unresolved,"
   "fortran block data ~unresolved, fortran function ~unresolved, fortran interface ~unresolved, fortran program ~unresolved, fortran subroutine ~unresolved,"
   "java method ~unresolved,"
   "jovial subroutine ~unresolved,"
   "pascal compunit ~unresolved, pascal function ~unresolved, pascal procedure ~unresolved,"
   "vhdl procedure ~unresolved, vhdl function ~unresolved, vhdl process ~unresolved, vhdl architecture ~unresolved,"
   "web function ~unresolved, web method ~unresolved")

def ids():
  return ["CountLineCommentWithBefore","RatioCommentsWithBeforeToCode"]

def name(id):
  if id == "CountLineCommentWithBefore":
    return "Comment Lines (Includes Comments Before Functions)"
  elif id == "RatioCommentsWithBeforeToCode":
    return "Comment to Code Ratio (Includes Comments Before Functions)"

def description(id):
  if id == "CountLineCommentWithBefore":
    return '''<p>For functions, the number of comment lines inside the function (CountLineComment) plus comments before the function.</p>
    <p>For example, the following function has a CountLineComment value of 2 for
    the two interior comments, but a CountLineCommentWithBefore value of 3 because
    the comment preceding the function also counts towards the comment lines.</p>
    <pre><code language="C++">
    // A comment before the function, does not count for CountLineComment
    int doSomething()
    {
      // A comment inside the function, counts for both
      return 0; // a comment on a line that is also a code line
    }
    </code></pre>
    <p>See also RatioCommentsWithBeforeToCode</p>
    '''

  elif id == "RatioCommentsWithBeforeToCode":
    return '''<p>For functions, the comment to code ratio including comments before the function in the commented line count.</p>
    <p>For example, the following function has a CountLineComment value of 2 for
    the single interior comments, but a CountLineCommentWithBefore value of 3 because
    the comment preceding the function also counts towards the comment lines. So
    the ratio of comment to code is 2/4 = 0.50 but this metric will be
    3/4 = 0.75 (CountLineCode is 4).</p>
    <pre><code language="C++">
    // A comment before the function, does not count for CountLineComment
    int doSomething()
    {
      // A comment inside the function, counts for both
      return 0; // a comment on a line that is also a code line
    }
    </code></pre>
    <p>Note that a line can be both comment and code, like the return statement
    in the sample. This ratio can be greater than 1. See also CountLineCommentWithBefore</p>
    '''


def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity(ENT_KINDS))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # Available for any database
  return True

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return id == "CountLineCommentWithBefore"

def test_entity(metric, ent):
  """
  Required, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check(ENT_KINDS)

def value(metric, ent):
  """
  Required, return the metric value for the entity.
  """
  comments = ent.metric("CountLineComment")
  if comments is None:
    comments = 0
  comments += len(ent.comments("before",True))
  if id == "CountLineCommentWithBefore":
    return comments

  code = ent.metric("CountLineCode")
  if code:
    return comments/code
