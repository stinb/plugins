# A sample metrics plugin.
#
# This plugin provides the same metrics available in a CodeCheck Treemap

import understand

metDict = {
  "CountCCViol" : ["CodeCheck Violations", "The number of CodeCheck violations"],
  "CountCCViolType" : ["CodeCheck Violation Types", "The number of distinct violation types (distinct check ids)"],
  "CCViolDensityLine" : ["CodeCheck Violation Density by Lines", "(number of violations / CountLine)"],
  "CCViolDensityCode" : ["CodeCheck Violation Density by Code Lines", "(number of violations / CountLineCode)"]
}

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return list(metDict.keys())

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return metDict.get(id,["",""])[0]

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return metDict.get(id,["",""])[1]

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return id == "CountCCViol" or id == "CountCCViolType"

# One of the following three test functions should return True.
def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check("file ~unknown ~unresolved");

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return arch.longname().startswith("Directory Structure/") or arch.name() == "Directory Structure"

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  return True

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity("file ~unknown ~unresolved"))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # Violation counts are always available
  return True

def test_line(metric):
  """
  Optional, return True if the metric has values for line.

  Values per line are returned as a dictionary from line number to line
  value from the lines function (see below).
  """
  return metric.id() == "CountCCViol" or metric.id() == "CountCCViolType"

def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  viols = []
  if isinstance(target, understand.Arch):
    for file in target.ents(True):
      viols += file.violations()
  else:
    viols = target.violations()

  # Since this is for CodeCheck only, remove analysis errors and warnings
  filtered = []
  for v in viols:
    if v.check_id() != "UND_ERROR" and v.check_id() != "UND_WARNING":
      filtered.append(v)

  viols = filtered
  if not viols:
    return 0

  if metric.id() == "CountCCViolType":
    types = set()
    for viol in viols:
      types.add(viol.check_id())
    return len(types)

  div = 0
  if metric.id() == "CCViolDensityLine":
    div = int(target.metric(["CountLine"])["CountLine"])
  elif metric.id() == "CCViolDensityCode":
    div = int(target.metric(["CountLineCode"])["CountLineCode"])

  if div:
    return len(viols) / div
  return len(viols)

def lines(metric, file):
  """
  Optional, return a dictionary from line number to line value.

  This method is called if test_line returns True. The dictionary does
  not have to include values for every line.
  """
  if not file.kind().check("file ~unresolved ~unknown"):
    return

  vlinedict = dict()
  for v in file.violations():
    if v.check_id() not in ["UND_ERROR", "UND_WARNING"]:
      if v.line() not in vlinedict:
        vlinedict[v.line()] = []
      vlinedict[v.line()].append(v)

  linedict = dict()
  if metric.id() == "CountCCViol":
    for line, viols in vlinedict.items():
      linedict[line] = len(viols)
  else:
    for line, viols in vlinedict.items():
      types = set()
      for v in viols:
        types.add(v.check_id())
      linedict[line] = len(types)

  return linedict

