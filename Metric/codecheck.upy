# A sample metrics plugin.
#
# This plugin provides the same metrics available in a CodeCheck Treemap

import understand

import und_lib.kind_util as kind_util

def ids():
  return [
    "CountCCViol",
    "CountCCViolType",
    "CCViolDensityLine",
    "CCViolDensityCode",
  ]

def name(id):
  return {
    "CountCCViol" : "CodeCheck Violations",
    "CountCCViolType": "CodeCheck Violation Types",
    "CCViolDensityLine" : "CodeCheck Violation Density by Lines",
    "CCViolDensityCode" : "CodeCheck Violation Density by Code Lines",
  }.get(id, "")

def is_enabled_by_default():
  return True

def description(id):
  if id == "CountCCViol":
    return """<p>The number of CodeCheck Violations.</p>

    <p>For example, if the violation browser for a file showed these violations:
    </p>

    <ul>
    <li> non-void function does not return a value </li>
    <li> Remove unused global object `name` </li>
    <li> Remove unused local object dummy </li>
    <li>'header.h' file not found. </li>
    </ul>

    <p>Then the value of this metric would be 3 because the fourth violation
    is an analysis error and this metric only counts CodeCheck violations. </p>

    <p>See also <a href="und://plugin/metric/CountAnalysisError">
    CountAnalysisError</a> for a count of analysis errors and
    <a href="und://plugin/metric/CountAnalysisWarning">
    CountAnalysisWarning</a> for a count of analysis warnings.</p>
    """
  if id == "CountCCViolType":
    return """<p>The number of distinct violation types (distinct check ids)</p>

    <p>For example, if the violation browser for a file showed these violations:
    </p>

    <ul>
    <li> non-void function does not return a value </li>
    <li> Remove unused global object `name` </li>
    <li> Remove unused local object dummy </li>
    <li>'header.h' file not found. </li>
    </ul>

    <p>The violation check ids are CPP_WARN_RETURN_TYPE, STI_UNUSED,
    STI_UNUSED, and UND_ERROR. UND_ERROR is an analysis error and not part
    of CodeCheck, so the value of this metric is 2 for CPP_WARN_RETURN_TYPE and
    STI_UNUSED.</p>

    <p>See also <a href="und://plugin/metric/CountAnalysisError">
    CountAnalysisError</a> for a count of analysis errors and
    <a href="und://plugin/metric/CountAnalysisWarning">
    CountAnalysisWarning</a> for a count of analysis warnings.</p>
    """
  if id == "CCViolDensityLine":
    return """<p>The density of CodeCheck Violations by Line</p>

    <p>This metric is calculated as <a href="und://plugin/metric/CountCCViol">
    Number of CodeCheck Violations</a> divided by CountLine. See also
    <a href="und://plugin/metric/CCViolDensityCode">CodeCheck Violation Density
    by Code Lines</a>.</p>
    """
  if id == "CCViolDensityCode":
    return """<p>The density of CodeCheck Violations by Lines of Code</p>

    <p>This metric is calculated as <a href="und://plugin/metric/CountCCViol">
    Number of CodeCheck Violations</a> divided by CountLineCode. See also
    <a href="und://plugin/metric/CCViolDensityLine">CodeCheck Violation Density
    by Lines</a>.</p>
    """

def tags(id):
  return [
    'Target: Functions',
    'Target: Files',
    'Target: Architectures',
    'Target: Project',
    'Language: Any',
    'Line Metric'
  ]

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return id == "CountCCViol" or id == "CountCCViolType"

# One of the following three test functions should return True.
def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check(kind_util.LEXER_ENTS_KIND_STR);

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return True

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  return True

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  # Kind check if requested
  if entkindstr:
    my_kinds = set(kind_util.LEXER_ENTS_KIND_STR)
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # Violation counts are always available
  return True

def test_line(metric):
  """
  Optional, return True if the metric has values for line.

  Values per line are returned as a dictionary from line number to line
  value from the lines function (see below).
  """
  return metric.id() == "CountCCViol" or metric.id() == "CountCCViolType"

def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  viols = []
  if isinstance(target, understand.Arch):
    for ent in target.ents(True):
      viols += ent_violations(ent)
  elif isinstance(target, understand.Db):
    viols = target.violations()
  else:
    viols = ent_violations(target)

  # Since this is for CodeCheck only, remove analysis errors and warnings
  filtered = []
  for v in viols:
    if v.check_id() != "UND_ERROR" and v.check_id() != "UND_WARNING":
      filtered.append(v)

  viols = filtered
  if not viols:
    return 0

  if metric.id() == "CountCCViolType":
    types = set()
    for viol in viols:
      types.add(viol.check_id())
    return len(types)

  div = 0
  if metric.id() == "CCViolDensityLine":
    div = target.metric("CountLine")
  elif metric.id() == "CCViolDensityCode":
    div = target.metric("CountLineCode")

  if div:
    return len(viols) / div
  return len(viols)

def lines(metric, file):
  """
  Optional, return a dictionary from line number to line value.

  This method is called if test_line returns True. The dictionary does
  not have to include values for every line.
  """
  if not file.kind().check("file ~unresolved ~unknown"):
    return

  vlinedict = dict()
  for v in file.violations():
    if v.check_id() not in ["UND_ERROR", "UND_WARNING"]:
      if v.line() not in vlinedict:
        vlinedict[v.line()] = []
      vlinedict[v.line()].append(v)

  linedict = dict()
  if metric.id() == "CountCCViol":
    for line, viols in vlinedict.items():
      linedict[line] = len(viols)
  else:
    for line, viols in vlinedict.items():
      types = set()
      for v in viols:
        types.add(v.check_id())
      linedict[line] = len(types)

  return linedict

def ent_violations(ent):
  if ent.kind().check("file ~unresolved ~unknown"):
    return ent.violations()

  if not ent.kind().check(kind_util.FUNCTION_KIND_STR):
    return [] # Violations not supported

  defref = ent.ref("begin")
  if not defref:
    defref = ent.ref("definein, body declarein")
  endref = ent.ref("end")
  if not defref or not endref or defref.file() != endref.file():
    return []

  viols = []
  for v in defref.file().violations():
    if v.line() >= defref.line() and v.line() <= endref.line():
      viols.append(v)
  return viols


