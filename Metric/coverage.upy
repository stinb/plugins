# A Metrics Plugin that reads lcov info format

import os
import understand

coverageMets = {
  "CoverageLinesFound" : ["Coverage Lines Found", "The number of lines that could have coverage information"],
  "CoverageLinesHit" : ["Coverage Lines Hit", "The number of lines that had coverage hits"],
  "CoverageLinesPercent" : ["Coverage Lines Percentage", "CoverageLinesHit / CoverageLinesFound"],
  "CoverageFunctionsFound" : ["Coverage Functions Found", "The number of functions in the file that could have coverage information"],
  "CoverageFunctionsHit" : ["Coverage Functions Hit", "The number of functions in the file that had coverage hits"],
  "CoverageFunctionsPercent" : ["Coverage Functions Percent", "CoverageFunctionsHit / CoverageFunctionsFound"],
  "CoverageHits" : ["Coverage Hits", "The number of coverage hits for the function"],
}

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return list(coverageMets.keys())

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return coverageMets.get(id,["",""])[0]

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return coverageMets.get(id,["",""])[1]

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return id != "CoverageLinesPercent" and id != "CoverageFunctionsPercent"

# One of the following three test functions should return True.
def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  if not has_coverage(metric.db()):
    return False
  if metric.id() == "CoverageHits":
    return ent.kind().check("function ~unknown ~unresolved")
  else:
    return ent.kind().check("file ~unknown ~unresolved")

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  if not has_coverage(metric.db()):
    return False
  return metric.id() != "CoverageHits"

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  if not has_coverage(metric.db()):
    return False
  return metric.id() != "CoverageHits"

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  # Coverage metrics rely on finding the coverage file from the database
  # name.
  if not has_coverage(metric.db()):
    return False

  # Kind check if requested
  if entkindstr:
    # Coverage metrics are only available for files and functions
    if metric.id() == "CoverageHits":
      my_kinds = set(understand.Kind.list_entity("function ~unknown ~unresolved"))
    else:
      my_kinds = set(understand.Kind.list_entity("file ~unknown ~unresolved"))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # The coverage file was found since has_coverage passed, so metric
  # values are available for some entities, some architectures, and/or
  # the database.
  return True

def test_line(metric):
  """
  Optional, return True if the metric has values for line.

  Values per line are returned as a dictionary from line number to line
  value from the lines function (see below).
  """
  return metric.id() == "CoverageHits" and has_coverage(metric.db())

def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  fileents = []
  if isinstance(target, understand.Db):
    fileents = target.ents("file ~unknown ~unresolved")
  elif isinstance(target, understand.Arch):
    fileents = target.ents(True)
  else: # entity
    if target.kind().check("file"):
      fileents.append(target)
    else:
      # Calculate for a function
      ref = target.ref("definein, body declarin")
      if ref:
        return fileCoverage(metric, ref.file()).functions.get(target.name(),0)
      return 0

  sums = SumMetrics()
  und_cache = findCache(metric)
  if und_cache:
    for ent in fileents:
      sums.addFromCache(ent, und_cache)
  else:
    cov_file = os.path.join(os.path.dirname(metric.db().name()), "coverage.info")
    for cov in scanCoverageFile(cov_file, fileents):
      sums.addCoverageObject(cov)

  return sums.value(metric.id())

def lines(metric, file):
  """
  Optional, return a dictionary from line number to line value.

  This method is called if test_line returns True. The dictionary does
  not have to include values for every line.
  """
  if not file.kind().check("file ~unresolved ~unknown"):
    return

  return fileCoverage(metric,file).lines

def has_coverage(db):
  path = os.path.join(os.path.dirname(db.name()), "coverage.info")
  return os.path.exists(path)

def countFound(countsDict):
  return len(countsDict)

def countHit(countsDict):
  cnt = 0
  for v in countsDict.values():
    if v > 0:
      cnt += 1
  return cnt

class FileCoverage:
  def __init__(self, file):
    self.file = file
    self.lines = dict()
    self.functions = dict()
    self.locations = []

  def processLine(self, text):
    if text == "end_of_record":
      return False # Done with file

    # Line Hits
    if text.startswith("DA:"):
      parts = text[3:].split(',')
      hits = int(parts[1])
      id = parts[0]
      self.lines[id] = self.lines.get(id,0) + hits

    # Function Hits
    if text.startswith("FNDA:"):
      # This probably doesn't work if the same function name exists
      # multiple times in the same file. But it's possible for multiple
      # tests to have different function coverage so we have to track
      # by FNDA instead of FNF and FNH
      parts = text[5:].split(',')
      hits = int(parts[0])
      id = ','.join(parts[1:])
      self.functions[id] = self.functions.get(id,0) + hits

    return True # still in file

  def addToCache(self, cache):
    cache.insert(countFound(self.functions), key="CoverageFunctionsFound", file=self.file)
    cache.insert(countHit(self.functions), key="CoverageFunctionsHit", file=self.file)
    cache.insert(countFound(self.lines), key="CoverageLinesFound", file=self.file)
    cache.insert(countHit(self.lines), key="CoverageLinesHit", file=self.file)
    cache.insert(self.locations, key="seek", file=self.file)

def scanCoverageFile(cov_file, entList):
  # LCOV File format as described here:
  # https://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
  nameToFile = dict()
  for ent in entList:
    if ent.kind().check("file ~unresolved ~unknown"):
      nameToFile[ent.longname()] = ent;

  fileToCoverage = dict()
  curCoverage = None
  curLoc = 0
  with open(cov_file, 'r') as f:
    for line in f:
      text = line.strip()
      if text.startswith("SF:"): # Starting record for file
        fileEnt = nameToFile.get(text[3:])
        if fileEnt: # If tracking this file
          curCoverage = fileToCoverage.setdefault(fileEnt, FileCoverage(fileEnt)) # Set the current coverage
          curCoverage.locations.append(curLoc) # Note record start
      elif curCoverage and not curCoverage.processLine(text):
        curCoverage = None # File ended
      curLoc += len(line)

  return fileToCoverage.values()

def partialScanCoverage(cov_file, curCoverage, locations):
  if not locations:
    return
  with open(cov_file, 'r') as f:
    for loc in locations: # for each record start
      f.seek(loc)
      for line in f: # read lines
        if not curCoverage.processLine(line.strip()):
          break; # Until done with this record

class SumMetrics:
  def __init__(self):
    self.linesHit = 0
    self.linesFound = 0
    self.functionsHit = 0
    self.functionsFound = 0

  def addCoverageObject(self, coverage):
    self.linesHit += countHit(coverage.lines)
    self.linesFound += countFound(coverage.lines)
    self.functionsHit += countHit(coverage.functions)
    self.functionsFound += countFound(coverage.functions)

  def addFromCache(self, file, cache):
    self.linesHit += cache.value(key="CoverageLinesHit", file=file, value=0)
    self.linesFound += cache.value(key="CoverageLinesFound", file=file, value=0)
    self.functionsHit += cache.value(key="CoverageFunctionsHit", file=file, value=0)
    self.functionsFound += cache.value(key="CoverageFunctionsFound", file=file, value=0)

  def value(self, id):
    if id == "CoverageLinesHit":
      return self.linesHit
    if id == "CoverageLinesFound":
      return self.linesFound
    if id == "CoverageLinesPercent":
      return 0 if self.linesFound < 1 else self.linesHit / self.linesFound
    if id == "CoverageFunctionsHit":
      return self.functionsHit
    if id == "CoverageFunctionsFound":
      return self.functionsFound
    if id == "CoverageFunctionsPercent":
      return 0 if self.functionsFound < 1 else self.functionsHit / self.functionsFound

def findCache(metric):
  und_cache = None
  if hasattr(metric, "cache"):
    und_cache = metric.cache()
    if und_cache:
      cov_file = os.path.join(os.path.dirname(metric.db().name()), "coverage.info")

      # Clear cache if coverage file has been updated
      modtime = os.path.getmtime(cov_file)
      if und_cache.value(key="filemod",value=modtime) < modtime:
        und_cache.clear()

      # Build cache if empty
      if und_cache.is_empty():
        entList = metric.db().ents("file ~unknown ~unresolved")
        for coverageObj in scanCoverageFile(cov_file, entList):
          coverageObj.addToCache(und_cache)
        und_cache.insert(modtime, key="filemod")
  return und_cache

def fileCoverage(metric, file):
  cov_file = os.path.join(os.path.dirname(metric.db().name()), "coverage.info")

  und_cache = findCache(metric)
  if und_cache:
    cov = FileCoverage(file)
    partialScanCoverage(cov_file, cov, und_cache.value(key="seek",file=file))
    return cov

  coverages = list(scanCoverageFile(cov_file, [file]))
  if coverages:
    return coverages[0]
  return FileCoverage(file)
