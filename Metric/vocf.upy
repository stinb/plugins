import understand

def ids():
  return ["LanguageScope"]

def name(id):
  return "Language Scope (VOCF)"

def description(id):
  return """<p>The language scope (VOCF) is an indicator of the cost of maintaining/changing functions</p>
  <p>A Hersteller Initiative Software (HIS) metric. It's calculated as:</p>
  <pre>(N1 + N2) / (n1 + n2)</pre>
  <ul>
    <li>N1 = number of unique operators</li>
    <li>n1 = total number of operators</li>
    <li>N2 = number of unique operands</li>
    <li>n2 = total number operands</li>
  </ul>
  <p>See also HalsteadVol</p>
  """

def test_available(metric,entkindstr):
  # Kind check if requested
  if entkindstr:
    my_kinds = set(understand.Kind.list_entity("file,function"))
    test_kinds = set(understand.Kind.list_entity(entkindstr))
    return len(my_kinds.intersection(test_kinds)) > 0

  # Available for any database
  return True

def test_entity(metric, ent):
  """
  Required, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check("file,function")

def value(metric, ent):
  lexemes = []
  try:
    if ent.kind().check("file"):
      lexemes = ent.lexer().lexemes()
    else:
      defref = ent.ref("definein, body declarin")
      endref = ent.ref("end")
      if defref and endref and defref.file() == endref.file():
        lexemes = defref.file().lexer().lexemes(defref.line(), endref.line())
  except understand.UnderstandError:
    pass
  unique_operators = set()
  unique_operands = set()
  total_operators = 0
  total_operands = 0

  for lexeme in lexemes:
    if (lexeme.token() in ["Operator","Keyword","Punctuation"] and
        not lexeme.text() in [')','}',']']):
      unique_operators.add(lexeme.text())
      total_operators += 1;
    elif (lexeme.token() in ["Identifier","Literal","String"]):
      unique_operands.add(lexeme.text())
      total_operands += 1;

  total = total_operators + total_operands
  unique = len(unique_operators) + len(unique_operands)
  if unique <= 0:
    return 0
  return total/unique

