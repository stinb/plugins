import understand

SAMPLE_ARCH_STR= """
    <p>Consider the following sample architecture:</p>
    <ul>
    <li><b>Arch Root</b>
      <ul><li><b>Arch Child</b></li>
        <ul><li><b>Arch GrandChild</b>
          <ul><li>file1.cpp</li></ul>
        <li>file2.cpp</li>
        <li>MyClass</li>
        <li>myFunction</li>
        </ul>
      <li><b>Arch Child 2</b></li>
      </ul>
    </ul>
    <p>Then the metric values would be:<br></p>
    <table>
    <tr><th>Architecture</th><th>Value</th></tr>
    <tr><td>Arch Root</td><td align="right">{}</td></tr>
    <tr><td>Arch Child</td><td align="right">{}</td></tr>
    <tr><td>Arch GrandChild</td><td align="right">{}</td></tr>
    <tr><td>Arch Child 2</td><td align="right">{}</td></tr>
    </table>
  """

def ids():
  return [ "CountArchEnts", "CountArchEntsRecursive", "ArchCurDepth", "ArchMaxChildDepth", "CountArchChildren" ]

def name(id):
  if id == "CountArchEnts":
    return "Entities"
  if id == "CountArchEntsRecursive":
    return "Entities (Recursive)"
  if id == "ArchCurDepth":
    return "Depth"
  if id == "ArchMaxChildDepth":
    return "Max Child Depth"
  if id == "CountArchChildren":
    return "Children"

def description(id):
  if id == "CountArchEnts":
    return "<p>The number of entities directly belonging to this architecture.</p>" + SAMPLE_ARCH_STR.format(0, 3, 1, 0)
  if id == "CountArchEntsRecursive":
    return "<p>The number of entities belonging to this architecture or it's children.</p>" + SAMPLE_ARCH_STR.format(4, 4, 1, 0)
  if id == "ArchCurDepth":
    return "<p>The depth of this architecture in it's tree</p>" + SAMPLE_ARCH_STR.format(0, 1, 2, 1)
  if id == "ArchMaxChildDepth":
    return "<p>The maximum depth of the tree starting from this architecture</p>" + SAMPLE_ARCH_STR.format(2, 1, 0, 0)
  if id == "CountArchChildren":
    return "<p>The number of direct architecture children</p>" + SAMPLE_ARCH_STR.format(2, 1, 0, 0)

def tags(id):
  return [
    'Target: Architectures',
  ]

def is_integer(id):
   return True

def test_architecture(metric, arch):
  return True

def value(metric, arch):
  if metric.id() == "CountArchEnts":
    return len(arch.ents(False))
  if metric.id() == "CountArchEntsRecursive":
    return len(arch.ents(True))
  if metric.id() == "ArchCurDepth":
    return arch.longname().count('/')
  if metric.id() == "ArchMaxChildDepth":
    return maxdepth(arch)
  if metric.id() == "CountArchChildren":
    return len(arch.children())

def maxdepth(arch):
  depth = 0
  for child in arch.children():
    depth = max(depth, maxdepth(child) + 1)
  return depth
