# A Metrics Plugin that reports the lack of cohesion in methods for a given C file [LCOM4]

import understand
import re


def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return ["NestedComplexity"]

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return "Nested Complexity"

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return "The cyclomatic complexity for the given (function, procedure, method) plus the cyclomatic complexity of all called functions recursively."

def tags(id):
  return [
    'Target: Functions, Procedures, Methods',
    'Language: C',
    'Language: C++',
    'Language: Ada',
    'Language: Java',
    'Language: Fortran'
  ]

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return True

# One of the following three test functions should return True.
def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check("Function ~unknown ~unresolved, Procedure ~unknown ~unresolved, Method ~unknown ~unresolved")

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return False

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  return False

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  return True


def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """

  total = 0
  # Add first function to seen
  seen = [target.longname()]
  # Recurse through function calls keeping track of seen and total
  total, seen = recurse(target, total, seen)
  return total



# Recurse through function calls
def recurse(ent, total, seen):
    
  # Add to total if there exists a metric for Cyclomatic Complexity for given function
  if ent.metric("Cyclomatic"):
    total += ent.metric("Cyclomatic")
  # Get function calls
  refs = ent.refs("Call", "Function, Procedure, Method", True)
  for ref in refs:
    # If in seen skip, if not in seen add to seen and recurse
    if ref.ent().longname() not in seen:
      seen.append(ref.ent().longname())
      total, seen = recurse(ref.ent(), total, seen)

  return total, seen

