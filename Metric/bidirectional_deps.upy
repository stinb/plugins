# A Metrics Plugin that reports the number of bidirectional dependencies for a C/C++ class or file

import os
import understand
import re

dependencyMets = {
  "BidirectionalDepsFound" : ["Bidirectional Dependencies Found", "The number of bidirectional dependencies for the class or file"],
  "BidirectionalDepsPercent" : ["Bidirectional Dependency Percentage", "The percentage of dependencies that are bidirectional for the class or file"],
}

def ids():
  """
  Required, a list of metric ids that this script provides

  For example, CountLineCode is a metric id.
  """
  return list(dependencyMets.keys())

def name(id):
  """
  Required, the name of the metric given by id.

  For example, CountLineCode -> "Source Lines of Code"
  """
  return dependencyMets.get(id,["",""])[0]

def description(id):
  """
  Required, the description of the metric given by id

  For example, CountLineCode -> "Number of lines containing source code"
  """
  return dependencyMets.get(id,["",""])[1]

def is_integer(id):
   """
   Optional, return True if the metric value is an integer.

   If this function it not implemented, it is assumed false, meaning the
   value should be represented as a double/float.
   """
   return id != "BidirectionalDepsPercent"

# One of the following three test functions should return True.
def test_entity(metric, ent):
  """
  Optional, return True if metric can be calculated for the given entity.
  """
  return ent.kind().check("c file, class ~unknown ~unresolved")

def test_architecture(metric, arch):
  """
  Optional, return True if metric can be calculated for the given architecture.
  """
  return False

def test_global(metric, db):
  """
  Optional, return True if metric can be calculated for the given database.
  """
  return False

def test_available(metric,entkindstr):
  """
  Optional, return True if the metric is potentially available.

  This is used when there isn't a specific target for the metric, like lists
  of metrics available for export, or for a treemap.

  Use metric.db() to retrieve the database. If the metric is language specific,
  the code might look like this:
    return "Ada" in metric.db().language()

  entkindstr may be empty. If it is empty, return True as long as the metric
  is available for an entity, architecture, or the project as a whole.

  If entkindstr is not empty, return True only if the metric is available for
  entities matching the provided kind string. Kind checks are performed like
  this:
    my_kinds = set(understand.Kind.list_entity(myMetricKindString)
    test_kinds = set(understand.Kind.list_entity(entkindstr)
    return len(my_kinds.intersection(test_kinds)) > 0
  """
  # Coverage metrics rely on finding the coverage file from the database
  # name.

  # Kind check if requested
  return "C++" in metric.db().language()

def value(metric, target):
  """
  Required, return the metric value for the target. The target may be
  an entity, architecture, or database depending on which test functions
  returned True.
  """
  met = dependencyMets.get(metric.id())[0]

  if met == "Bidirectional Dependencies Found":

    # get a dictionary of all dependencies and ents depended on by the class or file
    dep_dict = target.depends()
    depby_dict = target.dependsby()

    bidirectional_deps = 0

    # 1) iter through keys in dependencies, grabbing their value
    # 2) if key is also found in depby dict, grab value
    # 3) compare the two values to check for bidirectional dep
    for key in dep_dict:
      value = str(dep_dict[key])
      print(key, value)
      depby_value = str(depby_dict.get(key, ""))
      print(key, depby_value)
      if re.search(value, depby_value):
        bidirectional_deps += 1

    return bidirectional_deps

  elif met == "Bidirectional Dependency Percentage":
    # get a dictionary of all dependencies and ents depended on by the class or file
    dep_dict = target.depends()
    depby_dict = target.dependsby()

    num_deps = len(dep_dict)

    bidirectional_deps = 0

    # 1) iter through keys in dependencies, grabbing their value
    # 2) if key is also found in depby dict, grab value
    # 3) compare the two values to check for bidirectional dep
    for key in dep_dict:
      value = str(dep_dict[key])
      depby_value = str(depby_dict.get(key, ""))

      if re.search(value, depby_value):
        bidirectional_deps += 1

    if bidirectional_deps == 0:
      return 0
    else:
      percent_bi = ((bidirectional_deps / num_deps) * 100)
      return percent_bi
