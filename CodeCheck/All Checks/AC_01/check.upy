# This script is designed to run with Understand - CodeCheck


import re


ERR1 = 'Function is directly recursive.'
ERR2 = 'Function is indirectly recursive.'


# The ID for the check
def ids():
    return ('A7-5-2', 'MISRA04_16.2', 'MISRA08_7-5-4', 'MISRA12_17.2', 'AC_01', 'MISRA23_17.2', 'MISRA23_8.2.10')


# The short name of the check
def name(id):
    return {
        'A7-5-2': 'Published Standards/AUTOSAR/Functions shall not call themselves, either directly or indirectly.',
        'MISRA04_16.2': 'Published Standards/MISRA-C 2004/16.2 Functions shall not call themselves, either directly or indirectly.',
        'MISRA08_7-5-4': 'Published Standards/MISRA-C++ 2008/7-5-4 Functions should not call themselves, either directly or indirectly.',
        'MISRA12_17.2': 'Published Standards/MISRA C 2012/17.2 Functions shall not call themselves, either directly or indirectly',
        'AC_01': 'All Checks/No Direct or Indirect Recursion',
        'MISRA23_17.2': 'Published Standards/MISRA C 2023/17.2 Functions shall not call themselves, either directly or indirectly',
        'MISRA23_8.2.10': 'Published Standards/MISRA C++ 2023/8.2.10 Functions shall not call themselves, either directly or indirectly'
    }[id]


    

def tags(id):
    return {
        'MISRA08_7-5-4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Advisory',
            'Control Flow',
        ],
        'MISRA12_17.2': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA04_16.2': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Control Flow',
        ],
        'A7-5-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'AC_01': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Control Flow',
        ],
        'MISRA23_17.2': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA23_8.2.10': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Control Flow',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    return {
        'A7-5-2': '''
<p>
Do not use function recursion.
</p>

<p><b>Rationale</b></p>

<p>
As the stack space is limited resource, use of recursion may lead to stack overflow at run-time. It also may limit the scalability and portability of the program.
</p>

<p>
Recursion can be replaced with loops, iterative algorithms or worklists.
</p>

<p><b>Exception</b></p>

<p>
Recursion in variadic template functions used to process template arguments does not violate this rule, as variadic template arguments are evaluated at compile time and the call depth is known.
</p>

<p>
Recursion of a constexpr function does not violate this rule, as it is evaluated at compile time.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A7-5-2.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
static std::int32_t Fn1(std::int32_t number);
static std::int32_t Fn2(std::int32_t number);
static std::int32_t Fn3(std::int32_t number);
static std::int32_t Fn4(std::int32_t number);
std::int32_t Fn1(std::int32_t number)
{
    if (number &gt; 1)
    {
        number = number * Fn1(number - 1); // Non-compliant
    }

    return number;
}
std::int32_t Fn2(std::int32_t number)
{
    for (std::int32_t n = number; n &gt; 1; --n) // Compliant
    {
        number = number * (n - 1);
    }

    return number;
}
std::int32_t Fn3(std::int32_t number)
{
    if (number &gt; 1)
    {
        number = number * Fn3(number - 1); // Non-compliant
    }

    return number;
}
std::int32_t Fn4(std::int32_t number)
{
    if (number == 1)
    {
        number = number * Fn3(number - 1); // Non-compliant
    }

    return number;
}
template &lt;typename T&gt;
T Fn5(T value)
{
    return value;
}
template &lt;typename T, typename... Args&gt;
T Fn5(T first, Args... args)
{
    return first + Fn5(args...); // Compliant by exception - all of the
                                 // arguments are known during compile time
}
std::int32_t Fn6() noexcept
{
    std::int32_t sum = Fn5&lt;std::int32_t, std::uint8_t, float, double&gt;(
    10, 5, 2.5, 3.5); // An example call to variadic template function
    // ...
    return sum;
}
constexpr std::int32_t Fn7(std::int32_t x, std::int8_t n)
{
    if (n &gt;= 0)
    {
        x += x;
        return Fn5(x, --n); // Compliant by exception - recursion evaluated at
                            // compile time
    }
    return x;
}
</code></pre>

<p><b>See also</b></p>

<p>
• MISRA C++ 2008 [7]: Rule 7-5-4 Functions should not call themselves, either directly or indirectly.
</p>

<p>
• JSF December 2005 [8]: AV Rule 119 Functions shall not call themselves, either directly or indirectly (i.e. recursion shall not be allowed).
</p>

<p>
• HIC++ v4.0 [9]: 5.2.2 Ensure that functions do not call themselves, either directly or indirectly.
</p>

<p><b>Developer's Note:</b></p>

<p>
To reduce the amount of violations, non-recursive functions which call recursive functions will not be flagged. Only the recursive functions will be flagged as violations.
</p>

<p>
Understand doesn't have the capabilities to determine how a function pointer is used once it leaves scope, so this check is designed to throw a violation if a function uses its own function pointer in any way.
</p>
''',
        'MISRA04_16.2': '''
<p>
Do not use function recursion.
</p>

<p>
This means that recursive function calls cannot be used in safety-related systems. Recursion carries with it the danger of exceeding available stack space, which can be a serious error. Unless recursion is very tightly controlled, it is not possible to determine before execution what the worst-case stack usage could be.
</p>

<p><b>Developer's Note:</b></p>

<p>
To reduce the amount of violations, non-recursive functions which call recursive functions will not be flagged. Only the recursive functions will be flagged as violations.
</p>

<p>
Understand doesn't have the capabilities to determine how a function pointer is used once it leaves scope, so this check is designed to throw a violation if a function uses its own function pointer in any way.
</p>
''',
        'MISRA08_7-5-4': '''
<p>
Do not use function recursion.
</p>

<p><b>Rationale</b></p>

<p>
Unbounded recursion is likely to lead to a stack over-flow and may impact system timings. This is also the case for an iterative algorithm.
</p>

<p><b>Example</b></p>

<pre><code language="C++">int32_t fn ( int32_t x )
{
    if ( x &gt; 0 )
    {
        x = x * fn ( x - 1 );      // Non-compliant
    }
    return ( x );
}
// File1.cpp
int32_t fn_2 ( int32_t x )
{
    if ( x &gt; 0 )
    {
        x = x * fn_3 ( x - 1 );    // Non-compliant
    }
    return ( x );
}
// File2.cpp
int32_t fn_3 ( int32_t x )
{
    if ( x == 0 )
    {
        x = x * fn_2 ( x - 1 );    // Non-compliant
    }
    return ( x );
}
</code></pre>

<p><b>Developer's Note:</b></p>

<p>
To reduce the amount of violations, non-recursive functions which call recursive functions will not be flagged. Only the recursive functions will be flagged as violations.
</p>

<p>
Understand doesn't have the capabilities to determine how a function pointer is used once it leaves scope, so this check is designed to throw a violation if a function uses its own function pointer in any way.
</p>
''',

        'MISRA12_17.2': '''
<p>
Do not use function recursion.
</p>

<p><b>Rationale</b></p>

<p>
Recursion carries with it the danger of exceeding available stack space, which can lead to a serious failure. Unless recursion is very tightly controlled, it is not possible to determine before execution what the worst-case stack usage could be.
</p>

<p><b>Developer's Note:</b></p>

<p>
To reduce the amount of violations, non-recursive functions which call recursive functions will not be flagged. Only the recursive functions will be flagged as violations.
</p>

<p>
Understand doesn't have the capabilities to determine how a function pointer is used once it leaves scope, so this check is designed to throw a violation if a function uses its own function pointer in any way.
</p>
''',

        'AC_01': '''
<p>
Do not use function recursion.
</p>

<p>
This means that recursive function calls cannot be used in safety-related systems. Recursion carries with it the danger of exceeding available stack space, which can be a serious error. Unless recursion is very tightly controlled, it is not possible to determine before execution what the worst-case stack usage could be.
</p>

<p><b>Developer's Note:</b></p>

<p>
To reduce the amount of violations, non-recursive functions which call recursive functions will not be flagged. Only the recursive functions will be flagged as violations.
</p>

<p>
Understand doesn't have the capabilities to determine how a function pointer is used once it leaves scope, so this check is designed to throw a violation if a function uses its own function pointer in any way.
</p>
''',
        'MISRA23_17.2': '''
<p><b>Rationale</b></p>

<p>
Recursion carries with it the danger of exceeding available stack space, which can lead to a serious failure. Unless recursion is very tightly controlled, it is not possible to determine before execution what the worst-case stack usage could be.
</p>

<p><b>Developer's Note:</b></p>

<p>
To reduce the amount of violations, non-recursive functions which call recursive functions will not be flagged. Only the recursive functions will be flagged as violations.
</p>

<p>
Understand doesn't have the capabilities to determine how a function pointer is used once it leaves scope, so this check is designed to throw a violation if a function uses its own function pointer in any way.
</p>
''',
        'MISRA23_8.2.10': '''
<p><b>Rationale</b></p>
<p>Recursion carries with it the danger of exceeding available stack space, which can lead to a serious failure. Unless recursion is very tightly controlled, it is not possible to determine before execution what the worst-case stack usage could be.</p>
<p>Note: any deviation used to justify non-compliance with this rule will need to explain how stack usage
is to be controlled.</p>

<p><b>Exception</b></p>
<p>A constexpr function that is only called within a core constant expression may be recursive.</p>

<p><b>Example</b></p>
<pre><code language="C++">int32_t fn( int32_t x )
{
 if ( x &gt; 0 )
 {
 x = x * fn( x - 1 ); // Non-compliant
 }
 return x;
}
// File1.cpp
int32_t fn_3( int32_t x );
int32_t fn_2( int32_t x )
{
 if ( x &gt; 0 )
 {
 x = x * fn_3( x - 1 ); // Non-compliant
 }
 return x;
}
// File2.cpp
int32_t fn_2( int32_t x );
int32_t fn_3( int32_t x )
{
 if ( x &gt; 0 )
 {
 x = x * fn_2( x - 1 ); // Non-compliant
 }
 return x;
}
</code></pre>

<p>In the following, the recursion within fn_4 satisfies the requirements of the exception as it is only
called from within a core constant expression.<p>
<pre><code language="C++">constexpr int32_t fn_4( int32_t x )
{
 if ( x &gt; 0 )
 {
 x = x * fn_4( x - 1 ); // Compliant by exception
 }
 return x;
}
constexpr int32_t n = fn_4( 6 ); // Core constant expression
constexpr int32_t fn_5( int32_t x )
{
 if ( x &gt; 0 )
 {
 x = x * fn_5( x - 1 ); // Non-compliant
 }
 return x;
}
int32_t n = fn_5( 6 ); // Not a core constant expression
template&lt; class T &gt;
auto Sum( T t )
{
 return t;
}
template&lt; class T, class ... Vals &gt;
auto Sum( T t, Vals ... vals )
{
 return t + Sum( vals ... ); // Compliant - calls a different overload
}
</code></pre>

<p><b>Developer's Note:</b></p>
<p>
To reduce the amount of violations, non-recursive functions which call recursive functions will not be flagged. Only the recursive functions will be flagged as violations.
</p>
<p>
Understand doesn't have the capabilities to determine how a function pointer is used once it leaves scope, so this check is designed to throw a violation if a function uses its own function pointer in any way.
</p>
''',
    }[id]


# Tests the type of file
def test_entity(file):
    return True


def test_global():
    return False


def test_language(language,id):
    if id == 'AC_01':
        return language in {'Ada', 'C++', 'C#', 'Fortran', 'Java', 'Jovial', 'Pascal', 'Plm', 'Python', 'VHDL', 'Web'}
    else:
        return language in {'C++'}


def define_options(check):
    coreConstExpr = False
    lang = False
    if check.id() == 'MISRA23_8.2.10':
        coreConstExpr = True
    if check.id() == 'AC_01':
        lang = True


    check.option().checkbox('coreConstExpr', 'Flag constexpr function that is not called within a core constant expression', coreConstExpr)
    check.option().checkbox('lang', 'Include other languages besides C and C++', lang)


def check(check, file):    
    coreConstExpr = check.option().lookup('coreConstExpr')
    entKindString = 'C Function' if not check.option().lookup('lang') else 'ada entry, ada function, ada package, ada procedure, ada protected, ada task, c function, csharp method, fortran block data, fortran function, fortran interface, fortran program, fortran subroutine, java method, jovial file, jovial subroutine, pascal compunit, pascal function, pascal procedure, plm procedure, python function, vhdl procedure, vhdl function, vhdl process, vhdl architecture, web function, web method'
    refKindString = 'C Call ~Virtual ~Implicit ~Indirect ~Undresolved, C Use Ptr ~Virtual ~Implicit ~Indirect ~Undresolved' if not check.option().lookup('lang') else 'ada call ~dispatch, c call ~Virtual ~Implicit ~Indirect ~Undresolved, c use ptr ~Virtual ~Implicit ~Indirect ~Undresolved, csharp call ~virtual, csharp use ptr, fortran call, java call, jovial call, jovial asm use, pascal call ~virtual, plm call, python call, vhdl call, web call'
    cache = check.cache()
    if cache.is_empty():
        functions = check.db().ents(entKindString)
        directRecursion = []
        indirectRecursion = []
        seen = []
        for fun in functions:
            stack = []
            if fun.longname() in seen:
                continue
            seen, directRecursion, indirectRecursion = checkRecursion(fun, stack,  directRecursion, indirectRecursion, seen, refKindString, entKindString, coreConstExpr)
        cache.insert(directRecursion, "Direct Recursion")
        cache.insert(indirectRecursion, "Indirect Recursion")

    directRecursions = cache.value("Direct Recursion")
    indirectRecursions = cache.value("Indirect Recursion")
    for ref in file.filerefs('Define', entKindString):
        if ref.ent().longname() in directRecursions:
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
        if ref.ent().longname() in indirectRecursions:
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR2)






# Recursively checks for recursion
def checkRecursion(fun, stack,  directRecursion, indirectRecursion, seen, refKindString, entKindString, coreConstExpr):
    # Return if seen
    if fun.longname() in seen:
        return seen, directRecursion, indirectRecursion 
    is_except = misra_exception(fun) if coreConstExpr else exception(fun)
    if is_except:
        seen.append(fun.longname())
    stack.append(fun.longname())
    # Check if exception
    # Go through function call refs
    for ref in fun.refs(refKindString, entKindString, True):
        # Skip if seen
        if ref.ent().longname() in seen or (ref.ent().kind().check("Template") and isTemplateException(ref, fun)):
            continue
        # Add to list if direct recursion is found
        if ref.ent().longname() == fun.longname() and ref.ent().longname() not in  (directRecursion + indirectRecursion):
            directRecursion.append(fun.longname())
            continue
        # Recursion loop is found
        if ref.ent().longname() in stack:

            # Go through loop and add to list
            if ref.ent().longname() not in (directRecursion + indirectRecursion):
                indirectRecursion.append(ref.ent().longname())
            tempStack = stack
            stackItem = tempStack.pop()
            while stackItem != ref.ent().longname():
                if stackItem not in (directRecursion + indirectRecursion):
                    indirectRecursion.append(stackItem)
                stackItem = tempStack.pop()
            continue
        
        # Recurse
        seen, directRecursion, indirectRecursion = checkRecursion(ref.ent(), stack, directRecursion, indirectRecursion, seen, refKindString, entKindString, coreConstExpr)

        if len(stack) > 0:
            stack.pop()
    # Add to seen
    if fun.longname() not in seen:
        seen.append(fun.longname())
    return seen, directRecursion, indirectRecursion 


# Check for misra exception
def misra_exception(ent):
    if constExprFunction(ent):
        for a_ref in ent.refs("Assignby Value ~Indirect"):
            if a_ref.ent().type() and "const" in a_ref.ent().type():
                return True
    return False

def constExprFunction(ent):
    return ent.contents() and re.match(r'constexpr ', ent.contents())

def exception(ent):
    return variadicTemplateFunction(ent) or constExprFunction(ent)

def variadicTemplateFunction(ent):
    return ent.parameters() and re.search(r',Arge... ', ent.parameters())

# Check for template exception
def isTemplateException(ref, originalEnt):
    if not ref.file().lexer():
        return False
    lexeme = ref.file().lexer().lexeme(ref.line(), ref.column())
    if lexeme:
        lexeme = lexeme.next(True, True)
        if lexeme and lexeme.text() == '(':
            on_param = 0
            param_ctr = 1
            while lexeme:
                if lexeme.text() == '(':
                    on_param += 1
                elif lexeme.text() == ')':
                    on_param -= 1

                    if not on_param:
                        break
                elif on_param == 1 and lexeme.text() == ',':
                    param_ctr += 1
                lexeme = lexeme.next(True, True)

            if len(originalEnt.refs("Define", "Parameters")) != param_ctr:
                if ref.file().name() == 'misra_test.cpp':
                    print(ref.line())
                return True

    return False
