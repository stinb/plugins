use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'VOCF too high(%1)';
use constant OPT1 => "Maximum VOCF level";
use constant OPT2 => "Ignore Inactive Code";
our %known = ();
our $refKinds = "define, ada declare body, vhdl declare";
our $entKinds = "ada entry, ada function, ada procedure, ada protected, ada task,"
   ."c function,"
   ."csharp method,"
   ."fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
   ."java method,"
   ."jovial subroutine,"
   ."pascal compunit, pascal function, pascal procedure,"
   ."vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
   ."web function, web method";
   
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(OPT1);
}


sub checkID { return "AC_HIS_11";}

sub name { return "All Checks\\Language scope (VOCF)";}

sub tags {
  return (
    'Language: Ada',
    'Language: C',
    'Language: C++',
    'Language: C#',
    'Language: Fortran',
    'Language: Jovial',
    'Language: Pascal',
    'Language: VHDL',
    'Metrics'
  );
}

sub description {
  return "Language Scope";
}

sub detailed_description {
  return  <<"END_DESC"
The language scope is an indicator of the cost of maintaining/changing functions.
VOCF = (N1 + N2) / (nl + n2),
where
nl = Number of different operators
N1 = Sum of all Operators
n2 = Number of different  Operands
N2 = Sum of all Operands 

Higher value = similar or duplicated code portions; Calls in/out of sub-functions
need to be considered 

Acceptable Range &lt;= 4

Developer's Note: This check cannot pick up PHP/Javascript functions that are embedded in an html file. They must be placed in a separate .php or .js file.
END_DESC
}

sub test_language {
  return 1;
}

sub test_entity {
  return 1;
}

sub define_options{
 my $check = shift;
 $check->option->integer("maxVOCF",OPT1,4);
 $check->option->checkbox("ignoreInactive",OPT2,1);
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("file");
  %known = ();

  my @definerefs = $file->filerefs($refKinds, $entKinds,1);
  my $maxVOCF = $check->option->lookup("maxVOCF");
  
  foreach my $ref (@definerefs){
    my $ent = $ref->ent;
    my $entVOCF = getVOCF($ent,$check->option->lookup("ignoreInactive"));
    if ($entVOCF > $maxVOCF){
      $check->violation($ent,$ref->file,$ref->line,-1,ERR1,$entVOCF);
    }
  }
  
}

sub getVOCF {
  my $func = shift;
  my $ignoreInactive = shift;
	my $startref = getDeclRef($func);
	my ($endref) = $func->refs("end","",1);
	
	return unless ($startref and $endref);
	my $file = $startref->file;
  my $fileid = $file->id;
  my $lexer = $file->lexer();
  next unless $lexer;
  my $n1=0;
  my $n2=0;
  my $N1=0;
  my $N2=0;
  
  my %n1 = ();
  my %n2 = ();

  foreach my $lexeme ($lexer->lexemes($startref->line(),$endref->line())){
     next if $ignoreInactive && $lexeme->inactive;
     if (($lexeme->token eq "Operator") || ($lexeme->token eq "Keyword") || ($lexeme->token eq "Punctuation"))
     {  
        if ($lexeme->text() !~ /[)}\]]/)
        {
           $n1{$lexeme->text()} = 1;
           $N1++;
        }
     }
     elsif (($lexeme->token eq "Identifier") || ($lexeme->token eq "Literal") || ($lexeme->token eq "String"))
     {
        $n2{$lexeme->text()} = 1;
        $N2++;
     }
  }
  
  $n1 = scalar( keys(%n1));
  $n2 = scalar( keys(%n2));  
  my $returnVal;
  if (($n1+$n2) > 0){
    $returnVal = sprintf("%-.2f",($N1 + $N2)/($n1+$n2));
  }else {
    $returnVal = 0;
  }
  return $returnVal;
}



# return declaration ref (based on language) or 0 if unknown
sub getDeclRef 
{
    my ($ent) =@_;
    my $decl;
    return $decl unless defined ($ent);
    
    ($decl) = $ent->refs("definein","",1);
    ($decl) = $ent->refs("declarein","",1) unless ($decl);
    return $decl;
}
