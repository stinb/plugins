#This script is designed to run with Understand - CodeCheck
use base qw(Understand::Codecheck);
use strict;

use constant OPT1 => 'Disallow %s Characters';
use constant ERR1 => 'Violation: Control Code "%1" found';

# Required - Return the short name of the check
sub name { return "All Checks\\No Control Code Characters";}

sub checkID { return "AC_00";}


sub tags {
  return (
    'Language: Ada',
    'Language: C',
    'Language: C++',
    'Language: C#',
    'Language: Fortran',
    'Language: Java',
    'Language: Jovial',
    'Language: Python',
    'Language: Pascal',
    'Language: VHDL',
    'Language: Web',
    'Identifiers',
  );
}

# Required - Return the short description of the check
sub description { return "Report control code characters that are used in the code";}

# Required - Return the long description of the check
sub detailed_description { return "Find control characters like Form Feed and BEL and report them";}

sub register_tr_text {
	my $check = shift;
	$check->add_tr_text(ERR1);
}

# Required - Test the language of the current file, the check will be 
# skipped if this returns 0
sub test_language {
  my $language = shift;
  #return $language eq "C++"; 
  return 1;
}

# Required - Return 1 if this check will be run on a per-file basis
sub test_entity { return 1;}

# Required - Return 1 if this check should be run on the entire project
# regardless of what files are selected. Should only be used for 
# project-level checks
sub test_global { return 0;}

our %chars = (
	'\x00'=> "0x00 (NUL) Null",
	'\x01'=> "0x01 (SOH) Start of Heading",
	'\x02'=> "0x02 (STX) Start of Text",
	'\x03'=> "0x03 (ETX) End of Text",
	'\x04'=> "0x04 (EOT) End of Transmission",
	'\x05'=> "0x05 (ENQ) Enquiry",
	'\x06'=> "0x06 (ACK) Acknowledgment",
	'\x07'=> "0x07 (BEL) Bell",
	'\x08'=> "0x08 (BS)  Back Space",
	'\x09'=> "0x09 (TAB) Horizontal Tab",
	'\x0A'=> "0x0A (LF)  Line Feed",
	'\x0B'=> "0x0B (VT)  Vertical Tab",
	'\x0C'=> "0x0C (FF)  Form Feed",
	'\x0D'=> "0x0D (CR)  Carriage Return",
	'\x0E'=> "0x0E (SO)  Shift Out / X-On",
	'\x0F'=> "0x0F (SI)  Shift In / X-Off",
	'\x10'=> "0x10 (DLE) Data Line Escape",
	'\x11'=> "0x11 (DC1) Device Control 1 (XON)",
	'\x12'=> "0x12 (DC2) Device Control 2",
	'\x13'=> "0x13 (DC3) Device Control 3 (XOFF)",
	'\x14'=> "0x14 (DC4) Device Control 4",
	'\x15'=> "0x15 (NAK) Negative Acknowledgement",
	'\x16'=> "0x16 (SYN) Synchronous Idle",
	'\x17'=> "0x17 (ETB) End of Transmit Block",
	'\x18'=> "0x18 (CAN) Cancel",
	'\x19'=> "0x19 (EM)  End of Medium",
	'\x1A'=> "0x1A (SUB) Substitute",
	'\x1B'=> "0x1B (ESC) Escape",
	'\x1C'=> "0x1C (FS)  File Separator",
	'\x1D'=> "0x1D (GS)  Group Separator",
	'\x1E'=> "0x1E (RS)  Record Separator",
	'\x1F'=> "0x1F (US)  Unit Separator",
  '\x7F'=> "0x7F (DEL) Delete",
);

our %defaults = (
	'\x00'=> 1,
	'\x01'=> 1,
	'\x02'=> 1,
	'\x03'=> 1,
	'\x04'=> 1,
	'\x05'=> 1,
	'\x06'=> 1,
	'\x07'=> 1,
	'\x08'=> 1,
	'\x09'=> 0,
	'\x0A'=> 0,
	'\x0B'=> 1,
	'\x0C'=> 1,
	'\x0D'=> 0,
	'\x0E'=> 1,
	'\x0F'=> 1,
	'\x10'=> 1,
	'\x11'=> 1,
	'\x12'=> 1,
	'\x13'=> 1,
	'\x14'=> 1,
	'\x15'=> 1,
	'\x16'=> 1,
	'\x17'=> 1,
	'\x18'=> 1,
	'\x19'=> 1,
	'\x1A'=> 1,
	'\x1B'=> 1,
	'\x1C'=> 1,
	'\x1D'=> 1,
	'\x1E'=> 1,
	'\x1F'=> 1,
  '\x7F'=> 1,
);



# Optional - define configurable options for the check.
sub define_options{
  my $check = shift;  
# This object provides access to the following methods to create options:
    foreach my $opt (sort keys %chars){
      my $optText = $chars{$opt};
       $check->option->checkbox("opt$optText",sprintf(OPT1,$optText),$defaults{$opt}) # create a checkbox option
    }
}


# Required - Run the check and return violations if any.
# This is called for each file if test_entity is set to 1 and $file is the Understand::Ent object for the file
# it is also called once with $file set to null if test_global is set to 1
sub check {
  my $check = shift; #The check object, needed to report violations and lookup option values
  my $file = shift;  # Will be empty if test_global set to 1 and test_entity set to 0
  
  # test_entity only runs on files for now, but could change in the future, so force the check to only run on files
  return unless $file->kind->check("file"); 
  
  open (MYFILE, $file->longname);
  my $lineCount = 0;
	while (<MYFILE>) {
    $lineCount++;
		my $line = $_;
    
    return if $check->is_abort();
    
		foreach my $symbol (keys %chars){
      my $charName = $chars{$symbol};
      next unless $line =~ /(.*)$symbol/;
      next unless $check->option->lookup("opt".$chars{$symbol});
      my $col = length($1)+1;
      $check->violation(0,$file,$lineCount,$col,ERR1,$charName); 
		}
	} 
	close (MYFILE);
}
