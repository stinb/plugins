# Report functions which have a depth greater than X.
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => "Called by too many functions (%1)";
use constant OPT1 => "Maximum Calling Functions";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(OPT1);
}

sub checkID { return "AC_HIS_05";}

sub name { return "All Checks\\Calling Functions (CALLING)";}

sub tags {
  return (
    'Language: Ada',
    'Language: C',
    'Language: C++',
    'Language: C#',
    'Language: Fortran',
    'Language: Jovial',
    'Language: Pascal',
    'Language: VHDL',
    'Functions',
  );
}

sub description {
  return "By how many subfunctions is this function called?";
}

sub detailed_description {
  return  <<"END_DESC"
The range 1 to 5 only makes sense when the entire system is analysed. With subsystems and libraries 0 to 5 is permissible. For the complete system there is the exception of main(), since this will only be called by the Start-up-Code. 
Maximum allowed 5

Developer's Note: This check cannot pick up PHP/Javascript functions that are embedded in an html file. They must be placed in a separate .php or .js file.

END_DESC
}

sub test_language {
  my $language = shift;
  return 1;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
  $check->option->integer("MaxCallers",OPT1,5);
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("file");
  my $maxCallers = $check->option->lookup("MaxCallers");

  #Get all the function references
  my @entrefs = $file->filerefs("define, declare body, vhdl declare","ada entry, ada function, ada package, ada procedure, ada protected, ada task,"
     ."c function,"
   ."csharp method,"
   ."fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
   ."java method,"
   ."jovial subroutine,"
   ."pascal compunit, pascal function, pascal procedure,"
   ."python function,"
   ."vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
   ."web function, web method",1);

  foreach my $funcDef (@entrefs){
    my @callers = $funcDef->ent->ents("callby");
    my $callNum = scalar @callers;
    if ($callNum  > $maxCallers) {
      $check->violation($funcDef->ent,$funcDef->file,$funcDef->line,$funcDef->column,ERR1,$callNum);
    }
  }
   
}
