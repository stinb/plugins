use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Too many Parameters (%1)';
use constant OPT1 => "Maximum Number of Parameters Allowed";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(OPT1);
}

sub checkID { return "AC_HIS_07";}

sub name { return "All Checks\\Function Parameters (PARAM)";}

sub tags {
  return (
    'Language: Ada',
    'Language: C',
    'Language: C++',
    'Language: C#',
    'Language: Fortran',
    'Language: Jovial',
    'Language: Pascal',
    'Language: VHDL',
    'Functions',
  );
}

sub description {
  return "Number of function parameters";
}

sub detailed_description {
  return  <<"END_DESC"
How complex is the function interface? Complexity of the function, need for stack. Structures and Arrays hide the complexity in the same way. 
Max: 5
Developer's Note: This check cannot pick up PHP/Javascript functions that are embedded in an html file. They must be placed in a separate .php or .js file.
END_DESC
}

sub test_language {
  return 1;
}

sub test_entity {
  return 1;
}

sub define_options{
 my $check = shift;
 $check->option->integer("maxParams",OPT1,5);
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("file");
  
  my @definerefs = $file->filerefs("define, ada declare body, vhdl declare","ada entry, ada function, ada procedure, ada protected, ada task,"
   ."c function,"
   ."csharp method,"
   ."fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
   ."java method,"
   ."jovial subroutine,"
   ."pascal compunit, pascal function, pascal procedure,"
   ."vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
   ."web function, web method",1);
  my $maxParams = $check->option->lookup("maxParams");
  

  
  foreach my $ref (@definerefs){
    my $ent = $ref->ent;
    my @params = $ent->parameters();
    my $paramCount = grep { $_ ne '...' } @params;
    if ($paramCount > $maxParams){
      $check->violation($ent,$ref->file,$ref->line,-1,ERR1,$paramCount);
    }
  }
}
