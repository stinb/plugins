our %regexptests = (
#Add tests here in the form:
# 'test name' => 'regular expression',
#'Don\'t use the letter a' => '[aA]',
'Integer Types (search SHORT_INTEGER)' => 'SHORT_INTEGER',
'Integer Types (search INTEGER)' => 'INTEGER',
'Integer Types (search LONG_INTEGER)' => 'LONG_INTEGER',
'Integer Types (search LONG_LONG_INTEGER)' => 'LONG_LONG_INTEGER',
'Integer Types (search POSITIVE)' => 'POSITIVE',
'Integer Types (search NATURAL)' => 'NATURAL'
);



#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;
use warnings;


# Required - Return the short name of the check
sub name { return "5.1.5.- Integer Types";}

# Required - return the unique identifier for this check. This should be a unique string not used anywhere else.
sub checkID { return "CC_PLUG_02";}

# Required - Return the short description of the check
sub description { return "Integer Types (Review).";}

# Required - Return the long description of the check
sub detailed_description { return "To modify these tests, edit the start of the file SciTools/conf/plugin/User/Codecheck/Integer Types.upl";}

# Required - Test the language of the current file, the check will be 
# skipped if this returns 0
sub test_language {
  my $language = shift;
  return 1;
}

# Required - Return 1 if this check will be run on a per-entity basis
# Currently only supported on a per-file basis
sub test_entity { return 1;}

# Required - Return 1 if this check should be run on the entire project
# regardless of what files are selected. Should only be used for 
# project-level checks
sub test_global { return 0;}

# Optional - define configurable options for the check.
sub define_options{
  my $check = shift;  
  foreach my $test (keys %regexptests){
    $check->option->checkbox($test,"Run the test: $test",1);
  }
}


# Required - Run the check and return violations if any.
# This is called for each file if test_entity is set to 1 and $file is the Understand::Ent object for the file
# it is also called once with $file set to null if test_global is set to 1
sub check {
  my $check = shift; #The check object, needed to report violations and lookup option values
  my $file = shift;  # Will be empty if test_global set to 1 and test_entity set to 0
  
  # test_entity only runs on files for now, but could change in the future, so force the check to only run on files
  return unless $file->kind->check("file"); 
  my $lineNum = 0;
  
  my $lexer = $file->lexer;
  return unless $lexer;
  
  my $lexeme = $lexer->first;
  return unless $lexeme;
  my $reported = 0;
  LEXEME:foreach my $lexeme($lexer->lexemes()){
    $reported=0 unless $lexeme->token =~ /Comment|Whitespace|Newline/;
    next LEXEME unless $lexeme->token ne "Comment";
    my $comment = $lexeme->text;
    next LEXEME if $comment =~ '^//';
    $comment =~ s'^/\*|^//|\*/$''g; #Strip comment character

  my $lineNum=$lexeme->line_begin;
  #consider each line of the comment separately
  LINE:foreach my $line (split('\n',$comment)){
     $lineNum++;
     foreach my $test (keys %regexptests){
        next unless $check->option->lookup($test);
        if ($line =~ /$regexptests{$test}/i){
          my $lineText = returnLineText($lexeme);
          next if $lineText =~ /range/;
          $check->violation(0,$file,$lineNum-1,-1,$test);
        }
     }
  }
  }
}

# Return the line of text for the given $lexeme
sub returnLineText {
  my $lex = shift;
  my $lineText;
  
  #Move to the start of the line
  while ($lex && $lex->previous && $lex->previous->text !~ /\n/){
    $lex = $lex->previous;
  }
  
  #move to the end of the line and add the text for each line as you go
  while ($lex && $lex->text !~ /\n/){
    $lineText .= $lex->text;
    $lex = $lex->next;
  }
  return $lineText
}