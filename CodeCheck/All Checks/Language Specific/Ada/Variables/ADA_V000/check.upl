# Unused local variables.
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => "Unused Variable";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}



sub checkID { return "ADA_V000";}

sub name { return "All Checks\\Language Specific\\Ada\\Variables\\Unused Variables";}

sub tags {
  return (
    'Language: Ada',
    'Variables',
  );
}

sub description {
  return "Find Variables that are defined but not used.";
}

sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
Local variables that are defined but not used can lead to memory management issues as well as making 
code more difficult to follow. They can also be indicitive of an error where a programmer meant to use 
one variable and accidently used another. This check ignores references inside inactive code (ie #if 0...#endif).</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /Ada/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

# Optional - define configurable options for the check.
sub define_options{
  my $check = shift;
  $check->option->checkbox( 'testParameters', 'Also test parameters' , 1 );
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'Ada File' );

  # loop through local variables
  my @entrefs;
  if ( $check->option->lookup( "testParameters" ) ) {
    @entrefs = $file->filerefs( 'declare ~formal', 'object ~unknown ~unresolved, parameter ~unknown ~unresolved', 1 );
  } else {
    @entrefs = $file->filerefs( 'declare ~formal', 'object ~unknown ~unresolved', 1 );
  }

  foreach my $ref(@entrefs) {
    next if $ref->ent->refs("setby ~init,useby ~inactive, modifyby, callby, instanceof");
    $check->violation($ref->ent,$ref->file,$ref->line,$ref->column,ERR1);
  }
}
