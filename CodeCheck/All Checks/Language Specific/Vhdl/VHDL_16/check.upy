# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 4-4-2023

import re

# The ID for the check
def id():
    return 'VHDL_16'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_16" +  ' Tabs shall not be used for indentation'


def tags(id):
    return {
        'VHDL_16': [
            'Language: VHDL',
            'Styling',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Tabs shall not be used for indentation.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Tabs Shall Not Be Used For Indentation</p>

<p><b>Description</b></p>
<p>
Tabs should be used for indentation in VHDL code for consistency, 
maintainability, and compatibility. Consistent indentation with tabs 
ensures that the code structure remains visually uniform, making it easier 
for multiple developers to collaborate and maintain the codebase. Tabs 
also allow individual developers to adjust their preferred level of 
indentation without altering the code itself, promoting code style 
flexibility. Furthermore, tabs are commonly supported by various text 
editors and coding tools, enhancing compatibility across different 
environments. This practice facilitates a more efficient and collaborative 
development process while avoiding potential formatting issues associated 
with spaces for indentation.
</p>

<p><b>Noncompliant Code Example</b></p>
<p>N/A</p>

<p><b>Developer's Notes</b></p>
<p>The number of spaces to replace each tab can be adjusted above with an optional user input.</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

# Options for the check
def define_options(check):
    check.option().integer('indentation', 'Enter the number of spaces to replace per tab when using the fixit hint', 2)

def test_language(language):
    return language == 'VHDL'

def check(check, file): 
    if not re.search(r'\t', file.contents()):
        return
    if file and file.lexer():
        lexer = file.lexer()
    else:
        return
    lexeme = lexer.first()
    indent = check.option().lookup('indentation')

    while lexeme:
        # Look for the use of tabs for indentation
        if lexeme.token() == 'Whitespace' and re.search(r'\t', lexeme.text()) and lexeme.previous().token() == 'Newline':
            violation = check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), 'Tab was used for indentation')
            violation.add_fixit_hint(lexeme.line_begin(), lexeme.column_begin(), lexeme.line_begin(), lexeme.column_begin() + len(lexeme.text()), (len(lexeme.text()) * indent) * ' ')

        lexeme = lexeme.next(ignore_comments=True);
