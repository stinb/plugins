# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 5-31-2023


# The ID for the check
def id():
    return 'VHDL_14'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_14" +  ' Functions shall not have more than 8 input parameters'


def tags(id):
    return {
        'VHDL_14': [
            'Language: VHDL',
            'Functions',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Functions shall not have more than 8 input parameters.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Functions Shall Not Have More Than 8 Input Parameters</p>

<p><b>Description</b></p>
<p>
Functions in VHDL are ideally kept under 8 input parameters to enhance code 
readability, maintainability, and modularity. This guideline encourages 
cleaner and more understandable code, as functions with numerous parameters 
become harder to read and modify. It also promotes code reuse and reduces 
the likelihood of errors in parameter order or type. Furthermore, simpler 
functions with fewer parameters are easier to manage and are compatible 
with a wider range of tools. While the "less than 8 parameters" guideline 
is common, it's essential to balance it with the specific needs of your 
design, ensuring that the function remains effective and comprehensible.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
architecture rtl of T21_TrafficLights is
 
    -- Enumerated type declaration and state signal declaration
    type t_State is (NorthNext, StartNorth, North, StopNorth,
                        WestNext, StartWest, West, StopWest);
    signal State : t_State;
 
    -- Calculate the number of clock cycles in minutes/seconds
    function CounterVal(Minutes : integer := 0;  -- Violation: CounterVal has 9 input parameters
                        Seconds : integer := 0;
                        Empty_1 : integer := 0;
                        Empty_2 : integer := 0;
                        Empty_3 : integer := 0;
                        Empty_4 : integer := 0;
                        Empty_5 : integer := 0;
                        Empty_6 : integer := 0;
                        Empty_7 : integer := 0) return integer is
        variable TotalSeconds : integer;
    begin
        TotalSeconds := Seconds + Minutes * 60;
        return TotalSeconds * ClockFrequencyHz -1;
    end function;
 
    -- Counter for counting clock periods, 1 minute max
    signal Counter : integer range 0 to CounterVal(Minutes => 1) +1;

    -- [rest of program]
</code></pre>

<p><b>Developer's Notes</b></p>
<p>The parameter limit can be adjusted above with an optional user input.</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def define_options(check):
    check.options().integer('limit', 'Parameter limit: ', 8)

def check(check, file):

    # grab parameter limit, if invalid input is provided return
    param_limit = check.options().lookup('limit')
    if not isinstance(param_limit, int):
        return

    # grab all functions and check their parameters
    for func in file.filerefs("Declare, Define", "Function"):
        params_string = func.ent().parameters()
        params_list = params_string.split(",")
        num_params = len(params_list)

        if num_params > param_limit:
            check.violation(file, file, func.line(), func.column(), "Number of input parameters exceeds the selected limit (%1)", param_limit)
