# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 8-3-2023

ERR1 = "Hard coded numeric value used"
VALID_LEXEMES = [":=", "<=", "=>", "to", "range", "downto", "("]

# The ID for the check
def id():
    return 'VHDL_8'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_8" +  ' Hard coded numeric values'


def tags(id):
    return {
        'VHDL_8': [
            'Language: VHDL',
            'Variables',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Hard coded numeric values should be avoided.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Hard-coded Numeric Values</p>

<p><b>Description</b></p>
<p>
Hard-coded numeric values should be avoided. Using named constants instead
makes the code more readable and maintainable. It also facilitates changes 
to the data pattern if needed.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
-- Hard-coded numeric values
signal data : std_logic_vector(7 downto 0);
data <= "10101010";

-- Named constants
constant DATA_PATTERN : std_logic_vector(8 downto 1) := "10101010";
signal data : std_logic_vector(7 downto 0);
data &lt;= DATA_PATTERN(7 downto 0);
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file): 
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        # grab all literal values
        if lexeme.token() == "Literal":
            ok = False

            # filter out assignment operators := and <=, and common loop keywords
            prev_lex = lexeme.previous(True, True)

            if prev_lex and prev_lex.text() in VALID_LEXEMES:
                ok = True

            if ok == False:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

        lexeme = lexeme.next()

