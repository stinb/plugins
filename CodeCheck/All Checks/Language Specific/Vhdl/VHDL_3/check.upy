# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 7-12-2023

ERR1 = "Output port %1 is not connected"

# The ID for the check
def id():
    return 'VHDL_3'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_3" +  ' Unconnected output ports'


def tags(id):
    return {
        'VHDL_3': [
            'Language: VHDL',
            'Declarations and Definitions',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Unconnected output ports.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Unconnected Output Ports</p>

<p><b>Description</b></p>
<p>identifying and connecting all output ports in VHDL code is important to 
ensure correct functionality, aid in debugging, maintain code quality, and 
prevent unexpected issues in synthesis and simulation. It's a fundamental 
aspect of writing robust and reliable VHDL designs.</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
entity UnconnectedOutput is
    Port ( A : in STD_LOGIC;
           B : out STD_LOGIC;  -- Output port B is unconnected
           C : out STD_LOGIC);  -- Output port C is also unconnected
end UnconnectedOutput;

architecture Example of UnconnectedOutput is
begin
    -- Some logic using A
end Example;
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file):
    # grab all declarations
    for port_ref in file.filerefs("Declare, Define", "Vhdl Out Port", False):
        port_ent = port_ref.ent()
        if not port_ent.refs("Vhdl Mapby, Vhdl Setby"):
            check.violation(port_ent, file, port_ref.line(), port_ref.column(), ERR1, port_ent)
        
    
