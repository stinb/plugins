# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 8-2-2023

import re

# The ID for the check
def id():
    return 'VHDL_21'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_21" +  ' Duplicate statements in a case statement'


def tags(id):
    return {
        'VHDL_21': [
            'Language: VHDL',
            'Control Flow',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Duplicate statements in a case statement.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Duplicate Statements in a Case Statement</p>

<p><b>Description</b></p>
<p>
Duplicate statements inside a "case" statement in VHDL code should be avoided 
to enhance code readability, maintainability, and to reduce the risk of 
errors. When the same statement appears in multiple branches of a "case" 
statement, it can lead to code redundancy and increased complexity. If a 
change is needed in the duplicated statement, you would need to update it 
in multiple places, making maintenance error-prone and time-consuming. By 
avoiding duplicates, you create a more modular and efficient design, reducing 
the chance of inconsistencies and improving code comprehension, making the 
codebase easier to manage and maintain.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
case sel is
  when "00" =>
    signalA &lt;= '1';
  when "01" =>
    signalA &lt;= '0';
  when others =>
    signalA &lt;= '1';  -- Duplicate statement
end case;
</code></pre>

'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file):

    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    statement_count = 0
    # find a case 'when' statement
    while lexeme:
        if lexeme.text() == "when" and lexeme.token() == "Keyword":

            temp_lex = lexeme.next(True, True)
            viol_lex = temp_lex

            while temp_lex and temp_lex.text() != "when" and temp_lex.text() != "end":
                if temp_lex.text() == ";" and temp_lex.token() == "Punctuation":
                    statement_count += 1

                temp_lex = temp_lex.next(True, True)

            if statement_count > 1:
                check.violation(file, file, viol_lex.line_begin(), viol_lex.column_begin(), "Too many statements in this case statement")

        # reset statement count
        statement_count = 0
        lexeme = lexeme.next(True, True)
