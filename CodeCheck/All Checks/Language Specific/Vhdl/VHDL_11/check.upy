# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-12-2023

# The ID for the check
def id():
    return 'VHDL_11'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_11" +  ' Nested case statements'


def tags(id):
    return {
        'VHDL_11': [
            'Language: VHDL',
            'Control Flow',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Nested case statements.'

# The long description of the check
# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Nested Case Statements</p>

<p><b>Description</b></p>
<p>
Case statements should not be nested more than three levels deep.
As the number of nested case statements increases, code can become 
difficult to read and maintain. It may be hard to visualize the control 
flow and understand the logic, especially when dealing with deeply nested 
structures.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
begin
    process (input1, input2, input3, input4)
    begin
        case input1 is
            when '0' =>
                case input2 is
                    when '0' =>
                        case input3 is
                            when '0' =>
                                case input4 is  -- case statement nested 4 deep
                                    when '0' =>
                                        output <= '0';
                                    when others =>
                                        output <= '1';
                                end case;
                            when others =>
                                output <= '1';
                        end case;
                    when others =>
                        output <= '1';
                end case;
            when '1' =>
                output <= '1';
            when others =>
                output <= '0';
        end case;
    end process;
end Behavioral;
</code></pre>

<p><b>Developer's Notes</b></p>
<p>The depth limit of nested case statements can be adjusted above with an optional user input.</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

# define option to set nested case statement limit
def define_options(check):
    check.option().integer("limit", "Nested case statement limit: ", 3)

def check(check, file):
    if file.lexer():
        lexer = file.lexer()
    else:
        return
    lexeme = lexer.first()
    limit = check.option().lookup("limit")

    # track how many statements deep we are
    case_stmt_depth = 0

    while lexeme:

        if is_case(lexeme):
            case_stmt_depth += 1

        elif is_endcase(lexeme):
            case_stmt_depth -= 1

        if case_stmt_depth > limit:
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Nested case statement limit (%1) surpassed", limit)
            return         

        lexeme = lexeme.next(True, True)


def is_case(lex):
    case_stmt = False
    if (lex and lex.token() == "Keyword" and lex.text() == ("case" or "CASE")) and not \
    (lex.previous().token() == "Keyword" and lex.previous().text() == ("end" or "END")):
        case_stmt = True
    return case_stmt


def is_endcase(lex):
    endcase = False
    if (lex and lex.token() == "Keyword" and lex.text() == ("end" or "END")) and \
    (lex.next().token() == "Keyword" and lex.next().text() == ("case" or "CASE")):
        endcase = True
    return endcase