# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 6-27-2023

import re

# The ID for the check
def id():
    return 'VHDL_20'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_20" +  ' Nested if statements'


def tags(id):
    return {
        'VHDL_20': [
            'Language: VHDL',
            'Control Flow',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Nested if statements.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Nested If Statements</p>

<p><b>Description</b></p>
<p>

In VHDL code, it's recommended to avoid nesting "if" statements more than 6 
levels deep for the sake of code maintainability and clarity. Deeply nested 
"if" statements can quickly lead to overly complex and hard-to-read code, 
making it challenging to understand and modify. Limiting nesting to 6 levels 
promotes a more structured and comprehensible design, where the logic can 
be broken down into more manageable and modular units. It also reduces the 
potential for errors and oversights during coding, testing, and debugging, 
enhancing the overall quality of the VHDL codebase.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
process is
begin

    if NumOne > 100 then
        if NumTwo > 100 then
            if NumThree > 100 then
                if NumFour > 100 then
                    if NumFive > 100 then
                        if NumSix > 100 then
                            if NumSeven > 100 then
                                report "All numbers are larger than 100";
                            end if;
                        end if;
                    end if;
                end if;
            end if;
        end if;
    end if;
    
    wait on NumOne, NumTwo, NumThree, NumFour, NumFive, NumSix, NumSeven;
</code></pre>

<p><b>Developer's Notes</b></p>
<p>The nested if statement limit can be adjusted above with an optional user input.</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

# define option to set nested if statement limit
def define_options(check):
    check.option().integer("limit", "Nested if statement limit: ", 6)

def check(check, file):

    if file.lexer():
        lexer = file.lexer()
    else:
        return
    lexeme = lexer.first()
    limit = check.option().lookup("limit")

    # track how many statements deep we are
    if_stmt_depth = 0

    while lexeme:

        if is_if(lexeme):
            if_stmt_depth += 1

        elif is_endif(lexeme):
            if_stmt_depth -= 1

        if if_stmt_depth > limit:
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Nested if statement limit (%1) surpassed", limit)
            return         

        lexeme = lexeme.next(True, True)


def is_if(lex):
    if_stmt = False
    if (lex and lex.token() == "Keyword" and lex.text() == ("if" or "IF")) and not \
    (lex.previous().token() == "Keyword" and lex.previous().text() == ("end" or "END")):
        if_stmt = True
    return if_stmt


def is_endif(lex):
    endif = False
    if (lex and lex.token() == "Keyword" and lex.text() == ("end" or "END")) and \
    (lex.next().token() == "Keyword" and lex.next().text() == ("if" or "IF")):
        endif = True
    return endif
