# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 12-04-2024

ERR1 = "Process '%1' on line %2 should be labeled"

# The ID for the check
def id():
    return 'VHDL_28'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_28" +  ' Unlabeled Processes'


def tags(id):
    return {
        'VHDL_28': [
            'Language: VHDL',
            'Declarations and Definitions',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Unlabeled processes.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Unlabeled Processes</p>

<p><b>Description</b></p>
<p>Labeling a process properly should make the description clearer and assist in 
arranging the simulation environment. That is, during simulation, unlabeled 
processes are likely to be displayed as line numbers and it’s often easier for 
a human to know what to do regarding process ‘proc_in_queue’ rather than process 
line ‘243’.
<br><br>
Please see https://cwe.mitre.org/data/definitions/1076.html for more information.</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
architecture Behavioral of test_processes is
begin
    -- Labeled process
    labeled_process : process(clk, reset)
    begin
        if reset = '1' then
            output_labeled &lt;= '0';
        elsif rising_edge(clk) then
            output_labeled &lt;= not output_labeled;
        end if;
    end process labeled_process;

    -- Unlabeled process
    process(clk, reset)  -- Violation, unlabeled process
    begin
        if reset = '1' then
            output_unlabeled &lt;= '0';
        elsif rising_edge(clk) then
            output_unlabeled &lt;= not output_unlabeled;
        end if;
    end process;
end Behavioral;
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''


# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file):
    # grab all process declatations
    for decl_ref in file.filerefs("Declare", "Process"):
        decl_ent = decl_ref.ent()
        ent_name = decl_ent.name()
        ent_longname = decl_ent.longname()

        # check that the process has not been labeled, flag
        if ent_name == "[anon]":
            check.violation(decl_ent, file, decl_ref.line(), decl_ref.column(), ERR1, ent_longname, decl_ref.line())
    
