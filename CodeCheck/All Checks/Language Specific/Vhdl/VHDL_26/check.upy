# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 5-24-2023

# The ID for the check
def id():
    return 'VHDL_26'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_26" +  ' Do not use Wait'


def tags(id):
    return {
        'VHDL_26': [
            'Language: VHDL',
            'Control Flow',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not use Wait.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Do Not Use Wait</p>

<p><b>Description</b></p>
<p>
The "wait" statement in VHDL is valuable for modeling time-based delays and 
synchronization in simulation and testbench environments but should be used 
cautiously or avoided in synthesizable VHDL code intended for hardware 
description. Synthesis tools typically do not support "wait" statements in 
synthesizable code, which can result in synthesis errors and unwanted hardware 
structures. VHDL is primarily geared toward describing concurrent hardware 
behavior, and "wait" introduces sequential behavior that may not accurately 
represent the intended hardware structure. Using alternative constructs like 
state machines, clocked processes, or combinational logic is typically more 
appropriate for synthesizable code, allowing for more efficient and accurate 
hardware description.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
entity wait_statement is
end wait_statement;
 
architecture behave of wait_statement is
 
  constant c_CLK_PERIOD : time := 10 ns;  -- 100 MHz
 
  signal r_RESET  : std_logic := '1';   -- start in reset
  signal r_CLK_TB : std_logic := '0';
   
begin
 
  -- Demonstrates: WAIT FOR
  -- Generates a clock that is used by the test bench.
  p_CLK : process
  begin
    r_CLK_TB &lt;= not(r_CLK_TB);
    wait for c_CLK_PERIOD/2;
  end process p_CLK;
 
   
  -- Demonstrates: WAIT ON
  p_RESET : process
  begin
    wait on r_CLK_TB;                   -- look for first clock
 
    wait until r_CLK_TB'event and r_CLK_TB = '1';
 
    r_RESET &lt;= '0' after 40 ns;         -- relese reset
 
    wait;                               -- wait forever
  end process;
 
 
  -- Main Test Bench Process
  process is
  begin
 
    -- Demonstrates: WAIT UNTIL
    wait until r_RESET = '0';
     
    wait;                               -- example of a wait forever
  end process;  
   
end behave;
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file): 
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    lines_seen = set()

    while lexeme:
        if lexeme.text() == "wait" and lexeme.token() == "Keyword":
            line = lexeme.line_begin()
            if line not in lines_seen:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Wait statement used")
                lines_seen.add(line)

        lexeme = lexeme.next()
