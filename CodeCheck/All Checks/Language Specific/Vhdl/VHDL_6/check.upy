# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 6-7-2023

# The ID for the check
def id():
    return 'VHDL_6'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_6" +  ' Inference of latches'


def tags(id):
    return {
        'VHDL_6': [
            'Language: VHDL',
            'Control Flow',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Inference of latches.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Inference of Latches</p>

<p><b>Description</b></p>
<p>
It's essential to avoid unintentional latch inference in VHDL code, because 
latches can lead to timing and functionality issues. Therefore, it's crucial 
to design your code in a way that ensures predictable and reliable behavior, 
typically by using flip-flops instead of latches for sequential logic elements.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
process (clk)
begin
  if rising_edge(clk) then
    if (reset = '1') then
      q &lt;= '0';
    else
      q &lt;= d;
    end if;
  end if;
end process;
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file):
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        # if an if statement is found
        if lexeme.text() == ("IF" or "if") and lexeme.previous(True, True).text() != ("END" or "end") and lexeme.token() == "Keyword":
            else_found = False

            # look for else before the end if statement
            travelling_lex = lexeme
            while travelling_lex and travelling_lex.next(True, True) and travelling_lex.next(True, True).next(True, True)\
            and not (travelling_lex.text() == ("END" or "end") and travelling_lex.token() == "Keyword"\
            and travelling_lex.next(True, True).text() == ("IF" or "if") and travelling_lex.next(True, True).token() == "Keyword"):
                if travelling_lex.text() == ("ELSE" or "else"):
                    else_found = True

                travelling_lex = travelling_lex.next(True, True)

            if else_found == False:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Latch inference found")

        lexeme = lexeme.next()
