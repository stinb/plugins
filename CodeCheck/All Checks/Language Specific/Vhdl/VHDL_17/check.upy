# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 6-6-2023


# The ID for the check
def id():
    return 'VHDL_17'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_17" +  ' Files shall not have more than 4500 executable statements'


def tags(id):
    return {
        'VHDL_17': [
            'Language: VHDL',
            'Metrics',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Files shall not have more than 4500 executable statements.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Files Shall Not Have More Than 4500 Executable Statements</p>

<p><b>Description</b></p>
<p>
A VHDL file is typically recommended not to have more than 4500 executable 
statements to maintain code manageability and readability. Excessively large 
files become challenging to comprehend, modify, and debug. Keeping the number 
of executable statements within this limit encourages modular and focused 
designs, making it easier to identify and address issues. It also promotes 
efficient testing and debugging by isolating specific functionality into 
smaller, more manageable units. Additionally, smaller files are more likely 
to be reusable in different projects, promoting a more organized and 
maintainable codebase. The guideline aims to strike a balance between the 
complexity of the design and maintaining code that is comprehensible and 
maintainable.
</p>

<p><b>Noncompliant Code Example</b></p>
<p>N/A</p>

<p><b>Developer's Notes</b></p>
<p>The executable statement limit can be adjusted above with an optional user input.</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def define_options(check):
    check.options().integer('limit', 'Maximum number of executable statements: ', 4500)

def check(check, file):
    # grab executable statement limit and number of executable statements in file
    statement_limit = check.options().lookup('limit')
    metrics = file.metric(("CountStmtExe",))
    num_statements = metrics["CountStmtExe"]

    if num_statements > statement_limit:
        check.violation(file, file, 1, 1, "File exceeds maximum number of executable statements (%1)", statement_limit)
