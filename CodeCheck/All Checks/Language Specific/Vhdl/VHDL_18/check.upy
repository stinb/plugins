# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 6-13-2023

# The ID for the check
def id():
    return 'VHDL_18'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_18" +  ' There shall not be multiple statements on a single line'


def tags(id):
    return {
        'VHDL_18': [
            'Language: VHDL',
            'Styling',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'There shall not be multiple statements on a single line.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>There Shall Not Be Multiple Statements on a Single Line</p>

<p><b>Description</b></p>
<p>
In VHDL code, multiple statements on a single line should be avoided for the 
sake of readability, maintainability, and debugging. Each statement in VHDL 
typically represents a specific action or operation, and putting multiple 
statements on a single line can make the code appear cluttered and hard to 
follow. It becomes challenging to identify and isolate individual actions or 
errors, especially in complex designs. By keeping each statement on a separate 
line, the code becomes more self-explanatory and allows for clear 
identification of issues during debugging. This practice also promotes 
consistency and aligns with established coding standards, making it easier 
for teams to collaborate on projects and maintain code quality.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
signal A, B : std_logic := '0';  -- Multiple signal declarations on one line
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file): 
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    lines_seen = set()

    while lexeme:
        if lexeme.text() == ";" and lexeme.token() == "Punctuation":
            line = lexeme.line_begin()
            if line in lines_seen:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Multiple statements on a single line")
            else:
                lines_seen.add(line)

        lexeme = lexeme.next()
