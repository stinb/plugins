# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 6-1-2023

ERR1 = "maximum characters (%1) exceeded"

# The ID for the check
def id():
    return 'VHDL_15'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_15" +  ' Source code line length shall not exceed 150 characters'


def tags(id):
    return {
        'VHDL_15': [
            'Language: VHDL',
            'Metrics',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Source code line length shall not exceed 150 characters.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Source Code Line Length</p>

<p><b>Description</b></p>
<p>
The guideline suggesting that VHDL code files should remain under 150 lines is a 
best practice rather than a strict rule. Shorter code files enhance readability, 
modularity, ease of maintenance, and efficient testing and debugging. They 
encourage a focused, modular design that can be more easily understood and 
managed. However, this guideline is not absolute and can be flexible depending 
on the complexity of the design. The goal is to strike a balance between brevity 
and maintaining a clear, organized, and manageable codebase.
</p>

<p><b>Noncompliant Code Example</b></p>
<p>N/A</p>

<p><b>Developer's Notes</b></p>
<p>The line length limit can be adjusted above with an optional user input.</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def define_options(check):
    check.options().integer('length', 'Maximum line length: ', 150)

def check(check, file):
    length = check.option().lookup('length')
    
    lexer = file.lexer()
    if not lexer:
        return
    lines = lexer.lines()
   
    # go through all lines in the file
    for i in range(lines):
        lexemes = lexer.lexemes(i+1,i+1) #Add 1 to i because i starts at 0, but there is no 0 line. 
        
        first_lexeme = False #initializing first_lexeme and end_lexeme to False
        end_lexeme = False

        # As we iterate through the lexemes, we changes the end_lexeme to the current one if it's not a comment, whitespace, or newline
        for lex in lexemes:
            if first_lexeme==False and lex.token()!='Whitespace' and lex.token() != 'Comment':
                first_lexeme = lex #setting both to the current lexeme
                end_lexeme = lex 
            elif lex.token()!='Comment' and lex.token()!='Whitespace' and lex.token()!='Newline':
                end_lexeme=lex
        if first_lexeme:
            # Manually seeing how many columns are really used. Ignoring leading whitespace.
            columns = end_lexeme.column_end()-first_lexeme.column_begin() 
            if columns>length:
                check.violation(file,file,end_lexeme.line_begin(),end_lexeme.column_end(), ERR1, length)
