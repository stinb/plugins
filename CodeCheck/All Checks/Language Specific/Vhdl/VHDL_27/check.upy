# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 5-23-2023

import re

DELAY_MECHS = ["transport", "inertial", "after", "reject"]

# The ID for the check
def id():
    return 'VHDL_27'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_27" +  ' Do not use Delay'


def tags(id):
    return {
        'VHDL_27': [
            'Language: VHDL',
            'Control Flow',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Do not use Delay.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Do Not Use Delay</p>

<p><b>Description</b></p>
<p>
The "delay" statement should not be used in VHDL code for several reasons. 
First, "delay" statements are typically not synthesizable and may lead 
to synthesis errors, as they introduce time-based delays that are not 
well-suited for hardware description. VHDL is primarily designed for 
concurrent hardware modeling, and the introduction of explicit time delays 
can result in inaccuracies in the hardware description. Additionally, 
"delay" statements can hinder portability, as different synthesis tools 
and platforms may handle them differently, making the code less reliable 
and harder to maintain. In practice, modeling time-based behavior in 
VHDL is better achieved through simulation-specific constructs and not 
in synthesizable code, which should focus on describing the hardware's 
logical and structural behavior.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
B_OUT &lt;= transport B_IN after 1 ns;  -- Example 1: Transport delay

L_OUT &lt;= inertial L_IN after 1 ns;   -- Example 2: Inertial delay

Q_OUT &lt;= reject 500 ps inertial Q_IN after 1 ns;  -- Example 3: Inertial delay with rejection limit
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''


# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file): 
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    lines_seen = set()

    while lexeme:
        if lexeme.text() in DELAY_MECHS and lexeme.token() == "Keyword":
            line = lexeme.line_begin()
            if line not in lines_seen:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Delay mechanism used")
                lines_seen.add(line)

        lexeme = lexeme.next()
