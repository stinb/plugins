# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 5-24-2023

# The ID for the check
def id():
    return 'VHDL_24'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_24" +  ' Do not use While loop'


def tags(id):
    return {
        'VHDL_24': [
            'Language: VHDL',
            'Control Flow',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not use While loop.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Do Not Use While Loop</p>

<p><b>Description</b></p>
<p>
While loops  should be used with caution and are generally avoided in 
synthesizable hardware description. In VHDL, the primary focus is often
on describing the behavior of hardware, and the code is typically 
executed in parallel rather than sequentially. While loops can introduce 
sequential execution behavior, which is not the primary purpose of VHDL.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
architecture sim of T05_WhileLoopTb is
begin

    process is
        variable i : integer := 0;
    begin

        while i < 10 loop  -- while loop used
            report "i=" & integer'image(i);
            i := i + 2;
        end loop;
        wait;

    end process;

end architecture;
</code></pre>

'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file): 
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    lines_seen = set()

    while lexeme:
        if lexeme.text() == "while" and lexeme.token() == "Keyword":
            line = lexeme.line_begin()
            if line not in lines_seen:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "While loop used")
                lines_seen.add(line)

        lexeme = lexeme.next()
