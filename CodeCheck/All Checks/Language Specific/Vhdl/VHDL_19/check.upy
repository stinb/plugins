# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 5-25-2023

KEYWORDS = ["if", "else", "elsif"]

# The ID for the check
def id():
    return 'VHDL_19'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_19" +  ' Else and Elsif statements shall be on their own lines'


def tags(id):
    return {
        'VHDL_19': [
            'Language: VHDL',
            'Styling'
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Else and Elsif statements shall be on their own lines.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Else and Elsif Statements Shall Be on Their Own Lines</p>

<p><b>Description</b></p>
<p>
In VHDL code, it's advisable to place "else" and "elsif" statements on their 
own lines for the sake of readability and code maintainability. Doing so 
enhances code clarity by visually separating conditional branches, making it 
easier to distinguish different decision points in the code. When "else" and 
"elsif" statements are on separate lines, it promotes a structured and 
organized coding style, which is particularly important in complex designs. 
This practice also simplifies debugging and error identification since each 
branch is clearly delineated, reducing the chances of oversight or 
misinterpretation during code review and maintenance.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
process is
begin

    if CountUp > CountDown then report "CountUp is larger"; elsif CountUp &lt; CountDown then -- invalid, elsif statement must be on its own line
        report "CountDown is larger";
    else
        report "They are equal";
    end if;

    wait on CountUp, CountDown;

end process;
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file): 
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    lines_seen = set()

    while lexeme:
        if lexeme.text() in KEYWORDS and lexeme.token() == "Keyword":
            line = lexeme.line_begin()
            if line in lines_seen:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Else or Elsif statement must be on its own line")
            else:
                lines_seen.add(line)

        lexeme = lexeme.next()
