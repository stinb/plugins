# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 9-27-2023

import re

VHDL_KEYWORDS = [
    "access", "after", "alias", "all", "and", "architecture", "array", "assert",
    "attribute", "begin", "block", "body", "buffer", "bus", "case", "component",
    "configuration", "constant", "disconnect", "downto", "else", "elsif", "end",
    "entity", "exit", "file", "for", "function", "generate", "generic", "group",
    "guarded", "if", "impure", "in", "inertial", "inout", "is", "label", "library",
    "linkage", "literal", "loop", "map", "mod", "nand", "new", "next", "nor", "not",
    "null", "of", "on", "open", "or", "others", "out", "package", "port", "postponed",
    "procedure", "process", "pure", "range", "record", "register", "reject", "rem",
    "report", "return", "rol", "ror", "select", "severity", "signal", "shared", "subtype", 
    "then", "to", "transport", "type", "unaffected", "units", "until", "use", "variable", 
    "wait", "when", "while", "with", "xnor", "xor"
]

VHDL_OPERATORS = [
    '+', '-', '*', '/', '**', 'mod',
    '=', '/=', '!=', '<', '<=', '>', '>=',
    'and', 'or', 'not', 'nand', 'nor', 'xor', 'xnor',
    'sll', 'srl', 'sla', 'sra',
    '&',
    'and', 'or', 'nand', 'nor', 'xor', 'xnor',
    'when'
]


# The ID for the check
def id():
    return 'VHDL_12'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_12" +  ' Commented out code'

def tags(id):
    return {
        'VHDL_12': [
            'Language: VHDL',
            'Styling',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Commented out code.'


# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Commented Out Code</p>

<p><b>Description</b></p>
<p>
Identifying and managing commented-out code is crucial for code cleanliness, 
maintainability, collaboration, and the overall health of a software project. 
It is a good practice to periodically review and remove unnecessary commented-out 
code to keep the codebase lean and efficient.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
architecture Behavioral of SampleEntity is
begin
  -- C &lt;= A AND B;

  -- Normal comment will not be flagged
  -- C &lt;= A OR B;

  -- if A = '1' then
  --   C &lt;= B;
  -- else
  --   C &lt;= '0';
  -- end if;

  -- process(A)
  -- begin
  --   if rising_edge(A) then
  --     C &lt;= not C;
  --   end if;
  -- end process;
end Behavioral;
</code></pre>

'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file):
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:

        if lexeme.token() == "Comment":
            comment = lexeme.text()
            op_present = False
            kw_present = False

            for kw in VHDL_KEYWORDS:
                regex = r"(\s|\-\-)" + re.escape(kw) + r"\s"

                if re.search(regex, comment, re.IGNORECASE):
                    kw_present = True

            for op in VHDL_OPERATORS:
                regex = r"\s" + re.escape(op) + r"\s"

                if re.search(regex, comment, re.IGNORECASE):
                    op_present = True

            if kw_present or op_present:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), comment)

        lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=False)
