# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 8-2-2023

import re

# The ID for the check
def id():
    return 'VHDL_22'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_22" +  ' Incomplete case statements'


def tags(id):
    return {
        'VHDL_22': [
            'Language: VHDL',
            'Control Flow',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Incomplete case statements'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Incomplete Case Statements</p>

<p><b>Description</b></p>
<p>
Incomplete "case" statements in VHDL code should be avoided because they can 
lead to unpredictable behavior and make the code difficult to understand 
and maintain. Incomplete cases may not cover all possible values, introducing 
the risk of unexpected outcomes when the code encounters unhandled conditions. 
This can result in bugs that are hard to detect and resolve. By ensuring that 
"case" statements are exhaustive and cover all possible input values, you 
create more robust and self-contained code that is easier to reason about 
and less prone to errors during both development and future modifications.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
architecture EXAMPLE of CASE_STATEMENT is
begin
  process (A, B, C, X)
  begin
                      -- no default signal assignment for Z +
    case X is
      when 0 =&gt;
         Z &lt;= A;
      when 7 | 9 =&gt;
         Z &lt;= B;
      when 1 to 5 =&gt;
         Z &lt;= C;
                      -- Z not assigned for all possible values of X +
      when others =&gt;
                      -- "when others" present, but empty: âž” a latch gets inferred, violation
    end case;
  end process;
end EXAMPLE;
</code></pre>

<p><b>Developer's Notes</b></p>
<p>None</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file):

    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()
    in_case = False

    # find a case 'when' statement
    while lexeme:

        # toggle in_case depending on where the last case and end case keywords were seen
        if lexeme.previous(True, True) and lexeme.text() == "case" and lexeme.previous(True, True).text() != "end":
            in_case = True
        elif lexeme.previous(True, True) and lexeme.text() == "case" and lexeme.previous(True, True).text() == "end":
            in_case = False

        # check if we are in a case statement and proceed
        if in_case == True and lexeme.text() == "when" and lexeme.token() == "Keyword":
            ok = False

            temp_lex = lexeme.next(True, True)
            viol_lex = temp_lex

            while temp_lex and temp_lex.text() != "when" and temp_lex.text() != "end":
                if temp_lex.text() == ";" and temp_lex.token() == "Punctuation":
                    ok = True

                temp_lex = temp_lex.next(True, True)

            if ok == False:
                check.violation(file, file, viol_lex.line_begin(), viol_lex.column_begin(), "Empty case statement")

        lexeme = lexeme.next(True, True)
