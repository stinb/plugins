# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 8-11-2023

ERR1 = "Unlabelled process '%1' found"
ERR2 = "Unlabelled for loop found"

# The ID for the check
def id():
    return 'VHDL_5'

# The short name of the check
def name():
    return "All Checks/Language Specific/Vhdl/VHDL_5" +  ' Processes and for loops without labels'

def tags(id):
    return {
        'VHDL_5': [
            'Language: VHDL',
            'Control Flow',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'Processes and for loops without labels.'

# The long description of the check
def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Processes and For Loops without Labels</p>

<p><b>Description</b></p>
<p>Labeling processes and for loops in VHDL code is a fundamental practice for 
improving code quality, maintainability, and debuggability. It helps you and 
others understand the code's structure, purpose, and logic, making it an 
essential part of writing robust and reliable VHDL designs.</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="VHDL">\
entity Example is
    Port ( A : in STD_LOGIC;
           B : out STD_LOGIC);
end Example;

architecture UnlabeledProcess of Example is
begin
    process(A)
    begin
        if A = '1' then
            B &lt;= '0';
        else
            B &lt;= '1';
        end if;
    end process;
end UnlabeledProcess;
</code></pre>

'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'VHDL'

def check(check, file):
    # find unlabelled processes
    for proc_ref in file.filerefs("Declare, Define", "VHDL Process"):
        proc_ent = proc_ref.ent()
        if proc_ent.name() == "[anon]":
            check.violation(proc_ent, file, proc_ref.line(), proc_ref.column(), ERR1, proc_ent.longname())

    # find unlabelled for loops
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        # if a for keyword is found look behind it for label...
        if lexeme.text() == ("for" or "FOR") and not (lexeme.previous(True, True).text() == ":" and \
                                                        lexeme.previous(True,True).previous(True,True).token() == "Identifier"):
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR2)

        lexeme = lexeme.next()
