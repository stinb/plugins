# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 4-7-22


import re


ERR1 = 'Multiple variables are declared in the same statement.'


def id():
    return ('JAVA_23')


def name(id):
    return {'JAVA_23':'All Checks/Language Specific/Java/Only one variable shall be specified for every declaration key word.'}[id] \



def tags(id):
    return {
        'JAVA_23': [
            'Language: Java',
            'Variables',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
Do not declare multiple variables in the same statement.
</p>

<p><b>Risk Assessment</b></p>
<p>
Declaring multiple variables in a single declaration could cause confusion about the types of variables and their initial values. In particular, do not declare any of the following in a single declaration:
</p>

<ul>
    <li>Variables of different types</li>
    <li>A mixture of initialized and uninitialized variables</li>
</ul>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">int x;
int y;
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    lexer = None

    for varRef in file.filerefs('Define', '~EnumConstant Variable', True):
        varEnt = varRef.ent()

        if not lexer:
            lexer = file.lexer()
        lexeme = lexer.lexeme(varRef.line(), varRef.column())
        lexeme = lexeme.previous(True, True)

        if lexeme.token() == 'Punctuation' and lexeme.text() == ',':
            check.violation(varEnt, file, varRef.line(), varRef.column(), ERR1)
