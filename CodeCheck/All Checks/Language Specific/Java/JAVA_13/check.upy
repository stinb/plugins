# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 4-4-22


import re


ERR1 = 'Class of scope %1 should not be after class of scope %2'


scopeOrder = { 'Public': 0, 'Unnamed': 1, 'Protected': 2, 'Private': 3 }


def ids():
    return ('JAVA_13')


def name(id):
    return {
        'JAVA_13': '''All Checks/Language Specific/Java/\
Order class definitions by scope \
''',
    }[id]



def tags(id):
    return {
        'JAVA_13': [
            'Language: Java',
            'Styling',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
The class definitions shall be ordered by scope, as follows:
</p>

<ol>
    <li>public</li>
    <li>package (unnamed)</li>
    <li>protected</li>
    <li>private</li>
</ol>

For more info about class scopes, see https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    previousParent = None
    previousScope = 'Public'

    for ref in file.filerefs('Define', 'Class', True):
        ent = ref.ent()

        # Get the scope of the class
        if ent.kind().check('Public'):
            currentScope = 'Public'
        elif ent.kind().check('Protected'):
            currentScope = 'Protected'
        elif ent.kind().check('Private'):
            currentScope = 'Private'
        else:
            currentScope = 'Unnamed'

        currentParent = ent.parent().id()

        # Skip classses inside of classes
        if previousParent and previousParent != currentParent:
            continue

        # If the class is out of order
        if scopeOrder[currentScope] < scopeOrder[previousScope]:
            check.violation(ent, file, ref.line(), ref.column(), ERR1, currentScope, previousScope)
            break

        previousScope = currentScope
        previousParent = currentParent
