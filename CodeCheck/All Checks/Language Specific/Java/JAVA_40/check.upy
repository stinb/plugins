# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2022-04-11


import re


ERR1 = 'No space after comma'


def ids():
    return ('JAVA_40')


def name(id):
    return {
        'JAVA_40': '''All Checks/Language Specific/Java/Spaces shall be placed after commas.''',
    }[id]


def tags(id):
    return {
        'JAVA_40': [
            'Language: Java',
            'Styling',
        ],
    }.get(id)


def detailed_description():
    return '''\
<p>
Spaces shall be placed after commas.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Program {
    public static void main(String[] args) {
        System.out.println("Hello","world");
        // System.out.println("Hello","world");
        /* System.out.println("Hello","world"); */
        System.out.println(',');
        System.out.println("Hello,world");
    }
}
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def define_options(check):
    check.options().checkbox('ignoreNewLines', 'Ignore new lines', True)
    check.options().checkbox('ignoreComments', 'Ignore comments', True)
    check.options().checkbox('ignoreStrings', 'Ignore strings', True)


def check(check, file):
    for lex in file.lexer(False):
        if lex.text() == ',':
            check_comma(file, check, lex)
        else:
            check_other(file, check, lex)


def check_comma(file, check, lex):
    # Skip if it was the last token
    next_lex = lex.next()
    if not next_lex:
        return

    # Skip whitespace or anything allowed by options
    match next_lex.token():
        case 'Comment':
            if check.options().lookup('ignoreComments'):
                return
        case 'Newline':
            if check.options().lookup('ignoreNewLines'):
                return
        case 'String':
            if check.options().lookup('ignoreStrings'):
                return
        case 'Whitespace':
            if next_lex.text().startswith(' '):
                return

    check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1)


def check_other(file, check, lex):
    # Skip if anything allowed by options
    match lex.token():
        case 'Comment':
            if check.options().lookup('ignoreComments'):
                return
        case 'String':
            if check.options().lookup('ignoreStrings'):
                return

    # Each line in the lexeme text
    line_number = lex.line_begin()
    for line_text in lex.text().splitlines():
        # Each comma followed by not a space
        for match in re.finditer(',[^ ]', line_text):
            column = match.span()[0] + lex.column_begin()
            check.violation(None, file, line_number, column, ERR1)
        line_number += 1
