# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 6-7-22


import re


ERR1 = 'All classes in this unnamed package have a prefix of "%1"'


def ids():
    return ('JAVA_10')


def name(id):
    return {
        'JAVA_10': '''All Checks/Language Specific/Java/\
Use package names instead of prefixes on class identifiers \
''',
    }[id]



def tags(id):
    return {
        'JAVA_10': [
            'Language: Java',
            'Naming Conventions',
        ],

    }.get(id)

def detailed_description():
    return '''\
<p>
Unnamed packages should not have a prefix on all of its class names. Instead of\
 class prefixes, name the package.
</p>

<p><b>Risk Assessment</b></p>
<p>
With programmers worldwide writing classes and interfaces using the Java\
 programming language, it is likely that many programmers will use the same\
 name for different types.
</p>

<p>
See "Naming a Package"
<i>
https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class JavaIO_Console {
    private class C {}
}
public class JavaIO_File {}
public class JavaIO_Reader {}
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('Java File')


def check(check, file):
    for packageRef in file.filerefs('Define', 'Package'):
        packageEnt = packageRef.ent()

        # Skip named packages
        if packageEnt.name() != '(Unnamed_Package)':
            continue

        # Get all classes of the package
        shortest = float('inf')
        names = []
        for classRef in file.refs('Define', 'Class Type ~TypeVariable'):
            classEnt = classRef.ent()
            name = classEnt.name()
            names.append(name)
            length = len(name)
            if length < shortest:
                shortest = length

        # Skip if there are less than 2 classes
        if len(names) < 2:
            continue

        # Get the prefix
        prefix = ''
        end = False
        for i in range(0, shortest):
            prefixChar = None
            for j in range(0, len(names)):
                name = names[j]
                char = name[i]
                if not prefixChar:
                    prefixChar = char
                elif char != prefixChar:
                    end = True
                    break
                elif j == len(names)-1:
                    prefix += char
            if end:
                break

        # Skip if the names have different prefixes
        if not prefix:
            continue

        check.violation(packageEnt, file, packageRef.line(), packageRef.column(), ERR1, prefix)
