# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 4-20-22


import re


ERR1 = 'Class is not assigned to a named package'


def ids():
    return ('JAVA_09')


def name(id):
    return {
        'JAVA_09': '''All Checks/Language Specific/Java/\
Each Java class shall be assigned to a named package \
''',
    }[id]



def tags(id):
    return {
        'JAVA_09': [
            'Language: Java',
            'Declarations and Definitions',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
Each Java class shall be assigned to a named package. The default (unnamed) package shall not be used.
</p>

<p><b>Risk Assessment</b></p>
<p>
To make types easier to find and use, to avoid naming conflicts, and to control access, programmers bundle groups of related types into packages.
</p>

<p>
See:
<i>
https://docs.oracle.com/javase/tutorial/java/package/packages.html
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Program {
    public static void main(String[] args) {
        System.out.println();
    }
}
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('Java File')


def test_global():
    return False


def check(check, file):
    for classRef in file.filerefs('Define', 'Class ~TypeVariable', True):
        classEnt = classRef.ent()

        if classEnt.refs('Containin', 'Package Unnamed', True):
            check.violation(classEnt, file, classRef.line(), classRef.column(), ERR1)
