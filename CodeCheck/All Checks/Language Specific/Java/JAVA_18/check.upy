# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 05-10-22

import re

ERR1 = "Name of method '%1' is not preprended with a boolean expression"

defaultBooleanList = ["is", "has", "can", "am", "are", "was", "were", "being", "could", "do", "does", "doing",
"have", "had", "having", "may", "might", "must", "shall", "should", "will", "would", "contains", "be",
"owns", "needs", "requires", "possesses"]

userBooleanList = []


def id():
    return ('JAVA_18')


def name(id):
    return {'JAVA_18' : '''All Checks/Language Specific/Java/Any method that tests the truth or falsity of a condition shall be prepended with a boolean expression'''}[id]



def tags(id):
    return {
        'JAVA_18': [
            'Language: Java',
            'Functions',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
Any method that tests the truth or falsity of a condition shall be prepended with a boolean expression (e.g., c.isEmpty(), c.hasItem(), c.canDoSomething()).
</p>

<p><b>Risk Assessment</b></p>
<p>
Naming conventions that encourage developers to express their intent clearly and concisely enables developers to 
build systems that grow safely and solve problems effectively. Prepending the name of a true/false method with
a boolean expression makes the intent of that method clear, and reduces confusion for the reader of the code.
</p>
<p>
See:
<i>
https://docs.oracle.com/cd/B12037_01/olap.101/b10339/expression006.htm
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class booleanMethod {

    public static boolean oddNumCheck(int mynumber)   /* invalid - method name not prepended with boolean expression */
    {
        return (mynumber % 2 != 0);
    }

    public static void main(String[] args)
    {
        int mynumber = 130;

        if(oddNumCheck(mynumber) == true)
            System.out.print("Odd Number");
        else
            System.out.print("Even Number");
    }
}
</code></pre>
<p><b>Developer Notes</b></p>
<p>
This check looks for the following auxiliary verbs to fulfill the boolean expression prefix requirement:
"is", "has", "can", "am", "are", "was", "were", "being", "could", "do", "does", "doing",
"have", "had", "having", "may", "might", "must", "shall", "should", "will", "would", "contains", "be",
"owns", "needs", "requires", and "possesses". <br>

If the user would like to specify additional valid prefixes for their purposes, they can be configured as a
comma-separated list in the Options above. 
</p>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('Java File')


def test_global():
    return False


def define_options(check):
    check.option().text('userBooleans', 'Enter a comma-separated list of additional boolean expressions:', 'ex_1,ex_2,ex_3')


def check(check, file):
    # grab all methods defined in the file
    for method_ref in file.filerefs("Define", "Public Method ~Unknown"):

        # if the return type is boolean (tests for truth or falsity of a condition)
        if method_ref.ent().type() == "boolean":            

            # if name of method doesn't begin with a bool expression, flag violation
            valid = False
            method_name = method_ref.ent().name()


            # go through default boolean expressions
            for boolExpr in defaultBooleanList:
                if re.search(f"^{boolExpr}", method_name):
                    valid = True

            # parse user text into list and go through user boolean expressions
            userText = check.option().lookup("userBooleans")
            userBooleanList = userText.split(",")

            if userBooleanList != ['']:
                for userBoolExpr in userBooleanList:
                    if re.search(f"^{userBoolExpr}", method_name):
                        valid = True

            if valid == False:
                check.violation(method_ref.ent(), file, method_ref.line(), method_ref.column(), ERR1, method_name)

