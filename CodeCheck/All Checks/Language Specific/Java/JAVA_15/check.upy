# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 4-7-22


import re


ERR1 = 'Method is not camelCase: the first letter is capitalized'
ERR2 = 'Method is not camelCase: it has underscores in the middle'
ERR3 = 'Method is not camelCase: the first letter is capitalized and it has underscores in the middle'


def ids():
    return ('JAVA_15')


def name(id):
    return {
        'JAVA_15': '''All Checks/Language Specific/Java/\
Method names should be camelCase \
        ''',
    }[id]



def tags(id):
    return {
        'JAVA_15': [
            'Language: Java',
            'Naming Conventions',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
According to the naming conventions by Oracle, methods should be camelCase.
</p>

<p>
Naming conventions:
<i>
https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Main {
    public void FunctionOne() {

    }

    public void function_two() {

    }
}
</code></pre>

<p><b>Developer's Notes</b></p><p>Capitalization of words requires some human knowledge, and should be reviewed accordingly.
</p>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    for methodRef in file.filerefs('Define', 'Method ~Lambda ~Constructor', True):
        methodEnt = methodRef.ent()

        # See if the name is PascalCase or snake_case
        error = None
        name = methodEnt.name()
        uppercase = False
        underscores = False
        if name[0] >= 'A' and name[0] <= 'Z':
            uppercase = True
            error = ERR1
        if '_' in name[1:-1]:
            underscores = True
            error = ERR2
        if uppercase and underscores:
            error = ERR3

        if error:
            check.violation(methodEnt, file, methodRef.line(), methodRef.column(), error)
