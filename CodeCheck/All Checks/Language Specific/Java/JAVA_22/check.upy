# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 05-18-22

import re

ERR1 = "Variable's use is redefined within method '%1'"

def id():
    return ('JAVA_22')


def name(id):
    return{'JAVA_22' : "All Checks/Language Specific/Java/A variable’s use shall not be redefined within a method."}[id]



def tags(id):
    return {
        'JAVA_22': [
            'Language: Java',
            'Variables',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
A variable’s use shall not be redefined within a method.
</p>

<p><b>Risk Assessment</b></p>
<p>
Redefining a variable's use within a method can obscure the original purpose
of said variable, leading to less readable and less maintainable code.
</p>
<p>
See:
<i>
https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">// invalid - i is being used as a for loop incrementing variable, then later used to hold an amount
for( i = 0; i &lt; 5; i++) {
    ...
}

i = getAmount();
</code></pre>
<p><b>Developer's Notes</b></p>
<p>
None
</p>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('Java File')


def test_global():
    return False


def check(check, file):
    # check all Java Variable Local ents in the file
    for local_var_ref in file.filerefs("Define", "Java Variable Local"):

        # if there are multiple Java Setby refs to the same method/ent, flag
        local_var = local_var_ref.ent()
        scopes_seen = []

        for setby_ref in local_var.refs("Java Setby ~init"):
            scope = setby_ref.ent().name()

            if scope in scopes_seen:
                check.violation(local_var, file, setby_ref.line(), setby_ref.column(), ERR1, scope)
            else:
                scopes_seen.append(scope)
