# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2022-04-14


import re


ERR1 = 'Spaces not around binary operator %1'


binaryOperators = {'*', '/', '%', '+', '-', '<<', '>>', '>>>', '<', '>', '<=', '>=', 'instanceof', '==', '!=', '&', '^', '|', '&&', '||', '=', '+=', '-=', '*=', '/=', '%=', '&=', '^=', '|=', '<<=', '>>=', '>>>='}


def ids():
    return ('JAVA_44')


def name(id):
    return {
        'JAVA_44': '''All Checks/Language Specific/Java/\
Spaces shall be placed around all binary operators. \
        ''',
    }[id]



def tags(id):
    return {
        'JAVA_44': [
            'Language: Java',
            'Styling',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
Spaces shall be placed around all binary operators.
</p>

<p><b>Risk Assessment</b></p>
<p>
Placing spaces around binary operators is a common convention to improve readability.
</p>

<p>
See
<i>
https://www.oracle.com/java/technologies/javase/codeconventions-whitespace.html
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Program {
    public static void main(String[] args) {
        int x=1;
        x = x* 2;
        x = x +3;
        x = x/4;
        x= x / 5;
        x +=6;
        x-= 7;
        x*=8;
    }
}
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    lexer = file.lexer()
    lexeme = lexer.first()

    while lexeme:
        text = lexeme.text()

        # Ignore things that aren't binary operators
        if text not in binaryOperators:
            lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
            continue

        # Ignore binary operators with spacing around them
        pre = lexeme.previous(ignore_whitespace=False, ignore_comments=True)
        nex = lexeme.next(ignore_whitespace=False, ignore_comments=True)
        whitespace = {'Whitespace', 'Newline'}
        if pre and nex and pre.token() in whitespace and nex.token() in whitespace:
            lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
            continue

        # Ignore operators next to non-operands
        pre = lexeme.previous(ignore_whitespace=True, ignore_comments=True)
        nex = lexeme.next(ignore_whitespace=True, ignore_comments=True)
        nonOperandTokens = {'Operator', 'Keyword'}
        if (pre and pre.token() in nonOperandTokens) or (nex and nex.token() in nonOperandTokens):
            lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
            continue
        nonOperandTextsLeft = {'(', '[', ']', '{', '}', ',', '.'}
        if pre and pre.text() in nonOperandTextsLeft:
            lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
            continue
        classTypes = 'Class Type, Interface Type, GenericParameter Type'
        if pre and pre.ent() and pre.ent().kind().check(classTypes):
            lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
            continue
        if text != 'instanceof' and nex and nex.ent() and nex.ent().kind().check(classTypes):
            lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
            continue

        check.violation(None, file, lexeme.line_begin(), lexeme.column_begin(), ERR1, text)

        lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
