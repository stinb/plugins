# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 3-31-2022

ERR1 = "New package group should be separated by newline"


def ids():
  return ('JAVA_08')


def name(id):
    return {
        'JAVA_08': '''All Checks/Language Specific/Java/\
Each package group shall be separated with a newline \
''',
    }[id]



def tags(id):
    return {
        'JAVA_08': [
            'Language: Java',
            'Styling',
        ],

    }.get(id)

def description():
  return """\
Each package group shall be separated with a newline."""


# The long description of the check
def detailed_description():
    return """
<p>Each package group shall be separated with a newline</p>
<p><b>Risk Assessment</b></p>
<p>Separation of package groups increases the organization and readability of the code.</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">import java.util.scanner;
import java.util.regex;
import java.math;
import com.sun.jarsinger;  // flag 'com' package group
"""


def test_language(language):
  return language == 'Java'


# Tests the type of file
def test_entity(file):
  return file.kind().check('java file')


def check(check, file):
  if file and file.lexer():
    lexer = file.lexer()
  else:
    return

  lexeme = lexer.first()

  # declare variable to hold last package group seen
  last_pkg_seen = None

  while(lexeme):
    if lexeme and lexeme.text() == "import" and lexeme.token() == "Keyword":

      lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

      line_diff = 100
      if last_pkg_seen is not None:
        line_diff = lexeme.line_begin() - last_pkg_seen.line_begin()

      # if there is a previous import, of a different package group name, and there is less than 2 lines between them, flag
      if lexeme and (last_pkg_seen is not None) and (last_pkg_seen.text() != lexeme.text()) and (line_diff < 2):
        check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Package group '" + lexeme.text() + "' should be separated by a newline")


      last_pkg_seen = lexeme

    lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

  # package_refs = file.filerefs("DotRef", "Java Package")

  # for pack_ref in package_refs:
  #   lexeme = lexer.lexeme(pack_ref.line(), pack_ref.column())

  #   print(lexeme.text() + "\n")

  #   # only grab the outermost package to compare
  #   if lexeme.previous(ignore_whitespace=True, ignore_comments=True).text() == "import":

  #     check.violation(pack_ref.ent(), file, pack_ref.line(), pack_ref.column(), ERR1)
