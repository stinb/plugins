# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 5-26-22

import re

ERR1 = 'Constructor exception created but not thrown'

def ids():
    return ('JAVA_12')

def name(id):
    return {
        'JAVA_12': '''All Checks/Language Specific/Java/\
If a constructor catches an exception that causes the failure of the object,\
 that exception shall be thrown. \
''',
    }[id]


def tags(id):
    return {
        'JAVA_12': [
            'Language: Java',
            'Constructors',
        ],

    }.get(id)

def detailed_description():
    return '''\
<p>
If a constructor catches an exception that causes the failure of the object,\
 that exception shall be thrown.
</p>

<p><b>Risk Assessment</b></p>
<p>
...
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Test {
    public Test() throws ArithmeticException {
        try {
            int x = 1 / 0;
        } catch (ArithmeticException e) {
            System.out.println(e);
        }
    }
}
</code></pre>

<p><b>Developer's Notes</b></p><p>Because of complexity, the failure of the object can only be determined at\
 runtime. However, this still checks for constructor exceptions that are caught\
 but not thrown.
</p>
'''

def test_language(language):
    return language == 'Java'

def test_entity(file):
    return file.kind().check('java file')

def thrownDirectly(lex):
    lex = lex.previous(True, True)
    if lex and lex.text() == 'throw':
        return True
    return False

def check(check, file):
    lexer = None

    # Constructors
    for conRef in file.filerefs('Define', 'Constructor'):
        constructor = conRef.ent()

        # Exceptions
        for catchRef in constructor.refs('Define', 'Catch Parameter'):
            exception = catchRef.ent()

            thrown = False

            # Exception uses
            for useRef in exception.refs('Useby'):

                # Get lexeme
                if not lexer:
                    lexer = file.lexer(False)
                lex = lexer.lexeme(useRef.line(), useRef.column())

                # Skip if the exception is thrown directly
                if thrownDirectly(lex):
                    thrown = True
                    break

            # Skip if the exception is thrown
            if thrown:
                continue

            check.violation(exception, file, catchRef.line(), catchRef.column(), ERR1)
