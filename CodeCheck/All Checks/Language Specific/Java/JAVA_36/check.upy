# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 5-4-22


import re


ERR1 = 'Nested ternary operator'


def id():
    return 'JAVA_36'


def name():
    return '''\
All Checks/Language Specific/Java/Ternary operators shall not be nested inside other ternary operators. \
'''



def tags(id):
    return {
        'JAVA_36': [
            'Language: Java',
            'Expressions',
        ],

    }.get(id)

def detailed_description():
    return '''\
<p>
Ternary operators shall not be nested inside other ternary operators.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">int n = 0;
char x;

x = n % 2 == 0 ? 'a'
  : n % 3 == 0 ? 'b'
  : n % 5 == 0 ? 'c';
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    # Skip files without possible ternary operators
    if not re.search(r'\?[\s\S]*:', file.contents()):
        return

    prev = None

    lexeme = file.lexer().first()

    while lexeme:
        text = lexeme.text()

        # Find possible ternary operators
        if lexeme.token() == 'Operator' and text in {'?', ':'}:

            # If it's a nested ternary operator
            if prev == ':' and text == '?':
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

            # Remember the previous ternary operator
            if text == '?' or (prev == '?' and text == ':'):
                prev = text
            # Reset
            else:
                prev = None

        # Reset at the end of expressions
        elif lexeme.token() == 'Punctuation' and text in {';', ','}:
            prev = None

        lexeme = lexeme.next(True, True)
