# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 5-18-22


import re


ERR1 = 'Method definition needs preceeding blank line'


def ids():
    return ('JAVA_43')


def name(id):
    return {
        'JAVA_43': '''All Checks/Language Specific/Java/\
Method declarations shall have at least one blank line between them to improve\
 readability. \
        ''',
    }[id]



def tags(id):
    return {
        'JAVA_43': [
            'Language: Java',
            'Styling',
        ],

    }.get(id)

def detailed_description():
    return '''\
<p>
Method declarations shall have at least one blank line between them to improve\
 readability.
</p>

<p><b>Risk Assessment</b></p>
<p>
Blank lines improve readability by setting off sections of code that are\
 logically related.
</p>

<p>
See
<i>
https://www.oracle.com/java/technologies/javase/codeconventions-whitespace.html
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">int f(int x) { return x * 2; }
int g(int x) { return x * 3 + 1; }
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    ends = {}
    for ref in file.filerefs('End', 'Method'):
        ends[ref.line()] = ref.ent().id()

    for ref in file.filerefs('Begin', 'Method'):
        # If this method begins where a method ends
        end = None
        begin = ref.line()
        if (begin - 1) in ends:
            end = ends[begin - 1]
        elif begin in ends:
            end = ends[begin]

        # If the end method is not the same as the begin method
        ent = ref.ent()
        if end and end != ent.id():
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
