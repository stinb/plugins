# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 05-02-22


ERR1 = 'Loop control variable "%1" has been modified in body of for loop'


def id():
    return 'JAVA_31'


def name():
    return 'All Checks/Language Specific/Java/The loop control variable shall not be modified in the body of a for loop.'



def tags(id):
    return {
        'JAVA_31': [
            'Language: Java',
            'Control Flow',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
The loop control variable shall not be modified in the body of a for loop.
</p>

<p><b>Risk Assessment</b></p>
<p>
In for loops, it is common practice to use a control variable, which at each iteration of the loop is changed by a constant 
value, and whose value determines the end of the loop. Modifying the loop control variable can lead to unexpected behavior
or infinite loops, and should be avoided. 
</p>
<p>
See:
<i>
https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">class ForLoop {
    public static void main(String[] args){
         for(int i=1; i&lt;11; i++){
            System.out.println("Count is: " + i);
            i--;  // loop control variable is decremented in body, leading to an infinite loop
        }
    }
}
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('Java File')


def test_global():
    return False


def check(check, file):
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        if lexeme.text() == "for" and lexeme.token() == "Keyword":
            control_variable_finder = lexeme.next(ignore_whitespace=True, ignore_comments=True)

            while control_variable_finder and control_variable_finder.token() != "Identifier":
                control_variable_finder = control_variable_finder.next(ignore_whitespace=True, ignore_comments=True)

            control_variable = control_variable_finder.ent()
            if not control_variable:
                return

            # body of loop starts one line under where 'for' keyword is
            for_loop_start = lexeme.line_begin() + 1

            # find start of loop body
            temp_lex = lexeme
            while temp_lex and temp_lex.text() != "{":
                temp_lex = temp_lex.next(ignore_whitespace=True, ignore_comments=True)
            
            if temp_lex and temp_lex.next(ignore_whitespace=True, ignore_comments=True):
                temp_lex = temp_lex.next(ignore_whitespace=True, ignore_comments=True)
            else:
                return

            # go through loop body until end to find ending line value
            num_brackets = 1
            while temp_lex and num_brackets != 0:
                if temp_lex.text() == "}":
                    num_brackets -= 1
                if temp_lex.text() == "{":
                    num_brackets += 1

                temp_lex = temp_lex.next(ignore_whitespace=True, ignore_comments=True)

            for_loop_end = temp_lex.line_begin()

            # go through all setby and modifyby refs for the control variable
            # if within the bounds of loop body, flag
            for mod_ref in control_variable.refs("Java Modifyby, Java Setby"):
                if for_loop_start <= mod_ref.line() and for_loop_end >= mod_ref.line():
                    check.violation(control_variable, file, mod_ref.line(), mod_ref.column(), ERR1, control_variable.name())


        lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)












