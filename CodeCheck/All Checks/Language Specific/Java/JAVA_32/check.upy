# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 5-03-2022
import re

ERR1 = 'Last choice of the statement did not end with a break'


def id():
    return 'JAVA_32'

def name():
    return """\
All Checks/Language Specific/Java/The last choice of a switch or case statement shall end with a break \
 statement."""


def tags(id):
    return {
        'JAVA_32': [
            'Language: Java',
            'Control Flow',
        ],

    }.get(id)

# The long description of the check
def detailed_description():
    return """ 
<p>The last choice of a switch/case statement shall end with a break statement.
</p>
<p><b>Non-compliant Example</b></p>
<pre><code language="Java">switch (num) {
  case 1:
    break;

  case 2:
    break;

  default:

}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('file')

def test_language(language):
    return language == 'Java'

def check(check, file):
    if not file.lexer():
        return


    lexer = file.lexer()
    lexeme = lexer.first()

    while lexeme:
        same = True
        if lexeme.text() == 'switch':
            same = False
            # Find bounds of switch statement
            while lexeme and lexeme.text() != '{':
                lexeme = lexeme.next(True, True)

            close = findClose(lexeme)

            br = False

            if close:
                lexeme = close
            while lexeme and not re.search(r'case|default|switch', lexeme.text()):
                if lexeme.text() == 'break':
                    br = True
                    break
                lexeme = lexeme.previous(True, True)

            # Throw violation if break not found
            if not br:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)



        # Set lexeme to close if switch statement was found
        if same:
            lexeme = lexeme.next(True, True)
        else:
            lexeme = close




# Find corresponding closing curly brace of given opening curly brace
def findClose(lexeme):
    count = 0

    while lexeme and not (lexeme.text() == '}' and count == 0):
        if lexeme.text() == '{':
            count += 1

        lexeme = lexeme.next(True, True)

        if lexeme.text() == '}':
            count -= 1

    return lexeme
