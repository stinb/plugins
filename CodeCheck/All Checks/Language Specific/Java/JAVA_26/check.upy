# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 4-11-22

import re

ERR1 = 'More than one statement found on line %1'


def id():
    return ('JAVA_26')


def name(id):
    return {'JAVA_26' : 'All Checks/Language Specific/Java/There shall be at most one statement per line.'}[id]



def tags(id):
    return {
        'JAVA_26': [
            'Language: Java',
            'Styling',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
There shall be at most one statement per line.
</p>

<p>
Writing multiple statements on the same line compromises code quality in several ways: it is less readable, it is less maintainable, and it is often more difficult to debug.
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">// invalid - multiple declaration statements on same line
int size; int capacity;

// invalid - multiple expression statements on same line
size = 4; capacity = 10;

// control flow statement
if (size &lt; capacity)
{
  System.out.println(size + " is within capacity boundary");
}
</code></pre>

<p>
<i>Developer Notes:</i>
None
</p>
'''

def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        # if we encounter a semicolon, make sure we encounter a newline before the next semicolon
        if lexeme and lexeme.token() == "Punctuation" and lexeme.text() == ";":
            # create a temporary lexeme to traverse along the line looking for another statement
            temp_lex = lexeme.next(False, True)
            while temp_lex and temp_lex.token() != "Newline":
                if temp_lex.token() == "Punctuation" and temp_lex.text() == ";":
                    check.violation(file, file, temp_lex.line_begin(), temp_lex.column_begin(), ERR1, temp_lex.line_begin())

                temp_lex = temp_lex.next(False, True)

        lexeme = lexeme.next()
