# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 4-12-22


import re


ERR1 = "Ending brace is not on same line as 'while' keyword"


def id():
    return 'JAVA_35'


def name():
    return 'All Checks/Language Specific/Java/For a do-while loop, the ending brace shall be on the same line as the while.'



def tags(id):
    return {
        'JAVA_35': [
            'Language: Java',
            'Styling',
        ],

    }.get(id)

# The long description of the check
def detailed_description():
    return """ 
<p>For a do/while loop, the ending brace shall be on the same line as the while</p>
<p><b>Risk Assessment</b></p>
<p>Keeping the 'while' keyword of a do/while loop on the same line as the ending curly brace increases the readability of the code.</p>
<p>For the full standard: See <i>SSP OD 63140, Volume 3</i></p>
<p><b>Exceptions</b></p>
<p>None</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class DoWhileExample {  
  public static void main(String[] args) {  
    do{  
      System.out.println("infinitive do while loop");   
    }
    while(true);  // non-compliant
  }  
} 
</code></pre>
<p><i>Developer Notes:</i>
None</p>
"""

def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        # search for a closing brace followed by a 'while' keyword
        if lexeme and lexeme.token() == "Punctuation" and lexeme.text() == "}":
            # make sure if next lex is 'while', it is on same line
            bracket_line = lexeme.line_begin()
            next_lex = lexeme.next(True, True)
            if next_lex and next_lex.token() == "Keyword" and next_lex.text() == "while":
                while_line = next_lex.line_begin()

                verified = False
                temp_lex = next_lex
                while temp_lex and temp_lex.token() != "Newline":
                    if temp_lex.token() == "Punctuation" and temp_lex.text() == ";":
                        verified = True
                    temp_lex = temp_lex.next(False, False)

                # if the bracket is not on same line as 'while', flag violation
                if bracket_line != while_line and verified == True:
                    check.violation(file, file, next_lex.line_begin(), next_lex.column_begin(), ERR1)

        lexeme = lexeme.next()
    
