# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 4-6-22


import re


ERR1 = 'Method name not prepended with "get", but returns data member'


def ids():
    return ('JAVA_16')


def name(id):
    return {
        'JAVA_16': '''All Checks/Language Specific/Java/\
Prepend method names with "get" if they return data member values \
        ''',
    }[id]



def tags(id):
    return {
        'JAVA_16': [
            'Language: Java',
            'Functions',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
Any method that returns the value of a data member shall be prepended with the word "get" (e.g., <code>int value = c.getVariableName();</code>)
</p>

<p>
Common method naming prefixes:
<i>
https://docs.oracle.com/javase/tutorial/datetime/overview/naming.html
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Player {
    private int health;

    public int health() {
        return health;
    }
}
</code></pre>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def define_options(check):
    check.options().checkbox('ignoreOverriding', 'Ignore overriding methods', True)
    check.options().checkbox('ignoreBoolean', 'Ignore boolean methods', False)


def getCodeBlock(contents):
    left = None
    right = None
    for i in range(len(contents)):
        c = contents[i]
        if left == None and c == '{':
            left = i
        elif c == '}':
            right = i
    if right:
        return contents[left:right+1]
    return ''


def isGetMethod(method):
    # Ignore methods with parameters
    if method.parameters():
        return False

    contents = method.contents()
    # Remove any // style comments
    contents = re.sub(r'\/\/.*?\n','\n', contents)
    # Remove any /* */ style comments
    contents = re.sub(r'\/\*[\s\S]*?\*\/','\n', contents)

    # Capture the code block
    contents = getCodeBlock(contents)

    # See if the code only returns a Java identifier
    if re.match(r'{\s*return\s+[a-zA-Z_$][\w$]*\s*;\s*}', contents):
        return True
    return False


def check(check, file):
    ignoreOverriding = check.options().lookup('ignoreOverriding')
    ignoreBoolean = check.options().lookup('ignoreBoolean')

    for classRef in file.filerefs('Define', 'Class ~TypeVariable', True):
        classEnt = classRef.ent()

        # Check if there's a get method
        for methodRef in classEnt.refs('Define', 'Method ~Implicit', True):
            methodEnt = methodRef.ent()

            # Skip methods that start with "get"
            if re.match(r'get', methodEnt.name()):
                continue

            # Skip methods that do other things besides return a variable member
            if not isGetMethod(methodEnt):
                continue

            # Skip overriding methods
            if ignoreOverriding and methodEnt.refs('Overrides'):
                continue

            # Skip boolean methods
            if ignoreBoolean and methodEnt.type() == 'boolean':
                continue

            # Find all variable member returns
            for memberRef in methodEnt.refs('Use Return', 'Variable Member', True):
                memberEnt = memberRef.ent()

                # Skip variables that are members of the class
                if memberEnt.parent() != classEnt:
                    continue

                check.violation(methodEnt, file, methodRef.line(), methodRef.column(), ERR1)
                break
