use base ("Understand::Codecheck");
use strict;
use CodeCheck::Libraries::NamingConventions;

my $kind = "Package";
my $kindPlural ="Packages";
my $languageText = "Java";
my $languageTest = "Java";
my $canChangePrecedence = 0;
my $defaultAll =1;
my @kindStrings = qw();
my %kindNameLookup = ();

sub check {
  my ($check) =@_;
  setlib();
  
  foreach my $file ($check->get_files) {
    foreach my $var ($file->ents("Java Package ~unknown ~unresolved ~unnamed")){
      
      #Build the list of Kinds for this variable
      my $kindString = $var->kind->longname();
      
      my $varkindNameArray = getPrimaryKind($check,$kindString);
      
      my $errors = checkNamingRules($var->simplename,$varkindNameArray,$check);
      $check->violation($var,$file,-1,-1,NAMEERROR,$CodeCheck::Libraries::NamingConventions::kindNameLookup{$varkindNameArray},$var->name,$errors) if $errors;
    }
  }
}




#Template code, do not modify below this line
sub setlib{
    @CodeCheck::Libraries::NamingConventions::kindStrings = @kindStrings;
    %CodeCheck::Libraries::NamingConventions::kindNameLookup = %kindNameLookup;
    setOptions($kind,$kindPlural,$languageText,$languageTest,$canChangePrecedence,$defaultAll);
}
sub register_tr_text {registerNamingErrors(shift);}

sub checkID { return "JAVA_N004";}

sub name { return "All Checks\\Language Specific\\Java\\Naming Conventions\\Naming Convention: Packages";}
sub tags {
  return (
    'Language: Java',
    'Naming Conventions',
  );
}

sub description {setlib;return "(Global)Define naming convention for $languageText $kindPlural";}
sub detailed_description { setlib;return getNamingDescription();}
sub test_language { setlib;return shift eq $languageTest;}
sub define_options{ setlib;setNamingOptions(shift);}
sub test_entity { return 0;}
sub test_global { return 1;}
