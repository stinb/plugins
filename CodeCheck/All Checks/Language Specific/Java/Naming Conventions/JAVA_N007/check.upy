# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 3-30-2022

import re

ERR1 = "Constant name is not fully capitalized or contains a number"
ERR2 = "Constant name is not fully capitalized"

def id():
  return ('JAVA_N007')

def name(id):
  return {'JAVA_N007' : "All Checks/Language Specific/Java/Naming Conventions/" +  'Constants shall be in all uppercase, with underscores separating each component word'}[id]


def tags(id):
    return {
        'JAVA_N007': [
            'Language: Java',
            'Naming Conventions',
        ],

    }.get(id)

def description():
  return """\
All constants defined by the 'static final' keywords shall be fully capitalized."""

# The long description of the check
def detailed_description():
    return """ 
<p>Constants shall be in all uppercase, with underscores separating each component word</p>
<p><b>Risk Assessment</b></p>
<p>The use of constants prevents the developer from using 'magic numbers' throughout the code, which is good practice for mantainability and legibility reasons.</p>

<p><b>Exceptions</b></p>
<p>None</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">static final int BAD_constant = 100;          // contains lowercase characters
static final int AMBIGUOUS_CONSTANT_01 = 100; // if the option to check for numerical values is selected, this macro name will flag a violation
static final int __bad_constant__ = 100;      // contains lowercase characters
</code></pre>
<p><b>Developer's Notes</b></p><p>Underscore separation between component words requires some human knowledge, and should be reviewed accordingly.</p>
"""

def test_language(language):
  return language == 'Java'

# Tests the type of file
def test_entity(file):
  return file.kind().check('java file')

# Options for the check
def define_options(check):
  check.option().checkbox('reportNumerical','Report constant names containing numerical values',False)

def check(check, file):
  if file and file.lexer():
    lexer = file.lexer()
  else:
    return

  const_refs = file.filerefs("Define", "Static Final Variable")
  if not const_refs:
    return

  for const in const_refs:
    const_name =  const.ent().name()

    if check.option().lookup("reportNumerical"):
      if not re.search(r"^[A-Z\_]+$", const_name):
        check.violation(const.ent(), file, const.line(), const.column(), ERR1)

    else:
      if not re.search(r"^[\dA-Z\_]+$", const_name):
        check.violation(const.ent(), file, const.line(), const.column(), ERR2)
