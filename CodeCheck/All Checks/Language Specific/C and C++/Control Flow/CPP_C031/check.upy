# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2023-03-07


import re


ERR1 = 'Missing default clause at end of switch statement'


def ids():
    return ('MISRA04_15.3', 'MISRA08_6-4-6', 'MISRA12_16.4', 'M6-4-6', 'CPP_C031', 'MISRA23_16.4')


def name(id):
    return {
        'MISRA04_15.3': '''Published Standards/MISRA-C 2004/\
15.3 The final clause of a switch statement shall be the default clause''',
        'MISRA08_6-4-6': '''Published Standards/MISRA-C++ 2008/\
6-4-6 The final clause of a switch statement shall be the default-clause''',
        'MISRA12_16.4': '''Published Standards/MISRA C 2012/\
16.4 Every switch statement shall have a default label''',
        'M6-4-6': '''Published Standards/AUTOSAR/\
The final clause of a switch statement shall be the default-clause''',
        'CPP_C031': '''All Checks/Language Specific/C and C++/Control Flow/\
Switch Has Default''',
        'MISRA23_16.4': '''Published Standards/MISRA C 2023/\
16.4 Every switch statement shall have a default label''',
    }[id]


def tags(id):
    return {
        'MISRA08_6-4-6': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA12_16.4': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA04_15.3': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Control Flow',
        ],
        'M6-4-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'CPP_C031': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
        'MISRA23_16.4': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Control Flow',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA04_15.3': '''\
<p>
The requirement for a final <i>default</i> clause is defensive programming. This
clause shall either take appropriate action or contain a suitable comment as to
why no action is taken.
</p>
''',
        'MISRA08_6-4-6': '''\
<p><b>Rationale</b></p>

<p>
The requirement for a final <i>default-clause</i> is defensive programming. This
clause shall either take appropriate action, or else contain a suitable comment
as to why no action is taken.
</p>

<p><b>Exception</b></p>

<p>
If the <i>condition</i> of a switch statement is of type <i>enum</i>, and all
the enumerators are listed in case labels, then the <i>default-clause</i> is not
required as the rules associated with <i>enums</i> are intended to ensure that
the <i>enum</i> cannot be assigned values outside of its set of enumerators.
Note that it may still be appropriate to include a <i>default-clause</i> for the
purpose of defensive programming.
</p>

<p><b>Example</b></p>
<pre><code language="C++">  switch ( int16 )
  {
  case 0:
     break;
  case 1:
  case 2:
     break;
                   // Non-compliant - default clause is required.
  }
  enum Colours { RED, BLUE, GREEN } colour;
  switch ( colour )
  {
     case RED:
        break;
     case GREEN:
        break;
                   // Non-compliant - default clause is required.
  }
  switch ( colour )
  {
     case RED:
        break;
     case BLUE:
        break;
     case GREEN:
        break;
                   // Compliant - exception allows no default in this case
  }
</code></pre>
''',
        'MISRA12_16.4': '''\
<p><b>Amplification</b></p>

<p>
The <i>switch-clause</i> following the <i>default</i> label shall, prior to the
terminating <i>break</i> statement, contain either:
</p>

<ul>
<li>
A statement, or
</li>
<li>
A comment.
</li>
</ul>

<p><b>Rationale</b></p>

<p>
The requirement for a <i>default</i> label is defensive programming. Any
statements following the <i>default</i> label are intended to take some
appropriate action. If no statements follow the label then the comment can be
used to explain why no specific action has been taken.
</p>

<p><b>Example</b></p>

<pre><code language="C++">  int16_t x;

  switch ( x )
  {
    case 0:
      ++x;
      break;
    case 1:
    case 2:
      break;
                      /* Non-compliant - default label is Required      */
  }

  int16_t x;

  switch ( x )
  {
    case 0:
      ++x;
      break;
    case 1:
    case 2:
      break;
    default:          /* Compliant - default label is present           */
      errorflag = 1;  /* should be non-empty if possible                */
      break;
  }

  enum Colours
  { RED, GREEN, BLUE } colour;

  switch ( colour )
  {
    case RED:
      next = GREEN;
      break;
    case GREEN:
      next = BLUE;
      break;
    case BLUE:
      next = RED;
      break;
                      /* Non-compliant - no default label.
                       * Even though all values of the enumeration are
                       * handled there is no guarantee that colour takes
                       * one of those values                            */
  }
</code></pre>

<p><b>See also</b></p>

<p>
Rule 2.1, Rule 16.1
</p>
''',
        'M6-4-6': '''\
<p><b>Rationale</b></p>

<p>
The requirement for a final <i>default-clause</i> is defensive programming. This
clause shall either take appropriate action, or else contain a suitable comment
as to why no action is taken.
</p>

<p><b>Exception</b></p>

<p>
If the <i>condition</i> of a switch statement is of type <i>enum</i>, and all
the enumerators are listed in case labels, then the <i>default-clause</i> is not
required as the rules associated with <i>enums</i> are intended to ensure that
the <i>enum</i> cannot be assigned values outside of its set of enumerators.
Note that it may still be appropriate to include a <i>default-clause</i> for the
purpose of defensive programming.
</p>

<p><b>Example</b></p>
<pre><code language="C++">  switch ( int16 )
  {
  case 0:
     break;
  case 1:
  case 2:
     break;
                   // Non-compliant - default clause is required.
  }
  enum Colours { RED, BLUE, GREEN } colour;
  switch ( colour )
  {
     case RED:
        break;
     case GREEN:
        break;
                   // Non-compliant - default clause is required.
  }
  switch ( colour )
  {
     case RED:
        break;
     case BLUE:
        break;
     case GREEN:
        break;
                   // Compliant - exception allows no default in this case
  }
</code></pre>
''',
        'CPP_C031': '''\
<p><b>Rationale</b></p>

<p>
The requirement for a final <i>default-clause</i> is defensive programming. This
clause shall either take appropriate action, or else contain a suitable comment
as to why no action is taken.
</p>

<p><b>Exception</b></p>

<p>
If the <i>condition</i> of a switch statement is of type <i>enum</i>, and all
the enumerators are listed in case labels, then the <i>default-clause</i> is not
required as the rules associated with <i>enums</i> are intended to ensure that
the <i>enum</i> cannot be assigned values outside of its set of enumerators.
Note that it may still be appropriate to include a <i>default-clause</i> for the
purpose of defensive programming.
</p>

<p><b>Example</b></p>
<pre><code language="C++">  switch ( int16 )
  {
  case 0:
     break;
  case 1:
  case 2:
     break;
                   // Non-compliant - default clause is required.
  }
  enum Colours { RED, BLUE, GREEN } colour;
  switch ( colour )
  {
     case RED:
        break;
     case GREEN:
        break;
                   // Non-compliant - default clause is required.
  }
  switch ( colour )
  {
     case RED:
        break;
     case BLUE:
        break;
     case GREEN:
        break;
                   // Compliant - exception allows no default in this case
  }
</code></pre>
''',
        'MISRA23_16.4': '''\
<p><b>Amplification</b></p>

<p>
The <i>switch-clause</i> following the <i>default</i> label shall, prior to the
terminating <i>break</i> statement, contain either:
</p>

<ul>
<li>
A statement, or
</li>
<li>
A comment.
</li>
</ul>

<p><b>Rationale</b></p>

<p>
The requirement for a <i>default</i> label is defensive programming. Any
statements following the <i>default</i> label are intended to take some
appropriate action. If no statements follow the label then the comment can be
used to explain why no specific action has been taken.
</p>

<p><b>Example</b></p>

<pre><code language="C++">  int16_t x;

  switch ( x )
  {
    case 0:
      ++x;
      break;
    case 1:
    case 2:
      break;
                      /* Non-compliant - default label is Required      */
  }

  int16_t x;

  switch ( x )
  {
    case 0:
      ++x;
      break;
    case 1:
    case 2:
      break;
    default:          /* Compliant - default label is present           */
      errorflag = 1;  /* should be non-empty if possible                */
      break;
  }

  enum Colours
  { RED, GREEN, BLUE } colour;

  switch ( colour )
  {
    case RED:
      next = GREEN;
      break;
    case GREEN:
      next = BLUE;
      break;
    case BLUE:
      next = RED;
      break;
                      /* Non-compliant - no default label.
                       * Even though all values of the enumeration are
                       * handled there is no guarantee that colour takes
                       * one of those values                            */
  }
</code></pre>

<p><b>See also</b></p>

<p>
Rule 2.1, Rule 16.1
</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    ignoreEnums = check.id() in {'MISRA08_6-4-6', 'M6-4-6', 'CPP_C031'}
    check.options().checkbox('ignoreEnums', 'Ignore enums if all have cases', ignoreEnums)


def check(check, file):
    ignoreEnums = check.options().lookup('ignoreEnums')

    for ref in file.filerefs('Define', 'Function', True):
        ent = ref.ent()

        # Skip if no CFG
        cfg = ent.control_flow_graph()
        if not cfg:
            continue

        # Check each switch node
        for switch in cfg.nodes():

            # Skip unless node is switch missing a default clause at the end
            if switch.kind() != 'switch' or lastNodeIsDefault(switch, ref.file(), ignoreEnums):
                continue

            # Get } if using the strict parser, and the switch keyword for fuzzy
            endSwitch = switch.end_node()
            if not endSwitch or not endSwitch.line_end():
                endSwitch = switch

            check.violation(ent, ref.file(), endSwitch.line_end(), endSwitch.column_end(), ERR1)


def lastNodeIsDefault(switch, file, ignoreEnums):
    # Basic case
    if switch.children()[-1].kind() == 'switch-default':
        return True

    # Optional case: each enumerator has a case
    if ignoreEnums:
        lexer = file.lexer(True)

        # Get enum type
        lex = lexer.lexeme(switch.line_begin(), switch.column_begin())
        ent = lex.ent()
        if not ent:
            # With fuzzy parsing, the node goes to (
            if lex.text() == '(':
                lex = lex.next(True, True)
                ent = lex.ent()
                if not ent:
                    return False
            # With strict parsing, the node goes directly to the value
            else:
                return False
        enums = ent.ents('Typed')
        if not enums or not enums[0].kind().check('Enum Type'):
            return False
        enum = enums[0]

        # See if all enumerators are seen
        enumeratorsUnseen = set(enum.ents('Define', 'Enumerator'))
        for case in switch.children()[:-1]:
            lex = lexer.lexeme(case.line_begin(), case.column_begin())
            if lex.text() != 'case':
                return False
            while lex:
                if lex.text() == ':':
                    break
                if lex.ent() and lex.ent() in enumeratorsUnseen:
                    enumeratorsUnseen.remove(lex.ent())
                    break
                lex = lex.next(True, True)

        return not enumeratorsUnseen

    return False
