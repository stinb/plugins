#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => "Redundant switch statement.";

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use

sub checkID { return "CPP_C032";}

sub name { return "All Checks\\Language Specific\\C and C++\\Control Flow\\Every switch statement shall have at least one case clause";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Control Flow',
  );
}

# This is the full description of the rule being tested
sub description { return "Every switch statement shall have at least one case clause.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Developer's Note:</b></p>
In order to accomidate switch statements where the cases are build using MACROs, the "Save macro expansion text" option must be turned on. This option is under Project-&gt;Configure Project-&gt;C++/C++(Strict) under the Optimize section, there is a check box called "Save macro expansion text".
</p>

<p><b>Rationale</b></p>
A <i>switch</i> statement with no <i>case-clauses</i> is redundant.</p>
<br>
<p><b>Example</b></p><pre><code language="C++">  switch ( x )
  {
                 // Non-compliant
    default:
      break;
  }
</code></pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("c file ~unknown ~unresolved");

  my @functions = $file->filerefs("Define", "Function");

  
  foreach my $function (@functions){

    # Pull text of function and skip if there isn't a switch word present
    my $text = $file->contents;
    # Remove any // style comments
    $text =~ s/\/\/.*?\n/\n/g;
    # Remove any /* */ style comments
    $text =~ s/\/\*.*?\*\//\n/gs;
    next unless $text =~ /\bswitch\b/;
    # Get the endpoint of the function
    my $end = $function->ent->ref("End");
    next unless $end;
    # Create the lexeme.
    my $lexeme = $function->lexeme;
    while($lexeme and $lexeme->line_begin <= $end->line) {
      #$check->violation($lexeme->ent,$file,$lexeme->line_begin,$lexeme->column_begin, "%1 %2", $lexeme->text, $lexeme->token);
      if ($lexeme->text eq 'switch' and $lexeme->token eq 'Keyword') {  
        $lexeme = hasMultipleClauses($check, $lexeme, $file);
      }
      else {
        $lexeme = $lexeme->nextUseful;
      }

    }

  }
  
}

sub hasMultipleClauses {
  my $check = shift;
  my $lexeme = shift;
  my $file = shift;
  my $bracket = 1;
  my $clauses = 0;
  my $action = 0;
  my $errLine = $lexeme->line_begin;
  my $errColumn = $lexeme->column_begin;

  while($lexeme and $lexeme->text ne '{'){
    $lexeme = $lexeme->nextUseful;
  }
  $lexeme = $lexeme->nextUseful;

  while($lexeme and $bracket > 0){
    if ($clauses > 1) {
      return $lexeme;
    }
    $action = 0;
    if($lexeme->token eq 'Keyword' and ($lexeme->text eq 'case' or $lexeme->text eq 'default')){
      $action = 1;
      $clauses += 1;
      while($lexeme and $lexeme->text ne ':'){
        $lexeme = $lexeme->nextUseful;
      }
      $lexeme = $lexeme->nextUseful;

      if( $lexeme->text eq '{' ){

        $bracket +=1;
        $lexeme = $lexeme->nextUseful;

        while ( $lexeme->token eq 'Punctuation' ) {
          if( $lexeme->text eq '}' ){
            $bracket -=1;
          }
          if( $lexeme->text eq '{' ){
            $bracket +=1;
          }
          $lexeme = $lexeme->nextUseful;
        }
      }
      
      if( $lexeme->token eq 'Keyword' and ( $lexeme->text eq 'case' or $lexeme->text eq 'default' ) ){
        $clauses -= 1;
      }
    }
    if( $lexeme->text eq '}'){
      $bracket -=1;
    }
    if( $lexeme->text eq '{'){
      $bracket +=1;
    }
    if($lexeme->token eq 'Keyword' and $lexeme->text eq 'switch' ){
      $action = 1;
      $lexeme = hasMultipleClauses($check, $lexeme, $file);
    }
    if ($action == 0) {
      $lexeme = $lexeme->nextUseful;
    }
  }

  if($clauses < 2){
    $check->violation($lexeme->ent,$file,$errLine,$errColumn,ERR1);

  }

  

  return $lexeme;

}
