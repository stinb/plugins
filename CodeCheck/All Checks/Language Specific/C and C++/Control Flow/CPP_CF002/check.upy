# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 5-12-2021
import re

ERR1 = 'Switch statement is missing a default case'

# The ID for the check
def ids():
    return ('CPP_CF002')

# The short name of the check
def name(id):
    return {
        'CPP_CF002':  "All Checks/Language Specific/C and C++/Control Flow/Switch statements should have a default case"
    }[id]


def tags(id):
    return {
        'CPP_CF002': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>Switch statements should have a default case unless there are a fixed number
of cases where any other value would be impossible</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def define_options(check):
    check.option().text('limits', 'Enter a specific data type or variable name and the desired fixed number of cases, use a colon to separate the data type/variable name with the fixed number and a comma to separate each occurance (ex. dataType:7,variableName:5)', '')

def test_language(language):
    return language == 'C++'

def check(check, file):
    if file and file.lexer():
        lexer = file.lexer()
    else:
        return
    lexeme = lexer.first()
    limit = 0
    count = 0
    default = False

    # Set up user specified fixed number of cases
    limits = re.sub(r'\s', '', check.option().lookup('limits'))
    limitsDict = {}
    if limits:
        limitsList = limits.split(',')
        for limitItem in limitsList:
            name, limit = limitItem.split(':')
            limitsDict[name] = limit

    
    

    while lexeme:
        # Find switch statements
        if lexeme.text() == 'switch':
            switchLexeme = lexeme
            while lexeme.text() != '{':
                lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

                # Check for any user defined fixed number of cases
                if lexeme.ent():
                    if lexeme.ent().type() in limitsDict.keys():
                        limit = int(limitsDict[lexeme.ent().type()])

                    elif lexeme.ent().name() in limitsDict.keys():
                        limit = int(limitsDict[lexeme.ent().name()])

                    else:
                        limit = 0




            close = findClose(lexeme)

            while lexeme.line_begin() != close.line_begin() and lexeme.column_begin() != close.line_begin():
                # Count the amount of cases and check for the occurance of a default case
                if lexeme.text() == 'case' and lexeme.token() == 'Keyword':
                    count += 1

                if lexeme.text() == 'default' and lexeme.token() == 'Keyword':
                    default = True
                lexeme = lexeme.next()


            # Throw violation if there isn't a default case and the limit is less than user defined
            if (limit == 0 or limit > count) and default == False:
                check.violation(file, file, switchLexeme.line_begin(), switchLexeme.column_begin(), ERR1)

        lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)








def findClose(lexeme):
    nextLex = lexeme
    brace = 0

    while nextLex and not (nextLex.text() == '}' and brace == 0):
        if nextLex.text() == '{':
            brace += 1

        nextLex = nextLex.next(ignore_whitespace=True, ignore_comments=True)

        if nextLex.text() == '}':
            brace -= 1

    return nextLex

