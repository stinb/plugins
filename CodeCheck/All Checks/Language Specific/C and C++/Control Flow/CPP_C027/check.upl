#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Member data in non-POD class %1 is not private.';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


# This is the short error the Understand will use

sub checkID { return "CPP_C027";}

sub name { return "All Checks\\Language Specific\\C and C++\\Control Flow\\Member data in non-POD class types shall be private";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Control Flow',
  );
}

# This is the full description of the rule being tested
sub description { return "( Required ) Member data in non-POD class types shall be private.";}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b></p>
By implementing class interfaces with member functions, the implementation retains more control
over how the object state can be modified, and helps to allow a class to be maintained without
affecting clients.</p>
<br>

<p><b>Example</b></p><pre><code language="C++">class C
{
public:
  int32_t b; // Non-compliant
protected:
  int32_t c; // Non-compliant
private:
  int32_t d; // Compliant
};

</code></pre>


END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity { return 1;}


# This determines if this script is per project or per file
sub test_global { return 0;}


# Any defined options go here
sub define_options{
}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}



# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # Pull all the classes that are defined in this file, return if non
  my @classesDefined = $file->filerefs( 'Define', 'Class ~Template', 0 );
  return unless @classesDefined;

  # Loop through all defined classes
  foreach my $class ( @classesDefined ) {

    # Test if class is POD and test if data members are not private
    my $notPOD = testPOD( $class );
    my $nonPrivateData = testData( $class );

    # Throw error if not POD and has no private data
    $check->violation( $class->ent, $file, $class->line, $class->column, ERR1, $class->ent->name ) if $notPOD and $nonPrivateData;

  }
}


# This function tests if this is a non POD class
sub testPOD {

  # Pull paramaters from calling function
  my $class = shift;

  # Assume false
  my $notPOD = 0;

  # Pull all define references for this class
  my @allDefined = $class->ent->refs( 'Define' );

  # Test each define reference, if one of them is not a public data member, this class is not POD
  foreach my $define ( @allDefined ) {
    $notPOD = 1 if $define->ent->kind->longname !~ /Public Member Object/ and $define->ent->kind->longname !~ /Public Member Function Static/;
  }

  # Return flag
  return $notPOD;

}


# This function tests if the classes data members are private
sub testData {

  # Pull parameters from calling function
  my $class = shift;

  # Assume false
  my $nonPrivateData = 0;

  # Pull all data members
  my @dataMembers = $class->ent->refs( 'Define', 'Member Object' );

  # Test each data member, if one of them is not private, mark flag
  foreach my $data ( @dataMembers ) {
    $nonPrivateData = 1 if $data->ent->kindname !~ /\bPrivate\b/;
  }

  # Return flag
  return $nonPrivateData;
  
}
