# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2025-09-30


import re


ERR1 = 'Member data in non-POD class is not private'


def ids():
    return ('MISRA08_11-0-1', 'CPP_C027')


def name(id):
    return {
        'MISRA08_11-0-1': '''Published Standards/MISRA-C++ 2008/\
11-0-1 Non-private Member Data''',
        'CPP_C027': '''All Checks/Language Specific/C and C++/Control Flow/\
Non-private Member Data''',
    }[id]


def tags(id):
    return {
        'MISRA08_11-0-1': [
            'Declarations and Definitions',
            'Standard: MISRA C++ 2008',
            'Category: Required',
        ],
        'CPP_C027': [
            'Control Flow',
            'Declarations and Definitions',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    return '''\
<p><b>Title</b></p>

<p>Member data in non-<i>POD</i> class types shall be private.<.p>

<p><b>Rationale</b></p>

<p>By implementing class interfaces with member functions, the implementation
retains more control over how the object state can be modified, and helps to
allow a class to be maintained without affecting clients.</p>

<p><b>Example</b></p>

<pre><code language="C++">\
class C
{
public:
   int32_t b; // Non-compliant
protected:
   int32_t c; // Non-compliant
private:
   int32_t d; // Compliant
};\
</code></pre>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Define', 'Class ~Template'):
        ent = ref.ent()

        if not hasPublicOrProtectedData(ent):
            continue
        if isPlainOldData(ent):
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1)


def isPlainOldData(ent) -> bool:
    for ref in ent.ents('Define'):
        if not ref.kind().check('Public Member Object, Public Member Function Static'):
            return False
    return True


def hasPublicOrProtectedData(ent) -> bool:
    return len(ent.ents('Define', '~Private Member Object')) > 0
