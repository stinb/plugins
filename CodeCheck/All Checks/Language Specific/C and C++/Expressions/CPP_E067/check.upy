# This script is designed to run with Understand - CodeCheck
# Converted to python by Kalicia Adams
# 6-15-2022

import re 

ERR1 = "Floating point data tested for direct equality"

def ids():
    return ('CPP_E067')

def name(id):
    return {
        "CPP_E067" : "All Checks/Language Specific/C and C++/Expressions/Floats shall not be tested for direct equality"
        }[id]


def tags(id):
    return {
        'CPP_E067': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],

    }.get(id)

def description():
    return """\
Computed floating point data shall not be tested for direct equality. Instead, a tolerance shall be used."""

def detailed_description():
    return """\
<p>
<p><b>Rationale</b></p>
Floating point data can be rounded or truncated. For this reason, it is generally not good practice to test that data for direct equality.
Instead, testing for a tolerance can account for some amount of decimal places being truncated during calculation.
</p>
<p><b>Example</b></p><pre><code language="C++">#include &lt;math.h&gt;
#define TOL 0.0001

void gen_circum (float radius) {

  float circum; /* Circumference of the circle */
  circum = 2 * PI * radius;
  if (fabs(circum - 25.0) &lt;= TOL) {
    printf("Circle is 25 inches in circumference\n");
  }
} /* end of gen_circum */</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexemes = file.lexer().lexemes()
    if not lexemes:
        return
    
    for lexeme in lexemes: #loop through the lexemes
        leftType=""
        rightType=""
        text = ""
        entRight=lexeme
        afterText = ""
        ent=lexeme
        if lexeme.token()=="Operator" and lexeme.text()=="==": #see if there is an == operator
            previous = lexeme.previous(True, True)
            after = lexeme.next(True, True)
            
            if previous.token()=="Identifier" and previous.ent()!=None: #Check to see if the previous is an identifier(variable) and make sure it isn't none
                ent = previous.ent() #Get the lexeme entity
                leftType = ent.type() #Figure out the type. If it's a float, double, or something else. 
            elif previous.token()=="Literal" and previous.ent()!=None: #check to see if the previous lexeme is a literal. 
                text = previous.text()
                leftType = re.match(r'^\d*\.\d+|\d+\.\d*|$', text)

            if after.token()=="Identifier" and after.ent()!=None: #check to see if the next lexeme is an identifier.
                entRight = after.ent()
                rightType = entRight.type()
            elif after.token()=="Literal"and after.ent()!=None: #check to see if the next lexeme is a literal. 
                afterText = after.text()
                rightType = re.match(r'^\d*\.\d+|\d+\.\d*|$', afterText)
            
            if leftType=="double" or leftType=='float' or rightType=="double" or rightType=="float":
                check.violation(lexeme.ent(), file, lexeme.line_begin(), previous.column_begin(), ERR1) #error if the type for either side of the operator is a double or float. 
            else:
                continue 
           


