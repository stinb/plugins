# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 2-8-2022
import re
import Modules

ERR1 = 'Comma operator was used'

def ids():
    return ('M5-18-1', 'MISRA12_12.3', 'CPP_E049', 'MISRA23_8.19.1', 'MISRA23_12.3')

def name(id):
    return {
        'M5-18-1': """\
Published Standards/AUTOSAR/The comma operator shall not be used.""",
        'MISRA12_12.3': """\
Published Standards/MISRA C 2012/12.3 The comma operator should not be used.""",
        'CPP_E049': """\
All Checks/Language Specific/C and C++/Expressions/The comma operator shall not be \
used.""",
        'MISRA23_8.19.1': """\
Published Standards/MISRA C++ 2023/8.19.1 The comma operator should not be used""",
        'MISRA23_12.3': """\
Published Standards/MISRA C 2023/12.3 The comma operator should not be used""",

    }[id]




def tags(id):
    return {
        'M5-18-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'MISRA12_12.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Expressions',
        ],
        'CPP_E049': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_8.19.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Expressions',
        ],
        'MISRA23_12.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Expressions',
        ],
    }.get(id)

def detailed_description(id):
    if id in ['MISRA12_12.3', 'MISRA23_12.3']:
        return """\
<p><b>Rationale</b></p>
<p>Use of the comma operator is generally detrimental to the readability of
code, and the same effect can usually be achieved by other means.</p>
<p><b>Example</b></p>
<pre><code language="C++">f ( ( 1, 2 ), 3 ); /* Non-compliant - how many parameters? */</code></pre>
<p>The following example is non-compliant with this rule and other rules:</p>
<pre><code language="C++">for ( i = 0, p = &a[ 0 ]; i < N; ++i, ++p )
{
}</code></pre>"""

    return """\
<p><b>Rationale</b></p>
<p> The comma operator (represented by the token , ) is a binary operator that
evaluates its first operand and discards the result, it then evaluates the
second operand and returns this value (and type). The comma operator has the
lowest precedence of any C operator, and acts as a sequence point.</p>
<p>Use of the comma operator is generally detrimental to the readability of
code, and the same effect can be achieved by other means.</p>
<p><b>Example</p></b>
<pre><code language="C++">f ( ( 1, 2 ), 3 ); // Non-compliant â€“ how many parameters?
</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer()
    if not lexer:
        return

    lexeme = lexer.first()
    equals = False

    while lexeme:
        if lexeme.text() == '#':
            lexeme = lexeme.next(True, True)
            if lexeme and lexeme.text() in ['if', 'ifdef', 'ifndef']:
                lexeme = findEndIf(lexeme)
                continue
                
        if (lexeme.ent() and re.search(r'function|macro|object', lexeme.ent().kindname().lower())) or re.search(r'for|>', lexeme.text()):
            lexeme = lexeme.next(True, True)
            if lexeme and lexeme.text() == '(':
                lexeme = recurse(lexeme, True, check, file)

        elif lexeme.text() == 'enum':
            while lexeme and not re.search('{|;', lexeme.text()):
                lexeme = lexeme.next(True, True)
            if lexeme and lexeme.text() == '{':
                lexeme = Modules.findClose(lexeme)
        elif lexeme.text() == 'operator':
            lexeme = lexeme.next(True, True)
            if lexeme and lexeme.token() == 'Operator':
                while lexeme and not re.search('{|;', lexeme.text()):
                    if lexeme.text() == '(':
                        lexeme = Modules.findClose(lexeme)
                    lexeme = lexeme.next(True, True)
                if lexeme and lexeme.text() == '{':
                    lexeme = Modules.findClose(lexeme)
        elif lexeme.text() == '(' or lexeme.text() == '<':
            lexeme = recurse(lexeme, False, check, file)
        elif lexeme.text() == '{':
            prevLex = lexeme.previous(True, True)
            if prevLex and (prevLex.text() == '=' or (prevLex.ent() and re.search(r'Enum', prevLex.ent().kindname()))):
                lexeme = Modules.findClose(lexeme)
            else:
                lexeme = lexeme.next(True, True)
        elif lexeme.text() == '=':
            equals = True
            lexeme = lexeme.next(True, True)
        elif lexeme.text() == ';':
            equals = False
            lexeme = lexeme.next(True, True)
        elif lexeme.text() == ',' and equals:
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
            lexeme = lexeme.next(True, True)
                
        else:
            lexeme = lexeme.next(True, True)


# Recurses through nested parenthesis and determines whether or not the comma is used as
# a binary operator or a function parameter
def recurse(lexeme, funParen, check, file):
    if not lexeme:
        return None
    close = Modules.findClose(lexeme)
    if not close:
        return None
    lexeme = lexeme.next(True, True)
    while lexeme and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.column_begin()):
        if (lexeme.ent() and re.search(r'function|macro|object', lexeme.ent().kindname().lower())) or re.search(r'for|>', lexeme.text()):
            lexeme = lexeme.next(True, True)
            if lexeme and (lexeme.text() == '(' or lexeme.text() == '<'):
                lexeme = recurse(lexeme, True, check, file)

        elif lexeme.text() == '(' or lexeme.text() == '<':
            lexeme = recurse(lexeme, False, check, file)

        elif lexeme.text() == ',' and not funParen:
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
            lexeme = lexeme.next(True, True)

        else:
            lexeme = lexeme.next(True, True)

    return lexeme

# Skip preprocessor if blocks
def findEndIf(lexeme):
    lexeme = lexeme.next(True, True)
    while lexeme:
        if lexeme.text() == '#':
            lexeme = lexeme.next(True, True)
            if lexeme and lexeme.text() in ['if', 'ifdef', 'ifndef']:
                lexeme = findEndIf(lexeme)
                if lexeme:
                    lexeme = lexeme.next(True, True)
                    continue
        elif lexeme and lexeme.text() == 'endif':
            return lexeme

        lexeme = lexeme.next(True, True)


    return None
