# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2024-09-30


import re


ERR1 = 'Octal escape sequence not terminated'
ERR2 = 'Hexadecimal escape sequence not terminated'


BAD_OCT = r'(^|[^\\])(\\\\)*\\[0-7]+[^\'"\\0-7]'
BAD_HEX = r'(^|[^\\])(\\\\)*\\x[0-9a-fA-F]+[^\'"\\0-9a-fA-F]'


def ids():
    return ('MISRA12_4.1', 'MISRA23_4.1', 'CPP_E021')


def name(id):
    return {
        'MISRA12_4.1': '''Published Standards/MISRA C 2012/\
4.1 Octal and Hexadecimal Sequences''',
        'MISRA23_4.1': '''Published Standards/MISRA C 2023/\
4.1 Octal and Hexadecimal Sequences''',
        'CPP_E021': '''All Checks/Language Specific/C and C++/Expressions/\
Octal and Hexadecimal Sequences''',
    }[id]


def tags(id):
    return {
        'MISRA12_4.1': [
            'Expressions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
        ],
        'MISRA23_4.1': [
            'Expressions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
        ],
        'CPP_E021': [
            'Expressions',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    return '''\
<p><b>Title</b></p>
<p>Octal and hexadecimal escape sequences shall be terminated.</p>

<p><b>Amplification</b></p>
<p>An octal or hexadecimal escape sequence shall be terminated by either:</p>
<ul>
<li>The start of another escape sequence, or</li>
<li>The end of the character constant or the end of a string literal.</li>
</ul>

<p><b>Rationale</b></p>
<p>There is potential for confusion if an octal or hexadecimal escape sequence
is followed by other characters. For example, the character constant
<code>'\\x1f'</code> consists of a single character whereas the character
constant <code>'\\x1g'</code> consists of the two characters
<code>'\\x1'</code> and <code>'g'</code>. The manner in which multi-character
constants are represented as integers is implementation-defined.</p>

<p>The potential for confusion is reduced if every octal or hexadecimal escape
sequence in a character constant or string literal is terminated.</p>

<p><b>Example</b></p>
<p>In this example, each of the strings pointed to by <code>s1</code>,
<code>s2</code> and <code>s3</code> is equivalent to "Ag".</p>

<pre><code language="C++">\
const char *s1 = "\\x41g";    /* Non-compliant                            */
const char *s2 = "\\x41" "g"; /* Compliant - terminated by end of literal */
const char *s3 = "\\x41\\x67"; /* Compliant - terminated by another escape */
int c1 = '\\141t';            /* Non-compliant                            */
int c2 = '\\141\\t';           /* Compliant - terminated by another escape */\
</code></pre>

<p><b>See Also</b></p>
<p>C90: Section 6.1.3.4, C99: Section 6.4.4.4</p>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for lex in file.lexer(False).lexemes():
        if lex.token() != 'String':
            continue

        text = lex.text()

        if re.search(BAD_OCT, text):
            check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1)
        elif re.search(BAD_HEX, text):
            check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR2)
