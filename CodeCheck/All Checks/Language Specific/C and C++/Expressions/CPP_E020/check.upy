# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 9-17-21

import re

ERR1 = 'Octal constant used: %1'
ERR2 = 'Octal escape sequence used: %1'

def ids():
    return ('CPP_E020', 'M2-13-2', 'MISRA04_7.1', 'MISRA08_2-13-2', 'MISRA12_7.1', 'MISRA23_7.1', 'MISRA23_5.13.3')

def name(id):
    return {
        'CPP_E020': 'All Checks/Language Specific/C and C++/Expressions/Octal constants (other than zero) and octal escape sequences (other than "&#92;0" ) shall not be used.',
        'M2-13-2': 'Published Standards/AUTOSAR/Octal constants (other than zero) and octal escape sequences (other than "&#92;0" ) shall not be used.',
        'MISRA04_7.1': 'Published Standards/MISRA-C 2004/7.1 Octal constants (other than zero) and octal escape sequences shall not be used.',
        'MISRA08_2-13-2': 'Published Standards/MISRA-C++ 2008/2-13-2 Octal constants (other than zero) and octal escape sequences (other than "&#92;0" ) shall not be used.',
        'MISRA12_7.1': 'Published Standards/MISRA C 2012/7.1 Octal constants shall not be used',
        'MISRA23_7.1': 'Published Standards/MISRA C 2023/7.1 Octal constants shall not be used',
        'MISRA23_5.13.3': 'Published Standards/MISRA C++ 2023/5.13.3 Octal constants shall not be used',
    }[id]




def tags(id):
    return {
        'MISRA08_2-13-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Expressions',
        ],
        'MISRA12_7.1': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Expressions',
        ],
        'MISRA04_7.1': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Expressions',
        ],
        'M2-13-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E020': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_7.1': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Expressions',
        ],
        'MISRA23_5.13.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Expressions',
        ],
    }.get(id)

def description():
    return 'Octal constants (other than zero) and octal escape sequences (other than "&#92;0" ) shall not be used.'

def detailed_description(id):
    return {
        'CPP_E020': '''\
<p><b>Rationale</b></p>
<p>Any integer constant beginning with a "0" (zero) is treated as octal. Because of this, it is possible
for a zero-prefixed constant that is intended to be a decimal number to be incorrectly entered as an
octal number, contrary to developer expectations.</p>
<p>Octal escape sequences can also be problematic because the inadvertent introduction of a decimal
digit (i.e. "8" or "9") ends the octal escape and introduces another character.</p>
<p>The integer constant zero (written as a single numeric digit), is strictly speaking an octal constant,
but is a permitted exception to this rule. Additionally, "\\0" is the only permitted octal escape
sequence.</p>
<p><b>Example</b></p>
<p>The following array initialization for 3-digit decimal bus messages would not behave as
expected:</p>
<pre><code language="C++">code[ 1 ] = 109; // Compliant - decimal 109
code[ 2 ] = 100; // Compliant - decimal 100
code[ 3 ] = 052; // Non-compliant - equivalent to decimal 42
code[ 4 ] = 071; // Non-compliant - equivalent to decimal 57
</code></pre>
<p>The value of the first expression in the following example is implementation-defined because
the character constant consists of two characters, "\\10" and "9". The second character constant
expression contains the single character "\\100".</p>
<pre><code language="C++">code[ 5 ] = '\\109'; // Non-compliant - implementation-defined,
                    // two character constant
code[ 6 ] = '\\100'; // Non-compliant - set to 64.
</code></pre>
''',
        'M2-13-2': '''\
<p><b>Rationale</b></p>
<p>Any integer constant beginning with a "0" (zero) is treated as octal. Because of this, it is possible
for a zero-prefixed constant that is intended to be a decimal number to be incorrectly entered as an
octal number, contrary to developer expectations.</p>
<p>Octal escape sequences can also be problematic because the inadvertent introduction of a decimal
digit (i.e. "8" or "9") ends the octal escape and introduces another character.</p>
<p>The integer constant zero (written as a single numeric digit), is strictly speaking an octal constant,
but is a permitted exception to this rule. Additionally, "\\0" is the only permitted octal escape
sequence.</p>
<p><b>Example</b></p>
<p>The following array initialization for 3-digit decimal bus messages would not behave as
expected:</p>
<pre><code language="C++">code[ 1 ] = 109; // Compliant - decimal 109
code[ 2 ] = 100; // Compliant - decimal 100
code[ 3 ] = 052; // Non-compliant - equivalent to decimal 42
code[ 4 ] = 071; // Non-compliant - equivalent to decimal 57
</code></pre>
<p>The value of the first expression in the following example is implementation-defined because
the character constant consists of two characters, "\\10" and "9". The second character constant
expression contains the single character "\\100".</p>
<pre><code language="C++">code[ 5 ] = '\\109'; // Non-compliant - implementation-defined,
                    // two character constant
code[ 6 ] = '\\100'; // Non-compliant - set to 64.
</code></pre>
''',
        'MISRA04_7.1': '''\
<p>Any integer constant beginning with a "0" (zero) is treated as octal. So there is a danger, for
example, with writing fixed length constants. For example, the following array initialisation for
3-digit bus messages would not do as expected (052 is octal, i.e. 42 decimal):<br>
code[1] = 109;   /* equivalent to decimal 109 */ <br>
code[2] = 100;   /* equivalent to decimal 100 */ <br>
code[3] = 052;   /* equivalent to decimal 42  */ <br>
code[4] = 071;   /* equivalent to decimal 57  */</p>
<p>Octal escape sequences can be problematic because the inadvertent introduction of a decimal
digit ends the octal escape and introduces another character. The value of the frst expression in
the following example is implementation-defned because the character constant consists of two
characters, "\\10" and "9". The second character constant expression below contains the single
character "\\100". Its value will be implementation-defned if character 64 is not represented in the
basic execution character set.<br>
code[5] = '\\109';   /* implementation-defined, two character constant */ <br>
code[6] = '\\100';   /* set to 64, or implementation-defined           */</p>
<p>It is better not to use octal constants or escape sequences at all, and to check statically for any
occurrences. The integer constant zero (written as a single numeric digit), is strictly speaking an
octal constant, but is a permitted exception to this rule. Additionally "\\0" is the only permitted
octal escape sequence.
</p>
''',
        'MISRA08_2-13-2': '''\
<p><b>Rationale</b></p>
<p>Any integer constant beginning with a "0" (zero) is treated as octal. Because of this, it is possible
for a zero-prefixed constant that is intended to be a decimal number to be incorrectly entered as an
octal number, contrary to developer expectations.</p>
<p>Octal escape sequences can also be problematic because the inadvertent introduction of a decimal
digit (i.e. "8" or "9") ends the octal escape and introduces another character.</p>
<p>The integer constant zero (written as a single numeric digit), is strictly speaking an octal constant,
but is a permitted exception to this rule. Additionally, "\\0" is the only permitted octal escape
sequence.</p>
<p><b>Example</b></p>
<p>The following array initialization for 3-digit decimal bus messages would not behave as
expected:</p>
<pre><code language="C++">code[ 1 ] = 109; // Compliant - decimal 109
code[ 2 ] = 100; // Compliant - decimal 100
code[ 3 ] = 052; // Non-compliant - equivalent to decimal 42
code[ 4 ] = 071; // Non-compliant - equivalent to decimal 57
</code></pre>
<p>The value of the first expression in the following example is implementation-defined because
the character constant consists of two characters, "\\10" and "9". The second character constant
expression contains the single character "\\100".</p>
<pre><code language="C++">code[ 5 ] = '\\109'; // Non-compliant - implementation-defined,
                    // two character constant
code[ 6 ] = '\\100'; // Non-compliant - set to 64.
</code></pre>
''',
        'MISRA12_7.1': '''\
<p><b>Rationale</b></p>
Developers writing constants that have a leading zero might expect them to be interpreted as decimal
constants.
</p>

<p>
<i>Note</i>: this rule does not apply to octal escape sequences because the use of a leading \\ character
means that there is less scope for confusion.
</p>

<p><b>Exception</b></p>
The integer constant zero (written as a single numeric digit), is strictly speaking an octal constant, but
is a permitted exception to this rule..
</p>

<p><b>Example</b></p>

<pre><code language="C++">  extern uint16_t code[ 10 ];

  code[ 1 ] = 109; /* Compliant - decimal 109 */
  code[ 2 ] = 100; /* Compliant - decimal 100 */
  code[ 3 ] = 052; /* Non-Compliant - decimal 42 */
  code[ 4 ] = 071; /* Non-Compliant - decimal 57 */
</code></pre>

<p><b>Developer's Notes</b></p>
This check can hang on extremely large files ( e.g. Over 300,000 lines ). If this occurs, please remove that
file from the list of files to be checked.
</p>
''',
        'MISRA23_7.1': '''\
<p><b>Rationale</b></p>
Developers writing constants that have a leading zero might expect them to be interpreted as decimal
constants.
</p>

<p>
<i>Note</i>: this rule does not apply to octal escape sequences because the use of a leading \\ character
means that there is less scope for confusion.
</p>

<p><b>Exception</b></p>
The integer constant zero (written as a single numeric digit), is strictly speaking an octal constant, but
is a permitted exception to this rule..
</p>

<p><b>Example</b></p>

<pre><code language="C++">  extern uint16_t code[ 10 ];

  code[ 1 ] = 109; /* Compliant - decimal 109 */
  code[ 2 ] = 100; /* Compliant - decimal 100 */
  code[ 3 ] = 052; /* Non-Compliant - decimal 42 */
  code[ 4 ] = 071; /* Non-Compliant - decimal 57 */
</code></pre>

<p><b>Developer's Notes</b></p>
This check can hang on extremely large files ( e.g. Over 300,000 lines ). If this occurs, please remove that
file from the list of files to be checked.
</p>
''',
        'MISRA23_5.13.3': '''\
<p><b>Rationale</b></p>
<p>
Any integer constant beginning with a 0 (zero) is an octal constant. Because of this, a zero-prefixed
constant that is intended to be a decimal number may be interpreted as an octal number, contrary
to developer expectations.
</p>

<p>
<i>Note</i>: this rule does not apply to octal escape sequences because the use of a leading \\ character
means that there is less scope for confusion.
</p>

<p><b>Exception</b></p>
The integer constant 0 (written as a single numeric digit) is an octal constant, but its use is permitted
as an exception to this rule
</p>

<p><b>Example</b></p>

<pre><code language="C++">  extern uint16_t code[ 10 ];

  code[ 1 ] = 109; /* Compliant - decimal 109 */
  code[ 2 ] = 100; /* Compliant - decimal 100 */
  code[ 3 ] = 052; /* Non-Compliant - decimal 42 */
  code[ 4 ] = 071; /* Non-Compliant - decimal 57 */
  code[ 5 ] = 0; // Compliant by exception
  code[ 6 ] = 000; // Non-compliant - exception does not apply
  code[ 7 ] = '&#92;123'; // Rule does not apply

</code></pre>

<p><b>Developer's Notes</b></p>
This check can hang on extremely large files ( e.g. Over 300,000 lines ). If this occurs, please remove that
file from the list of files to be checked.
</p>
''',
    }[id]

def test_entity(file):
    return file.kind().check('header file, code file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('flagOctalEscapeSeq', 'Flag octal escape sequences', True)


def check(check, file):
    constantsString = '0+[1-7][0-7]*|0{2,3}?' # 0+, 1-7, [0-7]*
    escapesString = '\'\\\\0*[1-7][0-9]*\'' # Single quote, backslash, 0*, 1-7, [0-9]*, single quote
    constants = re.compile(constantsString)
    escapes = re.compile(escapesString)

    previousText = ''
    for lexeme in file.lexer(False).lexemes():
        token = lexeme.token()
        text = lexeme.text()
        if token in {'Literal', 'String'}:
            match = constants.match(text)
            if match:
                check.violation(None, file, lexeme.line_begin(), lexeme.column_begin(), ERR1, match.group())
                continue

            if not check.options().lookup('flagOctalEscapeSeq'):
                continue

            match = escapes.match(text)
            if match:
                check.violation(None, file, lexeme.line_begin(), lexeme.column_begin(), ERR2, match.group())
