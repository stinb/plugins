# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2022-03-09


import re


ERR1 = 'Right operand %1 is negative'
ERR2 = 'Right operand %1 can be equal to the width of the left operand (minimum of %2)'
ERR3 = 'Right operand %1 can be greater than the width of the left operand (minimum of %2)'


# Dictionary of all minimum sizes in bits, not always true for all compilers and target platforms
WIDTHS = {'char': 8, 'signed char': 8, 'unsigned char': 8, 'short': 16, 'short int': 16, 'signed short': 16, 'signed short int': 16, 'unsigned short': 16, 'unsigned short int': 16, 'int': 16, 'signed': 16, 'signed int': 16, 'unsigned': 16, 'unsigned int': 16, 'size_t': 16, 'long': 32, 'long int': 32, 'signed long': 32, 'signed long int': 32, 'unsigned long': 32, 'unsigned long int': 32, 'long long': 64, 'long long int': 64, 'signed long long': 64, 'signed long long int': 64, 'unsigned long long': 64, 'unsigned long long int': 64, '16 bit pointer': 16, '32 bit pointer': 32, '64 bit pointer': 64}


def ids():
    return ('M5-8-1', 'MISRA08_5-8-1', 'CPP_E046', 'MISRA04_12.8', 'MISRA12_12.2', 'MISRA23_12.2')


def name(id):
    return {
        'M5-8-1': 'Published Standards/AUTOSAR/The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand.',
        'MISRA08_5-8-1': 'Published Standards/MISRA-C++ 2008/5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand.',
        'CPP_E046': 'All Checks/Language Specific/C and C++/Expressions/The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand.',
        'MISRA04_12.8': 'Published Standards/MISRA-C 2004/12.8 The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand.',
        'MISRA12_12.2': 'Published Standards/MISRA C 2012/12.2 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand.',
        'MISRA23_12.2': 'Published Standards/MISRA C 2023/12.2  The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand',
    }[id]


def tags(id):
    return {
        'MISRA08_5-8-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Expressions',
        ],
        'MISRA12_12.2': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Expressions',
        ],
        'MISRA04_12.8': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Expressions',
        ],
        'M5-8-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Partially Automated',
            'Expressions',
        ],
        'CPP_E046': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_12.2': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Expressions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'M5-8-1': '''
<p>
The right hand operand of a shift operator cannot be negative, or greater than or equal to the bit size of the left hand operand.
</p>

<p><b>Rationale</b></p>

<p>
It is undefined behaviour if the right hand operand is negative, or greater than or equal to the width of the left hand operand.
</p>

<p>
If, for example, the left hand operand of a left-shift or right-shift is a 16-bit integer, then it is important to ensure that this is shifted only by a number between 0 and 15 inclusive.
</p>

<p>
There are various ways of ensuring that this rule is followed. The simplest is for the right hand operand to be a constant (whose value can then be statically checked). Use of an unsigned integer type will ensure that the operand is non-negative, so then only the upper limit needs to be checked (dynamically at run time or by review). Otherwise both limits will need to be checked.
</p>

<p><b>Example</b></p>

<pre><code language="C++">u8a  = (uint8_t) ( u8a &lt;&lt; 7 );              // Compliant
u8a  = (uint8_t) ( u8a &lt;&lt; 9 );              // Non-compliant
u16a = (uint16_t)( (uint16_t) u8a &lt;&lt; 9 );   // Compliant
</code></pre>

<p><b>See also</b></p>

<p>
See Section 6.5.0 for a description of underlying type.
</p>

<p><b>Developer's Notes</b></p>

<p>
1. While MISRA 2012 Rule 12.2 says the essential type of <code>1u</code> is <code>unsigned char</code>, the official documentation actually has always defined it as a variant type defined by the compiler, with a minimum bit width of <code>sizeof(unsigned int) * 8</code>. The same is for <code>1</code> with a minimum bit width of <code>sizeof(int) * 8</code>. Therefore, for reducing false positives, it is recommended to uncheck the option "Treat literal int as char".
</p>

<p>
2. The bit width of the left hand operand may be larger on certain target systems. This check assumes the minimum bit width allowed of each type.
</p>
<p>
3. The macro types option will check if a type is a macro and if so then
it will check the name of the macro for the type or skip if wording isn't clear
if the type is related to this check. The check without this option will utilize
Understand's "Underlying Type" freetext.
</p>
''',

        'MISRA08_5-8-1': '''
<p>
The right hand operand of a shift operator cannot be negative, or greater than or equal to the bit size of the left hand operand.
</p>

<p><b>Rationale</b></p>

<p>
It is undefined behaviour if the right hand operand is negative, or greater than or equal to the width of the left hand operand.
</p>

<p>
If, for example, the left hand operand of a left-shift or right-shift is a 16-bit integer, then it is important to ensure that this is shifted only by a number between 0 and 15 inclusive.
</p>

<p>
There are various ways of ensuring that this rule is followed. The simplest is for the right hand operand to be a constant (whose value can then be statically checked). Use of an unsigned integer type will ensure that the operand is non-negative, so then only the upper limit needs to be checked (dynamically at run time or by review). Otherwise both limits will need to be checked.
</p>

<p><b>Example</b></p>

<pre><code language="C++">u8a  = (uint8_t) ( u8a &lt;&lt; 7 );              // Compliant
u8a  = (uint8_t) ( u8a &lt;&lt; 9 );              // Non-compliant
u16a = (uint16_t)( (uint16_t) u8a &lt;&lt; 9 );   // Compliant
</code></pre>

<p><b>See also</b></p>

<p>
See Section 6.5.0 for a description of underlying type.
</p>

<p><b>Developer's Notes</b></p>

<p>
1. While MISRA 2012 Rule 12.2 says the essential type of <code>1u</code> is <code>unsigned char</code>, the official documentation actually has always defined it as a variant type defined by the compiler, with a minimum bit width of <code>sizeof(unsigned int) * 8</code>. The same is for <code>1</code> with a minimum bit width of <code>sizeof(int) * 8</code>. Therefore, for reducing false positives, it is recommended to uncheck the option "Treat literal int as char".
</p>

<p>
2. The bit width of the left hand operand may be larger on certain target systems. This check assumes the minimum bit width allowed of each type.
</p>
<p>
3. The macro types option will check if a type is a macro and if so then
it will check the name of the macro for the type or skip if wording isn't clear
if the type is related to this check. The check without this option will utilize
Understand's "Underlying Type" freetext.
</p>
''',
        'CPP_E046': '''
<p>
The right hand operand of a shift operator cannot be negative, or greater than or equal to the bit size of the left hand operand.
</p>

<p><b>Rationale</b></p>

<p>
It is undefined behaviour if the right hand operand is negative, or greater than or equal to the width of the left hand operand.
</p>

<p>
If, for example, the left hand operand of a left-shift or right-shift is a 16-bit integer, then it is important to ensure that this is shifted only by a number between 0 and 15 inclusive.
</p>

<p>
There are various ways of ensuring that this rule is followed. The simplest is for the right hand operand to be a constant (whose value can then be statically checked). Use of an unsigned integer type will ensure that the operand is non-negative, so then only the upper limit needs to be checked (dynamically at run time or by review). Otherwise both limits will need to be checked.
</p>

<p><b>Example</b></p>

<pre><code language="C++">u8a  = (uint8_t) ( u8a &lt;&lt; 7 );              // Compliant
u8a  = (uint8_t) ( u8a &lt;&lt; 9 );              // Non-compliant
u16a = (uint16_t)( (uint16_t) u8a &lt;&lt; 9 );   // Compliant
</code></pre>

<p><b>See also</b></p>

<p>
See Section 6.5.0 for a description of underlying type.
</p>

<p><b>Developer's Notes</b></p>

<p>
1. While MISRA 2012 Rule 12.2 says the essential type of <code>1u</code> is <code>unsigned char</code>, the official documentation actually has always defined it as a variant type defined by the compiler, with a minimum bit width of <code>sizeof(unsigned int) * 8</code>. The same is for <code>1</code> with a minimum bit width of <code>sizeof(int) * 8</code>. Therefore, for reducing false positives, it is recommended to uncheck the option "Treat literal int as char".
</p>

<p>
2. The bit width of the left hand operand may be larger on certain target systems. This check assumes the minimum bit width allowed of each type.
</p>
<p>
3. The macro types option will check if a type is a macro and if so then
it will check the name of the macro for the type or skip if wording isn't clear
if the type is related to this check. The check without this option will utilize
Understand's "Underlying Type" freetext.
</p>
''',

        'MISRA04_12.8': '''
<p>
The right hand operand of a shift operator cannot be negative, or greater than or equal to the bit size of the left hand operand.
</p>

<p><b>Rationale</b></p>

<p>
If, for example, the left hand operand of a left-shift or right-shift is a 16-bit integer, then it is important to ensure that this is shifted only by a number between 0 and 15 inclusive.
</p>

<p>
See section 6.10 for a description of underlying type.
</p>

<p>
There are various ways of ensuring that this rule is followed. The simplest is for the right hand operand to be a constant (whose value can then be statically checked). Use of an unsigned integer type will ensure that the operand is non-negative, so then only the upper limit needs to be checked (dynamically at run time or by review). Otherwise both limits will need to be checked.
</p>

<pre><code language="C++">u8a  = (uint8_t) ( u8a &lt;&lt; 7 );              // Compliant
u8a  = (uint8_t) ( u8a &lt;&lt; 9 );              // Non-compliant
u16a = (uint16_t)( (uint16_t) u8a &lt;&lt; 9 );   // Compliant
</code></pre>

<p><b>Developer's Notes</b></p>

<p>
1. While MISRA 2012 Rule 12.2 says the essential type of <code>1u</code> is <code>unsigned char</code>, the official documentation actually has always defined it as a variant type defined by the compiler, with a minimum bit width of <code>sizeof(unsigned int) * 8</code>. The same is for <code>1</code> with a minimum bit width of <code>sizeof(int) * 8</code>. Therefore, for reducing false positives, it is recommended to uncheck the option "Treat literal int as char".
</p>

<p>
2. The bit width of the left hand operand may be larger on certain target systems. This check assumes the minimum bit width allowed of each type.
</p>
<p>
3. The macro types option will check if a type is a macro and if so then
it will check the name of the macro for the type or skip if wording isn't clear
if the type is related to this check. The check without this option will utilize
Understand's "Underlying Type" freetext.
</p>
''',

        'MISRA12_12.2': '''
<p>
The right hand operand of a shift operator cannot be negative, or greater than or equal to the bit size of the left hand operand.
</p>

<p><b>Rationale</b></p>

<p>
If the right hand operand is negative, or greater than or equal to the width of the left hand operand, then the behaviour is undefined.
</p>

<p>
If, for example, the left hand operand of a left-shift or right-shift is a 16-bit integer, then it is important to ensure that this is shifted only by a number in the range 0 to 15.
</p>

<p>
See Section 8.10 for a description of essential type and the limitations on the essential types for the operands of shift operators.
</p>

<p>
There are various ways of ensuring this rule is followed. The simplest is for the right hand operand to be a constant (whose value can then be statically checked). Use of an unsigned integer type will ensure that the operand is non-negative, so then only the upper limit needs to be checked (dynamically at run time or by review). Otherwise both limits will need to be checked.
</p>

<p><b>Example</b></p>

<pre><code language="C++">u8a = u8a &lt;&lt; 7;                 /* Compliant */
u8a = u8a &lt;&lt; 8;                 /* Non-compliant */
u16a = ( uint16_t ) u8a &lt;&lt; 9;   /* Compliant */
</code></pre>

<p>
To assist in understanding the following examples, it should be noted that the <i>essential type</i> of <code>1u</code> is <i>essentially unsigned char</i>, whereas the <i>essential type</i> of <code>1UL</code> is <i>essentially unsigned long</i>.
</p>

<pre><code language="C++">1u &lt;&lt; 10u;                      /* Non-compliant */
( uint16_t ) 1u &lt;&lt; 10u;         /* Compliant */
1UL &lt;&lt; 10u;                     /* Compliant */
</code></pre>

<p><b>Developer's Notes</b></p>

<p>
1. While MISRA 2012 Rule 12.2 says the essential type of <code>1u</code> is <code>unsigned char</code>, the official documentation actually has always defined it as a variant type defined by the compiler, with a minimum bit width of <code>sizeof(unsigned int) * 8</code>. The same is for <code>1</code> with a minimum bit width of <code>sizeof(int) * 8</code>. Therefore, for reducing false positives, it is recommended to uncheck the option "Treat literal int as char".
</p>

<p>
2. The bit width of the left hand operand may be larger on certain target systems. This check assumes the minimum bit width allowed of each type.
</p>
<p>
3. The macro types option will check if a type is a macro and if so then
it will check the name of the macro for the type or skip if wording isn't clear
if the type is related to this check. The check without this option will utilize
Understand's "Underlying Type" freetext.
</p>
''',
        'MISRA23_12.2': '''
<p><b>Rationale</b></p>
<p>
If the right hand operand is negative, or greater than or equal to the width of the left hand operand, then the behaviour is undefined.
</p>

<p>
If, for example, the left hand operand of a left-shift or right-shift is a 16-bit integer, then it is important to ensure that this is shifted only by a number in the range 0 to 15.
</p>

<p>
See Section 8.10 for a description of essential type and the limitations on the essential types for the operands of shift operators.
</p>

<p>
There are various ways of ensuring this rule is followed. The simplest is for the right hand operand to be a constant (whose value can then be statically checked). Use of an unsigned integer type will ensure that the operand is non-negative, so then only the upper limit needs to be checked (dynamically at run time or by review). Otherwise both limits will need to be checked.
</p>

<p><b>Example</b></p>

<pre><code language="C++">u8a = u8a &lt;&lt; 7;                 /* Compliant */
u8a = u8a &lt;&lt; 8;                 /* Non-compliant */
u16a = ( uint16_t ) u8a &lt;&lt; 9;   /* Compliant */
</code></pre>

<p>
To assist in understanding the following examples, it should be noted that the <i>essential type</i> of <code>1u</code> is <i>essentially unsigned char</i>, whereas the <i>essential type</i> of <code>1UL</code> is <i>essentially unsigned long</i>.
</p>

<pre><code language="C++">1u &lt;&lt; 10u;                      /* Non-compliant */
( uint16_t ) 1u &lt;&lt; 10u;         /* Compliant */
1UL &lt;&lt; 10u;                     /* Compliant */
</code></pre>

<p><b>Developer's Notes</b></p>
<p>
1. While MISRA 2012 Rule 12.2 says the essential type of <code>1u</code> is <code>unsigned char</code>, the official documentation actually has always defined it as a variant type defined by the compiler, with a minimum bit width of <code>sizeof(unsigned int) * 8</code>. The same is for <code>1</code> with a minimum bit width of <code>sizeof(int) * 8</code>. Therefore, for reducing false positives, it is recommended to uncheck the option "Treat literal int as char".
</p>
<p>
2. The bit width of the left hand operand may be larger on certain target systems. This check assumes the minimum bit width allowed of each type.
</p>
<p>
3. The macro types option will check if a type is a macro and if so then
it will check the name of the macro for the type or skip if wording isn't clear
if the type is related to this check. The check without this option will utilize
Understand's "Underlying Type" freetext.
</p>
''',
    }[id]



def test_entity(file):
    return file.kind().check('header file, code file')


def test_global():
    return False


def define_options(check):
    check.options().choice('architecture', 'Minimum architecture for target systems (for pointer widths)', ['16 bit', '32 bit', '64 bit'], '32 bit')
    check.options().checkbox('treatIntAsChar', 'Treat literal int as char (see note 1)', True)
    check.options().checkbox('trustWidthInTypeName', 'Trust the width in type names (example: u32 is 32 bits)', True)
    check.options().checkbox('trustMacroName', 'Trust the width in name of macro types in name(see note 3)', False)


def test_language(language):
    return language == 'C++'


def literalOrConst(lex):
    return lex.token() == 'Literal' or lex.token() == 'Identifier' and lex.ent() and lex.ent().type() and re.match(r'const ', lex.ent().type())


def integerLiteral(string):
    return re.match(r'-?\d+\w*$', str(string))


def widthFromValue(string, treatIntAsChar):
    string = string.lower()

    # Count the amount of integer suffix characters in the last 3 characters
    counts = {'u': 0, 'l': 0, 'z': 0}
    for char in string[-3:]:
        if char in counts:
            counts[char] += 1

    # Get the minimum width of the suffixes
    if counts == {'u': 0, 'l': 0, 'z': 0}:
        if treatIntAsChar:
            return WIDTHS['char']
        else:
            return WIDTHS['int']
    elif counts == {'u': 1, 'l': 0, 'z': 0}:
        if treatIntAsChar:
            return WIDTHS['unsigned char']
        else:
            return WIDTHS['unsigned int']
    elif counts == {'u': 0, 'l': 1, 'z': 0}:
        return WIDTHS['long int']
    elif counts == {'u': 1, 'l': 1, 'z': 0}:
        return WIDTHS['unsigned long int']
    elif counts == {'u': 0, 'l': 2, 'z': 0}:
        return WIDTHS['long long int']
    elif counts == {'u': 0, 'l': 2, 'z': 0}:
        return WIDTHS['long long int']
    elif counts == {'u': 1, 'l': 2, 'z': 0}:
        return WIDTHS['unsigned long long int']
    elif counts == {'u': 0, 'l': 0, 'z': 1}:
        return WIDTHS['size_t']
    elif counts == {'u': 1, 'l': 0, 'z': 1}:
        return WIDTHS['size_t']


def literalToInteger(literal):
    literal = literal.lower()

    # Remove suffix from the last 3 characters
    length = len(literal)
    start = length - 3
    if start < 0:
        start = 0
    for i in range(start, length):
        char = literal[i]
        if char in {'u', 'l', 'z'}:
            literal = literal[0:i]
            break

    # Binary
    if re.match(r'0b[0|1]+$', literal):
        return int(literal, 2)
    # Octal
    if re.match(r'0[0-7]*$', literal):
        return int(literal, 8)
    # Decimal
    if re.match(r'-?[1-9][0-9]*$', literal):
        return int(literal)
    # Hexadecimal
    if re.match(r'0x[0-9|a-f]+$', literal):
        return int(literal, 16)


def widthFromType(lexeme, trustWidthInTypeName):
    if lexeme.token() == 'Identifier':
        ent = lexeme.ent()
        if ent and ent.kind().check('Typedef'):
            # Width from name, such as 32 from u32
            width = getWidthFromName(ent.name(), trustWidthInTypeName)
            if width:
                return width
            # Width from underlying type
            underlyingType = ent.freetext('UnderlyingType')
            if underlyingType in WIDTHS:
                return WIDTHS[underlyingType]
    elif lexeme.token() == 'Keyword':
        if lexeme.text() in WIDTHS:
            return WIDTHS[lexeme.text()]
    return None


def getWidthFromName(name, trustWidthInTypeName):
    # None if the user doesn't trust WIDTHS in type names
    if not trustWidthInTypeName:
        return None

    # None if there's no number in the name
    match = name and re.search(r'(\d+)', name)
    if not match:
        return None

    # None if there's not a valid number, which is at least 8 bits
    width = int(match[0])
    if width < 8:
        return None

    return width


def widthFromCStyleCast(lexeme, trustWidthInTypeName):
    # Match )
    lexeme = lexeme.previous(True, True)
    if lexeme.token() != 'Punctuation' or lexeme.text() != ')':
        return None

    # Match a type
    lexeme = lexeme.previous(True, True)
    return widthFromType(lexeme, trustWidthInTypeName)


def check(check, file):
    lexer = file.lexer()

    if not lexer or not re.search(r'<<|>>', file.contents()):
        return

    lex = lexer.first()

    treatIntAsChar       = check.options().lookup('treatIntAsChar')
    trustWidthInTypeName = check.options().lookup('trustWidthInTypeName')
    checkMacros          = check.options().lookup('trustMacroName')

    # Find all the bit shift operators
    while lex:
        if lex.text() in {'<<', '>>'} and lex.token() == 'Operator':
            lLex = lex.previous(True, True)
            lEnt = lLex.ent()
            lWidth = None
            rLex = lex.next(True, True)
            rEnt = rLex.ent()
            rValue = None

            # Skip if the right lexeme isn't a literal or a constant object
            if not literalOrConst(rLex):
                lex = lex.next(True, True)
                continue

            # Get the width of the left hand operand if it's not a literal
            if lEnt:
                # Width from type name
                lWidth = getWidthFromName(lEnt.type(), trustWidthInTypeName)
                # Width from underlying type or value
                if not lWidth:
                    lType = lEnt.freetext('UnderlyingType')
                    if checkMacros:
                        lRef = lEnt.ref('Definein')
                        if lRef:
                            tempLex = lexer.lexeme(lRef.line(), lRef.column())
                            if tempLex:
                                tempLex = tempLex.previous(True, True)
                                if tempLex and tempLex.ent() and tempLex.ent().kind().check('Macro'):
                                    lType = tempLex.ent().name()

                    # If it's a pointer, the size is usually defined by the architecture.
                    # The minimum architecture is used as an edge case for the smallest width.
                    if lType and re.search(r'\*$', lType):
                        lType = check.options().lookup('architecture') + ' pointer'
                    # If it's a normal integer or pointer
                    if lType in WIDTHS:
                        lWidth = WIDTHS[lType]
                    # If it's a resolved macro which is an integer literal
                    elif lEnt.kind().check('~Unresolved Macro'):
                        value = lEnt.value()
                        if integerLiteral(value):
                            lWidth = widthFromValue(value, treatIntAsChar)
            # Get the width of the left hand operand if it's a literal
            elif lLex.token() == 'Literal' and integerLiteral(lLex.text()):
                value = lLex.text()
                lWidth = widthFromValue(value, treatIntAsChar)

            # Change the width of the left hand operand if there's a cast
            castWidth = widthFromCStyleCast(lLex, trustWidthInTypeName)
            if castWidth:
                lWidth = castWidth

            # Get the value of the right operand if it's a constant object
            if rEnt and rEnt.value() and integerLiteral(rEnt.value()):
                rValue = literalToInteger(rEnt.value())
            # Get the value of the right operand if it's a literal
            elif integerLiteral(rLex.text()):
                rValue = literalToInteger(rLex.text())

            if rValue:
                if rValue < 0:
                    check.violation(rEnt, file, rLex.line_begin(), rLex.column_begin(), ERR1, rValue)
                elif lWidth and rValue == lWidth:
                    check.violation(rEnt, file, rLex.line_begin(), rLex.column_begin(), ERR2, rValue, lWidth)
                elif lWidth and rValue > lWidth:
                    check.violation(rEnt, file, rLex.line_begin(), rLex.column_begin(), ERR3, rValue, lWidth)

        lex = lex.next(True, True)
