import re

ERR1 = 'Trivial accessor and mutator functions should be inlined.'

# The ID for the check
def ids():
    return ('A3-1-6', 'CPP_F034')

# The short name of the check
def name(id):
    return {
        'A3-1-6': 'Published Standards/AUTOSAR/Trivial accessor and mutator functions should be inlined.',
        'CPP_F034': 'All Checks/Language Specific/C and C++/Functions/Trivial accessor and mutator functions should be inlined.',
    }[id]


def tags(id):
    return {
        'A3-1-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F034': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return '''
<p>Simple <i>get</i> and <i>set</i> methods should be formatted on one line.</p>

<p><b>Rationale</b></p>

<p>Inlining trivial accessors and mutators saves time and space, as it reduces multiple syntax elements that has to be repeated.</p>

<p><b>Example</b></p>

<pre><code language="C++">//% $Id: A3-1-6.cpp 305629 2018-01-29 13:29:25Z piotr.serwa $
#include &lt;cstdint&gt;

class A
{
public:
    A(std::int32_t l) noexcept : limit{l} {}
    //compliant
    std::int32_t Limit() const noexcept { return limit; }
    //compliant
    void SetLimit(std::int32_t l) { limit = l; }

    //non-compliant
    //std::int32_t Limit() const noexcept
    //{
        //open file, read data, close file
        //return value
    //}
    //non-compliant
    //void SetLimit(std::int32_t l)
    //{
        //open file, write data, close file
    //}

    private:
    std::int32_t limit;
};
</code></pre>

<p><b>See also</b></p>

<p>
â€¢ JSF December 2005 [8]: AV Rule 122: Trivial accessor and mutator functions should be inlined.
</p>'''



# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    for ref in file.filerefs("Define","Class", True):
        for ent in ref.ent().ents("Define","Private"):
            for ent_ref in ent.refs("Return,Setby ~Init","Function"):
                if len(ent_ref.ent().refs("Return")) == 1 or len(ent_ref.ent().refs("C Set")) == 1:
                    if re.search(r"\n", ent_ref.ent().contents()):
                        check.violation(ent_ref.ent(), file, ent_ref.ent().ref().line(), ent_ref.ent().ref().column(), ERR1)
