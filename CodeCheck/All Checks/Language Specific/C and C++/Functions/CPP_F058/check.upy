# This script is designed to run with Understand - CodeCheck
# Written and Converted by Kalicia Adams
# 6-15-2022
import re 

ERR1 = "Function prologue is missing name"
ERR2 = "Function prologue is missing description"
ERR3 = "Function prologue is missing notes"
ERR4 = "Function prologue is missing arguments"
ERR5 = "Function prologue is missing return values"
ERR6 = "Function prologue is missing error information"
ERR7 = "Function prologue is missing reference information"


# The ID for the check
def ids():
    return ('CPP_F058')

# The short name of the check
def name(id):
    return {
        'CPP_F058': "All Checks/Language Specific/C and C++/Functions/Function prologue shall contain certain specific information"
    }[id]


def tags(id):
    return {
        'CPP_F058': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],

    }.get(id)

def description():
    return """\
    <p>Function prologue shall contain the following information: name, description, notes, arguments, return values, errors, and references.</p>"""

def detailed_description():
    return """\
<p><b>Rationale</b></p>
Checks for missing information in function prologues, the comment blocks above function definitions. 
Each function prologue must have the following format:<br>
/*****************************************<br>
* Function name: <i>[function name]</i><br>
* Description: <i>[description]</i><br>
* Notes: <i>[notes]</i><br>
* Arguments: <i>[arguments]</i><br>
* Return value: <i>[return value]</i><br>
* Errors: <i>[errors]</i><br>
* References: <i>[references]</i><br>
******************************************/<br>
Note: This check is quite strict - if any of the above information is missing or in the incorrect format, it will be flagged.<br>
"""

def define_options(check):
    pass

def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check,file):
    for func in file.filerefs("Define", "Function"): #Get only Defined Functions
        if func.ent().comments('before', False, "definein"):
            if len(re.findall('name', func.ent().comments('before').lower() ))<1: #Using regex to figure out if name is mentioned in the prologue. 
                check.violation(func.ent(), file, func.line(), func.column(), ERR1)
            if len(re.findall('description', func.ent().comments('before').lower() ))<1: #figure out if description is in prologue
                check.violation(func.ent(), file, func.line(), func.column(), ERR2)
            if len(re.findall('notes', func.ent().comments('before').lower() ))<1: #figure out if notes is in prologue
                check.violation(func.ent(), file, func.line(), func.column(), ERR3)
            if len(re.findall('arguments', func.ent().comments('before').lower() ))<1: #figure out if arguments is in prologue
                check.violation(func.ent(), file, func.line(), func.column(), ERR4)
            if len(re.findall('return value', func.ent().comments('before').lower() ))<1: #figure out if return value is in prologue
                check.violation(func.ent(), file, func.line(), func.column(), ERR5)
            if len(re.findall('errors', func.ent().comments('before').lower() ))<1: #figure out if errors is in prologue
                check.violation(func.ent(), file, func.line(), func.column(), ERR6)
            if len(re.findall('references', func.ent().comments('before').lower() ))<1: #figure out if references is in prologue
                check.violation(func.ent(), file, func.line(), func.column(), ERR7)
            else:
                continue
