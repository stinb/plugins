# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 11/11/14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Parameter %1 is being passed by reference';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


# This is the short error the Understand will use

sub checkID { return "CPP_F022";}

sub name { return "All Checks\\Language Specific\\C and C++\\Functions\\Objects should not be passed by reference";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Functions',
  );
}

# This is the full description of the rule being tested
sub description { 
  return "Objects should not be passed by reference.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { 
  return <<"END_DESC"

The check alerts the developer to any instances where a parameter is passed by reference.

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity { 
  return 1;
}


# This determines if this script is per project or per file
sub test_global { 
  return 0;
}


# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->checkbox( 'constOk', 'Ignore const qualified parameters?', 0 );
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # Pull a list of all Methods that are defined within this file
  my @parametersDefined = $file->filerefs( 'Define', 'Parameter', 1 );
  return unless @parametersDefined;

  # Loop through each parameter
  foreach my $parameter ( @parametersDefined ) {

    # Spin up a lexer and walk back one. If we see a &, we know this is passed by reference
    my $ok = 1;
    my $lexeme = $parameter->lexeme;
    $lexeme = $lexeme->prevUseful;
    $ok = 0 if $lexeme->text eq '&';
    $ok = 1 if $check->option->lookup( 'constOk' ) and $parameter->ent->type =~ /^const\b/;
    $check->violation( $parameter->ent, $parameter->file, $parameter->line, $parameter->column, ERR1, $parameter->ent->name ) unless $ok;

  }
}
