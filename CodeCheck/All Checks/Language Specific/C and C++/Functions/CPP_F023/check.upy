# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 1-20-17
# Rewritten by Robby Bennett
# 3-13-23


import re


ERR1 = 'Parameter %1 is modified'


def ids():
    return ('MISRA12_17.8', 'CPP_F023', 'MISRA23_17.8')


def name(id):
    return {
        'MISRA12_17.8': '''Published Standards/MISRA C 2012/\
17.8 A function parameter should not be modified''',
        'CPP_F023': '''All Checks/Language Specific/C and C++/Functions/\
A function parameter should not be modified''',
        'MISRA23_17.8': '''Published Standards/MISRA C 2023/\
17.8 A function parameter should not be modified''',
    }[id]



def tags(id):
    return {
        'MISRA12_17.8': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Functions',
        ],
        'CPP_F023': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
        'MISRA23_17.8': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Functions',
        ],
    }.get(id)

def detailed_description():
    return '''\
<p><b>Rationale</b></p>

<p>
A function parameter behaves in the same manner as an object that has automatic
storage duration. While the C language permits parameters to be modified, such
use can be confusing and conflict with programmer expectations. It may be less
confusing to copy the parameter to an automatic object and modify that copy.
With a modern compiler, this will not usually result in any storage or execution
time penalty.
</p>

<p>
Programmers who are unfamiliar with C, but who are used to other languages, may
modify a parameter believing that the effects of the modification will be felt
in the calling function.
</p>

<p><b>Example</b></p>

<pre><code language="C++">int16_t glob = 0;
void proc ( int16_t para )
{
  para = glob;               /* Non-compliant */
}
void f ( char *p, char *q )
{
  p = q;                     /* Non-compliant */
  *p = *q;                   /* Compliant */
}
</code></pre>
'''




def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def test_language(language):
    return language == 'C++'


def check(check, file):
    for define in file.filerefs('Define', 'Parameter', True):
        param = define.ent()

        # Skip parameters passed by reference
        if param.type() and re.search(r'&', param.type()):
            continue

        # Each modification
        for mod in param.refs('Setby ~Deref, Modifyby ~Deref'):
            scope = mod.ent()

            check.violation(scope, mod.file(), mod.line(), mod.column(), ERR1, param)
