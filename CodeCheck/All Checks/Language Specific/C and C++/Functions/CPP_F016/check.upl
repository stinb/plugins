#This script is designed to run with Understand - CodeCheck
use base qw(Understand::Codecheck);
use strict;


use CodeCheck::Libraries::InfoSiftr qw(getFunctionParams);

use constant ERR1 => 'Violation: function "%1" includes a variable number of arguments.';

sub register_tr_text {
	my $check = shift;
	$check->add_tr_text(ERR1);
}


sub checkID { return "CPP_F016";}

sub name { return "All Checks\\Language Specific\\C and C++\\Functions\\variable numbers of arguments shall not be used.";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Functions',
  );
}

sub description { 'Functions shall not be defined with variable numbers of arguments.' }

sub detailed_description { <<'END_DESC'
There are a lot of potential problems with this feature. Users shall not write additional functions that use a variable number of arguments. This precludes the use of use of <i>stdarg.h</i>, <i>va_arg</i>, <i>va_start</i> and <i>va_end</i>.
END_DESC
}

sub test_language {
	my $language = shift;
	return $language eq 'C++';
}

sub test_entity { 1 }

sub test_global { 0 }

sub define_options { }

sub check {
	my $check = shift;
	my $file = shift;
	return unless $file->kind->check('c file');
	
	my $lexer = $file->lexer(0);
	
	foreach my $ref ($file->filerefs('C Define, C Declare ~Implicit', 'C Function', 0)) {
		my @params = getFunctionParams($ref, $lexer);
		
		if (grep { $_ eq '...' } @params) {
			$check->violation($ref->ent, $ref->file, $ref->line, $ref->column, ERR1, $ref->ent->longname);
		}
	}
	
	return;
}
