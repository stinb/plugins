# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 11-23-2020

import re

# The ID for the check
def id():
    return 'CPP_F061'

# The short name of the check
def name():
    return """\
All Checks/Language Specific/C and C++/Functions/The type of the return and all \
method arguments (even type void) shall be specified when defining a method"""


def tags(id):
    return {
        'CPP_F061': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],

    }.get(id)

# The short description of the check
def description():
    return 'The type of the return and all method arguments (even type void) \
shall be specified when defining a method.'

# The long description of the check
def detailed_description():
    return """\
<p>The type of the return and all method arguments (even type void) shall be 
specified when defining a method.
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

# Options for the check
def define_options(check):
   return

def check(check, file): 
    if file and file.lexer():
        lexer = file.lexer()
    else:
        return

    # Obtain function references
    func_refs = file.filerefs('Define', 'C Member Function')
    if not func_refs:
        return

    for func in func_refs:
        lexeme = lexer.lexeme(func.line(), 0)

        ok = True
        if func.ent().type() == 'int':
            ok = False
            # if the return type is declared on the previous line, this is ok
            if lexeme.previous(ignore_whitespace=True, ignore_comments=True) and lexeme.previous(ignore_whitespace=True, ignore_comments=True).text() == "int":
                ok = True 
            while lexeme and lexeme.text() != func.ent().name():
                if lexeme.text() == 'int':
                    ok = True
                lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

        # Check if return type was specified
        if not ok:
            violation = check.violation(func.ent(), file, lexeme.line_begin(), lexeme.column_begin(), 'Return type was not specified')
            violation.add_fixit_hint(lexeme.line_begin(), lexeme.column_begin(), lexeme.line_begin(), lexeme.column_begin(), 'int ')
        
        # Check if any arguments or void is specified
        while lexeme and lexeme.text() != '(':
            lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

        if not lexeme:
            return
        lexeme = lexeme.next(ignore_comments=True, ignore_whitespace=True)

        if lexeme.text() == ')' and not func.ent().parameters():
            violation = check.violation(func.ent(), file, lexeme.line_begin(), lexeme.column_begin(), 'No arguments were specified')
            violation.add_fixit_hint(lexeme.line_begin(), lexeme.column_begin(), lexeme.line_begin(), lexeme.column_begin(), 'void')
