ERR1 = 'Function is defined using the ellipsis notation.'


# The ID for the check
def ids():
    return ('A8-4-1', 'CPP_F008', 'MISRA08_8-4-1')


# The short name of the check
def name(id):
    return {
        'A8-4-1': 'Published Standards/AUTOSAR/Functions shall not be defined using the ellipsis notation.',
        'CPP_F008': 'All Checks/Language Specific/C and C++/Functions/Functions shall not be defined using the ellipsis notation',
        'MISRA08_8-4-1': 'Published Standards/MISRA-C++ 2008/8-4-1 Functions shall not be defined using the ellipsis notation',
    }[id]





def tags(id):
    return {
        'MISRA08_8-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Functions',
        ],
        'A8-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F008': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    return {
        'A8-4-1': '''
<p>Functions shall not be defined using the ellipsis notation for parameters.</p>

<p><b>Rationale</b></p>

<p>Passing arguments via an ellipsis bypasses the type checking performed by the
compiler. Additionally, passing an argument with non-POD class type leads to
undefined behavior.</p>

<p>Variadic templates offer a type-safe alternative for ellipsis notation. If use of a
variadic template is not possible, function overloading or function call chaining can
be considered.</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A8-4-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $

void Print1(char* format, ...) // Non-compliant - variadic arguments are used
{
    // ...
}

template &lt;typename First, typename... Rest&gt;
void Print2(const First& first, const Rest&... args) // Compliant
{
    // ...
}
</code></pre>

<p><b>See also</b></p>

<p>• MISRA C++ 2008 [7]: Rule 8-4-1 Functions shall not be defined using the ellipsis
notation.</p>
<p>• HIC++ v4.0 [9]: 14.1.1 Use variadic templates rather than an ellipsis.</p>
<p>• C++ Core Guidelines [11]: Type.8: Avoid reading from varargs or passing vararg
arguments. Prefer variadic template parameters instead.</p>
<p>• C++ Core Guidelines [11]: F.55: Don't use va_arg arguments.</p>
        ''',

        'CPP_F008': '''
<p>Functions shall not be defined using the ellipsis notation for parameters.</p>

<p><b>Rationale</b></p>

<p>Passing arguments via an ellipsis bypasses the type checking performed by the
compiler. Additionally, passing an argument with non-POD class type leads to
undefined behavior.</p>

<p>Variadic templates offer a type-safe alternative for ellipsis notation. If use of a
variadic template is not possible, function overloading or function call chaining can
be considered.</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A8-4-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $

void Print1(char* format, ...) // Non-compliant - variadic arguments are used
{
    // ...
}

template &lt;typename First, typename... Rest&gt;
void Print2(const First& first, const Rest&... args) // Compliant
{
    // ...
}
</code></pre>

<p><b>See also</b></p>

<p>• MISRA C++ 2008 [7]: Rule 8-4-1 Functions shall not be defined using the ellipsis
notation.</p>
<p>• HIC++ v4.0 [9]: 14.1.1 Use variadic templates rather than an ellipsis.</p>
<p>• C++ Core Guidelines [11]: Type.8: Avoid reading from varargs or passing vararg
arguments. Prefer variadic template parameters instead.</p>
<p>• C++ Core Guidelines [11]: F.55: Don't use va_arg arguments.</p>
        ''',

        'MISRA08_8-4-1': '''
<p>Functions shall not be defined using the ellipsis notation for parameters.</p>

<p><b>Rationale</b></p>

<p>
Passing arguments via an ellipsis bypasses the type checking performed by the compiler.
Additionally, passing an argument with non-<i>POD</i> class type leads to <i>undefined behaviour</i>.</p>

<p>
Note that the rule specifies "defined" (and not "declared") so as to permit the use of existing
library functions.</p>

<p><b>Example</b></p>

<pre><code language="C++">  void MyPrintf ( char_t * pFormat, ... ); // Non-compliant
</code></pre>
        ''',
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(lookup_ents=False)

    if not lexer:
        return

    for func_ref in file.filerefs('Define', 'Function ~Template'):
        parenthesis_stack = []
        in_param = False

        lex = lexer.lexeme(func_ref.line(), func_ref.column())

        while lex:
            lex_text = lex.text()
            lex_token = lex.token()

            if not parenthesis_stack and (lex_text == '(' and lex_token == 'Punctuation'):
                in_param = True
            elif in_param and (lex_text == '...' and lex_token == 'Punctuation'):
                check.violation(func_ref.ent(), file, func_ref.line(), func_ref.column(), ERR1)
                break
            elif in_param and (lex_text == '(' and lex_token == 'Punctuation'):
                parenthesis_stack.append(lex_text)
            elif (lex_text == ')' and lex_token == 'Punctuation') and parenthesis_stack:
                parenthesis_stack.pop()
            elif (lex_text == ')' and lex_token == 'Punctuation') and not parenthesis_stack:
                break

            lex = lex.next(ignore_comments=True, ignore_whitespace=True)
