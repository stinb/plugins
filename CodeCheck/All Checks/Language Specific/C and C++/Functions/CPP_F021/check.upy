# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 10-25-22


import re


ERR1 = '%1 from stdarg.h/cstdarg used'


def ids():
    return ('MISRA12_17.1', 'CPP_F021', 'MISRA23_17.1', 'MISRA23_21.10.1')


def name(id):
    return {
        'MISRA12_17.1': '''Published Standards/MISRA C 2012/17.1 \
The features of <stdarg.h> shall not be used''',
        'CPP_F021': '''All Checks/Language Specific/C and C++/Functions/\
The features of <stdarg.h> shall not be used''',
        'MISRA23_17.1': '''Published Standards/MISRA C 2023/17.1 \
The standard header file <stdarg.h> shall not be used''',
        'MISRA23_21.10.1': '''Published Standards/MISRA C++ 2023/21.10.1 \
The features of <cstdarg> shall not be used''',
    }[id]





def tags(id):
    return {
        'MISRA12_17.1': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Functions',
        ],
        'CPP_F021': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
        'MISRA23_17.1': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Functions',
        ],
        'MISRA23_21.10.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Functions',
        ],
    }.get(id)

def detailed_description(id):
    if id == 'MISRA23_21.10.1':
        return '''
<p><b>Amplification</b></p>
<p>This rule also applies to the features of &lt;stdarg.h&gt;.</p>
<p>None of va_list, va_arg, va_start, va_end and va_copy shall be used.</p>

<p><b>Rationale</b></p>
<p>Passing arguments via an ellipsis bypasses the type checking performed by the compiler.</p>
<p>There are many instances of undefined behaviour associated with the features of &lt;cstdarg&gt;, including:

<ul>

<li>
<i>va_end</i> not being used prior to end of a function in which <i>va_start</i>
was used;
</li>

<li>
<i>va_arg</i> being used in different functions on the same <i>va_list</i>;
</li>

<li>
The type of an argument not being compatible with the type specified to
<i>va_arg</i>.
</li>

</ul>

<p>Note: this rule does not restrict the use of existing library functions that are implemented as variadic
function or the declaration of functions that use the ellipsis.</p>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;cstdarg&gt;
void h( va_list ap ) // Non-compliant
{
 double y;
 y = va_arg( ap, double ); // Non-compliant
}

void f( uint16_t n, ... )
{
 uint32_t x;
 va_list ap; // Non-compliant
 va_start( ap, n ); // Non-compliant
 x = va_arg( ap, uint32_t ); // Non-compliant
 h( ap );
 // Undefined behaviour - ap is indeterminate because va_arg used in h
 x = va_arg( ap, uint32_t ); // Non-compliant
 // Undefined behaviour - returns without using va_end
}

void g( void )
{
 // Undefined behaviour - uint32_t / double type mismatch when f uses va_arg
 f( 1, 2.0, 3.0 );
}</code></pre>

<p><b>See also</b></p>
<p>8.2.11</p>
        '''

    if id == 'MISRA23_17.1':
        return '''
<p><b>Amplification</b></p>
<p>
The standard header file &lt;stdarg.h&gt; shall not be #include'd, and none of the features that are
specified as being provided by &lt;stdarg.h&gt; shall be used.
</p>

<p><b>Rationale</b></p>
<p>
The C Standard lists many instances of undefined behaviour associated with the features of
&lt;stdarg.h&gt;, including:
</p>

<ul>

<li>
<i>va_end</i> not being used prior to end of a function in which <i>va_start</i>
was used;
</li>

<li>
<i>va_arg</i> being used in different functions on the same <i>va_list</i>;
</li>

<li>
The type of an argument not being compatible with the type specified to
<i>va_arg</i>.
</li>

</ul>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;stdarg.h&gt;
void h ( va_list ap ) /* Non-compliant */
{
 double y;
 y = va_arg ( ap, double ); /* Non-compliant */
}
void f ( uint16_t n, ... )
{
 uint32_t x;
 va_list ap; /* Non-compliant */
 va_start ( ap, n ); /* Non-compliant */
 x = va_arg ( ap, uint32_t ); /* Non-compliant */
 h ( ap );
 /* undefined - ap is indeterminate because va_arg used in h ( ) */
 x = va_arg ( ap, uint32_t ); /* Non-compliant */
 /* undefined - returns without using va_end ( ) */
}
void g ( void )
{
 /* undefined - uint32_t:double type mismatch when f uses va_arg ( ) */
 f ( 1, 2.0, 3.0 );
}
</code></pre>
        '''

    return '''
<p><b>Amplification</b></p>

<p>
None of <i>va_list</i>, <i>va_arg</i>, <i>va_start</i>, <i>va_end</i> and, for
C99, <i>va_copy</i> shall be used.
</p>

<p><b>Rationale</b></p>

<p>
The Standard lists many instances of undefined behaviour associated with the
features of &lt;stdarg.h&gt;, including:
</p>

<ul>

<li>
<i>va_end</i> not being used prior to end of a function in which <i>va_start</i>
was used;
</li>

<li>
<i>va_arg</i> being used in different functions on the same <i>va_list</i>;
</li>

<li>
The type of an argument not being compatible with the type specified to
<i>va_arg</i>.
</li>

</ul>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;stdarg.h&gt;

void h ( va_list ap )             /* Non-compliant */
{
  double y;

  y = va_arg ( ap, double );      /* Non-compliant */
}

void f ( uint16_t n, ... )
{
  uint32_t x;

  va_list ap;                     /* Non-compliant */

  va_start ( ap, n );             /* Non-compliant */
  x = va_arg ( ap, uint32_t );    /* Non-compliant */

  h ( ap );

  /* undefined - ap is indeterminate because va_arg used in h ( ) */
  x = va_arg ( ap, uint32_t );    /* Non-compliant */

  /* undefined - returns without using va_end ( ) */
}

void g ( void )
{
  /* undefined - uint32_t:double type mismatch when f uses va_arg ( ) */
  f ( 1, 2.0, 3.0 );
}
</code></pre>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    lex = file.lexer(False).first()
    while lex:
        text = lex.text()
        if re.match(r'va_(list|arg|start|end|copy)$', text):
            check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1, text)
        lex = lex.next(True, True)
