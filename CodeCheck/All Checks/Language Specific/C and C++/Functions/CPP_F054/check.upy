# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 3-17-2022

import re

RETURN_STATEMENT = re.compile(r'[{|\s]return\s+(.*?);')

ERR1 = 'Boolean function does not explicitly return true or false: "%1"'

def id():
    return 'CPP_F054'

def name():
    return """\
All Checks/Language Specific/C and C++/Functions/Boolean functions shall \
explicitly return true or false"""


def tags(id):
    return {
        'CPP_F054': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],

    }.get(id)

def detailed_description():
    return '''
<p>
Boolean functions shall return true (non-zero) if the condition implied by their name (e.g., isSet) is true, and false (zero) if the condition implied by their name is false.
</p>

<p>
A boolean function is one which returns a value that may be tested as being true or false. When the return type of the function is _Bool or bool, use the macros true and false to test for the true and false conditions. For other integer return types, use the macros TRUE and FALSE.
</p>
'''

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # Find every function reference in the file
    for ref in file.filerefs('Define', 'Function', True):
        ent = ref.ent()

        # Ignore functions without boolean return types
        if ent.type() not in {'_Bool', 'bool'}:
            continue

        # Get text
        text = ent.contents()
        # Remove any // style comments
        text = re.sub(r'\/\/.*?\n','\n', text)
        # Remove any /* */ style comments
        text = re.sub(r'\/\*[\s\S]*?\*\/','\n', text)

        # Find each return statement that is not explicitly true or false
        for match in re.finditer(RETURN_STATEMENT, text):
            value = match[1]
            if value and value not in {'true', 'false'}:

                # Shorten the value for the message
                longest = 30
                if len(value) > longest:
                    value = value[0:longest] + ' ...'

                check.violation(ent, file, ref.line(), ref.column(), ERR1, value)
