# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 06-17-2021

import re

ERR1 = 'Parameter %1 should be declared const'

def id():
    return 'CPP_F065'

def name():
    return """\
All Checks/Language Specific/C and C++/Functions/Any parameter not modified by \
a method should be passed to the method as a const."""


def tags(id):
    return {
        'CPP_F065': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>Passing parameters as const allows a
variable to be passed without copying as a reference or pointer
to prevent the possibility of being accidentally altered.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    cRefs = file.filerefs('Define', 'Member Function')
    for cRef in cRefs:
        for ref in cRef.ent().refs('Define', 'Parameter'):
            # Check if parameter of member function is const and if its changed
            if not re.search(r'const', str(ref.ent().type())) and not ref.ent().refs('Setby, Modifyby'):
                violation = check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())
                violation.add_fixit_hint(ref.line(), ref.column(), ref.line(), ref.column(), 'const ')
       
