# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-3-2020

def id():
    return 'CPP_F051'

def name():
    return "All Checks/Language Specific/C and C++/Functions/" +  'A function should be inlined only if it has one or two lines of code'


def tags(id):
    return {
        'CPP_F051': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],

    }.get(id)

def description():
    return 'A function should be inlined only if it has one or two lines of code.'

def detailed_description():
    return  """\
<p><b>Rationale:</b></p>
<p>Inlining large functions can result in slower compilation
times and an increase in binary size, and may not increase
execution performance.
</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
	funcs = file.filerefs('Define', 'C Function', True)

	for func in funcs:
		# spin up lexer and walk backward to figure out if it's inlined
		lexer = file.lexer()
		lexeme = lexer.lexeme(func.line(), func.column())

		while lexeme and lexeme.previous() and lexeme.token() != "Newline":
			if lexeme.text() == "inline":
				# pull the number of executable lines from the metrics helper func
				metric_dict = func.ent().metric(["CountLineCodeExe"])
				lines_code = metric_dict["CountLineCodeExe"]

				if lines_code > 2:
					check.violation(func.ent(), file, func.line(), func.column(), "Inline function '%1' has too many lines of code (%2)", func.ent(), lines_code)

			lexeme = lexeme.previous()
