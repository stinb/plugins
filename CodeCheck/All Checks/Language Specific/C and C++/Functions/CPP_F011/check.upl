#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;


# Violation messages should use constants and can have additonal parameters 
# indicated with %1, %2, %3 etc. like printf does
use constant ERR1 => 'Function %1 is defined in the body of class %2';

# Required - Violation messages should be registred for translation
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# Required - Return the short name of the check

sub checkID { return "CPP_F011";}

sub name { return "All Checks\\Language Specific\\C and C++\\Functions\\Inline functions defined in the class body";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Functions',
  );
}

# Required - Return the short description of the check
sub description { return "Inline functions defined in the class body";}

# Required - Return the long description of the check
sub detailed_description { return <<"END_DESC"
Inline functions defined in the class body
END_DESC
}

# Required - Test the language of the current file, the check will be 
# skipped if this returns 0
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; 
  return 1;
}

# Currently only supported on a per-file basis
sub test_entity { return 1;}

# project-level checks
sub test_global { return 0;}

sub check {
  my $check = shift; #The check object, needed to report violations and lookup option values
  my $file = shift; 
  
  # test_entity only runs on files for now, but could change in the future, so force the check to only run on files
  return unless $file->kind->check('c file'); 
  
  #loop through member functions
  my @entRefs = $file->filerefs("define","function member ~unknown ~unresolved",1);
  foreach my $functionRef (@entRefs){
    my $function = $functionRef->ent;
    my $ref = $function->ref("definein","class ~unknown ~unresolved") or return;
    if (!$function->ref("declarein")){
      $check->violation($function,$ref->file,$ref->line,$ref->column,ERR1,$function->name,$ref->scope->name());
    }
  }
}
