# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett


import re


ERR1 = 'Function reference not preceded by &'


def ids():
    return ('M8-4-4', 'MISRA08_8-4-4', 'CPP_F006', 'MISRA23_17.12')


def name(id):
    return {
        'M8-4-4': 'Published Standards/AUTOSAR/A function identifier shall either be used to call the function or it shall be preceded by &.',
        'MISRA08_8-4-4': 'Published Standards/MISRA-C++ 2008/8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &',
        'CPP_F006': 'All Checks/Language Specific/C and C++/Functions/A Function identifier shall either be used to call the function or it shall be preceded by &',
        'MISRA23_17.12': 'Published Standards/MISRA C 2023/17.12 A function identifier should only be used with either a preceding &, or with a parenthesized parameter list',
    }[id]


def tags(id):
    return {
        'MISRA08_8-4-4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Functions',
        ],
        'M8-4-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F006': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
        'MISRA23_17.12': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Functions',
        ],
    }.get(id)


def detailed_description(id):
    if id == 'MISRA23_17.12':
        return '''\
<p><b>Rationale</b></p>
<p>A function identifier not preceded by & and not followed by a parenthesized parameter list (which
may be empty) can be confusing: it may not be clear whether the intent is to call the function (but the
parenthesized parameter list has accidentally been omitted) or the intent is to obtain the function
address.</p>
<p><b>Example</b></p>
<pre><code language="C++">typedef int32_t (*pfn_i)(void);

extern int32_t func1 ( void ); /* Note: A function */
extern int32_t (*func2)( void ); /* Note: A function pointer */

void func ( void )
{
 pfn_i pfn1 = &func1; /* Compliant */
 pfn_i pfn2 = func1; /* Non-compliant */
 int32_t i32a = (*pfn1)(); /* Compliant - explicit call via a fn-pointer */
 pfn1(); /* Compliant - implicit call via a fn-pointer */
 if ( func1 == func2 ) /* Non-compliant */
 {
 /* ... */
 }
 if ( func1 ( ) == func2 ( ) ) /* Compliant - comparing return values */
 {
 /* ... */
 }
 if ( &func1 == func2 ) /* Compliant - comparing a function's address */
 {
 /* ... */
 }
}
</code></pre>
        '''

    return '''
<p><b>Rationale</b></p>
<p>A function identifier can implicitly convert to a pointer to a function. In certain contexts this may
result in a well-formed program, but which is contrary to developer expectations. For example, if
the developer writes:</p>
<p><code>if ( f )</code></p>
<p>then it is not clear whether the intent is to test if the address of the function is NULL or if a call to
the function <code>f()</code> should be made and the brackets have been unintentionally omitted. The use of
the <code>&</code> (address-of) operator will resolve this ambiguity.</p>
<p><b>Exception</b></p>
<p>Passing the function by reference, or assigning it to a reference object is not a violation of this rule.</p>
<p><b>Example</b></p>
<pre><code language="C++">extern void f ( void );
if ( 0 == f ) // Non-compliant
{
    // ...
}
void (*p)( void ) = f; // Non-compliant
if ( 0 == &f ) // Compliant
{
    (f)(); // Compliant as function is called
}
void (*p)( void ) = &f; // Compliant
</code></pre>
'''


def test_entity(file):
    return file.kind().check('header file, code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().text('ignored', 'Long names of ignored functions (space-separated)', '')


def check(check, file):
    ignored: set[str] = set(check.options().lookup('ignored').split())

    for lexeme in file.lexer().lexemes():
        token = lexeme.token()
        ref = lexeme.ref()
        ent = lexeme.ent()
        if not ref:
            continue

        if not ref.kind().check('Useby Ptr') or not ent.kind().check('Function'):
            continue

        if ent.longname() in ignored:
            continue

        violation = False
        previous = lexeme.previous()
        while True:
            if previous == None:
                violation = True
                break

            text = previous.text()
            token = previous.token()

            # Violation: Pointer is used by operator
            if text not in {'&', '::', '(', '<', '>'} and token == 'Operator':
                violation = True
                break
            # Violation: Pointer is used as a first argument
            if text == '(' and previous.previous().token() == 'Identifier':
                violation = True
                break
            # Good: Pointer is preceded by &
            if text == '&':
                break

            previous = previous.previous()

        if violation:
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
