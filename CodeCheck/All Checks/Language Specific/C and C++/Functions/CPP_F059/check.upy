# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 12-14-2020

import re

# The ID for the check
def ids():
    return ('CPP_F059')

# The short name of the check
def name(id):
    return {
        'CPP_F059':  "All Checks/Language Specific/C and C++/Functions/Variable-length argument lists should not be used"
    }[id]


def tags(id):
    return {
        'CPP_F059': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],

    }.get(id)

def description():
    return """\
Variable-length argument lists should not be used, unless they are required because of the design."""

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Variable length argument lists allow a function to receive any number of 
arguments. There are certain situations where this may be useful: </p>
<p>- sum of given numbers</p>
<p>- minimum of given numbers</p>
<p>- etc.</p>
<p><b>Developer's Note:</b></p>
<p>There is a level of human knowledge required in determining whether or
not a variable-length arg list is required by design. For this reason,
this CodeCheck flags any use of a variable-length arg list and it will
be up to the developer reviewing the check to determine if it is an actual 
violation.
</p>
"""

def test_entity(file):
	return file.kind().check('code file, header file')


def define_options(check):
	pass

def test_language(language):
    return language == 'C++'

def check(check, file):
	func_refs = file.filerefs('define', 'c function ~unknown ~unresolved')

	for func in func_refs:
		# spin up lexer
		lexer = file.lexer()
		lexeme = lexer.lexeme(func.line(), func.column())

		# parse file until we find the opening brace of the function
		while lexeme and lexeme.text() != "{":

			if lexeme and lexeme.token() == "Punctuation" and lexeme.text() == "...":
				check.violation(func.ent(), file, func.line(), func.column(), "Variable-length argument found in function '%1'", func.ent())

			lexeme = lexeme.next(ignore_comments=True, ignore_whitespace=True)
