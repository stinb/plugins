#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'NULL thrown explicitly in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use

sub checkID { return "CPP_E012";}

sub name { return "All Checks\\Language Specific\\C and C++\\Exception Handling\\NULL shall not be thrown explicitly";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Exception Handling',
  );
}

# This is the full description of the rule being tested
sub description { return "NULL shall not be thrown explicitly.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
throw(NULL) (equivalent to throw(0)) is never a throw of the <i>null-pointer-constant</i> and so is
only ever caught by an integer handler. This may be inconsistent with developer expectations,
particularly if the program only has handlers for pointer-to-type exceptions.</p>
<br>
<p><b>Example</b></p><pre><code language="C++">  try
  {
    throw ( NULL ); // Non-compliant
  }
  catch ( int32_t i ) // NULL exception handled here
  {
    // ...
  }
  catch ( const char_t * ) // Developer may expect it to be caught here
  {
    // ...
  }
  char_t * p = NULL;
  try
  {
    throw ( static_cast &lt; const char_t * &gt; ( NULL ) ); // Compliant,
                                                       // but breaks
                                                       // Rule 15–0–2
    throw ( p ); // Compliant
  }
  catch ( int32_t i )
  {
    // ...
  }
  catch ( const char_t * ) // Both exceptions handled here
  {
    // ...
  }
</code></pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # Check the file for a throw ( NULL ) or throw ( 0 )
  my $foundNULL;
  my $fileText = $file->contents;
  $foundNULL = 1 if $fileText =~ /throw\s+\(?\s*NULL\s*\)?/;
  $foundNULL = 1 if $fileText =~ /throw\s+\(?\s*0\s*\)?/;
  return unless $foundNULL;
  
  # This check requires use of the Understand lexer. Initialize and check for failure 
  my $lexer = $file->lexer(0,,0,0);
  return unless $lexer;
  
  # $lexeme is intialized as the first element returned from the lexer
  my $lexeme = $lexer->first();
  
  # While the lexer has lexemes ...
  while ($lexeme) {
    next unless $lexeme->text eq "throw";
	my $string;
	# Build a string to be tested
	while ($lexeme->token ne "Newline") {
	  $string .= $lexeme->text unless $lexeme->token eq "Comment";
	  $lexeme = $lexeme->next;
	}
	my $errorDetected;
	$errorDetected = 1 if $string =~ /throw\s+\(?\s*NULL\s*\)?/;
	$errorDetected = 1 if $string =~ /throw\s+\(?\s*0\s*\)?/;
	throwError($check, $lexeme->ent,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1,$file->name) if $errorDetected;
  }
  # Set $lexeme to the next value from $lexer
  continue {
    $lexeme = $lexeme->next;
  }
}
























