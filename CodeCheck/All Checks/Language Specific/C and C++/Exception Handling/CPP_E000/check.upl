# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 10/21/2015

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Class type exception not caught by reference in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use

sub checkID { return "CPP_E000";}

sub name { return "All Checks\\Language Specific\\C and C++\\Exception Handling\\A class type exception shall always be caught by reference";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Exception Handling',
  );
}

# This is the full description of the rule being tested
sub description { return "A class type exception shall always be caught by reference.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
If a class type exception object is caught by value, slicing occurs. That is, if the exception object is of
a derived class and is caught as the base, only the base class's functions (including virtual functions)
can be called. Also, any additional member data in the derived class cannot be accessed.</p>
<br>
<p>
If the exception is caught by reference, slicing does not occur.</p>
<br>
<p><b>Example</b></p><pre><code language="C++">  // base class for exceptions
  class ExpBase
  {
  public:
    virtual const char_t *who ( )
    {
      return "base";
    };
  };
  class ExpD1: public ExpBase
  {
  public:
    virtual const char_t *who ( )
    {
      return "type 1 exception";
    };
  };
  class ExpD2: public ExpBase
  {
  public:
    virtual const char_t *who ( )
    {
      return "type 2 exception";
    };
  };

  int main() {
    try
    {
      // ...
      throw ExpD1 ( );
      // ...
      throw ExpBase ( );
    }
    catch ( ExpBase &b ) // Compliant â€“ exceptions caught by reference
    {
      // ...
      b.who(); // "base", "type 1 exception" or "type 2 exception"
               // depending upon the type of the thrown object
    }
    // Using the definitions above ...
    catch ( ExpBase b ) // Non-compliant - derived type objects will be
                        // caught as the base type
    {
      b.who(); // Will always be "base"
      throw b; // The exception re-thrown is of the base class,
               // not the original exception type
    }
  }
</code></pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");

  # Pull all classes caught by exception
  my @classesDefined = $file->filerefs( 'C Catch', 'C Class' );
  foreach my $class ( @classesDefined ) {
    my $lexeme = $class->lexeme;
    $check->violation( $class->ent, $class->file, $class->line, $class->column, ERR1, $class->ent->name ) unless $lexeme->nextUseful->text eq '&';
  }
}
