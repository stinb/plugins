# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-26-2020

import re

# The ID for the check
def ids():
    return ('CPP_EH003')

# The short name of the check
def name(id):
    return {
        'CPP_EH003':  "All Checks/Language Specific/C and C++/Exception Handling/Destructors should not throw exceptions"
    }[id]


def tags(id):
    return {
        'CPP_EH003': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],

    }.get(id)

def description():
    return 'Destructors should not throw exceptions'

def detailed_description():
    return """\
<p>Since a destructor may be called by an initial exception, this reduces the 
risk of immediate program termination caused by an exception that is thrown 
while another exception is in progress.
</p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
	mem_funcs = file.filerefs('define', 'c member function', True)

	for func in mem_funcs:
		parent = func.ent().parent().simplename()
		name = func.ent().simplename()

		destruct = "~" + parent

		if name == destruct:
			contents = func.ent().contents()

			found_throw = re.search(r"throw", contents)

			if found_throw:
				check.violation(func.ent(), file, func.line(), func.column(), "Violation: destructor '%1' should not throw an exception", name)
