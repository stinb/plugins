# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-17-2020

import re

# The ID for the check
def ids():
    return ('CPP_EH002')

# The short name of the check
def name(id):
    return {
        'CPP_EH002':  "All Checks/Language Specific/C and C++/Exception Handling/Library objects shall not generate error messages directly"
    }[id]


def tags(id):
    return {
        'CPP_EH002': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],

    }.get(id)

def description():
    return 'Library objects shall not generate error messages directly; \
they shall return an error indication (nil, -1, etc.) or use an error handling \
facility (such as that in ObjectStore or the one defined in error.h).'

def detailed_description():
    return """\
Errors should be communicated to the user via Kernel dialogue boxes. The only
times printfs are appropriate are for output error logs, during initial 
testing, and for fatal error messages (when there is question as to whether 
the windowing system survived). Under all other circumstances, they should be 
avoided.</p>
<p><b>Developer's Note:</b></p>
<p>This CodeCheck does not filter out non-library objects for the user. When running this CodeCheck,
one should only do so on the library architecture or a library object directly.
</p>"""

def test_entity(file):
    return file.kind().check('header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
	# spin up lexer
	lexer = file.lexer()
	lexeme = lexer.first()

	while lexeme:

		if lexeme.ent() and lexeme.token() == "Identifier" and lexeme.text() == "cout":
			check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), "Library shall not attempt to generate a message")

		elif lexeme.ent() and lexeme.token() == "Identifier" and lexeme.text() == "printf":
			check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), "Library shall not attempt to generate a message")

		lexeme = lexeme.next()
