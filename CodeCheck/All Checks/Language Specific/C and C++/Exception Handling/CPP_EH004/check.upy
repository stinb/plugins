# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 12-11-2020

import re

# The ID for the check
def ids():
    return ('CPP_EH004')

# The short name of the check
def name(id):
    return {
        'CPP_EH004':  "All Checks/Language Specific/C and C++/Exception Handling/Exceptions should be caught only by reference"
    }[id]


def tags(id):
    return {
        'CPP_EH004': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],

    }.get(id)

def description():
    return 'Exceptions should be caught only by reference.'

def detailed_description():
    return """\
<p><b>Rationale:</b></p>
<p>
Catching by pointer creates ambiguity as to what cleanup actions should be
taken; catching by value involves unnecessary copies and is subject to the 
slicing effect for derived exception classes.
</p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    if file and file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        if lexeme and lexeme.token() == "Keyword" and lexeme.text() == "catch":
            # create temp lex to look for pass by reference
            temp_lex = lexeme
            passed_by_ref = False

            while temp_lex and temp_lex.token() != "Newline":

                if temp_lex and temp_lex.next() and temp_lex.token() == "Operator" and temp_lex.text() == "&":
                    passed_by_ref = True

                temp_lex = temp_lex.next(ignore_comments=True)

            if not passed_by_ref:
                if temp_lex:
                    while temp_lex and not temp_lex.ent():
                        temp_lex = temp_lex.previous(ignore_whitespace=True, ignore_comments=True)
                    violation = check.violation(file, file, temp_lex.line_begin(), temp_lex.column_begin(), "Violation: Exception not caught by reference on line %1", temp_lex.line_begin())
                    violation.add_fixit_hint(temp_lex.line_begin(), temp_lex.column_begin(), temp_lex.line_begin(), temp_lex.column_begin(), '&')
                else:
                    check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Violation: Exception not caught by reference on line %1", lexeme.line_begin())

        lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
