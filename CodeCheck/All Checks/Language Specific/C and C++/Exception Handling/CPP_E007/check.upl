#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'An exception object is of type pointer in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use

sub checkID { return "CPP_E007";}

sub name { return "All Checks\\Language Specific\\C and C++\\Exception Handling\\An exception object should not have pointer type";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Exception Handling',
  );
}

# This is the full description of the rule being tested
sub description { return "An exception object should not have pointer type.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
If an exception is thrown when constructing the exception object, or when evaluating the assignment
expression that initializes the exception object, it is that exception that propagates in preference to
the one that was about to be thrown. This may be inconsistent with developer expectations.</p>
<br>
<p><b>Example</b></p><pre><code language="C++">  class A
  {
    // Implementation
  };
  void fn ( int i )
  {
    static A a1;
    A * a2 = new A;
    if ( i &gt; 10 )
    {
      throw &a1; // Non-compliant – pointer type thrown
    }
    else
    {
      throw a2; // Non-compliant – pointer type thrown
    }
  }
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # Create a list of all functions that are defined 
  my @functionsDefined = $file->filerefs("Define");
  return unless @functionsDefined;
  
  # Loop through each object
  foreach my $function(@functionsDefined) {
    # Next unless this function throws an exception
    my $exception = $function->ent->freetext("ThrowExceptions");
	next unless $exception;
	# error if exception is a pointer
	throwError($check, $function->ent,$file,$function->line,$function->column,ERR1,$file->name) if $exception =~ /\*/;
  }
}



















