# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# Rewritten by Robby Bennett
# 2023-02-01


import re

from Modules import cGetBitFieldWidth


ERR1 = 'Basic numerical type "%1" used'
ERR2 = 'Basic numerical type "%1" used in "%2"'


BASIC_NUMERICAL_TYPES = r'\b(char|short|int|long|float|double|signed|unsigned)\b'
POWER_OF_TWO          = r'\D(1|2|4|8|16|32|64|128|256|512|1024)(\D|$)'


def ids():
    return ('MISRA04_6.3', 'MISRA08_3-9-2', 'MISRA12_DIR_4.6', 'CPP_T000', 'MISRA23_DIR_4.6')


def name(id):
    return {
        'MISRA04_6.3': '''Published Standards/MISRA-C 2004/\
6.3 Typedefs that indicate size and signedness should be used in place of the\
 basic numerical types''',
        'MISRA08_3-9-2': '''Published Standards/MISRA-C++ 2008/\
3-9-2 Typedefs that indicate size and signedness should be used in place of the\
 basic numerical types''',
        'MISRA12_DIR_4.6': '''Published Standards/MISRA C 2012/\
Directive 4.6 Typedefs that indicate size and signedness should be used in\
 place of the basic numerical types''',
        'CPP_T000': '''All Checks/Language Specific/C and C++/Types/\
Typedefs that indicate size and signedness should be used in place of the\
 basic numerical types''',
        'MISRA23_DIR_4.6': '''Published Standards/MISRA C 2023/\
Directive 4.6 Typedefs that indicate size and signedness should be used in\
 place of the basic numerical types''',
        }[id]


def tags(id):
    return {
        'MISRA08_3-9-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Advisory',
            'Types',
        ],
        'MISRA04_6.3': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Advisory',
            'Types',
        ],
        'MISRA12_DIR_4.6': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Types',
        ],
        'CPP_T000': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
        'MISRA23_DIR_4.6': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Types',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA04_6.3': '''
<p>
The basic numerical types of <i>signed</i> and <i>unsigned</i> variants of
<i>char</i>, <i>int</i>, <i>short</i>, <i>long</i> and <i>float</i>,
<i>double</i> should not be used, but specific-length <i>typedefs</i> should be
used. Rule 6.3 helps to clarify the size of the storage, but does not guarantee
portability because of the asymmetric behaviour of integral promotion. See
discussion of integral promotion — section 6.10. It is still important to
understand the integer size of the implementation.
</p>

<p>
Programmers should be aware of the actual implementation of the <i>typedefs</i>
under these definitions.
</p>

<p>
For example, the ISO (POSIX) <i>typedefs</i> as shown below are recommended and
are used for all basic numerical and character types in this document. For a
32-bit integer machine, these are as follows:
</p>

<pre><code language="C++">typedef          char   char_t;
typedef signed   char   int8_t;
typedef signed   short  int16_t;
typedef signed   int    int32_t;
typedef signed   long   int64_t;
typedef unsigned char   uint8_t;
typedef unsigned short  uint16_t;
typedef unsigned int    uint32_t;
typedef unsigned long   uint64_t;
typedef          float  float32_t;
typedef          double float64_t;
typedef long     double float128_t;
</code></pre>

<p>
<i>typedefs</i> are not considered necessary in the specification of bit-field
types.
</p>
''',
        'MISRA08_3-9-2': '''
<p><b>
Rationale
</b></p>

<p>
The basic numerical types of <i>char</i>, <i>int</i>, <i>short</i>, <i>long</i>,
<i>float</i>, <i>double</i> and <i>long double</i> should not be used, but
specific-length <i>typedefs</i> should be used. This rule helps to clarify the
size of the storage, but does not guarantee portability because of the
asymmetric behaviour of integral promotion. See the discussion of integral
promotion in Section 6.5.0. It is still important to understand the integer size
of the implementation.
</p>

<p>
Developers should be aware of the actual implementation of the <i>typedefs</i>
under these definitions.
</p>

<p><b>
Exception
</b></p>

<p>
The <i>wchar_t</i> does not need a typedef as it always maps to a type that
supports wide characters.
</p>

<p>
The <i>char_t typedef</i> does not indicate size and signedness and is simply
included to allow <i>char</i> objects to be declared without the use of the
basic <i>char</i> type, allowing any use of (plain) <i>char</i> to be detected
and reported by analysis tools.
</p>

<p><b>
Example
</b></p>

<pre><code language="C++">typedef          char   char_t;
typedef signed   char   int8_t;
typedef signed   short  int16_t;
typedef signed   int    int32_t;
typedef signed   long   int64_t;
typedef unsigned char   uint8_t;
typedef unsigned short  uint16_t;
typedef unsigned int    uint32_t;
typedef unsigned long   uint64_t;
typedef          float  float32_t;
typedef          double float64_t;
typedef long     double float128_t;
</code></pre>

<p>
<i>typedefs</i> are not considered necessary in the specification of bit-field
types.
</p>
''',
        'MISRA12_DIR_4.6': '''
<p><b>
Amplification
</b></p>

<p>
The basic numerical types of <i>char</i>, <i>short</i>, <i>int</i>, <i>long</i>,
<i>long long</i> (C99), <i>float</i>, <i>double</i> and <i>long double</i>
should not be used, but specific-length <i>typedefs</i> should be used.
</p>

<p>
For C99, the types provided by <code>&lt;stdint.h&gt;</code> should be used. For
C90, equivalent types should be defined and used.
</p>

<p>
A type must not be defined with a specific length unless the implemented type is
actually of that length.
</p>

<p>
It is not necessary to use <i>typedefs</i> in the declaration of bit-fields.
</p>

<p>
For example, on a 32-bit C90 implementation the following definitions might be
suitable:
</p>

<pre><code language="C++">typedef signed   char   int8_t;
typedef signed   short  int16_t;
typedef signed   int    int32_t;
typedef signed   long   int64_t;

typedef unsigned char   uint8_t;
typedef unsigned short  uint16_t;
typedef unsigned int    uint32_t;
typedef unsigned long   uint64_t;

typedef          float  float32_t;
typedef          double float64_t;
typedef long     double float128_t;
</code></pre>

<p><b>
Rationale
</b></p>

<p>
In situations where the amount of memory being allocated is important, using
specific-length types makes it clear how much storage is being reserved for each
object.
</p>

<p>
Adherence to this guideline does <b>not</b> guarantee portability because the
size of the int type may determine whether or not an expression is subject to
integer promotion. For example, an expression with type <code>int16_t</code>
will not be promoted if <i>int</i> is implemented using 16 bits but will be
promoted if <i>int</i> is implemented using 32 bits. This is discussed in more
detail in the section on integer promotion in Appendix C.
</p>

<p>
<i>Note</i>: defining a specific-length type whose size is <b>not</b> the same
as the implemented type is counterproductive both in terms of storage
requirements and in terms of portability. Care should be taken to avoid defining
types with the wrong size.
</p>

<p>
If abstract types are defined in terms of a specific-length type then it is not
necessary, and may even be undesirable, for those abstract types to specify the
size or sign. For example, the following code defines an abstract type
representing mass in kilograms but does not indicate its size or sign:
</p>

<pre><code language="C++">typedef uint16_t mass_kg_t;
</code></pre>

<p>
It might be desirable not to apply this guideline when interfacing with The
Standard Library or code outside the project's control.
</p>

<p><b>
Exception
</b></p>

<ol>
<li>
The basic numerical types may be used in a <i>typedef</i> to define a
specific-length type.
</li>
<li>
For function <code>main</code>, an <i>int</i> may be used rather than the
<i>typedefs</i> as a return type. Therefore <code>int main (void)</code> is
permitted.
</li>
<li>
For function <code>main</code> an <i>int</i> may be used rather than the
<i>typedefs</i> for the input parameter <i>argc</i>.
</li>
<li>
For function <code>main</code> a <i>char</i> may be used rather than the
<i>typedefs</i> for the input parameter <i>argv</i>.
</li>
</ol>

<p>
Therefore <code>int main( int argc, char *argv[] )</code> is permitted (C99
Section 5.1.2.2.1).
</p>

<p><b>
Example
</b></p>

<pre><code language="C++">/* Non-compliant - int used to define an object                      */
int x = 0;

/* Compliant     - int used to define specific-length type           */
typedef int SINT_16;

/* Non-compliant - no sign or size specified                         */
typedef int speed_t;

/* Compliant     - further abstraction does not need specific length */
typedef int16_t torque_t;
</code></pre>

<p><b>
Developer's Note
</b></p>

<p>
Detecting the difference between C90 and C99 is not reliable; therefore, there
is no way to determine if <code>&lt;stdint.h&gt;</code> should be used or if the
<i>typedefs</i> should be defined manually.
</p>
''',
        'CPP_T000': '''
<p>
The basic numerical types of <i>char</i>, <i>short</i>, <i>int</i>, <i>long</i>,
<i>long long</i> (C99), <i>float</i>, <i>double</i> and <i>long double</i>
should not be used, but specific-length <i>typedefs</i> should be used.
</p>

<p><b>
Example
</b></p>

<pre><code language="C++">/* Non-compliant - int used to define an object                      */
int x = 0;

/* Compliant     - int used to define specific-length type           */
typedef int SINT_16;

/* Non-compliant - no sign or size specified                         */
typedef int speed_t;

/* Compliant     - further abstraction does not need specific length */
typedef int16_t torque_t;
</code></pre>
''',
        'MISRA23_DIR_4.6': '''
<p><b>
Amplification
</b></p>

<p>
The basic numerical types of <i>char</i>, <i>short</i>, <i>int</i>, <i>long</i>,
<i>long long</i> (C99), <i>float</i>, <i>double</i> and <i>long double</i>
should not be used, but specific-length <i>typedefs</i> should be used. The numerical types of <i>char</i> are <i>signed char</i> and
<i>unsigned char</i>. These Guidelines do not treat “plain” <i>char</i> as a numerical type (see Section 8.10.2 on
essentially character types).
</p>

<p>
For C99, the types provided by <code>&lt;stdint.h&gt;</code> should be used. For
C90, equivalent types should be defined and used.
</p>

<p>
A type must not be defined with a specific length unless the implemented type is
actually of that length.
</p>

<p>
It is not necessary to use <i>typedefs</i> in the declaration of bit-fields.
</p>

<p>
For example, on a 32-bit C90 implementation the following definitions might be
suitable:
</p>

<pre><code language="C++">typedef signed   char   int8_t;
typedef signed   short  int16_t;
typedef signed   int    int32_t;
typedef signed   long   int64_t;

typedef unsigned char   uint8_t;
typedef unsigned short  uint16_t;
typedef unsigned int    uint32_t;
typedef unsigned long   uint64_t;

typedef          float  float32_t;
typedef          double float64_t;
typedef long     double float128_t;

typedef float _Complex cfloat32_t;
typedef double _Complex cfloat64_t;
typedef long double _Complex cfloat128_t;
</code></pre>

<p><b>
Rationale
</b></p>

<p>
In situations where the amount of memory being allocated is important, using
specific-length types makes it clear how much storage is being reserved for each
object.
</p>

<p>
Adherence to this guideline does <b>not</b> guarantee portability because the
size of the int type may determine whether or not an expression is subject to
integer promotion. For example, an expression with type <code>int16_t</code>
will not be promoted if <i>int</i> is implemented using 16 bits but will be
promoted if <i>int</i> is implemented using 32 bits. This is discussed in more
detail in the section on integer promotion in Appendix C.
</p>

<p>
<i>Note</i>: defining a specific-length type whose size is <b>not</b> the same
as the implemented type is counterproductive both in terms of storage
requirements and in terms of portability. Care should be taken to avoid defining
types with the wrong size.
</p>

<p>
If abstract types are defined in terms of a specific-length type then it is not
necessary, and may even be undesirable, for those abstract types to specify the
size or sign. For example, the following code defines an abstract type
representing mass in kilograms but does not indicate its size or sign:
</p>

<pre><code language="C++">typedef uint16_t mass_kg_t;
</code></pre>

<p>
It might be desirable not to apply this guideline when interfacing with The
Standard Library or code outside the project's control.
</p>

<p><b>
Exception
</b></p>

<ol>
<li>
The basic numerical types may be used in a <i>typedef</i> to define a
specific-length type.
</li>
<li>
For function <code>main</code>, an <i>int</i> may be used rather than the
<i>typedefs</i> as a return type. Therefore <code>int main (void)</code> is
permitted.
</li>
<li>
For function <code>main</code> an <i>int</i> may be used rather than the
<i>typedefs</i> for the input parameter <i>argc</i>.
</li>
</ol>

<p>
Therefore <code>int main( int argc, char *argv[] )</code> is permitted (C99
Section 5.1.2.2.1).
</p>

<p><b>
Example
</b></p>

<pre><code language="C++">/* Non-compliant - int used to define an object                      */
int x = 0;

/* Compliant     - int used to define specific-length type           */
typedef int SINT_16;

/* Non-compliant - no sign or size specified                         */
typedef int speed_t;

/* Compliant     - further abstraction does not need specific length */
typedef int16_t torque_t;
</code></pre>

<p><b>
Developer's Note
</b></p>

<p>
Detecting the difference between C90 and C99 is not reliable; therefore, there
is no way to determine if <code>&lt;stdint.h&gt;</code> should be used or if the
<i>typedefs</i> should be defined manually.
</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Define, Declare', 'Object, Parameter, Function, Typedef'):
        ent = ref.ent()

        # Skip if no type
        fullType = ent.type()
        if not fullType:
            continue

        # Skip main functions, char_t, and wchar_t
        if ent.name() in {'main', '_tmain', 'wmain', 'WinMain', 'char_t', 'wchar_t'}:
            continue

        # Skip arguments to main function
        if ent.parent() and ent.parent().name() == 'main':
            if fullType == 'int' and ent.name() == 'argc':
                continue
            if fullType == 'char *[]' and ent.name() == 'argv':
                continue

        # Skip if typedef has a power of 2 in the name
        if ent.kind().check('Typedef') and re.search(POWER_OF_TWO, ent.name()):
            continue

        # Skip if not basic numerical type
        match = re.search(BASIC_NUMERICAL_TYPES, fullType)
        if not match:
            continue
        basicType = match[0]

        # Skip if a width is defined with the bit-field syntax
        if cGetBitFieldWidth(ref):
            continue

        # Violation for types like 'int'
        if basicType == fullType:
            check.violation(ent, file, ref.line(), ref.column(), ERR1, fullType)
        # Violation for types like 'int *'
        else:
            check.violation(ent, file, ref.line(), ref.column(), ERR2, basicType, fullType)
