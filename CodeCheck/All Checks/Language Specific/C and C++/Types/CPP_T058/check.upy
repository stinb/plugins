# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-8-2020

import re

def id():
    return 'CPP_T058'

def name():
    return """\
All Checks/Language Specific/C and C++/Types/Simple integers shall be used to test and set booleans"""


def tags(id):
    return {
        'CPP_T058': [
            'Language: C',
            'Language: C++',
            'Types',
        ],

    }.get(id)

def description():
    return """\
When testing or setting simple boolean-style integers, zero shall be used to indicate false, and non-zero shall be used to indicate true."""

def detailed_description():
    return """\
<p>For the boolean type (_Bool or bool), the macros true and false are 
typically used for this purpose. For other integer types, the macros TRUE and 
FALSE are typically used.</p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    
    if file and file.lexer():
        lexer = file.lexer()
    else:
        return
    lexeme = lexer.first()
    ent = None

    while lexeme:
        if lexeme.ent():
            ent = lexeme.ent()
        # look for uses of 'true' or 'false' keywords
        if lexeme.token() != "Comment" and (lexeme.text() == "true" or lexeme.text() == "TRUE"):

            violation = check.violation(ent, file, lexeme.line_begin(), lexeme.column_begin(), 'Non-zero should be used to indicate true')
            violation.add_fixit_hint(lexeme.line_begin(), lexeme.column_begin(), lexeme.line_begin(), lexeme.column_begin() + len(lexeme.text()), '1')

        elif lexeme.token() != "Comment" and (lexeme.text() == "false" or lexeme.text() == "FALSE"):

            violation = check.violation(ent, file, lexeme.line_begin(), lexeme.column_begin(), 'Zero should be used to indicate false')
            violation.add_fixit_hint(lexeme.line_begin(), lexeme.column_begin(), lexeme.line_begin(), lexeme.column_begin() + len(lexeme.text()), '0')

        lexeme = lexeme.next()
