import re

ERR1 = 'Integer converted to pointer.'
ERR2 = 'Pointer to void converted to another pointer type.'
ERR3 = 'Enum converted to another pointer type.'

# The ID for the check
def ids():
    return ('M5-2-8', 'MISRA08_5-2-8', 'MISRA12_11.5', 'CPP_T022', 'MISRA23_11.5', 'MISRA23_8.2.6')

# The short name of the check
def name(id):
    return {
        'M5-2-8': 'Published Standards/AUTOSAR/An object with integer type or pointer to void type shall not be converted to an object with pointer type.',
        'MISRA08_5-2-8': 'Published Standards/MISRA-C++ 2008/5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type.',
        'MISRA12_11.5': 'Published Standards/MISRA C 2012/11.5 A conversion should not be performed from pointer to void into pointer to object',
        'CPP_T022': 'All Checks/Language Specific/C and C++/Types/An object with integer type or pointer to void type shall not be converted to an object with pointer type.',
        'MISRA23_11.5': 'Published Standards/MISRA C 2023/11.5 A conversion should not be performed from pointer to void into pointer to object',
        'MISRA23_8.2.6': 'Published Standards/MISRA C++ 2023/8.2.6 An object with integral, enumerated, or pointer to void type shall not be cast to a pointer type',
    }[id]




def tags(id):
    return {
        'MISRA08_5-2-8': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'MISRA12_11.5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Types',
        ],
        'M5-2-8': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T022': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
        'MISRA23_11.5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Types',
        ],
        'MISRA23_8.2.6': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    if id in ['MISRA12_11.5', 'MISRA23_11.5']:
        return """\
<p><b>Rationale</b></p>
<p>Conversion of a pointer to void into a pointer to object may result in a
pointer that is not correctly aligned, resulting in undefined behaviour. It
should be avoided where possible but may be necessary, for example when dealing
with memory allocation functions. If conversion from a pointer to object into a
pointer to void is used, care should be taken to ensure that any pointers
produced do not give rise to the undefined behaviour discussed under Rule 11.3.
</p>
<p><b>Exception</b></p>
<p>A null pointer constant that has type pointer to void may be converted into
pointer to object.</p>
<p><b>Example</b></p>
<pre><code language="C++">uint32_t *p32;
void *p;
uint16_t *p16;
p = p32; /* Compliant - pointer to uint32_t into
* pointer to void */
p16 = p; /* Non-compliant */
p = ( void * ) p16; /* Compliant */
p32 = ( uint32_t * ) p; /* Non-compliant */</code></pre>
<p><b>See also</b></p>
<p>Rule 11.2, Rule 11.3</p>
"""

    if id == 'MISRA23_8.2.6':
        return """\
<p><b>Amplification</b></p>
<p>This rule does not apply:</p>
<p>● When the destination type is a pointer to function type or a pointer to member function type
(see Rule 8.2.4); or</p>
<p>● For casts between pointers to void, regardless of any cv-qualification.</p>
<p><b>Rationale</b></p>
<p>Casting from either an integral type or a pointer to void type to a pointer to an object may lead to
unspecified behaviour.</p>
<p>A round trip conversion of a pointer to object type through void * (T * -> void * -> T *) is well-defined. However, this is prohibited by this rule as it is error prone and the detection of any error
would be undecidable.</p>
<p>Note: casting from an integer to a pointer may be unavoidable when addressing memory mapped
registers or other hardware specific features. </p>

<p><b>Example</b></p>
<pre><code language="C++">struct S
{
 int32_t i;
 int32_t j;
};
void f ( void * p1, int32_t i )
{
 S * s1 = static_cast&lt; S * &gt;( p1 ); // Non-compliant
 S * s2 = reinterpret_cast&lt; S * &gt;( i ); // Non-compliant
 void * p2 = reinterpret_cast&lt; void * &gt;( i ); // Non-compliant
 auto p3 = const_cast&lt; void const * &gt;( p2 ); // Compliant
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 8.2.4, Rule 8.2.5</p>
"""

    return '''
<p><b>Rationale</b></p>

<p>
In general, converting from an integral type or a pointer to <i>void</i> type to a pointer to an object leads to <i>unspecified behaviour</i>.
</p>

<p><b>Example</b></p>

<pre><code language="C++">struct S
{
    int32_t i;
    int32_t j;
};
void f ( void * v, int32_t i )
{
    S * s1 = reinterpret_cast&lt;S *&gt;( v ); // Non-compliant
    S * s2 = reinterpret_cast&lt;S *&gt;( i ); // Non-compliant
}
</code></pre>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def define_options(check):
    integer = True
    enum = True
    if check.id() in ['M5-2-8', 'MISRA08_5-2-8', 'CPP_T022', 'MISRA23_8.2.6']:
        integer = False
        if check.id() == 'MISRA23_8.2.6':
            enum = False


    check.option().checkbox('integer', 'Allow conversions from integer type', integer)
    check.option().checkbox('enum', 'Allow conversions from enumerated type', enum)

def is_ptr_type(type):
    return True if re.search(r"\*", type) else False

def is_int_type(ent):
    return True if re.search(r"int", str(get_base_type_int(ent))) else False

def is_enum_type(ent):
    return True if re.search(r"enum", str(get_base_type_enum(ent)).lower()) else False

def is_void_ptr_type(ent):
    if ent.type() and is_ptr_type(ent.type()):
        return True if re.search(r"void", str(get_base_type_void(ent))) else False
    else:
        return True if re.search(r"void \*", str(get_base_type_void(ent))) else False

def get_base_type_void(ent):
    seen = set()
    while ent not in seen:
        seen.add(ent)
        if re.search(r"void", str(ent.type())):
            return str(ent.type())
        typed_ref = ent.ref("Typed")
        if typed_ref:
            ent = typed_ref.ent()
    return ent

def get_base_type_int(ent):
    seen = set()
    while ent not in seen:
        seen.add(ent)
        if re.search(r"int", str(ent.type())):
            return str(ent.type())
        typed_ref = ent.ref("Typed")
        if typed_ref:
            ent = typed_ref.ent()
    return ent

def get_base_type_enum(ent):
    seen = set()
    while ent not in seen:
        seen.add(ent)
        if re.search(r"enum", ent.kind().longname().lower()):
            return str(ent.kind().longname().lower())
        typed_ref = ent.ref("Typed")
        if typed_ref:
            ent = typed_ref.ent()
    return ent

def check(check, file):
    integer = check.option().lookup("integer")
    enum = check.option().lookup("enum")
    #get all local obj
    for ref in file.filerefs("Define","~Unresolved ~Unknown Object", True):
        lex = file.lexer().lexeme(ref.line(), ref.column())

        if lex.ent() and lex.ent().kind().check("Macro"):
            continue

        # check if object is a ptr and being assign with ptr object
        if ref.ent().ref("C Assign Ptr") and is_ptr_type(str(ref.ent().type())):
            # get object used for C Assign Ptr
            ptr_assigned = ref.ent().ref("C Assign Ptr")
            # if ptr_assigned is an integer or void ptr
            lexeme = file.lexer().lexeme(ptr_assigned.line(), ptr_assigned.column())
            if lexeme:
                lexeme = lexeme.previous(True, True)
                if lexeme and lexeme.text() == '&':
                    continue
            if not integer and ptr_assigned.ent() and is_int_type(ptr_assigned.ent()):
                check.violation(ref.ent(), file, ptr_assigned.line(), ptr_assigned.column(), ERR1)
            elif ptr_assigned.ent() and is_void_ptr_type(ptr_assigned.ent()) and not is_void_ptr_type(ref.ent()):
                check.violation(ref.ent(), file, ptr_assigned.line(), ptr_assigned.column(), ERR2)
            elif not enum and ptr_assigned.ent() and is_enum_type(ptr_assigned.ent()):
                check.violation(ref.ent(), file, ptr_assigned.line(), ptr_assigned.column(), ERR3)
