import re

ERR1 = '"in-out" parameter declared as T & not modified.'

# The ID for the check
def ids():
    return ('A8-4-9', 'CPP_T037')

# The short name of the check
def name(id):
    return {
        'A8-4-9': 'Published Standards/AUTOSAR/"in-out" parameters declared as T & shall be modified.',
        'CPP_T037': 'All Checks/Language Specific/C and C++/Types/"in-out" parameters declared as T & shall be modified.',
    }[id]



def tags(id):
    return {
        'A8-4-9': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T037': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return '''
<p><b>Rationale</b></p>

<p>
An "in-out" parameter is declared with a type of reference to non-const. This means that a fully constructed object is passed into the function that can be read as well as modified.
</p>

<p>
Note: Completely replacing the passed in object without reading any data from it would make it an "out" parameter instead and is not considered compliant with this rule, also see rule: A8-4-8
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A8-4-9.cpp 306178 2018-02-01 15:52:25Z christof.meerwald $

#include &lt;cstdint&gt;
#include &lt;numeric&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

// Non-Compliant: does not modify the "in-out" parameter
int32_t Sum(std::vector&lt;int32_t&gt; &v)
{
    return std::accumulate(v.begin(), v.end(), 0);
}

// Compliant: Modifying "in-out" parameter
void AppendNewline(std::string &s)
{
    s += '\\n';
}

// Non-Compliant: Replacing parameter value
void GetFileExtension(std::string &ext)
{
    ext = ".cpp";
}
</code></pre>

<p><b>See also</b></p>

<p>
C++ Core Guidelines [11]: F.17: For "in-out" parameters, pass by reference to non-const
</p>

<p>
JSF December 2005 [8]: AV Rule 117.2: An object should be passed as T& if the function may change the value of the object.
</p>
'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def sortRowLine(ref):
  return str(ref.line())

def test_language(language):
    return language == 'C++'

def check(check, file):
    for ref in file.filerefs("Define","Parameter ~Unknown ~Unresolved", True):
        ent = ref.ent()
        if ent.type() and re.search(r"&", ent.type()):
            if ent.refs("Modifyby,Setby"):
                list = sorted(ent.refs("Modifyby,Setby"), key=sortRowLine)
                if not list[0].kind().check("Modifyby"):
                    check.violation(ent, file, ref.line(), ref.column(), ERR1)
            else:
                check.violation(ent, file, ref.line(), ref.column(), ERR1)
