# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2024-11-01


import re

from understand import Ent


ERR1 = 'Bit-field type is enum "%1"'


def ids():
    return ('MISRA08_9-6-3', 'CPP_B002')


def name(id):
    return {
        'MISRA08_9-6-3': '''Published Standards/MISRA-C++ 2008/\
9-6-3 Enum Bit-fields''',
        'CPP_B002': '''All Checks/Language Specific/C and C++/Bit-fields/\
Enum Bit-fields''',
    }[id]


def tags(id):
    return {
        'MISRA08_9-6-3': [
            'Bit-fields',
            'Language: C',
            'Standard: MISRA C++ 2008',
            'Category: Required',
        ],
        'CPP_B002': [
            'Bit-fields',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    return '''\
<p><b>Rationale</b></p>

<p>The use of <i>enum</i> as a bit-field type is prohibited as ISO/IEC
14882:2003 [1] does not explicitly define the underlying representation as
<i>signed</i> or <i>unsigned</i>. It is therefore not possible to determine
the exact number of bits required to represent all values in the
enumeration.</p>

<p><b>Example</b></p>

<pre><code language="C++">\
struct S
{
   AnEnumType n : 2;   // Non-compliant
};
</code></pre>

<p><b>Developer's Notes</b></p>

<p>In C++ 11 and later, enum classes have the ability to specify the underlying
type and so this check may not apply.</p></p>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Define', 'Member Object'):
        ent = ref.ent()

        if not ent.freetext('Bitfield'):
            continue

        enum = getUnderlyingEnum(ent)
        if not enum:
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1, enum)


def getUnderlyingEnum(ent: Ent) -> str | None:
    seen: set[Ent] = set()

    while not ent.kind().check('Enum Type'):
        ents = ent.ents('Typed')
        if not ents:
            return None
        ent = ents[0]
        if ent in seen:
            return None
        seen.add(ent)

    return ent
