# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2025-09-26


import re


ERR1 = 'Single-bit named bit field is of signed type'


def ids():
    return ('MISRA12_6.2', 'MISRA23_6.2', 'CPP_B005')


def name(id):
    return {
        'MISRA12_6.2': '''Published Standards/MISRA C 2012/\
6.2 Signed single-bit named bit-fields''',
        'MISRA23_6.2': '''Published Standards/MISRA C 2023/\
6.2 Signed single-bit named bit-fields''',
        'CPP_B005': '''All Checks/Language Specific/C and C++/Bit-fields/\
Signed single-bit named bit-fields''',
    }.get(id)


def tags(id):
    return {
        'MISRA12_6.2': [
            'Bit-fields',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
        ],
        'MISRA23_6.2': [
            'Bit-fields',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
        ],
        'CPP_B005': [
            'Bit-fields',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    match id:
        case 'MISRA12_6.2': '''\
<p><b>Title</b></p>
<p>Single-bit named bit fields shall not be of a signed type.</p>

<p><b>Rationale</b></p>
<p>According to the C99 Standard Section 6.2.6.2, a single-bit signed bit-field
has a single (one) sign bit and no (zero) value bits. In any representation of
integers, 0 value bits cannot specify a meaningful value.</p>

<p>A single-bit signed bit-field is therefore unlikely to behave in a useful way
and its presence is likely to indicate programmer confusion.</p>

<p>Although the C90 Standard does not provide so much detail regarding the
representation of types, the same considerations apply as for C99.</p>

<p><i>Note</i>: this rule does not apply to unnamed bit fields as their values
cannot be accessed.</p>
'''
        case _: '''\
<p><b>Title</b></p>
<p>Single-bit named bit-fields shall not be of a signed type.</p>

<p><b>Rationale</b></p>
<p>For C99 and later, the C Standard states that signed integers have exactly
one sign-bit, meaning that a single-bit signed bit-field will have no
value-bits. In any representation of integers, a meaningful value cannot be
specified if there are zero value-bits.</p>

<p>A single-bit signed bit-field is therefore unlikely to behave in a useful way
and its presence is likely to indicate programmer confusion.</p>

<p>Although the C90 Standard does not provide so much detail regarding the
representation of types, the same considerations apply as for C99.</p>

<p><i>Note</i>: this rule does not apply to unnamed bit-fields as their values
cannot be accessed.</p>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Declare, Define', 'Member Object ~Unresolved'):
        ent = ref.ent()

        if (ent.name() == '[unnamed]'):
            continue

        if ent.freetext('Bitfield') != '1':
            continue

        if re.search(r'\bunsigned\b', ent.freetext('UnderlyingType')):
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1)
