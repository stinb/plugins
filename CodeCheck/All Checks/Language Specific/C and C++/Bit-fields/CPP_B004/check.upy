# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2025-06-02


import re


ERR1 = 'Signed bit field has length of %1'

SIGNED = {'char', 'signed char', 'short', 'short int', 'signed short', 'signed short int', 'int', 'signed', 'signed int', 'long', 'long int', 'signed long', 'signed long int', 'long long', 'long long int', 'signed long long', 'signed long long int'}


def ids():
    return ('MISRA08_9-6-4', 'CPP_B004')


def name(id):
    return {
        'MISRA08_9-6-4': '''Published Standards/MISRA-C++ 2008/\
9-6-4 Named signed bit-field length''',
        'CPP_B004': '''All Checks/Language Specific/C and C++/CATEGORY/\
Named signed bit-field length''',
    }[id]


def tags(id):
    return {
        'MISRA08_9-6-4': [
            'Bit-fields',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
        ],
        'CPP_B004': [
            'Bit-fields',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    '''\
<p><b>Title</b></p>

<p>Named bit-fields with signed integer type shall have a length of more than
one bit.</p>

<p><b>Rationale</b></p>

<p>The values which may be represented by a bit-field of length one may not meet
developer expectations. Anonymous signed bit-fields of any length are
allowed.</p>

<p><b>Example</b></p>

<pre><code language="C++">\
struct S
{
   signed int   a : 1;   // Non-compliant
   signed int     : 1;   // Compliant
   signed int     : 0;   // Compliant
   signed int   b : 2;   // Compliant
   signed int     : 2;   // Compliant
};\
</code></pre>
    '''


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Define', 'Member Object'):
        ent = ref.ent()

        if ent.name() == '[unnamed]':
            continue

        length = ent.freetext('Bitfield')
        if length != '1':
            continue

        entType = ent.freetext('UnderlyingType')
        if entType not in SIGNED:
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1, length)
