#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 10-16-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => "Single-bit named bitifield %1 is of signed type";


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


# This is the short error the Understand will use

sub checkID { return "CPP_B005";}

sub name { return "All Checks\\Language Specific\\C and C++\\Bit-fields\\( Fuzzy parser ) Single-bit named bit fields shall not be of a signed type";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Bit-fields',
  );
}

# This is the full description of the rule being tested
sub description {
  return "( Required ) Single-bit named bit fields shall not be of a signed type.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b></p>
According to the C99 Standard Section 6.2.6.2, a single-bit signed bit-field has a single (one) sign bit
and no (zero) value bits. In any representation of integers, 0 value bits cannot specify a meaningful
value.
</p>

<p>
A single-bit signed bit-field is therefore unlikely to behave in a useful way and its presence is likely to
indicate programmer confusion.
</p>

<p>
Although the C90 Standard does not provide so much detail regarding the representation of types,
the same considerations apply as for C99.
</p>

<p>
<i>Note</i>: this rule does not apply to unnamed bit fields as their values cannot be accessed.
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{
}


# This is the actual test being performed on the user's code
sub check {

  # Pull check and file from Understand. Test that we are looking at a file and return otherwise
  my $check = shift; 
  my $file = shift; 
  return unless $file->kind->check ( 'file ~unknown ~unresolved' );

  # Pull all the objects defined in this file, return if none
  my @objectsDefined = $file->filerefs ( 'Define, Declare', 'Object');
  return unless @objectsDefined;

  # Loop through each object
  foreach my $object ( @objectsDefined ) {

    # Test this object for this rule
    my $bitfield = $object->ent->freetext( 'Bitfield' );  
    next unless $bitfield;
    next unless $bitfield == 1;
    next if getBaseType( $object->ent ) =~ /\bunsigned\b/;

    # Error if we get here
    $check->violation( $object->ent, $object->file, $object->line, $object->column, ERR1, $object->ent->name )

  }
}

# Takes and ent and returns it's base type
sub getBaseType {

  my $ent = shift;
  my @type_ent = $ent->ents( 'typed' );
  return 0 if scalar( @type_ent > 1 );
  return getBaseType( @type_ent[0] ) if @type_ent;
  return $ent->type;
    
}
