use base ("Understand::Codecheck");
use File::Basename;
use strict;
use constant ERR1 => "No header files included";
use constant ERR2 => "Matching header file not included first";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(ERR2);
}



sub checkID { return "CPP_P012";}

sub name { return "All Checks\\Language Specific\\C and C++\\Preprocessor\\File Include Matching Header";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Preprocessor',
  );
}

sub description {
  return "The first include in a file will be the corresponding header file.";
}

sub detailed_description {
  return "The first include in a file will be the corresponding header file.
    Check that the string FileName.h* is wrapped in \"\" or &lt;&gt; following
    the first #include in the file, for all .c* files.  Report if the
    first #include does not match, or if there are no #include directives.";
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check('c file');
  checkFileCppFirstInclude($check,$file);
}



sub checkFileCppFirstInclude($$)
{
    my ($check,$file) = @_;
    my($filename,$path,$suffix) = fileparse($file->longname,qr/\.[^.]*/);

    return if $suffix !~ /c.*/i;

    my @includes = sort{$a->line <=> $b->line;}$file->filerefs("include","file");
    my $firstRef = @includes[0];
    if (! $firstRef){
      return $check->violation($file,$file,-1,-1,ERR1);
    }
    my($firstName,$firstPath,$firstSuffix) = fileparse($firstRef->ent->longname,qr/\.[^.]*/);
    if ($firstName ne $filename){
      $check->violation($file,$file,$firstRef->line,$firstRef->column,ERR2);
    }
}
