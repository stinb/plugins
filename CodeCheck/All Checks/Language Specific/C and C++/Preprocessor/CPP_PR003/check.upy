# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 1-14-2020

import re

def id():
    return 'CPP_PR003'

def name():
    return """\
All Checks/Language Specific/C and C++/Preprocessor/Macros shall not be used to \
change language syntax"""


def tags(id):
    return {
        'CPP_PR003': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],

    }.get(id)

def description():
    return """\
Macros shall not be used to change language syntax"""

def detailed_description():
    return """\
<p><b>Rationale</b></p>
Using macro definitions to change language syntax is bad practice, and should generally be avoided. The following are examples 
of unpermitted macros.
</p>
<p><b>Examples</b></p>
<pre><code language="C++">#define IF if /* Bad macros */
#define THEN {
#define ELSE } else {
#define ENDIF }
#define BEGIN {
#define END }

FILE * open_file (
  char *file_name
)

BEGIN

  FILE *file_ptr = NULL; /* Pointer to the results file */

  IF ((file_ptr = fopen(file_name, "w")) == NULL)
  THEN
    printf("Could not open file\n");
  ELSE
    printf("File %s was opened successfully\n", file_name);
  ENDIF

  return file_ptr;

END /* end of open_file */
</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):

	# find every unique macro declaration in the file
	for mac_def in file.filerefs('Define', 'Macro', True):

		# we're not interested in macro functions
		if not mac_def.ent().kind().longname() == "C Macro Functional":

			# grab value, look for syntactical words or characters
			val = mac_def.ent().value()

			if val:

				# look for control structure keywords
				if re.search(r"^if$", val, re.IGNORECASE):

					check.violation(mac_def.ent(), file, mac_def.line(), mac_def.column(), "Violation: macro '%1' may change language syntax", mac_def.ent())

				elif re.search(r"else", val, re.IGNORECASE):

					check.violation(mac_def.ent(), file, mac_def.line(), mac_def.column(), "Violation: macro '%1' may change language syntax", mac_def.ent())

				elif re.search(r"^for$", val, re.IGNORECASE):

					check.violation(mac_def.ent(), file, mac_def.line(), mac_def.column(), "Violation: macro '%1' may change language syntax", mac_def.ent())

				elif re.search(r"^do$", val, re.IGNORECASE):

					check.violation(mac_def.ent(), file, mac_def.line(), mac_def.column(), "Violation: macro '%1' may change language syntax", mac_def.ent())

				elif re.search(r"^while$", val, re.IGNORECASE):

					check.violation(mac_def.ent(), file, mac_def.line(), mac_def.column(), "Violation: macro '%1' may change language syntax", mac_def.ent())

				# look for solitary brackets
				elif re.search(r"^{$", val, re.IGNORECASE):

					check.violation(mac_def.ent(), file, mac_def.line(), mac_def.column(), "Violation: macro '%1' may change language syntax", mac_def.ent())	

				elif re.search(r"^}$", val, re.IGNORECASE):

					check.violation(mac_def.ent(), file, mac_def.line(), mac_def.column(), "Violation: macro '%1' may change language syntax", mac_def.ent())

