#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => '#else, #elif or #endif not in the same file as thier corresponding #if or #ifdef in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use

sub checkID { return "CPP_P010";}

sub name { return "All Checks\\Language Specific\\C and C++\\Preprocessor\\All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Preprocessor',
  );
}

# This is the full description of the rule being tested
sub description { return "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
When the inclusion and exclusion of blocks of statements is controlled by a series of preprocessor
directives, confusion can arise if all of the relevant directives do not occur within one file. This
rule requires that all preprocessor directives in a sequence of the form <i>#if</i> / <i>#ifdef</i> ... <i>#elif</i> ... <i>#else</i>
... <i>#endif</i> shall reside in the same file. Observance of this rule preserves good code structure and
avoids maintenance problems.</p>
<p>Notice that this does not preclude the possibility that such directives may exist within included
files provided that all directives that relate to the same sequence are located in one file.</p>

<p><b>Example</b></p><pre><code language="C++">  // file.cpp
  #define A
  ...
  #ifdef A
  ...
  #include "file1.hpp"
  #
  #endif
  ...
  #if 1
  #include "file2.hpp"
  ...
  // file1.hpp
  #if 1
  ...
  #endif // Compliant
  // file2.hpp
  ...
  #endif // Non-compliant
</code></pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');

  # $ifCounter and $ifDefCounter will count the macros to ensure we have no #else #elif #endif that don't belong in this file
  my $ifCounter = 0;
  my $violation = 0;
 
  # This check requires use of the Understand lexer. Initialize and check for failure 
  my $lexer = $file->lexer(0,,0,0);
  return unless $lexer;
  
  # $lexeme is intialized as the first element returned from the lexer
  my $lexeme = $lexer->first();
  
  # While the lexer has lexemes ...
  while ($lexeme) {
    return if $check->is_abort();
    
    # Check if we increment $ifCounter
    if ($lexeme->token eq "Preprocessor" && $lexeme->text eq "if" || $lexeme->text eq "ifdef" || $lexeme->text eq "ifndef") {
	  $ifCounter++;
	}
	# Check if we decrement
	elsif ($lexeme->token eq "Preprocessor" && $lexeme->text eq "endif") {
	  $ifCounter--;
	  $violation = 1 if $ifCounter < 0;
	}
	# Check if we have a positive $ifCounter for elif
	elsif ($lexeme->token eq "Preprocessor" && $lexeme->text eq "elif") {
	  $violation = 1 if $ifCounter < 1;
	}
	# Check if we have a positive $ifCounter for else
	elsif ($lexeme->token eq "Preprocessor" && $lexeme->text eq "else") {
	  $violation = 1 if $ifCounter < 1;
	}
	$check->violation($lexeme->ent,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1,$file->name) if $violation;
	$violation = 0;
  }
  # Set $lexeme to the next value from $lexer
  continue {
    $lexeme = $lexeme->next;
  }
}
