#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-19-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => "Unused macro declaration %1";


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "CPP_P029";}



# This is the short error the Understand will use
sub name { return "All Checks\\Language Specific\\C and C++\\Preprocessor\\A project should not contain unused macro declarations";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Preprocessor',
  );
}

# This is the full description of the rule being tested
sub description {
  return "( Advisory ) A project should not contain unused macro declarations.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b></p>
If a macro is declared but not used, then it is unclear to a reviewer if the macro is redundant or it has
been left unused by mistake.</p>

<p><b>Example</b></p>

<pre><code language="C++">  void use_macro ( void )
  {
  #def ine SIZE 4
  /* Non-compliant - DATA not used */
  #define DATA 3
    use_int16 ( SIZE );
  }
</code></pre>
END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'file' );

  # Pull all macros, return if non exists
  my @macrosDefined = $file->filerefs( 'Define ~inactive', 'Macro');
  return unless @macrosDefined;
  
  # Check that each macro is use
  foreach my $macro ( @macrosDefined ) {

    my @macroUses = $macro->ent->refs( 'Useby' );
    throwError( $check, $macro->ent, $file, $macro->line, $macro->column, ERR1, $macro->ent->name ) unless 0 + @macroUses > 0;
    

  }
}
