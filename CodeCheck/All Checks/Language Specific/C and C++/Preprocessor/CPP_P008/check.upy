# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2024-08-07


import re


ERR1 = '#define macro used'


def ids():
    return ('EFFECTIVECPP_02', 'CPP_P008')


def name(id):
    return {
        'EFFECTIVECPP_02': '''Published Standards/Effective C++ (3rd Edition) Scott Meyers/\
2. Do Not Use #define''',
        'CPP_P008': '''All Checks/Language Specific/C and C++/Preprocessor/\
Do Not Use #define''',
    }[id]


def tags(id):
    return {
        'EFFECTIVECPP_02': [
            'Preprocessor',
            'Language: C',
            'Language: C++',
            'Standard: Effective C++',
        ],
        'CPP_P008': [
            'Preprocessor',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    return '''\
<p><b>Title</b></p>
<p>Prefer consts, enums, and inlines to #defines.</p>

<p><b>Description</b></p>
<p>For simple constants, prefer const objects or enums to #defines.</p>
<p>For function-like macros, prefer inline functions to #defines.</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">\
#define ASPECT_RATIO 1.653
</code></pre>

<p><b>Compliant Code Example</b></p>
<pre><code language="C++">\
const double AspectRatio = 1.653; // uppercase names are usually for
                                  // macros, hence the name change
</code></pre>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    # Each #define
    for ref in file.filerefs('Define', 'Macro'):
        ent = ref.ent()

        # Allowed exception: empty macro definitions
        if not ent.value():
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1)
