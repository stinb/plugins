# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2023-03-14


ERR1 = 'The # token is not immediately followed by a preprocessing token: %1'
ERR2 = 'The # token is not immediately followed by a preprocessing token'

GCC_DIRECTIVES = ['assert', 'define', 'elif', 'else', 'endif', 'error', 'ident',
'if', 'ifdef', 'ifndef', 'import', 'include', 'include_next', 'line', 'pragma',
'sccs', 'unassert', 'undef', 'warning']


otherDirectives = {'elifdef', 'elifndef', 'import', 'warning'}


def ids():
    return ('MISRA08_16-0-8', 'MISRA12_20.13', 'M16-0-8', 'CPP_PR036', 'MISRA23_19.0.1', 'MISRA23_20.13')


def name(id):
    return {
        'MISRA08_16-0-8': '''Published Standards/MISRA-C++ 2008/\
16-0-8 Invalid Preprocessor Directives''',
        'MISRA12_20.13': '''Published Standards/MISRA C 2012/\
20.13 Invalid Preprocessor Directives''',
        'M16-0-8': '''Published Standards/AUTOSAR/\
Invalid Preprocessor Directives''',
        'CPP_PR036': '''All Checks/Language Specific/C and C++/Preprocessor/\
Invalid Preprocessor Directives''',
        'MISRA23_19.0.1': '''Published Standards/MISRA C++ 2023/\
19.0.1 A line whose first token is # shall be a valid preprocessing directive''',
        'MISRA23_20.13': '''Published Standards/MISRA C 2023/\
20.13 A line whose first token is # shall be a valid preprocessing directive''',
    }[id]


def tags(id):
    return {
        'MISRA08_16-0-8': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Preprocessor',
        ],
        'MISRA12_20.13': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Preprocessor',
        ],
        'M16-0-8': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR036': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
        'MISRA23_19.0.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Preprocessor',
        ],
        'MISRA23_20.13': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Preprocessor',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA08_16-0-8': '''\
<p><b>Rule</b></p>

<p>
If the # token appears as the first token on a line, then it shall be
immediately followed by a preprocessing token.
</p>

<p><b>Rationale</b></p>

<p>
When a section of source code is excluded by preprocessor directives, the
content of each excluded statement is ignored until a <i>#else</i>, <i>#elif</i>
or <i>#endif</i> directive is encountered (depending on the context). If one of
these excluded directives is badly formed, it may be ignored without warning by
a compiler with unexpected consequences.
</p>

<p>
The requirement of this rule is that all preprocessor directives shall be
syntactically valid even when they occur within an excluded block of code.
</p>

<p>
In particular, ensure that <i>#else</i> and <i>#endif</i> directives are not
followed by any characters other than white-space. Compilers are not always
consistent in enforcing this requirement.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#define AAA 2
int32_t foo(void)
{
   int32_t x = 0;
   ...
#ifndef AAA
   x = 1;
#else1              // Non-compliant
   x = AAA;
#endif
   ...
   return x;
}
</code></pre>
''',
        'MISRA12_20.13': '''\
<p>A line whose first token is <code>#</code> shall be a valid preprocessing
directive</p>

<p><b>Amplification</b></p>

<p>White-space is permitted between the <code>#</code> and preprocessing
tokens</p>

<p><b>Rationale</b></p>

<p>A preprocessor directive may be used to conditionally exclude source code
until a corresponding <i>#else</i>, <i>#elif</i> or <i>#endif</i> directive is
encountered. A malformed or invalid preprocessing directive contained within the
excluded source code may not be detected by the compiler, possibly leading to
the exclusion of more code than was intended.</p>

<p>Requiring all preprocessor directives to be syntactically valid, even when
they occur within an excluded block of code, ensures that this cannot
happen.</p>

<p><b>Example</b></p>

<p>In the following example all the code between the <i>#ifndef</i> and
<i>#endif</i> directives may be excluded if <code>AAA</code> is defined. The
developer intended that <code>AAA</code> be assigned to <code>x</code>, but the
<i>#else</i> directive was entered incorrectly and not diagnosed by the
compiler.</p>

<pre><code language="C++">  #define AAA 2

  int32_t foo ( void )
  {
    int32_t x = 0;

  #ifndef AAA
    x = 1;
  #else1    /* Non-compliant */
    x = AAA;
  #endif

    return x;
  }
</code></pre>

<p>The following example is compliant because the text <code>#start</code>
appearing in a comment is not a token.</p>

<pre><code language="C++">  /*
  #start is not a token in a comment
  */
</code></pre>
''',
        'M16-0-8': '''\
<p><b>Rule</b></p>

<p>
If the # token appears as the first token on a line, then it shall be
immediately followed by a preprocessing token.
</p>

<p><b>Rationale</b></p>

<p>
When a section of source code is excluded by preprocessor directives, the
content of each excluded statement is ignored until a <i>#else</i>, <i>#elif</i>
or <i>#endif</i> directive is encountered (depending on the context). If one of
these excluded directives is badly formed, it may be ignored without warning by
a compiler with unexpected consequences.
</p>

<p>
The requirement of this rule is that all preprocessor directives shall be
syntactically valid even when they occur within an excluded block of code.
</p>

<p>
In particular, ensure that <i>#else</i> and <i>#endif</i> directives are not
followed by any characters other than white-space. Compilers are not always
consistent in enforcing this requirement.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#define AAA 2
int32_t foo(void)
{
   int32_t x = 0;
   ...
#ifndef AAA
   x = 1;
#else1              // Non-compliant
   x = AAA;
#endif
   ...
   return x;
}
</code></pre>
''',
        'CPP_PR036': '''\
<p><b>Rule</b></p>

<p>
If the # token appears as the first token on a line, then it shall be
immediately followed by a preprocessing token.
</p>

<p><b>Rationale</b></p>

<p>
When a section of source code is excluded by preprocessor directives, the
content of each excluded statement is ignored until a <i>#else</i>, <i>#elif</i>
or <i>#endif</i> directive is encountered (depending on the context). If one of
these excluded directives is badly formed, it may be ignored without warning by
a compiler with unexpected consequences.
</p>

<p>
The requirement of this rule is that all preprocessor directives shall be
syntactically valid even when they occur within an excluded block of code.
</p>

<p>
In particular, ensure that <i>#else</i> and <i>#endif</i> directives are not
followed by any characters other than white-space. Compilers are not always
consistent in enforcing this requirement.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#define AAA 2
int32_t foo(void)
{
   int32_t x = 0;
   ...
#ifndef AAA
   x = 1;
#else1              // Non-compliant
   x = AAA;
#endif
   ...
   return x;
}
</code></pre>
''',
        'MISRA23_19.0.1': '''\
<p><b>Amplification</b></p>

<p>This rule applies to all the lines within a translation unit, even if they are excluded by preprocessing.</p>
<p>Note: white-space is permitted before and after the # token.</p>

<p><b>Rationale</b></p>

<p>A preprocessor directive may be used to conditionally exclude source code until a corresponding
#else, #elif or #endif directive is encountered. A malformed or invalid preprocessing directive
contained within the excluded source code may not be detected by the compiler, possibly leading to
the exclusion of more code than was intended.</p>

<p>Requiring all preprocessor directives to be syntactically valid, even when they occur within an excluded
block of code, ensures that this cannot happen.</p>

<p><b>Example</b></p>

<p>In the following example all the code between the <i>#ifndef</i> and
<i>#endif</i> directives may be excluded if <code>AAA</code> is defined. The
developer intended that <code>AAA</code> be assigned to <code>x</code>, but the
<i>#else</i> directive was entered incorrectly and not diagnosed by the
compiler.</p>

<pre><code language="C++">#define AAA 2
int32_t foo()
{
 int32_t x = 0;
#ifndef AAA
 x = 1;
#else1 // Non-compliant
 x = AAA;
#endif
 return x;
}

</code></pre>

<p>This rule does not apply to the following examples as the # is not a preprocessing token:</p>

<pre><code language="C++">// Not a preprocessing token within a comment \
#not a token
auto s = R"(
#text)"; // Use in a raw string literal is not a preprocessing token
</code></pre>
''',
        'MISRA23_20.13': '''\
<p><b>Amplification</b></p>

<p>White-space is permitted between the <code>#</code> and preprocessing
tokens</p>

<p><b>Rationale</b></p>

<p>A preprocessor directive may be used to conditionally exclude source code
until a corresponding <i>#else</i>, <i>#elif</i> or <i>#endif</i> directive is
encountered. A malformed or invalid preprocessing directive contained within the
excluded source code may not be detected by the compiler, possibly leading to
the exclusion of more code than was intended.</p>

<p>Requiring all preprocessor directives to be syntactically valid, even when
they occur within an excluded block of code, ensures that this cannot
happen.</p>

<p><b>Example</b></p>

<p>In the following example all the code between the <i>#ifndef</i> and
<i>#endif</i> directives may be excluded if <code>AAA</code> is defined. The
developer intended that <code>AAA</code> be assigned to <code>x</code>, but the
<i>#else</i> directive was entered incorrectly and not diagnosed by the
compiler.</p>

<pre><code language="C++">  #define AAA 2

  int32_t foo ( void )
  {
    int32_t x = 0;

  #ifndef AAA
    x = 1;
  #else1    /* Non-compliant */
    x = AAA;
  #endif

    return x;
  }
</code></pre>

<p>The following example is compliant because the text <code>#start</code>
appearing in a comment is not a token.</p>

<pre><code language="C++">  /*
  #start is not a token in a comment
  */
</code></pre>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('exclusions', 'Allow GCC directives', False)
    check.options().text('others', 'Other preprocessor directives (whitespace-separated)', '')


def check(check, file):
    # Allow GCC directives
    if check.options().lookup('exclusions'):
        otherDirectives.update(GCC_DIRECTIVES)
    # Allow other custom directives
    otherDirectivesString = check.options().lookup('others')
    if otherDirectivesString:
        otherDirectives.update(otherDirectivesString.split())

    lexer = file.lexer(False)

    if not lexer:
        return

    line = 0
    lex = lexer.first()

    while lex:
        directiveExpected = lex.text() == '#' and lex.token() == 'Preprocessor' and lex.line_begin() != line

        prev = lex
        line = prev.line_begin()
        lex = lex.next(ignore_whitespace=True, ignore_comments=True)

        # Skip if a preprocessor directive isn't expected
        if not directiveExpected:
            continue

        # Violation for an incorrect token
        if lex:
            # Skip if this token is a preprocessor directive
            if lex.token() == 'Preprocessor' or lex.text() in otherDirectives:
                continue
            check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1, lex.text())

        # Violation for a missing token
        else:
            check.violation(None, file, prev.line_begin(), prev.column_begin(), ERR2)
