#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;
use warnings;


# Required - Return the short name of the check

sub checkID { return "CPP_P015";}

sub name { return "All Checks\\Language Specific\\C and C++\\Preprocessor\\Inactive Code";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Preprocessor',
  );
}

# Required - Return the short description of the check
sub description { return "Show Lines of Inactive Code";}

# Required - Return the long description of the check
sub detailed_description { return "Do not allow inactive code.";}

# Required - Test the language of the current file, the check will be 
# skipped if this returns 0
sub test_language {
  my $language = shift;
  return $language eq "C++"; 
  return 1;
}

# Required - Return 1 if this check will be run on a per-entity basis
# Currently only supported on a per-file basis
sub test_entity { return 1;}

# Required - Return 1 if this check should be run on the entire project
# regardless of what files are selected. Should only be used for 
# project-level checks
sub test_global { return 0;}

# Optional - define configurable options for the check.
sub define_options{
  my $check = shift;  
}


# Required - Run the check and return violations if any.
# This is called for each file if test_entity is set to 1 and $file is the Understand::Ent object for the file
# it is also called once with $file set to null if test_global is set to 1
sub check {
  my $check = shift; #The check object, needed to report violations and lookup option values
  my $file = shift;  # Will be empty if test_global set to 1 and test_entity set to 0
  
  # test_entity only runs on files for now, but could change in the future, so force the check to only run on files
  return unless $file->kind->check('c file'); 
   my $count=0;
   my $lexer = $file->lexer;
   return unless $lexer;
   my $lexeme = $lexer->first;
   next unless $lexeme;
   while ($lexeme){
    if ($lexeme->inactive()){
      my $line = $lexeme->line_begin();
      my $lineText;
      while($lexeme && $lexeme->inactive()){
        $lineText .= $lexeme->text;
        last if $lexeme->text =~ /^\n$/;
        $lexeme=$lexeme->next; 
      }
      #cleanup new lines in results
      $lineText =~ s/\n/ \n/g;
      my @lines = split('\n',$lineText);
      foreach (my $i=0;$i < @lines;$i++){
        $check->violation(0,$file,$line+$i,-1,"Inactive Line");
        $count++;
      }
    }
    $lexeme=$lexeme->next;
  }
  #$check->violation(0,$file,-1,-1,"INACTIVE LINE MISMATCH") if $count != $file->metric("countlineinactive");
}
