# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12-2-2020

import re

# The ID for the check
def ids():
    return ('CPP_V033')

# The short name of the check
def name(id):
    return {
        'CPP_V033':  "All Checks/Language Specific/C and C++/Variables/Typedef'd variables in a class shall be placed in an include file" \
    }[id] \


def tags(id):
    return {
        'CPP_V033': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],

    }.get(id)

# The short description of the check \
def description():
    return """\
When a class uses typedef’d variables as instance, argument, or return 
variables, these typedefs shall be placed in an include file that is 
available for subclasses and applications."""

# The long description of the check
def detailed_description():
    return """\
<p>When a class uses typedef’d variables as instance, argument, or return 
variables, these typedefs shall be placed in an include file that is 
available for subclasses and applications.</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

# Options for the check
def define_options(check):
   return

def check(check, file): 
    if file and file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    seen = []

    while lexeme:
        # Look for typedefs defined
        if lexeme.text() == 'typedef':
            while lexeme and not lexeme.ent():
                lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

            if not lexeme:
                return

            # Add typedef name to seen dictionary
            if lexeme.ent():
                seen.append(lexeme.text())

        # look for classes
        if lexeme.text() == 'class' and lexeme.token() == 'Keyword':
            while lexeme and lexeme.text() != '{':
                lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

            if not lexeme:
                return

            # look for any typedef defined in a non include file used in this class
            if findClose(lexeme):
                close = findClose(lexeme)
                while lexeme.line_begin() != close.line_begin():
                    if lexeme.ent():
                        if lexeme.text() in seen:
                            check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), 'Typedef\'d variable was not placed in an include file')

                    lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)



        lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

# Finds the corresponding closing curly brace when given an opening curly brace
def findClose(lexeme):
    count = 0
    nextLex = lexeme.next(ignore_whitespace=True, ignore_comments=True)
    if not nextLex:
        return
    while nextLex.text() != '}':
        if nextLex.text() == '{':
            count += 1
        nextLex = nextLex.next(ignore_whitespace=True, ignore_comments=True)
        if not nextLex:
            break

        while nextLex.text() == '}':
            if count > 0:
                count -= 1
                nextLex = nextLex.next(ignore_whitespace=True, ignore_comments=True)
                if not nextLex:
                    break
            else:
                break
        if not nextLex:
            break

    return nextLex

