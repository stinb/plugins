use base ("Understand::Codecheck");
use strict;
use constant ERR1 => "Multiple objects declared on the same line";

sub register_tr_text {
  my $check = shift;
 $check->add_tr_text(ERR1);  
}


sub checkID { return "CPP_V001";}

sub name { return "All Checks\\Language Specific\\C and C++\\Variables\\One Variable per Line";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Variables',
  );
}

sub description {
  return "Only one variable should be declared per line of code.";
}

sub detailed_description {
  return "Only one variable should be declared per line of code.
These are acceptable.
    type var_name;
    type
         var_name;
    type var_name1,
         var_name2;

    These are not acceptable.
    type var_name1, var_name2;

    Comments may be mixed in with the whitespace and the format will still be acceptable.";
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check('c file');

  my @objRefs = $file->filerefs("define ~implicit","object ~member",1);
  return unless @objRefs;
  my $prevRef;
  my $lastErrorLine;

  foreach my $ref (sort{$a->line <=> $b->line;} @objRefs){
    # Need to skip objects created by range based loops in C++ 11
    next if $ref->ent->name =~ /__range|__begin|__end/;
    if ($prevRef && $ref->line == $prevRef->line){
      next if $lastErrorLine == $ref->line;
      $check->violation($prevRef->ent,$file,$prevRef->line,$prevRef->column,ERR1);
      #$check->violation($prevRef->ent,$file,$prevRef->line,$prevRef->column,$ref->ent->name);
      $lastErrorLine = $ref->line
    }
    $prevRef = $ref;
  }
}
