# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 06-30-2021

import re

ERR1 = 'Initializer list was not used to initialize member variable %1'

def id():
    return 'CPP_V037'

def name():
    return """\
All Checks/Language Specific/C and C++/Variables/Initializer lists should be \
used to initialize member variables over direct assignment."""


def tags(id):
    return {
        'CPP_V037': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>Use of the initializer list functionality
adds efficiency benefits by minimizing the amount of run-time
computations required to initialize member variables.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # Go through all Classes
    cRefs = file.filerefs('Define', 'Class')

    for cRef in cRefs:
        # vars keeps track of the member objects
        vars = {}
        oRefs = cRef.ent().refs('Define', 'Member Object')

        # Add all member objects to the vars dictionary
        for oRef in oRefs:
            vars[oRef.ent().longname()] = False

        mfRefs = cRef.ent().refs('Define', 'Member Function')

        # Go through each member function
        for mfRef in mfRefs:
            if mfRef.ent().name() != cRef.ent().name():
                continue

            # Mark the set init refs as True
            ilRefs = mfRef.ent().refs('Set Init', 'Member Object')
            for ilRef in ilRefs:
                if ilRef.ent().name() in vars.keys():
                    vars[ilRef.ent().longname()] = True

            # Check if there are any set refs and throw a violation if not marked True
            iRefs = mfRef.ent().refs('Set ~Init', 'Member Object')
            for iRef in iRefs:
                if iRef.ent().longname() in vars.keys() and vars[iRef.ent().longname()] == False:
                    check.violation(iRef.ent(), file, iRef.line(), iRef.column(), ERR1, iRef.ent().name())

