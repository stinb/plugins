# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 06-21-2021

import re

ERR1 = 'STL containers should be used instead of this C-stype array if possible'

def id():
    return 'CPP_V034'

def name():
    return """\
All Checks/Language Specific/C and C++/Variables/STL containers (vector, list, \
map, etc.) should be used instead of C-style arrays whenever possible."""


def tags(id):
    return {
        'CPP_V034': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>There are multiple reasons one would prefer using containers to simple
arrays. Containers possess functionality that simple arrays do not have. Some
examples include knowing their size, performing memory management, and
automatic sorting. Containers can hold any type, whether built-in or
user-defined types. They can also be used in STL algorithms. One common place
where STL containers cannot be used is while interfacing with other languages.
One exception to this is the STL vector. vectors use contiguous memory for
storage. The contents of a vector can be passed as an array by passing a
pointer to its first element. For example:</p>
<pre><code language="C++">vector&lt;int&gt; v;                  // declare a vector
for (int i = 0; i &lt; 5; i++) {   // Set the vectorâ€™s elements
    v.push_back(i);             // to 0 1 2 3 4
}

c_function(&(v[0]));            // Pass the contents to a C function
                                // as a simple array
</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    refs = file.filerefs('Define', 'Object')
    for ref in refs:
        if ref.ent().type() and re.search(r'\[\d*\]', ref.ent().type()):
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)

