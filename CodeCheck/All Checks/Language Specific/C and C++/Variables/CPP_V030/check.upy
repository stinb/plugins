# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 06-28-2021

import re

ERR1 = """\
Dynamic_cast operator should be used exclusively for casting withint an
inheritance hierarchy"""

def id():
    return 'CPP_V030'

def name():
    return """\
All Checks/Language Specific/C and C++/Variables/The dynamic_cast operator \
should be used exclusively for casting within an inheritance hierarchy."""


def tags(id):
    return {
        'CPP_V030': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],

    }.get(id)

def detailed_description():
    return """\
<p><b>The dynamic_cast operator should be used exclusively for
casting within an inheritance hierarchy.</b> Check results of all
such casts. Results of a failed <b>dynamic_cast</b> operation differ
for pointers and references. For pointers, the value returned
by the cast should be checked for null; where exception support
is available, a <b>dynamic_cast</b> on references throws an
exception.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexer = None
    refs = file.filerefs('Cast')

    for ref in refs:
        # Skip if scope is a Class or Struct
        if not re.search(r'Class|Struct', ref.scope().kindname()) and not ref.ent().ref('Base'):
            if not lexer:
                lexer = file.lexer()
            lexeme = lexer.lexeme(ref.line(), 0)

            # Check for dynamic_cast
            while lexeme and not re.match(r';|}|{', lexeme.text()):
                if lexeme.text() == 'dynamic_cast':
                    check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
                    break
                lexeme = lexeme.next(True, True)


