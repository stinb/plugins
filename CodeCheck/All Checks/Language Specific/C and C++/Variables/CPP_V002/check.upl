# Place & and * modifiers adjacent to variable name.
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => "* or & precedes a whitespace";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


sub checkID { return "CPP_V002";}

sub name { return "All Checks\\Language Specific\\C and C++\\Variables\\Reference Symbols Spacing, (& *)";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Variables',
  );
}

sub description {
  return 'Place & and * modifiers adjacent to variable name.';
}

sub detailed_description {
  return 'Checks for a space between the variable name and the & or *. Assume this standard refers to variable/type/function declarations.';
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}


sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("c file ~unresolved ~unknown");

  my ($lexer,$status) = $file->lexer();
  return if $status;
  #die "$status - Cannot open a lexer to ".$file->relname() if $status;

  my $lexeme = $lexer->first();
  while ($lexeme) {
    return if $check->is_abort();
    
    my $ref = $lexeme->ref();
    if ($ref && $ref->kind()->check("declarein,definein,init") &&
      $ref->scope()->kind()->check("function,object,typedef,parameter")) {
        check_for_reference_symbol($file,$lexeme,$check);
    }
    $lexeme = $lexeme->next();
  }
}


# check that the def/decl at this lexeme does not have any whitespace between
# it and any * or & immediately before it.
sub check_for_reference_symbol {
  my $file = shift;
  my $orig_lexeme = shift;
  my $check = shift;
  my $lexeme = $orig_lexeme->previous();
  my $seen_ws=0;
  while ($lexeme) {
    if ($lexeme->token() eq "Whitespace") {
      $seen_ws = 1;
    } elsif ($lexeme->text() =~ m/^[*&]$/) {
      if ($seen_ws) {
        $check->violation($orig_lexeme->ref->ent,$orig_lexeme->ref->file,$orig_lexeme->ref->line,$orig_lexeme->ref->column,ERR1);
        return;
      }
    } else {
      return;
    }
    $lexeme = $lexeme->previous();
  }
}
