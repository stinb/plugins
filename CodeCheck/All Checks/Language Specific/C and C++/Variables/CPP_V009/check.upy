ERR1 = 'using-directives shall not be used.'


# The ID for the check
def ids():
    return ('M7-3-4', 'MISRA08_7-3-4', 'CPP_V009')


# The short name of the check
def name(id):
    return {
        'M7-3-4': 'Published Standards/AUTOSAR/Using-directives shall not be used.',
        'MISRA08_7-3-4': 'Published Standards/MISRA-C++ 2008/7-3-4 Using-directives shall not be used.',
        'CPP_V009': 'All Checks/Language Specific/C and C++/Variables/Using-directives shall not be used.',
    }[id]




def tags(id):
    return {
        'MISRA08_7-3-4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Variables',
        ],
        'M7-3-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Variables',
        ],
        'CPP_V009': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>using-directives shall not be used.</p>
<p><b>Rationale</b></p>
<p>using-directives add additional scopes to the set of scopes searched during name lookup. All
identifiers in these scopes become visible, increasing the possibility that the identifier found by
the compiler does not meet developer expectations.</p>
<p>using-declarations or fully qualified names restricts the set of names considered to only the name
explicitly specified, and so are safer options.</p>
<p><b>Example</b></p>
<pre><code language="C++">namespace NS1
{
 int32_t i1;
 int32_t j1;
 int32_t k1;
}
using namespace NS1; // Non-compliant
namespace NS2
{
 int32_t i2;
 int32_t j2;
 int32_t k2;
}
using NS2::j2; // Compliant
namespace NS3
{
 int32_t i3;
 int32_t j3;
 int32_t k3;
}
void f ()
{
 ++i1;
 ++j2;
 ++NS3::k3;
}
</code></pre>
<p>
In the above, i1 is found via the using-directive. However, as a result of the using-directive, j1 and
k1 are also visible. The using-declaration allows j2 to be found while i2 and k2 remain hidden.
Finally, the qualified name NS3::k3 unambiguously refers to k3, and i3, j3 and k3 remain hidden
to normal lookup
</p>
<p><b>See also</b></p>
<p>ISO/IEC 14882:2003 [1] ยง7.3.4</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if lexer:
        lex = lexer.first()
        is_using = False

        while lex:
            if lex.text() == "using" and lex.token() == "Keyword":
                is_using = True
            elif is_using:
                if lex.token() != "Identifier":
                    check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1)
                is_using = False

            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
