# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-20-2020

import re

# The ID for the check
def id():
    return 'CPP_V024'

# The short name of the check
def name():
    return """\
All Checks/Language Specific/C and C++/Variables/Variables of type char shall be explicitly qualified as signed or unsigned when \
used to store numbers"""


def tags(id):
    return {
        'CPP_V024': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],

    }.get(id)

# The short description of the check
def description():
    return """\
Variables of type char shall be explicitly qualified as signed or unsigned when used to store numbers."""

# The long description of the check
def detailed_description():
    return """\
<p>Variables of type char shall be explicitly qualified as signed
nor unsigned when used to store numbers.</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')

# Options for the check
def define_options(check):
   return

def test_language(language):
    return language == 'C++'

def check(check, file):
    defs = file.filerefs('C Define')

    if file and file.lexer():
        lexer = file.lexer()
    else:
        return

    if not defs:
        return

    for def0 in defs:
        if not lexer:
            return
        lexeme = lexer.lexeme(def0.line(), def0.column())

        if lexeme.ent() and str(lexeme.ent().type()) == 'char' and re.search(r"^\d+$", str(lexeme.ent().value())):
            #check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), str(lexeme.ent().type()))
            violation = check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), 'Number was stored in char type and not qualified as signed or unsigned')
            prevLex = lexeme
            while prevLex.text() != 'char':
                prevLex = prevLex.previous(ignore_whitespace=True, ignore_comments=True)
            violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), prevLex.line_begin(), prevLex.column_begin(), 'signed ')

