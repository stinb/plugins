# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 3-21-2022

ERR1 = "Local Variable not initialized"

def id():
    return 'CPP_V026'

def name():
    return """\
All Checks/Language Specific/C and C++/Variables/Local variables shall be initialized when \
declared"""



def tags(id):
    return {
        'CPP_V026': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],

    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Local variables that are defined but not used can lead to memory management
issues as well as making code more difficult to follow. They can also be
indicitive of an error where a programmer meant to use one variable and
accidently used another. This check ignores references inside inactive code
(ie #if 0...#endif).
Note: This codecheck cannot account for external library objects</p>
"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    refs = file.filerefs('define', 'object local ~member ~unknown ~unresolved', True)
    for ref in refs:
        if ref.ent().name() == '...' or ref.ent().name() == '[unnamed]' or ref.ent().name() == '__range':
            continue
        if ref.ent().refs('setby init'):
            continue

        check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
