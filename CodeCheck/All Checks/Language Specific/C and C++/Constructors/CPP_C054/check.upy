# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-19-2020

import re

def id():
    return 'CPP_C054'

def name():
    return "All Checks/Language Specific/C and C++/Constructors/" +  'When a "deep copy" constructor is not implemented, comments in \
the class header shall describe this fact'


def tags(id):
    return {
        'CPP_C054': [
            'Language: C',
            'Language: C++',
            'Constructors',
        ],

    }.get(id)

def description():
    return 'When a class does not implement a "deep copy" copy constructor and \
uses the compiler generated "shallow copy" copy constructor, \
comments shall be included in the class header describing this fact.'

def detailed_description():
    return """\
<p>Deep copy constructors allow the programmer to specify exactly how a copy of 
the class should be created. This is preferable over shallow copies, which are 
implicitly created by the C++ compiler and do a member-wise copy between 
objects.
</p>"""

def test_entity(file):
    return file.kind().check('header file')

def test_language(language):
    return language == 'C++'

def define_options(check):
	pass

def check(check, file):
	classes_defined = file.filerefs('Define', 'C Class', True)

	for ref in classes_defined:
		contents = ref.ent().contents()
		class_name = ref.ent().simplename()

		found_copy_con = re.search(rf"{class_name}\({class_name} const&", contents)

		if not found_copy_con:
			# search class header for comment describing lack of copy constructor
			lexer = file.lexer()
			lexeme = lexer.first()
			found_comment = False

			while lexeme:
				if lexeme.token() == "Comment":
					found_comment = re.search(r"copy", lexeme.text(), re.IGNORECASE)

				lexeme = lexeme.next(ignore_whitespace=True)

			if not found_comment:
				check.violation(ref.ent(), file, ref.line(), ref.column(), "Violation: deep copy constructor for class '%1' not implemented, \
and no explanatory comment found in class header", ref.ent())
