# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 06-15-2021

import re

ERR1 = 'Constructor %1 should be declared explicit'

def id():
    return 'CPP_C055'

def name():
    return """\
All Checks/Language Specific/C and C++/Constructors/Constructors that can be \
used with one argument should be declared explicit."""


def tags(id):
    return {
        'CPP_C055': [
            'Language: C',
            'Language: C++',
            'Constructors',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>In addition to being a method of
construction, a constructor with a single argument also defines
an implicit conversion type. Some designs exist that lead to a
logical choice of using the implicit conversion, but implicit
conversions can cause errors in other cases. The following
examples contain two classes with single argument
constructors that are not explicit.</p>
<p>The first example is the class Rational, which can hold a single
rational number (i.e., x/y where x and y are integers). In this
example, implicit conversion is used in a logical manner that
will give desired results.</p>
<pre><code language="C++">class Rational {
    public:
        Rational(int x, int y = 1) : numer(x), denom(y) {}
    private:
        int numer,
            denom;
};
</code></pre>
<p>As defined, the class Rational may be used in any of the following ways:</p>
<pre><code language="C++">Rational a(1, 2); // a = 1/2 (Uses both constructor arguments)
Rational b(3); // b = 3/1 (Lets the second argument default o 1)
Rational c = 4; // c = 4/1 (Uses implicit conversion from int to Rational
                // as defined by the single argument form of the
                // Rational constructor)
</code></pre>
<p>Here it makes sense to set the variable c to the integer 4, since it is a
valid rational number.</p>
<p>The second example is the class State, which holds an array of values that
can define the state of an object. This example shows how not declaring the
constructor explicit gives unintended results.</p>
<pre><code language="C++">class State {
    public:
        State(int n) : size(n) { data = new double[size]; }
        State operator+ (const State &rhs);
    private:
        int size;
        double *data;
};
</code></pre>
<p>Using this definition of State, the following is valid C++ code, but some
results may not be as expected.</p>
<pre><code language="C++">    State a(5); // Creates a State with an array of length 5
    State b = 5; // Creates a State with an array of length 5
    b = a + 5; // Uses implicit conversion to convert the integer 5 into
                // a State with array length 5, then uses the addition operator
                // to add this new State to the previously declared State ‘a’
</code></pre>
<p>Had the State constructor been declared explicit (explicit
State(int n);), the second two lines would have been
flagged as errors, since an int could no longer be implicitly
converted to a State.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # Gather class refs
    refs = file.filerefs('Define', 'Class')
    for ref in refs:
        # Find constructors
        conRefs = ref.ent().refs('Define', 'Member Function')
        for conRef in conRefs:
            if conRef.ent().name() == ref.ent().name():
                # Check if constructor only has one parameter
                parameters = conRef.ent().parameters()
                if len(parameters.split(',')) == 1 and not re.search(r'Explicit', conRef.ent().kindname()):
                    # Throw violation if not explicit
                    check.violation(conRef.ent(), file, conRef.line(), conRef.column(), ERR1, conRef.ent().name())
