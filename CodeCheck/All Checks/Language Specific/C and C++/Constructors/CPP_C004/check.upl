# Check that the parameter of a copy constructor is a constant reference.
#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;


# Violation messages should use constants and can have additonal parameters 
# indicated with %1, %2, %3 etc. like printf does
use constant ERR1 => 'Parameter of copy constructor is a constant reference';

# Required - Violation messages should be registred for translation
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# Required - Return the short name of the check

sub checkID { return "CPP_C004";}

sub name { return "All Checks\\Language Specific\\C and C++\\Constructors\\Parameter of copy constructor is a constant reference";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Constructors',
  );
}

# Required - Return the short description of the check
sub description { return "Parameter of copy constructor is a constant reference";}

# Required - Return the long description of the check
sub detailed_description { return <<"END_DESC"
Parameter of copy constructor is a constant reference
END_DESC
}

# Required - Test the language of the current file, the check will be 
# skipped if this returns 0
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; 
  return 1;
}

# Required - Return 1 if this check will be run on a per-entity basis
# Currently only supported on a per-file basis
sub test_entity { return 1;}

# Required - Return 1 if this check should be run on the entire project
# regardless of what files are selected. Should only be used for 
# project-level checks
sub test_global { return 0;}

sub check {
  my $check = shift; #The check object, needed to report violations and lookup option values
  my $file = shift; 
  
  # test_entity only runs on files for now, but could change in the future, so force the check to only run on files
  return unless $file->kind->check('c file'); 
   
  my @refs = $file->filerefs("","function ~unresolved ~unknown",1);
  my @ents = map{$_->ent;}@refs;
  
  foreach my $function (@ents){
    if(checkCopyConstructor($function)){
      my $ref = $function->ref("define","parameter") or return;
      if($ref->ent->type !~ m/const/) {
        $check->violation($ref->ent,$ref->file,$ref->line,$ref->column,ERR1); 
      }
    }
  }
}



# check if function is a copy constructor
sub checkCopyConstructor {
    my $func = shift;
    return 0 if !$func->kind()->check("member");
    my $parent = $func->ents("definein,declarein") or return 0;
    my $name = $parent->name();
    return 0 if $func->name() ne $name;
    my $param = $func->ents("define","parameter") or return 0;
    return ($param->type() =~ m/$name &$/);
}
