import re

ERR1 = 'Assignment operator is not declared with ref-qualifier &.'
ASSIGNMENT_OPERATOR = {"operator=", "operator+=",
                       "operator-=", "operator*=", "operator/=", "operator%="}


# The ID for the check
def ids():
    return ('A12-8-7', 'CPP_A013')


# The short name of the check
def name(id):
    return {
        'A12-8-7': 'Published Standards/AUTOSAR/Assignment operators should be declared with the ref-qualifier &.',
        'CPP_A013': 'All Checks/Language Specific/C and C++/Assignment Operators/Assignment operators should be declared with the ref-qualifier &.',
    }[id]



def tags(id):
    return {
        'A12-8-7': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Assignment Operators'
        ],
        'CPP_A013': [
            'Language: C',
            'Language: C++',
            'Assignment Operators',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>User declared assignment operators differ from built-in operators in a way that they
accept rvalues as parameters, which is confusing. Adding & to the function declaration
prohibits rvalue parameters and ensures that all of the calls can only be made on lvalue
objects, which results with the same behavior as for built-in types.</p>
<p>Note that this rule applies to all assignment operators, e.g. operator=(), operator*=(),
operator+=.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A12-8-7.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;cstdint&gt;
3 class A
4 {
5 public:
6 A() = default;
7 A& operator*=(std::int32_t i) // Non-compliant
8 {
9 // ...
10 return *this;
11 }
12 };
13 A F1() noexcept
14 {
15 return A{};
16 }
17 class B
18 {
19 public:
20 B() = default;
21 B& operator*=(std::int32_t) & // Compliant
22 {
23 // ...
24 return *this;
25 }
26 };
27 B F2() noexcept
28 {
29 return B{};
30 }
31 std::int32_t F3() noexcept
32 {
33 return 1;
34 }
35 int main(int, char**)
36 {
37 F1() *= 10; // Temporary result of f1() multiplied by 10. No compile-time
38 // error.
39 ;
40 // f2() *= 10; // Compile-time error due to ref-qualifier
41 ;
42 // f3() *= 10; // Compile-time error on built-in type
43 }
</code></pre>
<p><b>See also</b></p>
<p>• HIC++ v4.0 [9]: 12.5.7 Declare assignment operators with the ref-qualifier &.</p>
<p>• cppreference.com [16]: Assignment operators.</p>
"""



# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"operator[\+\-\*\/%]{0,1}[=]", file.contents()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    for ref in file.filerefs("Define", "Function"):
        if ref.ent().name() in ASSIGNMENT_OPERATOR:
            compliant = False
            lex = lexer.lexeme(ref.line(), ref.column())

            while(lex):
                curr_lex = lex
                lex = lex.next(ignore_comments=True, ignore_whitespace=True)
                if lex.line_begin() != curr_lex.line_begin():
                    if curr_lex.text() == "&":
                        compliant = True
                    break

            if not compliant:
                check.violation(ref.ent(), file, ref.line(),
                                ref.column(), ERR1)
