ERR1 = '''User-defined copy and move assignment operators should use user-defined
no-throw swap function.'''


# The ID for the check
def ids():
    return ('A12-8-2', 'CPP_A009')


# The short name of the check
def name(id):
    return {
        'A12-8-2': 'Published Standards/AUTOSAR/User-defined copy and move assignment operators should use user-defined no-throw swap function.',
        'CPP_A009': 'All Checks/Language Specific/C and C++/Assignment Operators/User-defined copy and move assignment operators should use user-defined no-throw swap function.',
    }[id]



def tags(id):
    return {
        'A12-8-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Assignment Operators'
        ],
        'CPP_A009': [
            'Language: C',
            'Language: C++',
            'Assignment Operators',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>User-defined copy and move assignment operators should use user-defined
no-throw swap function.</p>
<p><b>Rationale</b></p>
<p>Using a non-throwing swap operation in the copy and move assignment operators
helps to achieve Strong Exception Safety. Each assignment operator is also simplified
because it does not require check for assignment to itself.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A12-8-2.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;cstdint&gt;
3 #include &lt;utility&gt;
4 class A
5 {
6 public:
7 A(const A& oth)
8 {
9 // ...
10 }
11 A(A&& oth) noexcept
12 {
13 // ...
14 }
15 A& operator=(const A& oth) & // Compliant
16 {
17 A tmp(oth);
18 Swap(*this, tmp);
19 return *this;
20 }
21 A& operator=(A&& oth) & noexcept // Compliant
22 {
23 A tmp(std::move(oth));
24 Swap(*this, tmp);
25 return *this;
26 }
27 static void Swap(A& lhs, A& rhs) noexcept
28 {
29 std::swap(lhs.ptr1, rhs.ptr1);
30 std::swap(lhs.ptr2, rhs.ptr2);
31 }
32
33 private:
34 std::int32_t* ptr1;
35 std::int32_t* ptr2;
36 };
37 class B
38 {
39 public:
40 B& operator=(const B& oth) & // Non-compliant
41 {
42 if (this != &oth)
43 {
44 ptr1 = new std::int32_t(*oth.ptr1);
45 ptr2 = new std::int32_t(
46 *oth.ptr2); // Exception thrown here results in
47 // a memory leak of ptr1
48 }
49
50 return *this;
51 }
52 B& operator=(B&& oth) & noexcept // Non-compliant
53 {
54 if (this != &oth)
55 {
56 ptr1 = std::move(oth.ptr1);
57 ptr2 = std::move(oth.ptr2);
58 oth.ptr1 = nullptr;
59 oth.ptr2 = nullptr;
60 }
61
62 return *this;
63 }
64
65 private:
66 std::int32_t* ptr1;
67 std::int32_t* ptr2;
68 };
</code></pre>
<p><b>See also</b></p>
<p>â€¢ HIC++ v4.0 [9]: 12.5.6 Use an atomic, non-throwing swap operation to implement
the copy and move assignment operators</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'




def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        if func_ref.ent().name() == "operator=":
            non_compliant = False
            set_ref_id = [set_ref.ent().id() for set_ref in func_ref.ent().refs(
                "Set", "Member Object")]

            for use_ref in func_ref.ent().refs("Use", "Member Object"):
                if use_ref.ent().id() in set_ref_id:
                    non_compliant = True
                    break

            if non_compliant:
                check.violation(func_ref.ent(), file,
                                func_ref.line(), func_ref.column(), ERR1)
