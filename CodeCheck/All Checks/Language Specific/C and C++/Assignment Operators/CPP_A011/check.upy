ERR1 = 'Self-assignment is not handled correctly.'


# The ID for the check
def ids():
    return ('A12-8-5', 'CPP_A011')


# The short name of the check
def name(id):
    return {
        'A12-8-5': 'Published Standards/AUTOSAR/A copy assignment and a move assignment operators shall handle self-assignment.',
        'CPP_A011': 'All Checks/Language Specific/C and C++/Assignment Operators/A copy assignment and a move assignment operators shall handle self-assignment.',
    }[id]





def tags(id):
    return {
        'A12-8-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Assignment Operators'
        ],
        'CPP_A011': [
            'Language: C',
            'Language: C++',
            'Assignment Operators',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>A copy assignment and a move assignment operators shall handle
self-assignment.</p>
<p><b>Rationale</b></p>
<p>User-defined copy assignment operator and move assignment operator need to
prevent self-assignment, so the operation will not leave the object in an indeterminate
state. If the given parameter is the same object as the local object, destroying
object-local resources will invalidate them. It violates the copy/move assignment
postconditions.</p>
<p>Note that STL containers assume that self-assignment of an object is correctly handled.
Otherwise it may lead to unexpected behavior of an STL container.</p>
<p>Self-assignment problem can also be solved using swap operators. See rule: A12-8-2.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A12-8-5.cpp 271773 2017-03-23 13:16:53Z piotr.tanski $
#include &lt;cstdint&gt;
#include &lt;stdexcept&gt;
struct A
{
std::int32_t number;
std::int32_t* ptr;
// Implementation
};
class B
{
public:
// ...
B& operator=(B const& oth) // Non-compliant
{
i = oth.i;
delete aPtr;

try
{
aPtr = new A(*oth.aPtr); // If this is the self-copy case, then
// the oth.a_ptr is already deleted
}
catch (std::bad_alloc&)
{
aPtr = nullptr;
}

return *this;
}

private:
std::int16_t i = 0;
A* aPtr = nullptr;
};
class C
{
public:
C& operator=(C const& oth) // Compliant
{
if (this != &oth)
{
A* tmpPtr = new A(*oth.aPtr);

i = oth.i;
delete aPtr;
aPtr = tmpPtr;
}
return *this;
}
C& operator=(C&& oth) // Compliant
{
if (this != &oth)
{
A* tmpPtr = new A{std::move(*oth.aPtr)};

i = oth.i;
delete aPtr;
aPtr = tmpPtr;
}
return *this;
}

private:
std::int16_t i = 0;
A* aPtr = nullptr;
};
</code></pre>
<p><b>See also</b></p>
<p>• SEI CERT C++ [10]: OOP54-CPP Gracefully handle self-assignment.</p>
<p>• C++ Core Guidelines [11]: C.62: Make copy assignment safe for self-assignment.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(lookup_ents=False)

    if not lexer:
        return

    for func_ref in file.filerefs("Define", "Member Function"):
        end_ref = func_ref.ent().ref("End, Endby")
        on_delete = False
        deleted_obj = {}
        self_assignment = {}
        lex = lexer.lexeme(func_ref.line(), func_ref.column())

        if not end_ref:
            continue

        while lex and (lex.line_begin() != end_ref.line()):
            if lex.text() == "delete" and lex.token() == "Keyword":
                on_delete = True
            elif on_delete and lex.token() == "Identifier":
                on_delete = False

                if lex.text() in deleted_obj:
                    continue

                deleted_obj[lex.text()] = lex.line_begin()

            lex = lex.next(ignore_whitespace=True, ignore_comments=True)

        for obj_ref in func_ref.ent().refs("Use", "Member Object"):
            for set_ref in obj_ref.ent().refs("Setby"):
                if set_ref.line() == obj_ref.line():
                    if obj_ref.ent().name() in self_assignment:
                        self_assignment[obj_ref.ent().name()] = obj_ref.line() if obj_ref.line(
                        ) > self_assignment[obj_ref.ent().name()] else self_assignment[obj_ref.ent().name()]
                        continue

                    self_assignment[obj_ref.ent().name()] = obj_ref.line()

        if deleted_obj and self_assignment:
            for deleted in deleted_obj:
                if deleted in self_assignment and deleted_obj[deleted] < self_assignment[deleted]:
                    check.violation(func_ref.ent(), file,
                                    func_ref.line(), func_ref.column(), ERR1)
