ERR1 = 'Copy/move constructor/assignment operator is not protected nor defined "=delete" in base class.'


# The ID for the check
def ids():
    return ('A12-8-6', 'CPP_A012')


# The short name of the check
def name(id):
    return {
        'A12-8-6': 'Published Standards/AUTOSAR/Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined "=delete" in base class.',
        'CPP_A012': 'All Checks/Language Specific/C and C++/Assignment Operators/Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined "=delete" in base class.',
    }[id]





def tags(id):
    return {
        'A12-8-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_A012': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined "=delete" in base class.</p>
<p><b>Rationale</b></p>
<p>Invoking copy or move constructor or copy assignment or move assignment operator
from the top of a class hierarchy bypasses the underlying implementations. This results
in "slicing" where only the base sub-objects being copied or moved.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A12-8-6.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;memory&gt;
3 #include &lt;utility&gt;
4 #include &lt;vector&gt;
5 class A // Abstract base class
6 {
7 public:
8 A() = default;
9 A(A const&) = default; // Non-compliant
10 A(A&&) = default; // Non-compliant
11 virtual ~A() = 0;
12 A& operator=(A const&) = default; // Non-compliant
13 A& operator=(A&&) = default; // Non-compliant
14 };
15 class B : public A
16 {
17 };
18 class C // Abstract base class
19 {
20 public:
21 C() = default;
22 virtual ~C() = 0;
23
24 protected:
25 C(C const&) = default; // Compliant
26 C(C&&) = default; // Compliant
27 C& operator=(C const&) = default; // Compliant
28 C& operator=(C&&) = default; // Compliant
29 };
30 class D : public C
31 {
32 };
33 class E // Abstract base class
34 {
35 public:
36 E() = default;
37 virtual ~E() = 0;
38 E(E const&) = delete; // Compliant
39 E(E&&) = delete; // Compliant
40 E& operator=(E const&) = delete; // Compliant
41 E& operator=(E&&) = delete; // Compliant
42 };
43 class F : public E
44 {
45 };
46 class G // Non-abstract base class
47 {
48 public:
49 G() = default;
50 virtual ~G() = default;
51 G(G const&) = default; // Non-compliant
52 G(G&&) = default; // Non-compliant
53 G& operator=(G const&) = default; // Non-compliant
54 G& operator=(G&&) = default; // Non-compliant
55 };
56 class H : public G
57 {
58 };
59 void Fn1() noexcept
60 {
61 B obj1;
62 B obj2;
63 A* ptr1 = &obj1;
64 A* ptr2 = &obj2;
65 *ptr1 = *ptr2; // Partial assignment only
66 *ptr1 = std::move(*ptr2); // Partial move only
67 D obj3;
68 D obj4;
69 C* ptr3 = &obj3;
70 C* ptr4 = &obj4;
71 //*ptr3 = *ptr4; // Compilation error - copy assignment operator of class C
72 // is protected
73 //*ptr3 = std::move(*ptr4); // Compilation error - move assignment operator
74 // of class C is protected
75 F obj5;
76 F obj6;
77 E* ptr5 = &obj5;
78 E* ptr6 = &obj6;
79 //*ptr5 = *ptr6; // Compilation error - use of deleted copy assignment
80 // operator
81 //*ptr5 = std::move(*ptr6); // Compilation error - use of deleted move
82 // assignment operator
83 H obj7;
84 H obj8;
85 G* ptr7 = &obj7;
86 G* ptr8 = &obj8;
87 *ptr7 = *ptr8; // Partial assignment only
88 *ptr7 = std::move(*ptr8); // Partial move only
89 }
90 class I // Non-abstract base class
91 {
92 public:
93 I() = default;
94 ~I() = default;
95
96 protected:
97 I(I const&) = default; // Compliant
98 I(I&&) = default; // Compliant
99 I& operator=(I const&) = default; // Compliant
100 I& operator=(I&&) = default; // Compliant
101 };
102 class J : public I
103 {
104 public:
105 J() = default;
106 ~J() = default;
107 J(J const&) = default;
108 J(J&&) = default;
109 J& operator=(J const&) = default;
110 J& operator=(J&&) = default;
111 };
112 void Fn2() noexcept
113 {
114 std::vector&lt;I&gt; v1;
115 // v1.push_back(J{}); // Compilation-error on calling a deleted move
116 // constructor of I class, slicing does not occur
117 // v1.push_back(I{}); // Compilation-error on calling a deleted move
118 // constructor of I class
119
120 std::vector&lt;J&gt; v2;
121 v2.push_back(J{}); // No compilation error
122
123 std::vector&lt;std::unique_ptr&lt;I&gt;&gt; v3;
124 v3.push_back(std::unique_ptr&lt;I&gt;{}); // No compilation error
125 v3.push_back(std::make_unique&lt;I&gt;()); // No compilation error
126 v3.push_back(std::make_unique&lt;J&gt;()); // No compilation error
127 v3.emplace_back(); // No compilation error
128 }
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: Rule 12-8-2 The copy assignment operator shall be
declared protected or private in an abstract class.</p>
<p>• HIC++ v4.0 [9]: 12.5.8 Make the copy assignment operator of an abstract class
protected or define it =delete.</p>
<p>• C++ Core Guidelines [11]: C.67: A base class should suppress copying, and
provide a virtual clone instead if "'copying"' is desired.</p>
<p>• C++ Core Guidelines [11]: C.81: Use =delete when you want to disable default
behavior (without wanting an alternative).</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(lookup_ents=False)

    if not lexer:
        return

    for ref in file.filerefs("Define", "Class"):
        derived_class = ref.ent().ref("Base")
        if not derived_class:
            for func_ref in ref.ent().refs("Define, Declare ~Delete", "Function"):
                compliant = False
                ref_ent = func_ref.ent()
                ref_param = ref_ent.parameters()
                implicit = func_ref.scope().ref("Implicit")

                if (not implicit and ("Public" in ref_ent.kind().longname()) and
                    ((ref_ent.name() == ref.ent().name() and
                        (ref_param == f"{ref.ent().name()} &&" or ref_param == f"const {ref.ent().name()} &")) or ref_ent.name() == "operator=")):
                    for lex in lexer.lexemes(func_ref.line(), func_ref.line()):
                        lex_next = lex.next(ignore_whitespace=True)
                        if ((lex.text() == "=" and lex.token() == "Operator")
                                and (lex_next.text() == "delete" and lex_next.token() == "Keyword")):
                            compliant = True

                    if not compliant:
                        check.violation(func_ref.ent(), file,
                                        func_ref.line(), func_ref.column(), ERR1)
