# This script is designed to run with Understand - CodeCheck
# Written and Converted by Kalicia Adams
# 6-8-2022

ERR1 = "Violation: maximum characters (%1) exceeded"

# The ID for the check
def ids():
    return ('CPP_ST014')

# The short name of the check
def name(id):
    return {
        'CPP_ST014':  "All Checks/Language Specific/C and C++/Styling/No line of code should extend beyond 80 characters"
    }[id]


def tags(id):
    return {
        'CPP_ST014': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>No line of code should extend beyond 80 characters (unless this limit is unreasonable).</p>
<p><b>Rationale</b></p>
<p>Keeping lines of code within a certain number of columns helps to maintain or improve the readability of the code.
Instances where this guideline may not improve readability,
and therefore lend this guideline not reasonable to follow,
include (but are not limited to) the following:
- A complete expression that terminates shortly
after 80 characters
- Complex algorithms that are more easily interpreted as
complete, in-line expressions<br>
- Code that is auto-generated by a tool (although, if
possible, auto-generation should be customized to meet
standards)
For this reason, the user may input their preferred maximum column limit below.
</p>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def define_options(check):
	
	check.option().integer('integer', 'Maximum Column Limit', 80)

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check,file):
    option = check.option().lookup('integer')
    lexer = file.lexer()
    if not lexer:
        return
    lines = lexer.lines()
   
    for i in range(lines):
        lexemes = lexer.lexemes(i+1,i+1) #Add 1 to i because i starts at 0, but there is no 0 line. 
        
        first_lexeme = False #initializing first_lexeme and end_lexeme to False
        end_lexeme = False 
        for lex in lexemes:
            if first_lexeme==False and lex.token()!='Whitespace':
                first_lexeme = lex #setting both to the current lexeme
                end_lexeme = lex 
            elif lex.token()!='Comment' and lex.token()!='Whitespace' and lex.token()!='Newline':
                end_lexeme=lex #As it iterates it through the lexemes, it changes the end_lexeme to the current one it is on if it's not a comment, whitespace, or newline. 
        if first_lexeme:
            columns = end_lexeme.column_end()-first_lexeme.column_begin() #Manually seeing how many columns are really used. Ignoring leading whitespace. 
            if columns>option:
                check.violation(file,file,end_lexeme.line_begin(),end_lexeme.column_end(), ERR1, option)

