# This script is designed to run with Understand - CodeCheck
# Converted by Kalicia Adams
# 06-30-2022

ERR1 = 'Indentation is less than (%1) spaces or inconsistent with set standard.'

def id():
    return ('CPP_ST032')

def name(id):
    return {'CPP_ST032': "All Checks/Language Specific/C and C++/Styling/" +  """\
Indentation shall be at least three spaces, and consistent across modules"""}[id]


def tags(id):
    return {
        'CPP_ST032': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return "Indentation shall be at least three spaces, and consistent across modules."

def detailed_description():
    return """\
<p><b>Rationale</b></p>
Code indentation with insufficient spacing can make the code look cluttered, decreasing readability. Similarly, inconsistent
indentation looks messy and can cause confusion for the reader.</p>
<p><b>Examples</b></p>
<pre><code language="C++">// Valid (with standard set to 3 spaces per indentation)
   if(...) {
      while (...) {
         // do something
      }
   }
   else
      return 0;

// Invalid (with standard set to 3 spaces per indentation)
  if(...) {             // 2 space indentation - line flags violation
      while (...) {
         // do something
      }
   }
   else
    return 0;           // 4 space indentation - line flags violation
</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def define_options(check):
    check.option().integer('standardIndent',"Standard Indentation",4)

def check(check, file):
    lexer = file.lexer()
    if not lexer:
        return

    lexeme = lexer.first()
    stdIndent = check.option().lookup("standardIndent")
    level = 0

    while lexeme:
        if lexeme.text() == "{":
            level = level + 1
        if lexeme.text() == "}":
            level = level - 1

        indent = None
        if lexeme.column_begin()==1 and (lexeme.token()=="Whitespace"):
            indent = lexeme

        if not ( lexeme.next(True, True) and lexeme.next(True, True).line_begin() != lexeme.line_begin() ):
            if indent and (len(indent.text()) % stdIndent or len(indent.text())<3):
                violation = check.violation(file, file, indent.line_begin(), indent.column_begin(), ERR1, stdIndent)
                violation.add_fixit_hint(indent.line_begin(), indent.column_begin(), indent.line_begin(), indent.column_begin() + len(indent.text()), " " * (level * stdIndent))

        lexeme = lexeme.next()
