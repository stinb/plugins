# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 4-8-2021

import re

ERR1 = 'Parentheses not used in lengthy expression'

# The ID for the check
def ids():
    return ('CPP_ST009')

# The short name of the check
def name(id):
    return {
        'CPP_ST009':  "All Checks/Language Specific/C and C++/Styling/Parentheses should be used in lengthy logical and arithmetic expressions for clarity."
    }[id]


def tags(id):
    return {
        'CPP_ST009': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return """\
Parentheses should be used in lengthy logical and arithmetic expressions for
clarity."""

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Parentheses should be used in lengthy logical and arithmetic expressions for
clarity. Parentheses can be used even if the expression does not techincally
require them. This improves the overall readability and maintainability of the
code.</p>
<p><b>Example</b></p>
<p><pre><code language="C++">    int age = 10, height = 45;

    /* valid */
    if ((age &lt; 12 && height &lt; 48) || (age &gt; 65 && height &gt; 72)) {
    	[...]
    }

    /* invalid, insufficient use of parentheses in complex logical expression */
    if (age &lt; 12 && height &lt; 48 || age &gt; 65 && height &gt; 72) {
    	[...]
    }
</code></pre></p>
<p><i>Developer's Note:</i>
This check assumes that for n logical or arithmetic operators, if the
expression has less than (n - 1) sets of parentheses, the programmer
may be relying too heavily on operator precedence and the expression will
be flagged with a violation.</p>
<p>Note, this check will flag a false positive if a series of arguments with
arithmetic operators are passed into a function like so:</p>
<p><pre><code language="C++">    path.moveTo(x + 8, y + 2, x + 8, y - 6);
</code></pre></p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):

	# store all logical and arithmetic operators in a list
	operators = ["+", "-", "*", "/", "||", "&&", "!"]

	if file and file.lexer():
		lexer = file.lexer()
	else:
		return
		
	lexeme = lexer.first()

	while lexeme:

		# reset variable counts before the next line is parsed
		op_count = 0
		paren_open_count = 0
		paren_close_count = 0
		paren_set_count = 0

		# search line by line
		while lexeme.token() != "Newline":

			if (lexeme.text() in operators and lexeme.token() == "Operator"):
				# do not count asterisk if it could be a pointer or dereference, or minus sign if it could be a negative op
				if (lexeme.text() == "*" or lexeme.text() == "-") and not (lexeme.next().token() == "Whitespace" and lexeme.previous().token() == "Whitespace"):
					pass
				else:
					op_count += 1

			if (lexeme.text() == "(" and lexeme.token() == "Punctuation"):
				paren_open_count += 1

			if (lexeme.text() == ")" and lexeme.token() == "Punctuation"):
				paren_close_count += 1
			
			#print(lexeme.text(), sep="\n")
			lexeme = lexeme.next()

		# calculate paren sets for this line
		paren_set_count = min(paren_open_count, paren_close_count)

		# after each line, compare the number of paren sets to the number of operators
		if paren_set_count < (op_count - 1):

			check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "Lengthy expression found, may need to increase number of \
parentheses sets (currently: %1) for number of operators (%2)", paren_set_count, op_count)

		lexeme = lexeme.next()

		



