# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12-7-2020

import re

# The ID for the check
def ids():
    return ('CPP_ST001')

# The short name of the check
def name(id):
    return {
        'CPP_ST001':  "All Checks/Language Specific/C and C++/Styling/Not more than one space should precede a \";\" with the exception of the null statement"
    }[id]


def tags(id):
    return {
        'CPP_ST001': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

# The short description of the check
def description():
    return """\
Not more than one space should precede a \";\" with the exception of the null statement"""

# The long description of the check
def detailed_description():
    return """\
<p>Not more than one space should precede a \";\" with the exception of the 
null statement
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

# Options for the check
def define_options(check):
   return

def test_language(language):
    return language == 'C++'

def check(check, file): 
    if file and file.lexer():
        lexer = file.lexer()
    else:
        return
        
    lexeme = lexer.first()

    keywords = ["if", "else", "for", "while", "case", "default"]

    while lexeme:
        if lexeme.text() in keywords:
            if lexeme.next(ignore_whitespace=True, ignore_comments=True).text() == '(':
                close = findClose(lexeme)
                if close and close.next(ignore_whitespace=True, ignore_comments=True).text() == ';':
                    lexeme = close.next(ignore_whitespace=True, ignore_comments=True).next(ignore_whitespace=True, ignore_comments=True)
                    continue

            while lexeme and lexeme.token() != 'Newline':
                lexeme = lexeme.next()

            if lexeme.previous(ignore_whitespace=True, ignore_comments=True).text() == ':' and lexeme.next(ignore_whitespace=True, ignore_comments=True).text() == ';':
                lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True).next(ignore_whitespace=True, ignore_comments=True)
                continue

                
            

        # Look for semicolons
        if lexeme.text() == ';' and not re.match(r';|{|}', lexeme.previous(ignore_whitespace=True, ignore_comments=True).text()):
            prevLex = lexeme.previous()
            if prevLex.token() == 'Whitespace' and len(prevLex.text()) > 1:
                violation = check.violation(file, file, prevLex.line_begin(), prevLex.column_begin(), 'Whitespace preceding a ";" exceeded one space')
                violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), prevLex.line_begin(), prevLex.column_begin() + len(prevLex.text()), '')


        lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)


def checkNull(lexeme, keywords):
    tempLex = lexeme

    # walk back to beginning of line semicolon is on
    while tempLex and tempLex.token() != "Newline":
        tempLex = tempLex.previous()

    if tempLex:
        tempLex = tempLex.previous()

    while tempLex and tempLex.token() != "Newline":
        if ((tempLex.token() == "Keyword") and (tempLex.text() in keywords)):
            return True

        tempLex = tempLex.previous()


    return False

def findClose(lexeme):
    parenthesis = 0
    nextLex = lexeme
    while nextLex and not (parenthesis == 0 and nextLex.text() == ')'):
        nextLex = nextLex.next(ignore_comments=True, ignore_whitespace=True)

        if nextLex and nextLex.text() and nextLex.text() == '(':
            parenthesis += 1

        if nextLex and nextLex.text() and nextLex.text() == ')':
            parenthesis -= 1

    return nextLex
