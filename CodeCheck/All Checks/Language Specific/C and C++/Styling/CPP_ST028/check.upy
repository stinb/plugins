# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 12-10-2020

import re

def id():
    return 'CPP_ST028'

def name():
    return "All Checks/Language Specific/C and C++/Styling/" +  'Data type naming conventions'


def tags(id):
    return {
        'CPP_ST028': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return 'Distinct conventions should be established for data types (e.g., begin each typedef or struct definition with t_, except for structs used to approximate namespaces).'

def detailed_description():
    return """\
<p>Distinct conventions should be established for data types (e.g., begin each 
typedef or struct definition with t_, except for structs used to approximate 
namespaces).
</p>

<p>To establish a convention particular to your project or file, use the 
options below.
</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def define_options(check):
    check.option().text('Data type prefix', 'Data type prefix', 't_')

def check(check, file):

	data_type_name_convention = check.option().lookup('Data type prefix')

	# find every typedef and struct in the file
	for data_ref in file.filerefs('define', 'typedef, struct', True):	
		data_name = data_ref.ent().simplename()
		data_type = data_ref.ent().kindname()

		prefix_found = re.search(f"^{data_type_name_convention}", data_name)

		if not prefix_found:
			check.violation(data_ref.ent(), file, data_ref.line(), data_ref.column(), "Violation: Naming convention prefix '%1' not used in %2 '%3'", data_type_name_convention, data_type, data_name)
