# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-21-2020

def ids():
    return ('CPP_ST031')

def name(id):
    return {
        'CPP_ST031': '''All Checks/Language Specific/C and C++/Styling/\
Separate lines should be used for each member declaration'''
    }[id]


def tags(id):
    return {
        'CPP_ST031': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def detailed_description():
    return '''\
<p>Separating member declarations onto their own lines can improve the
readability of the code.
</p>'''

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    member_decs = file.filerefs('define', 'c member object', True)
    member_dict = {}
    lexer = None

    for mem in member_decs:
        name = mem.ent().name()
        line = mem.line()

        # check if line number is already in dict, flag the mem if so
        if line in member_dict.values():
            matching_mem = get_key(line, member_dict)

            violation = check.violation(mem.ent(), file, mem.line(), mem.column(), "Violation: '%1' member declaration on same line as '%2' member declaration", name, matching_mem)
            if not lexer:
                lexer = file.lexer()
            lexeme = lexer.lexeme(mem.line(), mem.column())
            comma = lexeme
            prevLex = lexeme
            indent = ''
            while prevLex and prevLex.token() != 'Newline':
                prevLex = prevLex.previous()

            if prevLex:
                prevLex = prevLex.next()
                if prevLex.token() == 'Whitespace':
                    indent = prevLex.text()


            if lexeme.previous(ignore_whitespace=True, ignore_comments=True).text() == ',':
                comma = lexeme.previous(ignore_whitespace=True, ignore_comments=True)
            elif lexeme.previous().token() == 'Whitespace':
                comma = lexeme.previous()

            if comma != None and lexeme.ent():
                violation.add_fixit_hint(comma.line_begin(), comma.column_begin(), lexeme.line_begin(), lexeme.column_begin() + len(lexeme.text()), f';\n{indent}{lexeme.ent().type()} {lexeme.text()}')

        # otherwise, add to member_dict
        else:
            member_dict[name] = line


# function to return key for any value
def get_key(val, mem_dict):
    for key, value in mem_dict.items():
        if val == value:
            return key

    return "key doesn't exist"
