# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 1-12-2020

import re

def id():
    return 'CPP_ST015'

def name():
    return "All Checks/Language Specific/C and C++/Styling/" +  'Incrementing and decrementing control variables in loops'


def tags(id):
    return {
        'CPP_ST015': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return """\
Incrementing and decrementing of "do" or "while" loop control variables 
should be at the top or bottom of the loop. Incrementing and decrementing of a 
"for" loop should occur in the declaration"""

def detailed_description():
    return """\
<p>Incrementing and decrementing of "do" or "while" loop control variables 
should be at the top or bottom of the loop. Incrementing and decrementing of a 
"for" loop should occur in the declaration; additional increments/decrements 
inside a "for" loop should be avoided.
</p>
<p><b>Developer's Note:</b></p>
<p>In the case of a "do" or "while" loop, this CodeCheck will look
for increments/decrements in the first three lines or the last two lines of 
the loop in order to sufficiently cover 'top' and 'bottom'. Nested loops
may lead to false positives."""

def test_entity(file):
    return file.kind().check('code file')

def define_options(check):
	return

def test_language(language):
    return language == 'C++'

def check(check, file):
	if file and file.lexer():
		lexer = file.lexer()
	else:
		return
		
	lexeme = lexer.first()

	while lexeme:

		# handle "while" and "do" loops
		if lexeme.text() == "while" or lexeme.text() == "do":
			# record line that loop begins on
			loop_line_begin = lexeme.line_begin()

			# initialize parsing lexemes, find end of the loop
			temp_lex = lexeme
			parse_lex = lexeme

			while temp_lex and temp_lex.text() != "}":
				temp_lex = temp_lex.next(ignore_whitespace=True, ignore_comments=True)
			
			loop_line_end = temp_lex.line_begin()

			# go through loop one more time comparing the inc/dec lines to the begin/end lines
			while parse_lex and parse_lex.text() != "{":
				parse_lex = parse_lex.next(ignore_whitespace=True, ignore_comments=True)

			while parse_lex and parse_lex.text() != "}":
				if parse_lex.token() == "Operator" and (parse_lex.text() == "++" or parse_lex.text() == "--"):
					if (parse_lex.line_begin() != loop_line_begin and
					(parse_lex.line_begin() != loop_line_begin + 1) and
					(parse_lex.line_begin() != loop_line_begin + 2) and
					(parse_lex.line_begin() != loop_line_end) and
					(parse_lex.line_begin() != loop_line_end - 1)):
						check.violation(file, file, parse_lex.line_begin(), parse_lex.column_begin(), "incrementing of 'do' or 'while' loop should occur at the top or bottom of the loop")

				parse_lex = parse_lex.next(ignore_whitespace=True, ignore_comments=True)


		# handle "for" loops
		elif lexeme.text() == "for":
			# ignore increments/decrements in the expression field, go to opening bracket
			temp_lex = lexeme

			while temp_lex and temp_lex.text() != "{":
				temp_lex = temp_lex.next(ignore_whitespace=True, ignore_comments=True)

			# continue until closing bracket is found, looking for inc/dec indicators
			while temp_lex and temp_lex.text() != "}":
				if temp_lex.token() == "Operator" and (temp_lex.text() == "++" or temp_lex.text() == "--"):
					check.violation(file, file, temp_lex.line_begin(), temp_lex.column_begin(), "incrementing and decrementing of 'for' loop should occur in the declaration only")

				temp_lex = temp_lex.next(ignore_whitespace=True, ignore_comments=True)


		lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

