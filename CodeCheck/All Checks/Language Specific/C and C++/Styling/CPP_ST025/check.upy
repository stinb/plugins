# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-20-2020

def id():
    return 'CPP_ST025'

def name():
    return """\
All Checks/Language Specific/C and C++/Styling/Each area of declarations shall \
have at least one blank line before and after it"""


def tags(id):
    return {
        'CPP_ST025': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return """\
Each area of declarations (defines, header files, global/local declarations, etc.) shall have at least one blank line before and after it."""

def detailed_description():
    return """\
Blank lines between declarations increase the readability of the code."""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    if file and file.lexer():
        lexer = file.lexer()
    else:
        return
    lexeme = lexer.first()

    # get all macros in the file
    macro_list = file.filerefs('define', 'c macro', True)

    # get all objects defined in the file
    obj_list = file.filerefs('define', 'c object', True)

    # get all included header files
    header_list = file.filerefs('include', 'c header file', True)

    for macro in macro_list:
        # place lexeme at the macro, then search the previous and following lines
        lexeme = lexer.lexeme(macro.line(), macro.column())
        if lexeme:
            templex = lexeme

            prev_blank_found_mac = check_prev_line(templex)
            next_blank_found_mac = check_next_line(templex)

            if prev_blank_found_mac == False:
                violation = check.violation(macro.ent(), file, macro.line(), macro.column(), "Declaration of macro '%1' does not have a blank line preceding it", macro.ent())
                prevLex = lexeme
                while prevLex and prevLex.token() != 'Newline':
                    prevLex = prevLex.previous()
                violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), prevLex.line_begin(), prevLex.column_begin(), '\n')

            if next_blank_found_mac == False:
                violation = check.violation(macro.ent(), file, macro.line(), macro.column(), "Declaration of macro '%1' does not have a blank line following it", macro.ent())
                nextLex = lexeme
                while nextLex and nextLex.token() != 'Newline':
                    nextLex = nextLex.next()
                violation.add_fixit_hint(nextLex.line_begin(), nextLex.column_begin(), nextLex.line_begin(), nextLex.column_begin(), '\n')

    for obj in obj_list:
        # place lexeme at the object, then search the previous and following lines
        lexeme = lexer.lexeme(obj.line(), obj.column())
        if lexeme:
            templex = lexeme

            prev_blank_found_obj = check_prev_line(templex)
            next_blank_found_obj = check_next_line(templex)

            if prev_blank_found_obj == False:
                violation = check.violation(obj.ent(), file, obj.line(), obj.column(), "Declaration of object '%1' does not have a blank line preceding it", obj.ent())
                prevLex = lexeme
                while prevLex and prevLex.token() != 'Newline':
                    prevLex = prevLex.previous()
                violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), prevLex.line_begin(), prevLex.column_begin(), '\n')

            if next_blank_found_obj == False:
                violation = check.violation(obj.ent(), file, obj.line(), obj.column(), "Declaration of object '%1' does not have a blank line following it", obj.ent())
                nextLex = lexeme
                while nextLex and nextLex.token() != 'Newline':
                    nextLex = nextLex.next()
                violation.add_fixit_hint(nextLex.line_begin(), nextLex.column_begin(), nextLex.line_begin(), nextLex.column_begin(), '\n')

    for header in header_list:
        # place lexeme at the header, then search the previous and following lines
        lexeme = lexer.lexeme(header.line(), header.column())
        if lexeme:
            templex = lexeme
            
            prev_blank_found_header = check_prev_line(templex)
            next_blank_found_header = check_next_line(templex)

            if prev_blank_found_header == False:
                violation = check.violation(header.ent(), file, header.line(), header.column(), "#include of header file '%1' does not have a blank line preceding it", header.ent())
                prevLex = lexeme
                while prevLex and prevLex.token() != 'Newline':
                    prevLex = prevLex.previous()
                violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), prevLex.line_begin(), prevLex.column_begin(), '\n')

            if next_blank_found_header == False:
                violation = check.violation(header.ent(), file, header.line(), header.column(), "#include of header file '%1' does not have a blank line following it", header.ent())
                nextLex = lexeme
                while nextLex and nextLex.token() != 'Newline':
                    nextLex = nextLex.next()
                violation.add_fixit_hint(nextLex.line_begin(), nextLex.column_begin(), nextLex.line_begin(), nextLex.column_begin(), '\n')
    


def check_prev_line(lexeme):
    ref_group = False
    blank = True

    if lexeme and lexeme.ent():
        # record the kind, whether macro, object or header
        lex_kind = lexeme.ent().kindname()

        # walk back to start of current line
        while lexeme and lexeme.previous() and (lexeme.token() != "Newline"):
            lexeme = lexeme.previous()

        # step back to last lexeme of previous line
        if lexeme.previous():
            lexeme = lexeme.previous()

        # walk back to start of previous line, mark if found anything other than whitespace or another entity of the same kind
        while lexeme and lexeme.previous() and (lexeme.token() != "Newline"):
            if lexeme.token() != "Whitespace":
                blank = False
            # check if this current lexeme is the same kind as the original
            if lexeme.ent() and (lexeme.ent().kindname() == lex_kind):
                ref_group = True
            lexeme = lexeme.previous()

    return blank or ref_group


def check_next_line(lexeme):
    ref_group = False
    blank = True

    if lexeme and lexeme.ent():
        # record the kind, whether macro, object or header
        lex_kind = lexeme.ent().kindname()

        # walk forward to start of next line
        while lexeme and lexeme.next() and (lexeme.token() != "Newline"):
            lexeme = lexeme.next()

        # step onto the next line
        if lexeme.next():
            lexeme = lexeme.next()

        # walk forward through next line, mark if found anything other than whitespace or another entity of the same kind
        while lexeme and lexeme.next() and (lexeme.token() != "Newline"):
            if lexeme.token() != "Whitespace":
                blank = False
            # check if this current lexeme is the same kind as the original
            if lexeme.ent() and (lexeme.ent().kindname() == lex_kind):
                ref_group = True
            lexeme = lexeme.next()

    return blank or ref_group
