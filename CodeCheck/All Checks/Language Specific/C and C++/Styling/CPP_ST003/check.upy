# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-12-2020

import re

# The ID for the check
def id():
    return 'CPP_ST003'

# The short name of the check
def name():
    return """\
All Checks/Language Specific/C and C++/Styling/Placement of braces for functions shall adhere to one of the following formats \
and shall be consistent"""


def tags(id):
    return {
        'CPP_ST003': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

# The short description of the check
def description():
    return """\
Placement of beginning and ending braces for functions shall adhere to one of
the following formats and shall be consistent within a module."""

# The long description of the check
def detailed_description():
    return """\
<p><b>Developer's Notes</b></p>
<p>This check first looks at the first function in the module to see if it
follows one of the standards. Then it looks at the rest of the functions of
the module to see if they follow the same format the pattern that the first
function used. If the first function doesn't follow the standard and all the
other functions do, then a violation will be thrown for not following the
standard on the first function. The rest of the functions will also throw
violations because they weren't consistent with the first function even if
they follow the standard.</p>
<p>Placement of beginning and ending braces for functions shall adhere to one
of the following formats and shall be consistent within a module.</p>
<pre><code language="C++">function declaration () {
  function code;
} /*end of function_name*/

  function declaration ()
  {
    function code;
  } /* end of function_name*/

  function declaration ()
    {
    function code;
    } /* end of function_name */</code></pre>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')

# Options for the check
def define_options(check):
   return

def test_language(language):
    return language == 'C++'

def check(check, file):
    if file and file.lexer():
        lexer = file.lexer(True, 8, True, True)
    else:
        return

    firstFunc = True
    pattern = []
    pattern1 = {}
    indent = ''

    func_refs = file.filerefs('Define', 'C Function ~unknown ~unresolved')
    if not func_refs:
        return

    for func in func_refs:
        ok = True
        alsoOk = True
        okAlso = True
        okClose = True
        newPattern = []
        newPattern1 = {}
        begin, end = getFunctionDefnLines(func.ent())
        funcLexemes = lexer.lexemes(begin, end)

        # Look for first curly brace in the function
        for lexeme in funcLexemes:
            if lexeme.text() == '{':
                prev = lexeme.previous()
                previous = lexeme.previous(ignore_whitespace=True, ignore_comments=True)

                # Record the pattern
                if firstFunc:
                    if prev.token() == 'Whitespace':
                        pattern.append(prev.text())
                        pattern1['Whitespace'] = prev.text()
                        prev = prev.previous()

                    if prev.token() == 'Newline':
                        pattern.append(prev.text())
                        pattern1['Newline'] = prev.text()
                    else:
                        pattern = ['noNewline']
                        pattern1['Newline'] = ''


                    # Find corresponding curly brace and check if it adheres to standard
                    close = findClose(lexeme)
                    if close:
                        if close.previous().token() == 'Whitespace':
                            pattern1['close'] = close.previous().text()
                        else:
                            pattern1['close'] = ''
                        if pattern[0] == 'noNewline':
                            indent = ''
                            prevLex = lexeme
                            while prevLex and prevLex.token() != 'Newline':
                                prevLex = prevLex.previous()
                            if prevLex:
                                prevLex = prevLex.next()
                            if prevLex and prevLex.token() == 'Whitespace':
                                indent = prevLex.text()
                            if close.column_begin() != 0 and not (close.previous().token() == 'Whitespace' and len(close.previous().text()) == len(indent)) and close.previous().token() != 'Newline':
                                alsoOk = False
                        elif close.column_begin() != lexeme.column_begin():
                            okAlso = False
                    firstFunc = False



                else:
                    okClose = True
                    # Record the newPattern
                    if prev.token() == 'Whitespace':
                        newPattern.append(prev.text())
                        prev = prev.previous()

                    if prev.token() == 'Newline':
                        newPattern.append(prev.text())
                    else:
                        newPattern = ['noNewline']

                    # Find corresponding curly brace and check if it adheres to standard
                    close = findClose(lexeme)
                    if close:
                        if pattern[0] == 'noNewline':
                            indent = ''
                            prevLex = lexeme
                            while prevLex and prevLex.token() != 'Newline':
                                prevLex = prevLex.previous()
                            if prevLex:
                                prevLex = prevLex.next()
                            if prevLex and prevLex.token() == 'Whitespace':
                                indent = prevLex.text()
                            if close.column_begin() != 0 and not (close.previous().token() == 'Whitespace' and len(close.previous().text()) == len(indent)) and close.previous().token() != 'Newline':
                                okClose = False

                        elif close.previous().token() == 'Whitespace':
                            if len(close.previous().text()) != len(pattern1['close']):
                                okClose = False

                        """if newPattern[0] == 'noNewline':
                            indent = 0
                            prevLex = lexeme
                            while prevLex and prevLex.token() != 'Newline':
                                prevLex = prevLex.previous()
                            if prevLex:
                                prevLex = prevLex.next()
                            if prevLex.token() == 'Whitespace':
                                indent = len(prevLex.text())
                            if close.column_begin() != 0 and not (close.previous().token() == 'Whitespace' and len(close.previous().text()) == indent):
                                alsoOk = False
                        elif close.column_begin() != lexeme.column_begin():
                            okAlso = False
                        """

                    # Check if curly brace pattern is consistent
                    if len(newPattern) != len(pattern):
                        ok = False
                    else:
                        for i in range(len(newPattern)):
                            if newPattern[i] != pattern[i]:
                                ok = False
                                break

                # Throw violation if a standard was violated
                prevLex = lexeme.previous(ignore_comments=True, ignore_whitespace=True)
                prevLex = prevLex.next()
                nextLex = lexeme.previous()
                if not ok:
                    violation = check.violation(func.ent(), file, lexeme.line_begin(), lexeme.column_begin(), 'The opening curly brace is not consistently placed within the module')
                    if pattern[0] == 'noNewline':
                        violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), nextLex.line_end(), nextLex.column_end() + 1, ' ')
                    else:
                        patternString = ''
                        for string in reversed(pattern):
                            patternString += string

                        if prevLex.column_begin() == lexeme.column_begin():
                            violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), prevLex.line_begin(), prevLex.column_begin(), patternString)
                        else:
                            violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), nextLex.line_end(), nextLex.column_end() + 1, patternString)

                if not okClose:
                    violation = check.violation(func.ent(), file, close.line_begin(), close.column_begin(), 'The closing curly brace is not consistently placed within the module')
                    prevLex = close.previous()
                    violation.add_fixit_hint(prevLex.line_begin(), prevLex.column_begin(), prevLex.line_begin(), prevLex.column_begin() + len(prevLex.text()), pattern1['close'] + indent)

                if close and prevLex and close.previous(ignore_comments=True, ignore_whitespace=True) and prevLex.next():
                    prevLex = close.previous(ignore_comments=True, ignore_whitespace=True)
                    prevLex = prevLex.next()

                if close:
                    nextLex = close.previous()
                if not alsoOk:
                    violation = check.violation(func.ent(), file, close.line_begin(), close.column_begin(), 'The closing curly brace does not adhere to standard')
                    violation.add_fixit_hint(nextLex.line_begin(), nextLex.column_begin(), nextLex.line_end(), nextLex.column_end() + 1, '')
                if not okAlso:
                    if lexeme.previous().token() != 'Whitespace':
                        text = ''
                    else:
                        text = lexeme.previous().text()
                    violation = check.violation(func.ent(), file, close.line_begin(), close.column_begin(), 'The closing curly brace does not adhere to standard')
                    if nextLex.token() == 'Newline':
                        violation.add_fixit_hint(nextLex.line_end(), nextLex.column_end() + 1, nextLex.line_end(), nextLex.column_end() + 1, text)
                    else:
                        violation.add_fixit_hint(nextLex.line_begin(), nextLex.column_begin(), nextLex.line_end(), nextLex.column_end() + 1, text)
                break



# Obtains function begin and end lines
def getFunctionDefnLines(func):
    begin_ref = func.ref("definein")
    end_ref = func.ref("end")
    if not begin_ref or not end_ref:
        return None
    return (begin_ref.line(), end_ref.line())

# Finds the corresponding closing curly brace when given an opening curly brace
def findClose(lexeme):
    count = 0
    nextLex = lexeme.next(ignore_whitespace=True, ignore_comments=True)
    if not nextLex:
        return
    while nextLex.text() != '}':
        if nextLex.text() == '{':
            count += 1
        nextLex = nextLex.next(ignore_whitespace=True, ignore_comments=True)
        if not nextLex:
            return

        while nextLex.text() == '}':
            if count > 0:
                count -= 1
                nextLex = nextLex.next(ignore_whitespace=True, ignore_comments=True)
                if not nextLex:
                    return
            else:
                break

    return nextLex
