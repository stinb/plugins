# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 12-9-2020

def id():
    return ('CPP_ST012')

def name(id):
    return {
		'CPP_ST012': "All Checks/Language Specific/C and C++/Styling/" +  'Names that differ in case only or that look similar should not be used.'
	}[id]

def tags(id):
    return {
        'CPP_ST012': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return 'Names that differ in case only (e.g., length and Length) or that look similar (e.g., crt1 and crtl) should not be used.'

def detailed_description():
    return  """\
<p><b>Rationale:</b></p>
<p>Names that are too similar can lead to confusion, both for the programmer
and for anyone trying to read their code.<p>
<p><b>Developer's Note:</b></p>
<p>This CodeCheck currently will only flag names that differ in case only, as
similar looking names are too broad to capture.
</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
	# pull references to all unique entities in the file
	refs = file.filerefs('define, declare', 'macro, parameter, object, function ~lambda ~unknown ~unresolved', True)

	# create empty dictionary to store the names and id of every unique func and object as a key/value pair
	ent_dict = {}

	for ref in refs:
		# append the lowercased name and the unique id of the entity to the dictionary
		name = ref.ent().name().lower()
		uniqueid = ref.ent().id()

		# ignore unnamed objects
		if name == "[unnamed]":
			continue
		elif name == "...":
			continue
		else:
			# check if name already exists in the dictionary and if the uniqueid is the same
			if uniqueid not in ent_dict.keys() and name in ent_dict.values():
				# flag violation
				check.violation(ref.ent(), file, ref.line(), ref.column(), "Multiple uses of name '%1' that differ only in case", ref.ent())

			if uniqueid not in ent_dict.keys():
				# otherwise add the name and uniqueid to the dictionary
				ent_dict[uniqueid] = name
