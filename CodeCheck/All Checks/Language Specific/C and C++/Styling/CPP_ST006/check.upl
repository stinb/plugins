# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 9-23-2020

use base ("Understand::Codecheck");
use strict;

use constant ERR1 => 'Violation: maximum columns (%1) exceeded';
use constant OPT1 => 'Maximum Columns';

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "CPP_ST006";}

sub name{
  return "All Checks\\Language Specific\\C and C++\\Styling\\" .  'No line of code should extend beyond column 80';
}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Styling',
  );
}

sub description {
  return "No line of code should extend beyond column 80 (unless this limit is unreasonable).";
}

sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
Keeping lines of code within a certain number of columns helps to maintain or improve the readability of the code.<br><br>
Instances where this guideline may not improve readability,
and therefore lend this guideline not reasonable to follow,
include (but are not limited to) the following:<br>
- A complete expression that terminates shortly
after 80 characters<br>
- Complex algorithms that are more easily interpreted as
complete, in-line expressions<br>
- Code that is auto-generated by a tool (although, if
possible, auto-generation should be customized to meet
standards)<br><br>
For this reason, the user may input their preferred maximum column limit below.
<br>
</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

# create an integer option to change maximum column limit
sub define_options{
 my $check = shift;
 $check->option->integer("columnLimit", OPT1, 80);
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("C File ~unknown ~unresolved");

  # grab lexemes from the file
  my $lexer = $file->lexer;
  return unless $lexer;
  my $lexeme = $lexer->first;

  my $maxColumns = $check->option->lookup("columnLimit");
   
  while ($lexeme){

    #Yield to GUI interupts
    $check->yield();
    return if $check->is_abort();

    if ($lexeme->inactive){
      # ignore inactive lexemes
    }

    elsif($lexeme->column_end() > $maxColumns) {
      # exceeds 80 columns, report violation
      $check->violation(0,$file,$lexeme->line_begin,$lexeme->column_end,ERR1, $maxColumns);

      # proceed to next line in the file
      while($lexeme->token() ne "Newline") {
        $lexeme = $lexeme->next();
      }
    }

    $lexeme = $lexeme->next();
  }
}
