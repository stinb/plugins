# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 05-18-2021

import re

ERR1 = "Violation: Naming convention prefix '%1' not used in %2 '%3'"
ERR2 = """\
Violation: Naming convention 'All capitals with underscores' not used
in %1 '%2'"""

def id():
    return 'CPP_ST029'

def name():
    return "All Checks/Language Specific/C and C++/Styling/" +  'Immutable data naming conventions'


def tags(id):
    return {
        'CPP_ST029': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>Distinct conventions should be established for immutable data (constants,
enumerations) (e.g., all capitals with underscores, except for leading d_ for
class constants).</p>

<p>To establish a convention particular to your project or file, use the 
options below.
</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def define_options(check):
    check.option().text('prefix', 'Immutable data prefix', 'i_')
    check.option().checkbox('upperCase', 'All capitals with underscores, except for leading d_ for class constants (checking this option disables the prefix option above)', False)

def check(check, file):

    if check.option().lookup('upperCase'):
        # find every typedef and struct in the file
        for data_ref in file.filerefs('define', 'enum, object', True):	
            if re.search(r'object', data_ref.ent().kindname().lower()):
                if not re.search(r'const', str(data_ref.ent().type())):
                    continue
            data_name = data_ref.ent().simplename()
            data_type = data_ref.ent().kindname()

            ok = re.match(f'[A-Z]+(_[A-Z])*', data_name)

            if not ok:
                check.violation(data_ref.ent(), file, data_ref.line(), data_ref.column(), ERR2, data_type, data_name)


    else:
        name_convention = check.option().lookup('prefix')

        # find every typedef and struct in the file
        for data_ref in file.filerefs('define', 'enum, object', True):	
            if re.search(r'object', data_ref.ent().kindname().lower()):
                if not re.search(r'const', str(data_ref.ent().type())):
                    continue
            data_name = data_ref.ent().simplename()
            data_type = data_ref.ent().kindname()

            prefix_found = re.search(f"^{name_convention}", data_name)

            if not prefix_found:
                check.violation(data_ref.ent(), file, data_ref.line(), data_ref.column(), ERR1, name_convention, data_type, data_name)
