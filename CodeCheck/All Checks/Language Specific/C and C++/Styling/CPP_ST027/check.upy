# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-2-2020

import re

def id():
    return 'CPP_ST027'

def name():
    return "All Checks/Language Specific/C and C++/Styling/" +  'Naming conventions for class data members vs. member function internal data'


def tags(id):
    return {
        'CPP_ST027': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return 'Distinct conventions should be established for class data members vs. member function internal data (e.g., begin each class data member with d_).'

def detailed_description():
    return """\
<p>Distinct conventions should be established for class data members vs. member
function internal data (e.g., begin each class data member with d_).
</p>

<p>To establish conventions particular to your project or file, use the options below.
</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def define_options(check):
    check.option().text('Data member prefix', 'Data member prefix', 'd_')
    check.option().text('Member function prefix', 'Member function prefix', 'm_')

def check(check, file):

	data_mem_convention = check.option().lookup('Data member prefix')
	mem_func_convention = check.option().lookup('Member function prefix')

	# find every data member in the file
	for data_mem in file.filerefs('Define', 'Member Object', True):	
		data_mem_name = data_mem.ent().simplename()

		prefix_found = re.search(f"^{data_mem_convention}", data_mem_name)

		if not prefix_found:
			check.violation(data_mem.ent(), file, data_mem.line(), data_mem.column(), "Violation: Naming convention prefix '%1' not used in data member '%2'", data_mem_convention, data_mem.ent())


	# find every member function in the file
	for mem_func in file.filerefs('Declare', 'Member Function', True):
		if mem_func.ent().parent():
			class_name = mem_func.ent().parent().simplename()
			destruct = "~" + class_name
			mem_func_name = mem_func.ent().simplename()

			# skip constructors and destructors
			if mem_func_name == class_name or mem_func_name == destruct:
				pass
			# skip operator overloads
			elif mem_func_name == "operator=":
				pass
			else:
				prefix_found = re.search(f"^{mem_func_convention}", mem_func_name)

				if not prefix_found:
					check.violation(mem_func.ent(), file, mem_func.line(), mem_func.column(), "Violation: Naming convention prefix '%1' not used in member function '%2'", mem_func_convention, mem_func.ent())
