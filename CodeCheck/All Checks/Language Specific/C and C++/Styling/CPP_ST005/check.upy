# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-9-2020

def id():
    return 'CPP_ST005'

def name():
    return "All Checks/Language Specific/C and C++/Styling/" +  'Enum lists should not contain a trailing comma'


def tags(id):
    return {
        'CPP_ST005': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return 'Enumerator lists should not contain a trailing comma.'

def detailed_description():
    return """\
<p>Although the syntax is supported by ANSI C, it is not supported by the
current ANSI C++ standard so this syntax should not be used.</p>
<p><b>Examples</b></p>
<pre><code language="C++">/* bad example */
enum
{
   a,
   b,
   c=0,
};
/* good example */
enum
{
   d,
   e,
   f=0
};</code></pre>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):

    if file and file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        if lexeme.token() == "Keyword" and lexeme.text() == "enum":
            tempLex = lexeme
            # move forward to find end of enum list
            while tempLex.text() != "}" and tempLex.next().text() != ";":
                tempLex = tempLex.next()

            # check behind tempLex to see if a comma is trailing the last item in the enum list
            tempLex = tempLex.previous(ignore_whitespace=True, ignore_comments=True)
            if tempLex.token() == "Operator" and tempLex.text() == ",":
                violation = check.violation(file, file, tempLex.line_begin(), tempLex.column_begin(), 'Enum list contains a trailing comma')
                violation.add_fixit_hint(tempLex.line_begin(), tempLex.column_begin(), tempLex.line_begin(), tempLex.column_begin() + len(tempLex.text()), '')




        lexeme = lexeme.next(ignore_whitespace=True)
