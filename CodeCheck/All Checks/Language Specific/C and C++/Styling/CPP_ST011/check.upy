# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-3-2020

def id():
    return 'CPP_ST011'

def name():
    return "All Checks/Language Specific/C and C++/Styling/" +  'Inline functions should be used instead of macros'


def tags(id):
    return {
        'CPP_ST011': [
            'Language: C',
            'Language: C++',
            'Styling',
        ],

    }.get(id)

def description():
    return 'Inline functions should be used instead of macros.'

def detailed_description():
    return  """\
<p><b>Rationale</b></p>
<p>Macro functionals are simply text that is expanded before the compiler
processes the source code. These are more dangerous to use than inline
functions because their use resembles that of real functions but they have
different semantics. They are also slightly less optimal.</p>
<p>The inline keyword is used to tell the compiler that the function can be
placed inline without the need for a call-stack to be set up. This specifier
is typically preferred over macro functionals because inlines do not involve
textual substitution or the creation of a new function.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
	macro_refs = file.filerefs('Define', 'Macro Functional', True)

	for ref in macro_refs:
		check.violation(ref.ent(), file, ref.line(), ref.column(), "Macro function '%1' should be an inline function", ref.ent())
