# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12-17-2024

import re
import Modules

ERR1 = 'Captured pointer %1 is the same as the signaling pointer'

def id():
    return 'CPP_P061'

def name():
    return """\
All Checks/Language Specific/C and C++/Pointers/Shared pointer capture"""


def tags(id):
    return {
        'CPP_P061': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>Do not capture a shared pointer with Qt signals. Capturing a shared pointer
is similar to a reference cycle, resulting in a shared pointer that will not be
destructed.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    if not re.search(r'connect', file.contents().lower()):
        return
    refs = file.filerefs('Call', 'Function')
    for ref in refs:
        if ref.ent().longname() != 'QObject::connect':
            continue
        if not file.lexer():
            return
        lexer = file.lexer()
        lexeme = lexer.lexeme(ref.line(), ref.column())
        if lexeme and lexeme.text().lower() == 'connect':
            lexeme = lexeme.next(True, True)
            # Go to closing parenthesis
            if lexeme and lexeme.text() == '(':
                close = Modules.findClose(lexeme)
                if close:
                    commas = 0
                    ent = None
                    # Count each comma and check the 1st and 4th parameters
                    while lexeme and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.column_begin()):
                        if lexeme.text() == ',':
                            commas += 1
                        elif commas == 0 and lexeme.ent() and lexeme.ent().freetext("UnderlyingType") and not ent and re.search(r'shared_ptr|sharedpointer', lexeme.ent().freetext("UnderlyingType").lower()):
                            ent = lexeme.ent().longname()
                        elif commas == 3 and lexeme.text() == '[':
                            close = Modules.findClose(lexeme)
                            while lexeme and close and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.column_begin()):
                                if lexeme.ent() and ent == lexeme.ent().longname():
                                    check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR1, ent)
                                lexeme = lexeme.next(True, True)
                            break

                        lexeme = lexeme.next(True, True)
