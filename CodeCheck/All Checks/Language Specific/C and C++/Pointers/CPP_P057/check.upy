# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 07-06-2021

import re

ERR1 = 'Local dynamic memory allocation did not use auto_ptr'

def id():
    return 'CPP_P057'

def name():
    return """\
All Checks/Language Specific/C and C++/Pointers/A pointer to dynamic \
memory that is declared and allocated locally should be declared as an auto_ptr. \
"""


def tags(id):
    return {
        'CPP_P057': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],

    }.get(id)

def detailed_description():
    return """\
<p><b>A pointer to dynamic memory that is declared and allocated
locally to a function or method should be declared as an
auto_ptr. An auto_ptr</b> and the dynamic memory associated
with it will be deleted when it goes out of scope, unlike a simple
pointer which will go out of scope and cause a memory leak.
This is important when exceptions could be thrown between the
allocation and the deallocation of the memory, causing the
flow to jump out from the current function. A simple pointer
will just go out of scope and cause a memory leak, whereas an
<b>auto_ptr</b> will delete the dynamic memory when it goes out of
scope. The use of <b>auto_ptr</b> does add processing overhead and
should be considered during C++ development.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    refs = file.filerefs('Define', 'Local Object')
    
    for ref in refs:
        # Skip if auto_ptr was used
        if re.search(r'auto_ptr', ref.ent().type()):
            continue
        # Check if memory was dynamically allocated
        if re.search(r'\*', ref.ent().type()):
            result = re.sub(r'\s\*', '', str(ref.ent().type()))
            if re.search(r'\[|\]|\*', result):
                result = re.sub(r'\[', '[', result)
                result = re.sub(r'\]', ']', result)
                result = re.sub(r'\*', '*', result)

            if re.search(r'new ' + re.escape(result), str(ref.ent().value())):
                check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
