ERR1 = 'Address of this object is assigned to another object that may persist after this object has ceased to exist.'


# The ID for the check
def ids():
    return ('M7-5-2', 'MISRA08_7-5-2', 'CPP_P024', 'MISRA04_17.6', 'MISRA12_18.6', 'MISRA23_18.6')


# The short name of the check
def name(id):
    return {
        'M7-5-2': 'Published Standards/AUTOSAR/The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist.',
        'MISRA08_7-5-2': 'Published Standards/MISRA-C++ 2008/7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist.',
        'CPP_P024': 'All Checks/Language Specific/C and C++/Pointers/The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist.',
        'MISRA04_17.6': 'Published Standards/MISRA-C 2004/17.6 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist.',
        'MISRA12_18.6': 'Published Standards/MISRA C 2012/18.6 The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist',
        'MISRA23_18.6': 'Published Standards/MISRA C 2023/18.6 The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist',
    }[id]


def tags(id):
    return {
        'MISRA08_7-5-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Pointers',
        ],
        'MISRA12_18.6': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Pointers',
        ],
        'MISRA04_17.6': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: required',
            'Pointers',
        ],
        'M7-5-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Non-automated',
            'Pointers',
        ],
        'CPP_P024': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],
        'MISRA23_18.6': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Pointers',
        ],
    }.get(id)

# The long description of the check


def detailed_description(id):
    return {
        'M7-5-2': '''
<p>
Do not store the address of an automatic object in a pointer that still remains after the object.
</p>

<p><b>Rationale</b></p>

<p>
If the address of an automatic object is assigned to another automatic object of larger scope, or to a static object, or returned from a function, then the object containing the address may exist beyond the time when the original object ceases to exist (and its address becomes invalid).
</p>

<p>
Note that throwing a pointer to an object with automatic storage is also a violation of this rule.
</p>

<p><b>Example</b></p>

<pre><code language="C++">void foobar ( void )
{
    int8_t * p1;
    {
        int8_t local_auto;
        p1 = &local_auto; // Non-compliant
    }
}
</code></pre>
''',

        'MISRA08_7-5-2': '''
<p>
Do not store the address of an automatic object in a pointer that still remains after the object.
</p>

<p><b>Rationale</b></p>

<p>
If the address of an automatic object is assigned to another automatic object of larger scope, or to a static object, or returned from a function, then the object containing the address may exist beyond the time when the original object ceases to exist (and its address becomes invalid).
</p>

<p>
Note that throwing a pointer to an object with automatic storage is also a violation of this rule.
</p>

<p><b>Example</b></p>

<pre><code language="C++">void foobar ( void )
{
    int8_t * p1;
    {
        int8_t local_auto;
        p1 = &local_auto; // Non-compliant
    }
}
</code></pre>
''',

        'CPP_P024': '''
<p>
Do not store the address of an automatic object in a pointer that still remains after the object.
</p>

<p><b>Rationale</b></p>

<p>
If the address of an automatic object is assigned to another automatic object of larger scope, or to a static object, or returned from a function, then the object containing the address may exist beyond the time when the original object ceases to exist (and its address becomes invalid).
</p>

<p>
Note that throwing a pointer to an object with automatic storage is also a violation of this rule.
</p>

<p><b>Example</b></p>

<pre><code language="C++">void foobar ( void )
{
    int8_t * p1;
    {
        int8_t local_auto;
        p1 = &local_auto; // Non-compliant
    }
}
</code></pre>
''',

        'MISRA04_17.6': '''
<p>
Do not store the address of an automatic object in a pointer that still remains after the object.
</p>

<p><b>Rationale</b></p>

<p>
If the address of an automatic object is assigned to another automatic object of larger scope, or to a static object, or returned from a function then the object containing the address may exist beyond the time when the original object ceases to exist (and its address becomes invalid).
</p>

<p>
For example
</p>

<p><b>Example</b></p>

<pre><code language="C++">int8_t * foobar(void)
{
    int8_t local_auto;
    return (&local_auto);    /* not compliant */
}
</code></pre>
''',

        'MISRA12_18.6': '''
<p>
Do not store the address of an automatic object in a pointer that still remains after the object.
</p>

<p><b>Amplification</b></p>

<p>
The address of an object might be copied by means of:
</p>

<p>
• Assignment;
</p>

<p>
• Memory move or copying functions.
</p>

<p><b>Rationale</b></p>

<p>
The address of an object becomes indeterminate when the lifetime of that object expires. Any use of an indeterminate address results in undefined behaviour.
</p>

<p><b>Example</b></p>

<pre><code language="C++">int8_t *func ( void )
{
  int8_t local_auto;
  return &local_auto;    /* Non-compliant - &local_ auto is indeterminate
                          *                 when func returns            */
}
</code></pre>

<p>
In the following example, the function <code>g</code> stores a copy of its pointer parameter <code>p</code>. If <code>p</code> always points to an object with static storage duration then the code is compliant with this rule. However, in the example given, <code>p</code> does point to an object with automatic storage duration. In such a case, copying the parameter <code>p</code> is non-compliant.
</p>

<pre><code language="C++">uint16_t *sp;
void g ( uint16_t *p )
{
  sp = p;                /* Non-compliant - address of f's parameter u
                          * copied to static sp                          */
}
void f ( uint16_t u )
{
  g ( &u );
}
void h ( void )
{
  static uint16_t *q;
  uint16_t x = 0u;
  q = &x;                /* Non-compliant - &x stored in object with
                          * greater lifetime                             */
}
</code></pre>
''',
        'MISRA23_18.6': '''
<p><b>Amplification</b></p>

<p>
The address of an object might be copied by means of:
</p>

<p>
• Assignment;
</p>

<p>
• Memory move or copying functions.
</p>

<p><b>Rationale</b></p>

<p>
The address of an object becomes indeterminate when the lifetime of that object expires. Any use of an indeterminate address results in undefined behaviour.
</p>

<p><b>Example</b></p>

<pre><code language="C++">int8_t *func ( void )
{
  int8_t local_auto;
  return &local_auto;    /* Non-compliant - &local_ auto is indeterminate
                          *                 when func returns            */
}
</code></pre>

<p>
In the following example, the function <code>g</code> stores a copy of its pointer parameter <code>p</code>. If <code>p</code> always points to an object with static storage duration then the code is compliant with this rule. However, in the example given, <code>p</code> does point to an object with automatic storage duration. In such a case, copying the parameter <code>p</code> is non-compliant.
</p>

<pre><code language="C++">uint16_t *sp;
void g ( uint16_t *p )
{
  sp = p;                /* Non-compliant - address of f's parameter u
                          * copied to static sp                          */
}
void f ( uint16_t u )
{
  g ( &u );
}
void h ( void )
{
  static uint16_t *q;
  uint16_t x = 0u;
  q = &x;                /* Non-compliant - &x stored in object with
                          * greater lifetime                             */
}
</code></pre>
''',
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def same_position_ref(ref0, ref1):
    return ref0.line() == ref1.line() and ref0.column() == ref1.column()


def check(check, file):
    def check_violation(_ref):
        check.violation(_ref.scope(), _ref.file(),
                        _ref.line(), _ref.column(), ERR1)

    # Using references, check if a static/global is directly assigned
    for assign_ref in file.filerefs("Assign Ptr", "Local Object, Parameter"):
        # If a static/global is assigned
        if assign_ref.scope():
            if assign_ref.scope().kind().check("Static") or assign_ref.scope().kind().check("Global"):
                # If the static/global is assigned an address
                for addr_use_ref in assign_ref.ent().refs("Addr Useby"):
                    if same_position_ref(assign_ref, addr_use_ref):
                        check_violation(addr_use_ref)
                        break

    # Using references, check if a static/global is indirectly assigned via a parameter
    for assign_ref_1 in file.filerefs("Assign Ptr", "Local Object, Parameter"):
        # Skip pointers
        if "*" in assign_ref_1.ent().type():
            continue
        # If a parameter is assigned
        if assign_ref_1.scope() and assign_ref_1.scope().kind().check("Parameter"):
            param_ent = assign_ref_1.scope()
            # If a static/global is assigned by this parameter
            for assign_ref_2 in param_ent.refs("Assignby Ptr"):
                if assign_ref_2.ent():
                    if assign_ref_2.ent().kind().check("Static") or assign_ref_2.ent().kind().check("Global"):
                        check_violation(assign_ref_2)
                        break

    # Using lexemes and references, find the more complex cases
    lexer = file.lexer(True, 8, False, False)
    if lexer:
        for func_ref in file.filerefs("Define", "Function"):
            func_ent = func_ref.ent()

            for return_ref in func_ent.refs("Addr Use Return", "Local Object"):
                check_violation(return_ref)

            scopes = {}
            lex = lexer.lexeme(func_ref.line(), func_ref.column())

            while lex and lex.text() != "{":
                lex = lex.next(ignore_whitespace=True, ignore_comments=True)

            scope_num = 1

            if lex:
                lex = lex.next(ignore_whitespace=True, ignore_comments=True)

            while lex and scope_num:
                ref = lex.ref() if lex.ref() else None
                ent_type = lex.ent().type() if lex.ent() else None

                if lex.text() == "{" and lex.token() == "Punctuation":
                    scope_num += 1
                elif lex.text() == "}" and lex.token() == "Punctuation":
                    scope_num -= 1
                elif ref and ref.kind().check("Definein"):
                    if scope_num in scopes:
                        scopes[scope_num].append(ref.scope().name())
                    else:
                        scopes[scope_num] = [ref.scope().name()]

                    for assign_ref in ref.scope().refs("Assignby Ptr"):
                        skip = False

                        for deref_ref in assign_ref.scope().refs("Deref Callby"):
                            if (deref_ref.line() == assign_ref.line()) and (deref_ref.column() == assign_ref.column()):
                                skip = True
                                break

                        rlex = lexer.lexeme(
                            assign_ref.line(), assign_ref.column())

                        if skip or not ((ent_type and "*" in ent_type) or (rlex and rlex.previous().text() == "&")):
                            continue

                        assign_parent = assign_ref.ent().parent()
                        assignby_parent = assign_ref.scope().parent()

                        if assign_parent and assignby_parent and (assign_parent.id() == assignby_parent.id()):
                            assign_scope = 0
                            assignby_scope = 0

                            for _item, _scope in scopes.items():
                                if assign_ref.ent().name() in _scope:
                                    assign_scope = _item
                                elif assign_ref.scope().name() in _scope:
                                    assignby_scope = _item

                            if assign_scope and assignby_scope and assign_scope != assignby_scope:
                                check_violation(assign_ref)

                lex = lex.next(ignore_whitespace=True, ignore_comments=True)
