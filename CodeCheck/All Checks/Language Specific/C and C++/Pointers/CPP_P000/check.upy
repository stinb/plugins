# This script is designed to run with Understand - CodeCheck


import re


ERR1 = 'The declaration contains more than two levels of pointer indirection'


tooMuchIndirection = r'\*{3}|\*{2}\[\]|\*(const|volatile) \*(const|volatile)'


def ids():
    return ('MISRA04_17.5', 'MISRA08_5-0-19', 'A5-0-3', 'CPP_P000', 'MISRA23_11.3.2')


def name(id):
    return {
        'MISRA04_17.5': '''Published Standards/MISRA-C 2004/\
17.5 No more than 2 levels of pointer indirection''',
        'MISRA08_5-0-19': '''Published Standards/MISRA-C++ 2008/\
5-0-19 No more than 2 levels of pointer indirection''',
        'A5-0-3': '''Published Standards/AUTOSAR/\
No more than 2 levels of pointer indirection''',
        'CPP_P000': '''All Checks/Language Specific/C and C++/Pointers/\
No more than 2 levels of pointer indirection''',
        'MISRA23_11.3.2': '''Published Standards/MISRA C++ 2023/\
11.3.2 The declaration of an object should contain no more than two levels of pointer indirection''',
    }[id]





def tags(id):
    return {
        'MISRA08_5-0-19': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Pointers',
        ],
        'MISRA04_17.5': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Advisory',
            'Pointers',
        ],
        'A5-0-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Pointers',
        ],
        'CPP_P000': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],
        'MISRA23_11.3.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Pointers',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'MISRA04_17.5': '''\
<p>
The declaration of objects should contain no more than 2 levels of pointer
indirection.
</p>

<p>
Use of more than 2 levels of indirection can seriously impair the ability to
understand the behaviour of the code, and should therefore be avoided.
</p>

<pre><code language="C++">typedef int8_t * INTPTR;

struct s {
   int8_t *   s1;                               /* compliant     */
   int8_t **  s2;                               /* compliant     */
   int8_t *** s3;                               /* not compliant */
};

struct s *   ps1;                               /* compliant     */
struct s **  ps2;                               /* compliant     */
struct s *** ps3;                               /* not compliant */

int8_t **  (  *pfunc1)();                       /* compliant     */
int8_t **  ( **pfunc2)();                       /* compliant     */
int8_t **  (***pfunc3)();                       /* not compliant */
int8_t *** ( **pfunc4)();                       /* not compliant */

void function( int8_t *   par1,
               int8_t **  par2,
               int8_t *** par3,                 /* not compliant */
               INTPTR *   par4,
               INTPTR *   const * const par5,   /* not compliant */
               int8_t *   par6[],
               int8_t **  par7[])               /* not compliant */
{
   int8_t *   ptr1;
   int8_t **  ptr2;
   int8_t *** ptr3;                             /* not compliant */
   INTPTR *   ptr4;
   INTPTR *   const * const ptr5;               /* not compliant */
   int8_t *   ptr6[10];
   int8_t **  ptr7[10];
}
</code></pre>

<p>Explanation of types:</p>

<ul>

<li>
<i>par1</i> and <i>ptr1</i> are of type pointer to <i>int8_t</i>.
</li>

<li>
<i>par2</i> and <i>ptr2</i> are of type pointer to pointer to <i>int8_t</i>.
</li>

<li>
<i>par3</i> and <i>ptr3</i> are of type pointer to a pointer to a pointer to
<i>int8_t</i>. This is three levels and is not compliant.
</li>

<li>
<i>par4</i> and <i>ptr4</i> are expanded to a type of pointer to a pointer to
<i>int8_t</i>.
</li>

<li>
<i>par5</i> and <i>ptr5</i> are expanded to a type of const pointer to a const
pointer to a pointer to <i>int8_t</i>. This is three levels and is not
compliant.
</li>

<li>
<i>par6</i> is of type pointer to pointer to <i>int8_t</i> because arrays are
converted to a pointer to the initial element of the array.
</li>

<li>
<i>ptr6</i> is of type pointer to array of <i>int8_t</i>.
</li>

<li>
<i>par7</i> is of type pointer to pointer to pointer to <i>int8_t</i> because
arrays are converted to a pointer to the initial element of the array. This is
three levels and is not compliant.
</li>

<li>
<i>ptr7</i> is of type array of pointer to pointer to <i>int8_t</i>. This is
compliant.
</li>

</ul>
''',
        'MISRA08_5-0-19': '''\
<p>
The declaration of objects should contain no more than 2 levels of pointer
indirection.
</p>

<p><b>Rationale</b></p>

<p>
Use of more than two levels of indirection can seriously impair the ability to
understand the behaviour of the code, and therefore should be avoided.
</p>

<pre><code language="C++">typedef int8_t * INTPTR;

struct s {
   int8_t *   s1;           // Compliant
   int8_t **  s2;           // Compliant
   int8_t *** s3;           // Non-compliant
};

struct s *   ps1;           // Compliant
struct s **  ps2;           // Compliant
struct s *** ps3;           // Non-compliant

int8_t **  (  *pfunc1)();   // Compliant
int8_t **  ( **pfunc2)();   // Compliant
int8_t **  (***pfunc3)();   // Non-compliant
int8_t *** ( **pfunc4)();   // Non-compliant

void function( int8_t *   par1,                 // Compliant
               int8_t **  par2,                 // Compliant
               int8_t *** par3,                 // Non-compliant
               INTPTR *   par4,                 // Compliant
               INTPTR *   const * const par5,   // Non-compliant
               int8_t *   par6[],               // Compliant
               int8_t **  par7[])               // Non-compliant
{
   int8_t *   ptr1;                             // Compliant
   int8_t **  ptr2;                             // Compliant
   int8_t *** ptr3;                             // Non-compliant
   INTPTR *   ptr4;                             // Compliant
   INTPTR *   const * const ptr5;               // Non-compliant
   int8_t *   ptr6[ 10 ];                       // Compliant
   int8_t **  ptr7[ 10 ];                       // Compliant
}
</code></pre>

<p><b>Explanation of types</b></p>

<ul>

<li>
<code>par1</code> and <code>ptr1</code> are of type pointer to
<code>int8_t</code>.
</li>

<li>
<code>par2</code> and <code>ptr2</code> are of type pointer to pointer to
<code>int8_t</code>.
</li>

<li>
<code>par3</code> and <code>ptr3</code> are of type pointer to a pointer to a
pointer to <code>int8_t</code>. This is three levels and is non-compliant.
</li>

<li>
<code>par4</code> and <code>ptr4</code> are expanded to a type of pointer to a
pointer to <code>int8_t</code>.
</li>

<li>
<code>par5</code> and <code>ptr5</code> are expanded to a type of const pointer
to a const pointer to a pointer to <code>int8_t</code>. This is three levels and
is non-compliant.
</li>

<li>
<code>par6</code> is of type pointer to pointer to <code>int8_t</code> because
arrays are converted to a pointer to the initial element of the array.
</li>

<li>
<code>ptr6</code> is of type pointer to array of <code>int8_t</code>.
</li>

<li>
<code>par7</code> is of type pointer to pointer to pointer to
<code>int8_t</code> because arrays are converted to a pointer to the initial
element of the array. This is three levels and is non-compliant.
</li>

<li>
<code>ptr7</code> is of type array of pointer to pointer to <code>int8_t</code>.
This is compliant.
</li>

</ul>
''',
        'A5-0-3': '''\
<p>
The declaration of objects shall contain no more than two levels of pointer
indirection.
</p>

<p><b>Rationale</b></p>

<p>
Use of more than two levels of indirection can seriously impair the ability to
understand the behavior of the code, and therefore should be avoided.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;cstdint&gt;
using IntPtr = std::int8_t *;
struct S
{
    std::int8_t* s1;   // Compliant
    std::int8_t** s2;  // Compliant
    std::int8_t*** s3; // Non-compliant
};
S* ps1;   // Compliant
S** ps2;  // Compliant
S*** ps3; // Non-compliant

std::int8_t** (*pfunc1)();   // Compliant
std::int8_t** (**pfunc2)();  // Compliant
std::int8_t** (***pfunc3)(); // Non-compliant
std::int8_t*** (**pfunc4)(); // Non-compliant

void Fn(std::int8_t* par1,         // Compliant
        std::int8_t** par2,        // Compliant
        std::int8_t*** par3,       // Non-compliant
        IntPtr* par4,              // Compliant
        IntPtr* const* const par5, // Non-compliant
        std::int8_t* par6[],       // Compliant
        std::int8_t** par7[])      // Non-compliant
{
    std::int8_t* ptr1;                   // Compliant
    std::int8_t** ptr2;                  // Compliant
    std::int8_t*** ptr3;                 // Non-compliant
    IntPtr* ptr4;                        // Compliant
    IntPtr* const* const ptr5 = nullptr; // Non-compliant
    std::int8_t* ptr6[10];               // Compliant
    std::int8_t** ptr7[10];              // Compliant
}
// Explanation of types
// 1) par1 and ptr1 are of type pointer to std::int8_t.
// 2) par2 and ptr2 are of type pointer to pointer to std::int8_t.
// 3) par3 and ptr3 are of type pointer to a pointer to a pointer
// to std::int8_t.
// This is three levels and is non-compliant.
// 4) par4 and ptr4 are expanded to a type of pointer to a pointer to
// std::int8_t.
// 5) par5 and ptr5 are expanded to a type of const pointer to a const
// pointer
// to a pointer to std::int8_t. This is three levels and is non-compliant.
// 6) par6 is of type pointer to pointer to std::int8_t because arrays
// are converted
// to a pointer to the initial element of the array.
// 7) ptr6 is of type pointer to array of std::int8_t.
// 8) par7 is of type pointer to pointer to pointer to
// std::int8_t because arrays are
// converted to a pointer to the initial element of the array. This is
// three
// levels and is non-compliant.
// 9) ptr7 is of type array of pointer to pointer to std::int8_t. This
// is compliant.
</code></pre>

<p><b>See also</b></p>

<p>
• MISRA C++ 2008 [7]: 5-0-19 The declaration of objects shall contain no more
than two levels of pointer indirection.
</p>
''',
        'CPP_P000': '''
<p>
The declaration of objects shall contain no more than two levels of pointer
indirection.
</p>

<p><b>Rationale</b></p>

<p>
Use of more than two levels of indirection can seriously impair the ability to
understand the behavior of the code, and therefore should be avoided.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;cstdint&gt;
using IntPtr = std::int8_t *;
struct S
{
    std::int8_t* s1;   // Compliant
    std::int8_t** s2;  // Compliant
    std::int8_t*** s3; // Non-compliant
};
S* ps1;   // Compliant
S** ps2;  // Compliant
S*** ps3; // Non-compliant

std::int8_t** (*pfunc1)();   // Compliant
std::int8_t** (**pfunc2)();  // Compliant
std::int8_t** (***pfunc3)(); // Non-compliant
std::int8_t*** (**pfunc4)(); // Non-compliant

void Fn(std::int8_t* par1,         // Compliant
        std::int8_t** par2,        // Compliant
        std::int8_t*** par3,       // Non-compliant
        IntPtr* par4,              // Compliant
        IntPtr* const* const par5, // Non-compliant
        std::int8_t* par6[],       // Compliant
        std::int8_t** par7[])      // Non-compliant
{
    std::int8_t* ptr1;                   // Compliant
    std::int8_t** ptr2;                  // Compliant
    std::int8_t*** ptr3;                 // Non-compliant
    IntPtr* ptr4;                        // Compliant
    IntPtr* const* const ptr5 = nullptr; // Non-compliant
    std::int8_t* ptr6[10];               // Compliant
    std::int8_t** ptr7[10];              // Compliant
}
// Explanation of types
// 1) par1 and ptr1 are of type pointer to std::int8_t.
// 2) par2 and ptr2 are of type pointer to pointer to std::int8_t.
// 3) par3 and ptr3 are of type pointer to a pointer to a pointer
// to std::int8_t.
// This is three levels and is non-compliant.
// 4) par4 and ptr4 are expanded to a type of pointer to a pointer to
// std::int8_t.
// 5) par5 and ptr5 are expanded to a type of const pointer to a const
// pointer
// to a pointer to std::int8_t. This is three levels and is non-compliant.
// 6) par6 is of type pointer to pointer to std::int8_t because arrays
// are converted
// to a pointer to the initial element of the array.
// 7) ptr6 is of type pointer to array of std::int8_t.
// 8) par7 is of type pointer to pointer to pointer to
// std::int8_t because arrays are
// converted to a pointer to the initial element of the array. This is
// three
// levels and is non-compliant.
// 9) ptr7 is of type array of pointer to pointer to std::int8_t. This
// is compliant.
</code></pre>

<p><b>See also</b></p>

<p>
• MISRA C++ 2008 [7]: 5-0-19 The declaration of objects shall contain no more
than two levels of pointer indirection.
</p>
''',
        'MISRA23_11.3.2': '''\
<p><b>Amplification</b></p>
<p>
Any typedef-name appearing in a declaration is treated as if it were replaced by the type that it denotes.
</p>
<p>
Note: the pointer decay that occurs when declaring a function parameter of array type introduces a
level of pointer indirection.
</p>

<p><b>Rationale</b></p>

<p>
Use of more than two levels of indirection can seriously impair the ability to
understand the behaviour of the code, and therefore should be avoided.
</p>

<p><b>Example</b></p>

<pre><code language="C++">typedef int8_t * INTPTR;
using INTPTR2 = int8_t *;

struct s {
   int8_t *   s1;           // Compliant
   int8_t **  s2;           // Compliant
   int8_t *** s3;           // Non-compliant
};

struct s *   ps1;           // Compliant
struct s **  ps2;           // Compliant
struct s *** ps3;           // Non-compliant

int8_t **  (  *pfunc1)();   // Compliant
int8_t **  ( **pfunc2)();   // Compliant
int8_t **  (***pfunc3)();   // Non-compliant
int8_t *** ( **pfunc4)();   // Non-compliant

void function( int8_t *   par1,                 // Compliant
               int8_t **  par2,                 // Compliant
               int8_t *** par3,                 // Non-compliant
               INTPTR *   par4,                 // Compliant
               INTPTR *   const * const par5,   // Non-compliant
               int8_t *   par6[],               // Compliant
               int8_t **  par7[],               // Non-compliant
               int8_t ** &par8) // Compliant
{
   int8_t *   ptr1;                             // Compliant
   int8_t **  ptr2;                             // Compliant
   int8_t *** ptr3;                             // Non-compliant
   INTPTR *   ptr4;                             // Compliant
   INTPTR *   const * const ptr5;               // Non-compliant
   int8_t *   ptr6[ 10 ];                       // Compliant
   int8_t **  ptr7[ 10 ];                       // Compliant
}
</code></pre>

<p><b>Explanation of types</b></p>

<ul>

<li>
<code>par1</code> and <code>ptr1</code> are of type pointer to
<code>int8_t</code>.
</li>

<li>
<code>par2</code> and <code>ptr2</code> are of type pointer to pointer to
<code>int8_t</code>.
</li>

<li>
<code>par3</code> and <code>ptr3</code> are of type pointer to a pointer to a
pointer to <code>int8_t</code>. This is three levels and is non-compliant.
</li>

<li>
<code>par4</code> and <code>ptr4</code> are expanded to a type of pointer to a
pointer to <code>int8_t</code>.
</li>

<li>
<code>par5</code> and <code>ptr5</code> are expanded to a type of const pointer
to a const pointer to a pointer to <code>int8_t</code>. This is three levels and
is non-compliant.
</li>

<li>
<code>par6</code> is of type pointer to pointer to <code>int8_t</code> because
arrays are converted to a pointer to the initial element of the array.
</li>

<li>
<code>ptr6</code> is of type pointer to array of <code>int8_t</code>.
</li>

<li>
<code>par7</code> is of type pointer to pointer to pointer to
<code>int8_t</code> because arrays are converted to a pointer to the initial
element of the array. This is three levels and is non-compliant.
</li>

<li>
<code>ptr7</code> is of type array of pointer to pointer to <code>int8_t</code>.
This is compliant.
</li>

<li>
<code>par8</code> is of type reference to pointer to pointer to <code>int8_t</code>.
This is compliant.
</li>

</ul>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Define', 'Object, Parameter'):
        ent = ref.ent()
        if ent.type() and re.search(tooMuchIndirection, str(ent.type())):
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
