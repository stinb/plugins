# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 7-29-2020

import re
from Modules import findClose

ERR1 = 'Function %1 is not ended with a comment'

def id():
    return 'CPP_CM001'

def name():
    return """\
All Checks/Language Specific/C and C++/Comments/Each function shall end with a \
comment"""



def tags(id):
    return {
        'CPP_CM001': [
            'Language: C',
            'Language: C++',
            'Comments',
        ],

    }.get(id)

def detailed_description():
    return """\
            <p><b>Rationale</b></p>
<p>Each function shall be ended with a comment or remark. This helps to identify
functions that are longer than a screen/page in length.</p>
<pre><code language="C++">int addNums (int a, int b) {
   int result;
   result = a + b; 
   return result;
} 
/* Comment identifying the end of the addNums function, will not flag a violation */


/* There is no comment identifying the end of subNums, so it will be flag a violation */
int subNums (int a, int b) {
   int result;
   result = a - b; 
   return result;
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):

    # pull functions being defined in file
    functionsDefined = file.filerefs( 'Define ~Inactive', 'C Function ~Unresolved', True )
    if not functionsDefined:
        return

    if file.lexer():
        lexer = file.lexer()
    else:
        return

    # step through all functions one at a time
    for func in functionsDefined:
        # find post function comments
        lexeme = lexer.lexeme(func.line(), func.column())
        while lexeme and lexeme.text() != '{':
            lexeme = lexeme.next()

        if not lexeme:
            continue

        comment = None
        close = findClose(lexeme)
        if close and close.next(ignore_whitespace=True):
            comment = close.next(ignore_whitespace=True)

        if not comment or comment is None:
            check.violation(func.ent(), file, func.line(), func.column(), ERR1, func.ent().name())
        elif not (comment.token() == 'Comment' and (comment.line_begin() - close.line_begin()) < 2):
            check.violation(func.ent(), file, func.line(), func.column(), ERR1, func.ent().name())

