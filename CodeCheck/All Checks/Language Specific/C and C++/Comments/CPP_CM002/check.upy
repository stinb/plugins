# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-19-2020

import re

def id():
    return 'CPP_CM002'

def name():
    return """\
All Checks/Language Specific/C and C++/Comments/Timing delays shall be preceded by comments explaining the delay"""


def tags(id):
    return {
        'CPP_CM002': [
            'Language: C',
            'Language: C++',
            'Comments',
        ],

    }.get(id)

def description():
    return """\
Timing delays in functions shall be preceded by comments that provide a brief explanation of the delay."""

def detailed_description():
    return """\
<p><b>Developer's Notes</b></p> <p>This check looks for timing delays by finding any usage of
the following unistd.h library functions:</p>
<ul><li>clock()</li>
<li>pause()</li>
<li>sleep()</li>
<li>usleep()</li>
<li>nanosleep()</li>
<li>delay()</li></ul>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexer = None

    # list of delay functions in c/c++
    delay_func_list = ["clock", "pause", "sleep", "usleep", "nanosleep", "delay"]

    # find every class declaration in the file
    for func in file.filerefs('Call', 'Unresolved Function'):

        if func.ent().name() not in delay_func_list:
            continue

        if not lexer:
            if file.lexer():
                lexer = file.lexer()
            else:
                return

        lexeme = lexer.lexeme(func.line(), func.column())
        while lexeme and not re.search(r';|{|}', lexeme.text()) and lexeme.token() != 'Comment':
            lexeme = lexeme.previous(ignore_whitespace=True)

        if not lexeme or lexeme.token() != 'Comment':
            check.violation(func.ent(), file, func.line(), func.column(), "Violation: use of a timing delay found in function '%2' needs explanatory comment", func.ent())
