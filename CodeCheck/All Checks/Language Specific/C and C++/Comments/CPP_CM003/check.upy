# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-30-2020

import re

def id():
    return 'CPP_CM003'

def name():
    return "All Checks/Language Specific/C and C++/Comments/" +  'Class headers shall include a short description for every member function declaration and a comment for every data member declared'


def tags(id):
    return {
        'CPP_CM003': [
            'Language: C',
            'Language: C++',
            'Comments',
        ],

    }.get(id)

def description():
    return 'Class headers shall include a short description for every member function declaration and a comment for every data member declared.'

def detailed_description():
    return """\
<p><b>Developer's Note:</b></p> 

<p>For the purposes of this CodeCheck, only comments that are 
directly above or inline with the declaration will be recognized as belonging 
to that piece of code. This means it will not associate the comment with the 
code if there is a blank line between.
</p>"""

def test_entity(file):
    return file.kind().check('header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # find all member function declarations in the file
    for mem_func in file.filerefs("declare", "member function"):
        if mem_func.ent().parent() and mem_func.ent().parent().name():
            construct = mem_func.ent().parent().name()
            destruct = "~" + construct

            if check_for_comment(mem_func, file) == True:
                pass
            elif mem_func.ent().name() == "operator=":
                pass
            elif mem_func.ent().name() == construct:
                pass
            elif mem_func.ent().name() == destruct:
                pass
            else:
                check.violation(mem_func.ent(), file, mem_func.line(), mem_func.column(), "Declaration of member function '%1' does not include a short description", mem_func.ent().name())


    # find all data member declarations in the file
    for data_mem in file.filerefs("define", "member object"):
        if check_for_comment(data_mem, file) == True:
            pass
        else:
            check.violation(data_mem.ent(), file, data_mem.line(), data_mem.column(), "Declaration of data member '%1' does not include a comment", data_mem.ent())

    

def check_for_comment(ref, file):
    valid = False

    lexer = file.lexer()
    lexeme = lexer.lexeme(ref.line(), ref.column())

    commentAbove = False
    commentInline = False

    temp = lexeme
    # check inline
    while temp and temp.token() != "Newline":
        if temp.token() == "Comment" and not re.search(r"UndCC_Violation", temp.text()):
            commentInline = True
        temp = temp.next()  

    temp = lexeme
    # check above
    while temp and temp.token() != "Newline":
        temp = temp.previous()
    if temp:
        temp = temp.previous()
    while temp and temp.token() != "Newline":
        if temp.token() == "Comment" and not re.search(r"UndCC_Violation", temp.text()):
            commentAbove = True
        if temp.token() != "Comment" and temp.token() != "Whitespace":
            commentAbove = False
        temp = temp.previous()

    if commentAbove == True or commentInline == True:
        valid = True

    return valid
