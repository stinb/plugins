# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-6-2020

import re

def id():
    return 'CPP_M013'

def name():
    return "All Checks/Language Specific/C and C++/Memory Allocation/" +  'Users shall provide a copy constructor, destructor and assignment operator for a class that uses dynamic memory allocation'


def tags(id):
    return {
        'CPP_M013': [
            'Language: C',
            'Language: C++',
            'Memory Allocation',
        ],

    }.get(id)

def description():
    return 'Users shall provide a copy constructor, destructor and assignment operator for a class that uses dynamic memory allocation.'

def detailed_description():
    return """\
<p>This standard exists because when memory outside of the data members is an
essential part of the object (as is always the case when you have pointers and 
dynamic memory), you must make sure that you:</p>

<p>1. Deallocate the memory allocated for the object (destructor)</p>
<p>2. Copy the object correctly including making a deep copy of the allocated 
memory (copy constructor)</p>
<p>3. Handle assignment correctly by deallocating memory of the object on the
lefthand side of the =, allocate new memory the size of the object on the
righthand side of the =, and then fill it up to look just like the object
you are copying (operator=)
</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def define_options(check):
	pass

def check(check, file):
	classes_defined = file.filerefs('Define', 'C Class', True)

	for ref in classes_defined:
		contents = ref.ent().contents()
		class_name = ref.ent().simplename()

		# initialize flags we need for parsing
		found_new = re.search(r"new ", contents)

		# if we have dynamic memory allocation in the class, check for the three methods
		if found_new:
			found_destructor = re.search(f"~{class_name}", contents)
			found_cocon = re.search(rf"{class_name}\({class_name} const&", contents)
			found_assign_op = re.search(rf"{class_name}& operator=\(", contents)

			if not found_destructor:
				check.violation(ref.ent(), file, ref.line(), ref.column(), "Violation: class destructor for '%1' not found", ref.ent())
			if not found_cocon:
				check.violation(ref.ent(), file, ref.line(), ref.column(), "Violation: copy constructor for class '%1' not found", ref.ent())
			if not found_assign_op:
				check.violation(ref.ent(), file, ref.line(), ref.column(), "Violation: assignment operator for class '%1' not found", ref.ent())
