# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 06-17-2021

import re

ERR1 = '%1 was created with the new operator without the nothrow option'

def id():
    return 'CPP_M014'

def name():
    return """\
All Checks/Language Specific/C and C++/Memory Allocation/The operator new should \
be called with the nothrow option."""


def tags(id):
    return {
        'CPP_M014': [
            'Language: C',
            'Language: C++',
            'Memory Allocation',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>The operator new should be called with the nothrow option
when expecting NULL to be returned upon error, as some
implementations of new throw an exception instead of
returning NULL.</p>
<pre><code language="C++">class foo;
foo *instance = new(nothrow) foo();
if (instance == NULL)
{
  // New returned NULL
}</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    refs = file.filerefs('Define', 'Object')
    for ref in refs:
        # Throw violation if object ref's value have the new keyword and not the nothrow keyword
        if re.search(r'new', str(ref.ent().value())) and not re.search(r'nothrow', str(ref.ent().value())):
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())
            
