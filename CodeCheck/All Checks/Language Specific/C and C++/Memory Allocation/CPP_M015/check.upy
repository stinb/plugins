# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 06-16-2021

import re

ERR1 = 'A corresponding delete[] was not provided with %1'

def id():
    return 'CPP_M015'

def name():
    return """\
All Checks/Language Specific/C and C++/Memory Allocation/When overloading the \
new[] operator, a corresponding delete[] operator should be provided."""


def tags(id):
    return {
        'CPP_M015': [
            'Language: C',
            'Language: C++',
            'Memory Allocation',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>When overloading the new[] operator, a corresponding
delete[] operator should be provided.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    refs = file.filerefs('Define', 'Class, Struct')

    for ref in refs:
        new = False
        delete = False
        vRef = None

        # Gather member functions
        oRefs = ref.ent().refs('Define', 'Member Function')
        for oRef in oRefs:
            # Check if operator new[] and save a ref to be used with the violation
            if oRef.ent().name() == 'operator new[]':
                new = True
                vRef = oRef

            # Check if operator delete[]
            elif oRef.ent().name() == 'operator delete[]':
                delete = True

        # If there is an operator new[] and not an operator delete[] then throw violation
        if new and not delete:
            check.violation(vRef.ent(), file, vRef.line(), vRef.column(), ERR1, vRef.ent().longname())
