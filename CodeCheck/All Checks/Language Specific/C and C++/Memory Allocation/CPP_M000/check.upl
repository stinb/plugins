#This script is designed to run with Understand - CodeCheck
#Robert Gempeler - 7/19/2010
# This check has been modified so that is is functionally different from its twin checks

use base ("Understand::Codecheck");
use strict;

use constant ERR1 => 'Violation: File contains invalid dynamic memory statement.';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


sub checkID { return "CPP_M000";}

sub name { return "All Checks\\Language Specific\\C and C++\\Memory Allocation\\Dynamic heap memory allocation";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Memory Allocation',
  );
}

sub description { return "Don't use dynamic heap memory allocation";}

sub detailed_description { return <<"END_DESC"
Check for calls to calloc, malloc,realloc and free, or the use of 'new' and 'delete'
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->checkbox( 'ignoreUnique', 'Ignore unique_ptr', 0 );
}


sub check {
  my $check = shift; 
  my $file = shift; 
  return unless $file->kind->check('c file'); 
  
  my @functionCallRefs = $file->filerefs("call","function",0);
  foreach my $funcCall (@functionCallRefs){
    if ($funcCall->ent->name =~ /^calloc$|^malloc$|^realloc$|^free$/){
      $check->violation($funcCall->ent(),$file,$funcCall->line(),$funcCall->column(),ERR1);
    }
  }
  
    return unless my $lexer = $file->lexer();
  
  #check if lexeme text == "continue"; report error if match is found.
  LEX : foreach my $lexeme ($lexer->lexemes()) {
    return if $check->is_abort();
    
	  if ($lexeme->text() =~ /^new$|^delete$/  && $lexeme->token() eq "Keyword"){

      # Added special case for = delete because of C++ 11
      next LEX if $lexeme->text() =~ /^delete$/ and $lexeme->prevUseful->text eq '=';

      if ( $check->option->lookup( 'ignoreUnique' ) ) {

        # Test to see if this is wrapped in a smart pointer
        my $tempLex = $lexeme;
        while ( $tempLex and !( $tempLex->text eq 'unique_ptr' or $tempLex->text eq ';' ) ) {
          $tempLex = $tempLex->prevUseful;
        }
        next LEX if $tempLex and $tempLex->text eq 'unique_ptr';

      }

		  $check->violation($lexeme->ent(),$file,$lexeme->line_begin(),$lexeme->column_begin(),ERR1);
	 }
  }
}
