# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-4-2020

import re

def ids():
    return ('CPP_M010')

# The short name of the check
def name(id):
    return {
        'CPP_M010':  "All Checks/Language Specific/C and C++/Memory Allocation/The new[] and delete[] operators shall be used for the allocation and deallocation of memory resources"
    }[id]


def tags(id):
    return {
        'CPP_M010': [
            'Language: C',
            'Language: C++',
            'Memory Allocation',
        ],

    }.get(id)

def description():
    return 'The new[] and delete[] operators shall be used for the allocation and deallocation of memory resources.'

def detailed_description():
    return """\
<p>C++ integrates the operators new and delete for allocating dynamic memory. 
However, these are not available in the C language; instead, it uses a library
solution, with the functions malloc, calloc, realloc and free, defined in the 
header &lt;cstdlib&gt; (known as &lt;stdlib.h&gt; in C). The functions are also available 
in C++ and can also be used to allocate and deallocate dynamic memory.
</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def define_options(check):
	pass

def check(check, file):
	mem_alloc_ops_c = ["malloc", "calloc", "realloc"]
	mem_dealloc_ops_c = ["free"]

	for func_called in file.filerefs('C Call', 'Function'):
		if func_called.ent().kind().longname() == "C Unresolved Function" and func_called.ent().name() in mem_alloc_ops_c:
			check.violation(func_called.ent(), file, func_called.line(), func_called.column(), "Violation: c-style memory allocation operator '%1' used", func_called.ent())

		elif func_called.ent().kind().longname() == "C Unresolved Function" and func_called.ent().name() in mem_dealloc_ops_c:
			check.violation(func_called.ent(), file, func_called.line(), func_called.column(), "Violation: c-style memory deallocation operator '%1' used", func_called.ent())
