# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2023-03-01


import re


ERR1 = 'stdlib function %1 used'

STDLIB = {'stdlib.h', 'cstdlib'}


includeCache = dict()


def ids():
    return ('MISRA04_20.10', 'MISRA08_18-0-2', 'MISRA12_21.7', 'CPP_L005', 'MISRA23_21.2.1', 'MISRA23_21.7')


def name(id):
    return {
        'MISRA04_20.10': '''Published Standards/MISRA-C 2004/\
20.10 The library functions atof, atoi and atol from library <stdlib.h>\
 shall not be used''',
        'MISRA08_18-0-2': '''Published Standards/MISRA-C++ 2008/\
18-0-2 The library functions atof, atoi and atol from library <cstdlib>\
 shall not be used''',
        'MISRA12_21.7': '''Published Standards/MISRA C 2012/\
21.7 The atof, atoi, atol and atoll functions of <stdlib.h> shall not be\
 used''',
        'CPP_L005': '''All Checks/Language Specific/C and C++/Libraries/\
Avoid atof, atoi, atol, and atoll from <cstdlib> or <stdlib.h>\
''',
        'MISRA23_21.2.1': '''Published Standards/MISRA C++ 2023/\
21.2.1 The library functions atof, atoi, atol and atoll from library <cstdlib>\
 shall not be used''',
         'MISRA23_21.7': '''Published Standards/MISRA C 2023/\
21.7 The Standard Library functions atof, atoi, atol and atoll of <stdlib.h> shall not be\
 used''',
    }[id]


def tags(id):
    return {
        'MISRA08_18-0-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Libraries',
        ],
        'MISRA12_21.7': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Libraries',
        ],
        'MISRA04_20.10': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Libraries',
        ],
        'CPP_L005': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
        'MISRA23_21.2.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Libraries',
        ],
        'MISRA23_21.7': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA04_20.10': '''\
<p>
These functions have undefined behaviour associated with them when the string
cannot be converted.
</p>
''',
        'MISRA08_18-0-2': '''\
<p><b>Rationale</b></p>

<p>
These functions have <i>undefined behaviour</i> associated with them when the
string cannot be converted.
</p>

<p><b>Example</b></p>

<pre><code language="C++">  #include &lt;cstdlib&gt;
  int32_t f ( const char_t * numstr )
  {
    return atoi ( numstr ); // Non-compliant
  }
</code></pre>
''',
        'MISRA12_21.7': '''\
<p><b>Amplification</b></p>

<p>
The identifiers <i>atof</i>, <i>atoi</i>, <i>atol</i> and, for C99 only
<i>atoll</i>, shall not be used and no macro with one of these names shall be
expanded.
</p>

<p><b>Rationale</b></p>

<p>
These functions have undefined behaviour associated with them when the string
cannot be converted.
</p>
''',
        'CPP_L005': '''\
<p><b>Amplification</b></p>

<p>
The identifiers <i>atof</i>, <i>atoi</i>, <i>atol</i> and, for C99 only
<i>atoll</i>, shall not be used and no macro with one of these names shall be
expanded.
</p>

<p><b>Rationale</b></p>

<p>
These functions have undefined behaviour associated with them when the string
cannot be converted.
</p>
''',
        'MISRA23_21.2.1': '''\
<p><b>Amplification</b></p>

<p>
These functions shall not be called or have their addresses taken, and no macro having one of these
names shall be expanded.
</p>
<p>
Note: the same functions from <stdlib.h> are also covered by this rule.
</p>

<p><b>Rationale</b></p>

<p>
These functions have undefined behaviour associated with them when the string cannot be converted.
The C++ library provides safer conversion routines â€” see [string.conversions], [charconv.from.chars]. 
</p>
<p>
Note: [charconv.from.chars] was changed from [utility.from.chars] as the result of a defect report
against the C++ Standard. 
</p>

<p><b>Example</b></p>
<pre><code language="C++">
int32_t f( const char * numstr )
{
 return atoi( numstr ); // Non-compliant
}
</code></pre>
''',
        'MISRA23_21.7': '''\
<p><b>Amplification</b></p>

<p>
The identifiers <i>atof</i>, <i>atoi</i>, <i>atol</i> and <i>atoll</i>, shall not be used and no macro with one of these names shall be
expanded.
</p>

<p><b>Rationale</b></p>

<p>
These functions have undefined behaviour associated with them when the string
cannot be converted.
</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Code File, Header File')


def define_options(check):
    atollNotAllowed = {'MISRA12_21.7', 'CPP_L005', 'MISRA23_21.2.1', 'MISRA23_21.7'}
    check.options().checkbox('atollNotAllowed', 'Violation for atoll', check.id() in atollNotAllowed)
    check.options().checkbox('oneViolation', 'Limit one violation per file', False)
    check.options().checkbox('onlyIfStdlib', 'Violations only if stdlib is included', True)


def test_language(language):
    return language == 'C++'


def stdlibIncluded(file, visited):
    # Base case: visited already before this recursion
    if file in includeCache:
        return includeCache[file]

    # Base case: visited already during this recursion
    if file in visited:
        return False
    visited.add(file)

    # Base case: match found
    if file.name() in STDLIB:
        includeCache[file] = True
        return True

    # Recurse
    for includedFile in file.ents('Include'):
        if stdlibIncluded(includedFile, visited):
            includeCache[includedFile] = True
            return True

    # Not included
    includeCache[file] = False
    return False


def check(check, file):
    fnNotAllowed = {'atof', 'atoi', 'atol'}
    if check.options().lookup('atollNotAllowed') and 'atoll' not in fnNotAllowed:
        fnNotAllowed.add('atoll')
    oneViolation = check.options().lookup('oneViolation')
    onlyIfStdlib = check.options().lookup('onlyIfStdlib')

    refsUsed = set()

    # Each reference to an unresolved function
    for fnRef in file.filerefs('', 'Unresolved Function'):
        fnEnt = fnRef.ent()

        # Skip if name is allowed
        if fnEnt.name() not in fnNotAllowed:
            continue

        # Skip if stdlib is not included
        if onlyIfStdlib and not stdlibIncluded(file, set()):
            continue

        # Skip if a violation was already made for a ref of the same ent here
        refKey = str(fnEnt.id()) + ':' + str(fnRef.line()) + ':' + str(fnRef.column())
        if refKey in refsUsed:
            continue
        refsUsed.add(refKey)

        check.violation(fnEnt, file, fnRef.line(), fnRef.column(), ERR1, fnEnt.name())
        if oneViolation:
            break
