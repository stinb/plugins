# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 8-9-22


import re


ERR1 = '%1 called'


def ids():
    return ('MISRA04_20.7', 'MISRA08_17-0-5', 'M17-0-5', 'CPP_L010')


def name(id):
    return {
        'MISRA04_20.7': '''\
Published Standards/MISRA-C 2004/\
20.7 The setjmp macro and the longjmp function shall not be used''',
        'MISRA08_17-0-5': '''\
Published Standards/MISRA-C++ 2008/\
17-0-5 The setjmp macro and the longjmp function shall not be used''',
        'M17-0-5': '''\
Published Standards/AUTOSAR/\
The setjmp macro and the longjmp function shall not be used''',
        'CPP_L010': '''\
All Checks/Language Specific/C and C++/Libraries/\
The setjmp macro and the longjmp function shall not be used''',
    }[id]





def tags(id):
    return {
        'MISRA08_17-0-5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Libraries',
        ],
        'MISRA04_20.7': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Libraries',
        ],
        'M17-0-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Libraries',
        ],
        'CPP_L010': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'MISRA04_20.7': '''\
<p><b>Rule</b></p>
<p>
The setjmp macro and the longjmp function shall not be used.
</p>

<p><b>Rationale</b></p>
<p>
<i>setjmp</i> and <i>longjmp</i> allow the normal function call mechanisms to\
 be bypassed, and shall not be used.
</p>
''',

        'MISRA08_17-0-5': '''\
<p><b>Rule</b></p>
<p>
The setjmp macro and the longjmp function shall not be used.
</p>

<p><b>Rationale</b></p>
<p>
<i>setjmp</i> and <i>longjmp</i> allow the normal function call mechanisms to\
 be bypassed, and shall not be used, since exception handling provides a better\
 defined mechanism for this.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;setjmp.h&gt;
void f2 ( );
jmp_buf buf;
void f1 ( )
{
  if ( !setjmp ( buf ) ) // Non-compliant
  {
    f2 ( );
  }
  else
  {
  }
}
void f2 ( )
{
  longjmp ( buf, 10 );   // Non-compliant
}
</code></pre>
''',

        'M17-0-5': '''\
<p><b>Rule</b></p>
<p>
The setjmp macro and the longjmp function shall not be used.
</p>

<p><b>Rationale</b></p>
<p>
<i>setjmp</i> and <i>longjmp</i> allow the normal function call mechanisms to\
 be bypassed, and shall not be used, since exception handling provides a better\
 defined mechanism for this.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;setjmp.h&gt;
void f2 ( );
jmp_buf buf;
void f1 ( )
{
  if ( !setjmp ( buf ) ) // Non-compliant
  {
    f2 ( );
  }
  else
  {
  }
}
void f2 ( )
{
  longjmp ( buf, 10 );   // Non-compliant
}
</code></pre>
''',

        'CPP_L010': '''\
<p><b>Rule</b></p>
<p>
The setjmp macro and the longjmp function shall not be used.
</p>

<p><b>Rationale</b></p>
<p>
<i>setjmp</i> and <i>longjmp</i> allow the normal function call mechanisms to\
 be bypassed, and shall not be used, since exception handling provides a better\
 defined mechanism for this.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;setjmp.h&gt;
void f2 ( );
jmp_buf buf;
void f1 ( )
{
  if ( !setjmp ( buf ) ) // Non-compliant
  {
    f2 ( );
  }
  else
  {
  }
}
void f2 ( )
{
  longjmp ( buf, 10 );   // Non-compliant
}
</code></pre>
''',
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def check(check, file):
    # Skip if the header isn't included
    header = False
    for ent in file.ents('Include', 'Header'):
        if ent.name() in {'setjmp.h', 'csetjmp'}:
            header = True
            break
    if not header:
        return

    # Find each call to one of the functions
    for ref in file.filerefs('Call', 'Function'):
        ent = ref.ent()

        if ent.name() not in {'_setjmp', 'setjmp', 'longjmp', '_longjmp'}:
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1, ent.name())
