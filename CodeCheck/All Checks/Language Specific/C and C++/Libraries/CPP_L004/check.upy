import re


ERR1 = 'Do not use the %1 function.'


def ids():
    return ('MISRA04_20.11', 'MISRA08_18-0-3', 'MISRA12_21.8', 'M18-0-3', 'CPP_L004', 'MISRA23_21.21')


def name(id):
    return {
        'MISRA04_20.11': '''\
Published Standards/MISRA-C 2004/20.11 The library functions abort, exit, \
getenv and system from library <stdlib.h> shall not be used''',
        'MISRA08_18-0-3': '''\
Published Standards/MISRA-C++ 2008/18-0-3 The library functions abort, exit, \
getenv and system from library <cstdlib> shall not be used''',
        'MISRA12_21.8': '''\
Published Standards/MISRA C 2012/21.8 The library functions abort, exit, \
getenv and system of <stdlib.h> shall not be used''',
        'M18-0-3': '''\
Published Standards/AUTOSAR/<cstdlib> Library Functions''',
        'CPP_L004': '''\
All Checks/Language Specific/C and C++/Libraries/<cstdlib> Library \
Functions''',
        'MISRA23_21.21': '''\
Published Standards/MISRA C 2023/21.21 The Standard Library function system of <stdlib.h> shall not be used''',
    }[id]





def tags(id):
    return {
        'MISRA08_18-0-3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Libraries',
        ],
        'MISRA12_21.8': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Libraries',
        ],
        'MISRA04_20.11': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Libraries',
        ],
        'M18-0-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Libraries',
        ],
        'CPP_L004': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
        'MISRA23_21.21': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'MISRA04_20.11': '''\
<p>
The library functions <i>abort</i>, <i>exit</i>, <i>getenv</i> and <i>system</i>
from library &lt;stdlib.h&gt; shall not be used
</p>

<p>
These functions will not normally be required in an embedded system, which does
not normally need to communicate with an environment. If the functions are found
necessary in an application, then it is essential to check on the
implementation-defined behaviour of the function in the environment in question.
</p>
''',
        'MISRA08_18-0-3': '''\
<p>
The library functions abort, exit, getenv and system from library
&lt;cstdlib&gt; shall not be used.
</p>

<p><b>Rationale</b></p>
<p>
The use of these functions leads to <i>implementation-defined behaviour.</i>
</p>

<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstdlib&gt;
void f ( )
{
    exit ( 0 ); // Non-compliant
}
</code></pre>
''',
        'MISRA12_21.8': '''\
<p>
The library functions <i>abort</i>, <i>exit</i>, <i>getenv</i> and <i>system</i>
of &lt;stdlib.h&gt; shall not be used
</p>

<p><b>Amplification</b></p>
<p>
The identifiers <i>abort</i>, <i>exit</i>, <i>getenv</i> and <i>system</i> shall
not be used and no macro with one of these names shall be expanded.
</p>

<p><b>Rationale</b></p>
<p>
These functions have undefined and implementation-defined behaviours associated
with them.
</p>
''',
        'M18-0-3': '''\
<p>
The library functions abort, exit, getenv and system from library
&lt;cstdlib&gt; shall not be used.
</p>

<p><b>Rationale</b></p>
<p>
The use of these functions leads to <i>implementation-defined behaviour.</i>
</p>

<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstdlib&gt;
void f ( )
{
    exit ( 0 ); // Non-compliant
}
</code></pre>
''',
        'CPP_L004': '''\
<p>
The library functions abort, exit, getenv and system from library
&lt;cstdlib&gt; shall not be used.
</p>

<p><b>Rationale</b></p>
<p>
The use of these functions leads to <i>implementation-defined behaviour.</i>
</p>

<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstdlib&gt;
void f ( )
{
    exit ( 0 ); // Non-compliant
}
</code></pre>
''',
        'MISRA23_21.21': '''\
<p><b>Amplification</b></p>
<p>The identifier system shall not be used and no macro with this name shall be expanded.</p>

<p><b>Rationale</b></p>
<p>This function has undefined and implementation-defined behaviour associated with it.</p>
<p>Errors related to the use of system are a common cause of security vulnerabilities.</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    functions = 'system' if (check.id() == 'MISRA23_21.21') else 'abort, exit, getenv, and system'
    check.options().checkbox('oneViolation', 'Limit one violation per file?', False)
    check.option().choice('functions', 'Functions to be checked', ['system', 'abort, exit, getenv, and system'], functions)


def check(check, file):
    functions = check.option().lookup('functions')
    if functions == 'system':
        func_search = r'system'
        func_names = ['system']
    else:
        func_search = r'abort|exit|getenv|system'
        func_names = ['abort', 'exit', 'getenv', 'system']

    if not re.search(func_search, file.contents()):
        return

    for ref in file.filerefs('Call', '~Virtual Function'):
        if ref.ent().longname() in func_names:
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())

            # Limit one violation per file
            if check.options().lookup('oneViolation'):
                return
