#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;

use constant ERR1 => 'Static Identifier \'%1\' reused';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


sub checkID { return "CPP_I012";}

sub name { return "All Checks\\Language Specific\\C and C++\\Identifiers\\Static name reuse";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Identifiers',
  );
}

sub description { return "(Global)Non member static identifiers should not have their identifiers reused";}

sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
Reuse of static identifier names can lead to confusion.</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 0;}

sub test_global { return 1;}


# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->checkbox( 'ignore', 'Ignore unknown and unresolved?', 0 );
}


# Actual test being performed
sub check {

  my $check = shift;
  my @fileObjs = $check->get_files;
  my @files = ();
  foreach my $f(@fileObjs) {
    push(@files, $f->longname);
  }

  my @statics = map{$_->name;}$check->db->ents("c static function ~member,c static object ~member");

  my @notStatics = $check->db->ents("c function ~static, c object ~static");
  @notStatics = $check->db->ents("c function ~static ~Unknown ~Unresolved, c object ~static ~Unknown ~Unresolved") if $check->option->lookup( 'ignore' );
  
  foreach my $ent (@notStatics){
    if(grep {$_ eq $ent->name} @statics){
      my $ref= $ent->ref("define, declare");
      $ref = $ent->ref unless $ref;
      $check->violation($ent,$ref->file,$ref->line,$ref->column,ERR1,$ent->name) if checkFile(\@files, $ref->file);
    }
  }
}

sub checkFile {
  my @files = @{$_[0]};
  my $file = $_[1];

  return 1 if index(join(',', @files), $file->longname) != -1;
  return 0;
}

