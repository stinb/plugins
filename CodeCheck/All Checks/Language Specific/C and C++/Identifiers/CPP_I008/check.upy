# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2024-11-11


import re


ERR1 = 'Non-unique internal identifier'



def ids():
    return ('MISRA12_5.9', 'MISRA23_5.9', 'CPP_I008')


def name(id):
    return {
        'MISRA12_5.9': '''Published Standards/MISRA C 2012/\
5.9 Identifiers that define objects or functions with internal linkage should be unique''',
        'MISRA23_5.9': '''Published Standards/MISRA C 2023/\
5.9 Identifiers that define objects or functions with internal linkage should be unique''',
        'CPP_I008': '''All Checks/Language Specific/C and C++/Identifiers/\
Identifiers that define objects or functions with internal linkage should be unique''',
    }[id]


def tags(id):
    return {
        'MISRA12_5.9': [
            'Identifiers',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Advisory',
        ],
        'MISRA23_5.9': [
            'Identifiers',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
        ],
        'CPP_I008': [
            'Identifiers',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    if id == 'CPP_I008':
        return '''\
<p><b>Title</b></p>
<p>Identifiers that define objects or functions with internal linkage should be
unique.</p>

<p><b>Amplification</b></p>
<p>An identifier name that defines objects or functions with internal linkage
should be unique across all name spaces and translation units. Any identifier
used in this way should not have the same name as any other identifier, even if
that other identifier denotes an object with no linkage.</p>

<p><b>Rationale</b></p>
<p>Enforcing uniqueness of identifier names in this manner helps avoid
confusion.</p>

<p><b>Exception</b></p>
<p>An <i>inline function</i> with internal linkage may be defined in more than
one translation unit provided that all such definitions are made in the same
<i>header file</i> that is included in each translation unit.</p>

<p><b>Example</b></p>
<p>In the following example, file1.c and file2.c are both part of the same
project.</p>

<pre><code language="C++">\
/* file1.c */
static int32_t count;         /* "count" has internal linkage */
static void foo ( void )      /* "foo" has internal linkage */
{
  int16_t count;              /* Non-compliant - "count" has no linkage
                               * but clashes with an identifier with
                               * internal linkage */
  int16_t index;              /* "index" has no linkage */
}

void bar1 ( void )
{
  static int16_t count;       /* Non-compliant - "count" has no linkage
                               * but clashes with an identifier with
                               * internal linkage */
  int16_t index;              /* Compliant - "index" is not unique but
                               * has no linkage */
  foo ( );
}

/* End of file1.c */\
</code></pre>

<pre><code language="C++">\
/* file2.c */

static int8_t count;          /* Non-compliant - "count" has internal
                               * linkage but clashes with other
                               * identifiers of the same name */
static void foo ( void )      /* Non-compliant - "foo" has internal
                               * linkage but clashes with a function of
                               * the same name */
{
  int32_t index;              /* Compliant - both "index" and "nbytes" */
  int16_t nbytes;             /* are not unique but have no linkage */
}

void bar2 ( void )
{
  static uint8_t nbytes;      /* Compliant - "nbytes" is not unique but
                               * has no linkage and the storage class is
                               * irrelevant */
}

/* End of file2.c */\
</code></pre>
'''
    else:
        return '''\
<p><b>Title</b></p>
<p>Identifiers that define objects or functions with internal linkage should be
unique.</p>

<p><b>Amplification</b></p>
<p>An identifier name that defines objects or functions with internal linkage
should be unique across all name spaces and translation units. Any identifier
used in this way should not have the same name as any other identifier, even if
that other identifier denotes an object with no linkage.</p>

<p><b>Rationale</b></p>
<p>Enforcing uniqueness of identifier names in this manner helps avoid
confusion.</p>

<p><b>Exception</b></p>
<p>An <i>inline function</i> with internal linkage may be defined in more than
one translation unit provided that all such definitions are made in the same
<i>header file</i> that is included in each translation unit.</p>

<p><b>Example</b></p>
<p>In the following example, file1.c and file2.c are both part of the same
project.</p>

<pre><code language="C++">\
/* file1.c */
static int32_t count;         /* "count" has internal linkage */
static void foo ( void )      /* "foo" has internal linkage */
{
  int16_t count;              /* Non-compliant - "count" has no linkage
                               * but clashes with an identifier with
                               * internal linkage */
  int16_t index;              /* "index" has no linkage */
}

void bar1 ( void )
{
  static int16_t count;       /* Non-compliant - "count" has no linkage
                               * but clashes with an identifier with
                               * internal linkage */
  int16_t index;              /* Compliant - "index" is not unique but
                               * has no linkage */
  foo ( );
}

/* End of file1.c */\
</code></pre>

<pre><code language="C++">\
/* file2.c */

static int8_t count;          /* Non-compliant - "count" has internal
                               * linkage but clashes with other
                               * identifiers of the same name */
static void foo ( void )      /* Non-compliant - "foo" has internal
                               * linkage but clashes with a function of
                               * the same name */
{
  int32_t index;              /* Compliant - both "index" and "nbytes" */
  int16_t nbytes;             /* are not unique but have no linkage */
}

void bar2 ( void )
{
  static uint8_t nbytes;      /* Compliant - "nbytes" is not unique but
                               * has no linkage and the storage class is
                               * irrelevant */
}

/* End of file2.c */\
</code></pre>

<p><b>See also</b></p>
<p>Rule 8.10</p>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    # Remember the long names of internal functions/objects
    cache = check.cache()
    if cache.is_empty():
        for ent in check.db().ents('Static Function, Static Global Object'):
            key = ent.longname()
            value = cache.value(key=key, value=0) + 1
            cache.insert(key=key, value=value)

    # Each function/object with a duplicate
    for ref in file.filerefs('Declare, Define', 'Function, Object', True):
        ent = ref.ent()
        count = cache.value(key=ent.longname(), value=0)
        if ref.ent().freetext("DefinedInMacro") or count < 2:
            continue
        check.violation(ent, file, ref.line(), ref.column(), ERR1)
