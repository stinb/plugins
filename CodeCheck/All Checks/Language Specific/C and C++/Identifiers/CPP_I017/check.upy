# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2023-09-12


import re
from Modules import findClose


ERR1 = 'Identifier "%1" possibly shadows identifier from line %2'


def ids():
    return ('MISRA04_5.2', 'MISRA08_2-10-2', 'MISRA12_5.3', 'A2-10-1', 'CPP_I017', 'MISRA23_5.3')


def name(id):
    return {
        'MISRA04_5.2': 'Published Standards/MISRA-C 2004/5.2 Shadowed Identifiers',
        'MISRA08_2-10-2': 'Published Standards/MISRA-C++ 2008/2-10-2 Shadowed Identifiers',
        'MISRA12_5.3': 'Published Standards/MISRA C 2012/5.3 Shadowed Identifiers',
        'A2-10-1': 'Published Standards/AUTOSAR/Shadowed Identifiers',
        'CPP_I017': 'All Checks/Language Specific/C and C++/Identifiers/Shadowed Identifiers',
        'MISRA23_5.3': 'Published Standards/MISRA C 2023/5.3 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope',
    }[id]


def tags(id):
    return {
        'MISRA04_5.2': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Identifiers',
        ],
        'MISRA08_2-10-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Identifiers',
        ],
        'MISRA12_5.3': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Identifiers',
        ],
        'A2-10-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Identifiers',
        ],
        'CPP_I017': [
            'Language: C',
            'Language: C++',
            'Identifiers',
        ],
        'MISRA23_5.3': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Identifiers',
        ],
    }[id]


def detailed_description(id):
  return {
      'MISRA04_5.2': '''\
<p><b>Title</b></p>
<p>Identifiers in an inner scope shall not use the same name as an identifier in
an outer scope, and therefore hide that identifier</p>

<p><b>Description</b></p>
<p>The terms outer and inner scope are defined as follows. Identifiers that have
file scope can be considered as having the outermost scope. Identifiers that
have block scope have a more inner scope. Successive, nested blocks, introduce
more inner scopes. The rule is only to disallow the case where a second inner
definition hides an outer definition. If the second definition does not hide the
first definition, then this rule is not violated.</p>
<p>Hiding identifiers with an identifier of the same name in a nested scope
leads to code that is very confusing. For example:</p>

<p><b>Example</b></p>
<pre><code language="C++">int16_t i;
{
   int16_t i;   /* This is a different variable                    */
                /* This is not compliant                           */
   i = 3;       /* It could be confusing as to which i this refers */
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>This check heavily relies on the analysis being error-free to distinguish
things like identifier namespaces, C++ namespaces, C++ lambdas, and more.
Additionally, macro expansion text should be saved with the option Project &gt;
Configure Project &gt; C++ &gt; Same macro expansion text.
</p>
''',
      'MISRA08_2-10-2': '''\
<p><b>Title</b></p>
<p>Identifiers declared in an inner scope shall not hide an identifier declared
in an outer scope</p>

<p><b>Rationale</b></p>
<p>If an identifier is declared in an inner scope and it uses the same name as
an identifier that already exists in an outer scope, then the innermost
declaration will "hide" the outer one. This may lead to developer confusion.</p>
<p>The terms outer and inner scope are defined as follows:</p>
<ul>
<li>Identifiers that have file scope can be considered as having the outermost
scope.</li>
<li>Identifiers that have block scope have a more inner scope.</li>
<li>Successive, nested blocks, introduce more inner scopes.</li>
</ul>

<p><b>Example</b></p>
<pre><code language="C++">int16_t i;
{
   int16_t i;   // This is a different variable
                // This is Non-compliant
   i = 3;       // It could be confusing as to which i this refers
}
void fn ( int16_t i )   // Non-compliant
{
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>This check heavily relies on the analysis being error-free to distinguish
things like identifier namespaces, C++ namespaces, C++ lambdas, and more.
Additionally, macro expansion text should be saved with the option Project &gt;
Configure Project &gt; C++ &gt; Same macro expansion text.
</p>
''',
      'MISRA12_5.3': '''\
<p><b>Title</b></p>
<p>An identifier declared in an inner scope shall not hide an identifier
declared in an outer scope</p>

<p><b>Amplification</b></p>
<p>An identifier declared in an inner scope shall be distinct from any
identifier declared in an outer scope.</p>
<p>The definition of distinct depends on the implementation and the version of
the C language that is being used:</p>
<ul>
<li>In C90 the <b>minimum</b> requirement is that the first 31 characters are
significant;</li>
<li>In C99 the <b>minimum</b> requirement is that the first 63 characters are
significant, with each universal character or extended source character counting
as a single character.</li>
</ul>

<p><b>Rationale</b></p>
<p>If an identifier is declared in an inner scope but is not distinct from an
identifier that already exists in an outer scope, then the inner-most
declaration will "hide" the outer one. This may lead to developer confusion.</p>
<p><i>Note</i>: An identifier declared in one name space does not hide an
identifier declared in a different name space.</p>
<p>The terms outer and inner scope are defined as follows:</p>
<ul>
<li>Identifiers that have file scope can be considered as having the outermost
scope;</li>
<li>Identifiers that have block scope have a more inner scope;</li>
<li>Successive, nested blocks, introduce more inner scopes.</li>
</ul>

<p><b>Example</b></p>
</p>

<pre><code language="C++">void fn1 ( void )
{
  int16_t i;      /* Declare an object "i" */
  {
    int16_t i;    /* Non-compliant - hides previous "i " */
    i = 3;        /* Could be confusing as to which "i" this refers */
  }
}

struct astruct
{
  int16_t m;
};

extern void g ( struct astruct *p );

int16_t xyz = 0;                   /* Declare an object "xyz" */

void fn2 ( struct astruct xyz )    /* Non-compliant - outer "xyz" is
                                    * now hidden by parameter name */
{
  g ( &xyz );
}

uint16_t speed;

void fn3 ( void )
{
  typedef float32_t speed;    /* Non-compliant - type hides object */
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 5.2, Rule 5.8</p>


<p><b>Developer's Notes</b></p>
<p>This check heavily relies on the analysis being error-free to distinguish
things like identifier namespaces, C++ namespaces, C++ lambdas, and more.
Additionally, macro expansion text should be saved with the option Project &gt;
Configure Project &gt; C++ &gt; Same macro expansion text.
</p>
''',
      'A2-10-1': '''\
<p><b>Title</b></p>
<p>An identifier declared in an inner scope shall not hide an identifier
declared in an outer scope.</p>

<p><b>Rationale</b></p>
<p>If an identifier is declared in an inner scope and it uses the same name as
an identifier that already exists in an outer scope, then the innermost
declaration will "hide" the outer one. This may lead to developer confusion. The
terms outer and inner scope are defined as follows:</p>
<ul>
<li>Identifiers that have file scope can be considered as having the outermost
scope.</li>
<li>Identifiers that have block scope have a more inner scope.</li>
<li>Successive, nested blocks, introduce more inner scopes.</li>
</ul>
<p>Note that declaring identifiers in different named namespaces, classes,
structs or enum classes will not hide other identifiers from outer scope,
because they can be accessed using fully-qualified id.</p>

<p><b>Exception</b></p>
<p>An identifier declared within a namespace using the same name as an
identifier of the containing namespace does not violate the rule.</p>
<p>An identifier declared locally inside a lambda expression and not referring
to a name of a captured variable does not violate the rule.</p>

<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-10-1.cpp 313834 2018-03-27 11:35:19Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
std::int32_t sum = 0;
namespace
{
    std::int32_t sum; // Non-compliant, hides sum in outer scope
}
class C1
{
    std::int32_t sum; // Compliant, does not hide sum in outer scope
};
namespace n1
{
    std::int32_t sum; // Compliant, does not hide sum in outer scope
    namespace n2
    {
        std::int32_t sum; // Compliant, does not hide sum in outer scope
    }
}

std::int32_t idx;
void F1(std::int32_t idx)
{
    //Non-compliant, hides idx in outer scope
}

void F2()
{
    std::int32_t max = 5;

    for (std::int32_t idx = 0; idx &lt; max;
    ++idx) // Non-compliant, hides idx in outer scope
    {
        for (std::int32_t idx = 0; idx &lt; max;
        ++idx) // Non-compliant, hides idx in outer scope
        {
        }
    }
}
void F3()
{
    std::int32_t i = 0;
    std::int32_t j = 0;
    auto lambda = [i]() {
        std::int32_t j =
        10; // Compliant - j was not captured, so it does not hide
            // j in outer scope
        return i + j;
    };
}
</code></pre>

<p><b>See also</b></p>
<ul>
<li>MISRA C++ 2008 [7]: required 2-10-2 Identifiers declared in an inner scope
shall not hide an identifier declared in an outer scope.</li>
<li>JSF December 2005 [8]: 4.15 AV Rule 135 Identifiers in an inner scope shall
not use the same name as an identifier in an outer scope, and therefore hide
that identifier.</li>
<li>HIC++ v4.0 [9]: 3.1.1 Do not hide declarations.</li>
</ul>

<p><b>Developer's Notes</b></p>
<p>This check heavily relies on the analysis being error-free to distinguish
things like identifier namespaces, C++ namespaces, C++ lambdas, and more.
Additionally, macro expansion text should be saved with the option Project &gt;
Configure Project &gt; C++ &gt; Same macro expansion text.
</p>
''',
      'CPP_I017': '''\
<p><b>Title</b></p>
<p>An identifier declared in an inner scope shall not hide an identifier
declared in an outer scope.</p>

<p><b>Rationale</b></p>
<p>If an identifier is declared in an inner scope and it uses the same name as
an identifier that already exists in an outer scope, then the innermost
declaration will "hide" the outer one. This may lead to developer confusion. The
terms outer and inner scope are defined as follows:</p>
<ul>
<li>Identifiers that have file scope can be considered as having the outermost
scope.</li>
<li>Identifiers that have block scope have a more inner scope.</li>
<li>Successive, nested blocks, introduce more inner scopes.</li>
</ul>
<p>Note that declaring identifiers in different named namespaces, classes,
structs or enum classes will not hide other identifiers from outer scope,
because they can be accessed using fully-qualified id.</p>

<p><b>Exception</b></p>
<p>An identifier declared within a namespace using the same name as an
identifier of the containing namespace does not violate the rule.</p>
<p>An identifier declared locally inside a lambda expression and not referring
to a name of a captured variable does not violate the rule.</p>

<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-10-1.cpp 313834 2018-03-27 11:35:19Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
std::int32_t sum = 0;
namespace
{
    std::int32_t sum; // Non-compliant, hides sum in outer scope
}
class C1
{
    std::int32_t sum; // Compliant, does not hide sum in outer scope
};
namespace n1
{
    std::int32_t sum; // Compliant, does not hide sum in outer scope
    namespace n2
    {
        std::int32_t sum; // Compliant, does not hide sum in outer scope
    }
}

std::int32_t idx;
void F1(std::int32_t idx)
{
    //Non-compliant, hides idx in outer scope
}

void F2()
{
    std::int32_t max = 5;

    for (std::int32_t idx = 0; idx &lt; max;
    ++idx) // Non-compliant, hides idx in outer scope
    {
        for (std::int32_t idx = 0; idx &lt; max;
        ++idx) // Non-compliant, hides idx in outer scope
        {
        }
    }
}
void F3()
{
    std::int32_t i = 0;
    std::int32_t j = 0;
    auto lambda = [i]() {
        std::int32_t j =
        10; // Compliant - j was not captured, so it does not hide
            // j in outer scope
        return i + j;
    };
}
</code></pre>

<p><b>See also</b></p>
<ul>
<li>MISRA C++ 2008 [7]: required 2-10-2 Identifiers declared in an inner scope
shall not hide an identifier declared in an outer scope.</li>
<li>JSF December 2005 [8]: 4.15 AV Rule 135 Identifiers in an inner scope shall
not use the same name as an identifier in an outer scope, and therefore hide
that identifier.</li>
<li>HIC++ v4.0 [9]: 3.1.1 Do not hide declarations.</li>
</ul>

<p><b>Developer's Notes</b></p>
<p>This check heavily relies on the analysis being error-free to distinguish
things like identifier namespaces, C++ namespaces, C++ lambdas, and more.
Additionally, macro expansion text should be saved with the option Project &gt;
Configure Project &gt; C++ &gt; Same macro expansion text.
</p>
''',
      'MISRA23_5.3': '''\
<p><b>Amplification</b></p>
<p>An identifier declared in an inner scope shall be distinct from any
identifier declared in an outer scope.</p>
<p>The definition of distinct depends on the implementation and the version of
the C language that is being used:</p>
<ul>
<li>In C90 the <b>minimum</b> requirement is that the first 31 characters are
significant;</li>
<li>In C99 the <b>minimum</b> requirement is that the first 63 characters are
significant, with each universal character or extended source character counting
as a single character.</li>
</ul>

<p><b>Rationale</b></p>
<p>If an identifier is declared in an inner scope but is not distinct from an
identifier that already exists in an outer scope, then the inner-most
declaration will "hide" the outer one. This may lead to developer confusion.</p>
<p><i>Note</i>: An identifier declared in one name space does not hide an
identifier declared in a different name space.</p>
<p>The terms outer and inner scope are defined as follows:</p>
<ul>
<li>Identifiers that have file scope can be considered as having the outermost
scope;</li>
<li>Identifiers that have block scope have a more inner scope;</li>
<li>Successive, nested blocks, introduce more inner scopes.</li>
</ul>

<p><b>Example</b></p>
</p>

<pre><code language="C++">void fn1 ( void )
{
  int16_t i;      /* Declare an object "i" */
  {
    int16_t i;    /* Non-compliant - hides previous "i " */
    i = 3;        /* Could be confusing as to which "i" this refers */
  }
}

struct astruct
{
  int16_t m;
};

extern void g ( struct astruct *p );

int16_t xyz = 0;                   /* Declare an object "xyz" */

void fn2 ( struct astruct xyz )    /* Non-compliant - outer "xyz" is
                                    * now hidden by parameter name */
{
  g ( &xyz );
}

uint16_t speed;

void fn3 ( void )
{
  typedef float32_t speed;    /* Non-compliant - type hides object */
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 5.2, Rule 5.8</p>


<p><b>Developer's Notes</b></p>
<p>This check heavily relies on the analysis being error-free to distinguish
things like identifier namespaces, C++ namespaces, C++ lambdas, and more.
Additionally, macro expansion text should be saved with the option Project &gt;
Configure Project &gt; C++ &gt; Same macro expansion text.
</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('eachShadowed', 'Violation for each shadowed identifier', False)


def check(check, file):
    enumerators = [] # [ enumeratorLex, ... ]
    identifiers = [] # [ identifierLex, ... ]
    ignored = set() # { identifierId, ... }
    ignorePositions = dict() # { blockEndString: [ identifierId, ... ], ... }

    lex = file.lexer(expand_macros=True).first()
    if not lex:
        return

    lex = processBlock(enumerators, identifiers, ignored, ignorePositions, lex, check, file)


def processBlock(enumerators, identifiers, ignored, ignorePositions, lex, check, file):
    eachShadowed = check.options().lookup('eachShadowed')

    while lex:
        if ordinaryIdentifierDefinition(lex):
            newEnt = lex.ent()
            # Skip unresolved parameters (parameters of function pointers)
            if newEnt.kind().check('Unresolved Parameter'):
                lex = lex.next(True, True)
                continue
            # For each previous identifier, see if it's shadowed
            for oldLex in enumerators + identifiers:
                oldEnt = oldLex.ent()
                # Skip if the names are different
                if oldEnt.name() != newEnt.name():
                    continue
                # Skip if the entity is identical
                if oldEnt.id() == newEnt.id():
                    continue
                # Skip if both are functions, such name-mangled C++ functions
                if oldEnt.kind().check('Function') and newEnt.kind().check('Function'):
                    continue
                # Skip if the entity in () was ignored due to being out scope
                if oldEnt.id() in ignored:
                    continue
                # Skip if the entities have different C++ named namespaces
                if differentNamedNamespaces(oldEnt, newEnt):
                    continue
                # Skip if in a lambda and the old entity was not captured
                if sameAsUncaptured(oldEnt, newEnt):
                    continue
                # Violation for shadowing, and stop early if the user wants to
                check.violation(newEnt, file, lex.line_begin(), lex.column_begin(), ERR1, lex.text(), oldLex.line_begin())
                if not eachShadowed:
                    break
            # Remember that the identifier was seen
            kind = newEnt.kind()
            if kind.check('Enumerator') and not inEnumClass(newEnt):
                enumerators.append(lex)
            else:
                identifiers.append(lex)
                # Remember to ignore the object/parameter later at blockEnd
                if kind.check('Object, Parameter, TemplateParameter'):
                    blockEnd = getBlockEnd(file, lex)
                    if blockEnd:
                        if blockEnd not in ignorePositions:
                            ignorePositions[blockEnd] = []
                        ignorePositions[blockEnd].append(newEnt.id())
                    # To reduce false positives, immediately ignore parameters
                    # if we couldn't find the scope end (for example, when the
                    # database fails to correctly resolve 2 parameters)
                    elif kind.check('Parameter'):
                        ignored.add(newEnt.id())
            lex = lex.next(True, True)
        elif lex.text() == '{':
            lex = lex.next(True, True)
            # Enumerators are global, so always remember them all
            # Other identifiers are copied for recursion
            lex = processBlock(enumerators, identifiers.copy(), ignored, ignorePositions, lex, check, file)
        elif lex.text() == '}':
            ignoreIdentifiersIfNeeded(ignored, ignorePositions, lex)
            lex = lex.next(True, True)
            return lex
        elif lex.text() == ';':
            ignoreIdentifiersIfNeeded(ignored, ignorePositions, lex)
            lex = lex.next(True, True)
        else:
            lex = lex.next(True, True)


def inEnumClass(ent) -> bool:
    parent = ent.parent()
    if not parent:
        return False

    return bool(re.search(r'^enum\s+(class|struct)\s', parent.contents()))


def ignoreIdentifiersIfNeeded(ignored, ignorePositions, lex):
    # Skip if the position doesn't require ignoring an identifier lexeme
    lexString = lexToString(lex)
    if lexString not in ignorePositions:
        return

    # Add each id to the set of ignored identifiers
    ignored.update(ignorePositions[lexString])


def getBlockEnd(file, lex):
    return getBlockEndParameter(file, lex) \
    or getBlockEndTemplateParameter(file, lex) or getBlockEndControlFlow(lex) \
    or getBlockEndLocal(file, lex)


def getBlockEndControlFlow(lex):
    # Go back until statement end or control flow keyword
    while lex:
        text = lex.text()
        if text in {';', '{', '}'}:
            return None
        elif text in {'for', 'while', 'if', 'switch'}:
            break
        lex = lex.previous(True, True)
    if not lex:
        return None

    # Find the end of the control flow condition )
    lex = findClose(lex.next(True, True))
    if not lex or lex.text() != ')':
        return None

    # Find the next lexeme, which is either { or something else
    lex = lex.next(True, True)
    if not lex:
        return None

    # Find the end of the control flow } or ;
    if lex.text() == '{':
        lex = findClose(lex)
        if lex:
            return lexToString(lex)
    else:
        while lex:
            if lex.text() == ';':
                return lexToString(lex)
            lex = lex.next(True, True)

    return None


def getBlockEndParameter(paramFile, paramLex):
    paramEnt = paramLex.ent()

    # None if not a parameter
    if not paramEnt.kind().check('Parameter'):
        return None

    # None if no parent
    parent = paramEnt.parent()
    if not parent:
        return None

    for fnRefBegin in parent.refs('Declarein, Definein'):
        # Skip if the function is in the wrong file
        if paramFile != fnRefBegin.file():
            continue

        # Get lexeme of function parameter close ) or skip
        lexer = paramFile.lexer(expand_macros=True)
        fnLexName = lexer.lexeme(fnRefBegin.line(), fnRefBegin.column())
        fnLexStart = lexer.lexeme(fnRefBegin.line(), fnRefBegin.column())
        while fnLexStart and fnLexStart.text() != '(':
            fnLexStart = fnLexStart.next(True, True)
        fnLexStart = findClose(fnLexStart)
        if not fnLexStart:
            continue

        # Get ; for declarations or { for definitions, otherwise skip
        if fnRefBegin.kind().check('Declarein'):
            while fnLexStart and fnLexStart.text() != ';':
                fnLexStart = fnLexStart.next(True, True)
        else:
            while fnLexStart and fnLexStart.text() != '{':
                fnLexStart = fnLexStart.next(True, True)
        if not fnLexStart:
            continue

        # Skip if the parameter isn't between the function name and start
        if not lexemeBetweenOrAtLexemes(fnLexName, paramLex, fnLexStart):
            continue

        # Get the end position of the function definition
        fnLexEnd = fnLexStart
        if fnLexEnd.text() == '{':
            for fnRefEnd in parent.refs('Endby'):
                if paramFile != fnRefEnd.file():
                    continue
                fnLexEnd = lexer.lexeme(fnRefEnd.line(), fnRefEnd.column())
                break
            if not fnLexEnd:
                continue

        return lexToString(fnLexEnd)

    return None


def getBlockEndTemplateParameter(paramFile, paramLex):
    paramEnt = paramLex.ent()

    # None if not a template parameter
    if not paramEnt.kind().check('TemplateParameter'):
        return None

    # Get ; or }
    lex = paramLex
    while lex:
        if lex.text() == ';':
            return lexToString(lex)
        elif lex.text() == '{':
            return lexToString(findClose(lex))
        lex = lex.next(True, True)

    return None


def getBlockEndLocal(objFile, objLex):
    objEnt = objLex.ent()

    # None if not an object
    if not objEnt.kind().check('Object'):
        return None

    # None if no parent
    parent = objEnt.parent()
    if not parent:
        return None

    for fnRefBegin in parent.refs('Begin'):
        # Skip if the function is in the wrong file
        if objFile != fnRefBegin.file():
            continue

        # Get the end position of the function definition or skip
        fnRefEnd = None
        for fnRefEnd in parent.refs('End'):
            if objFile != fnRefEnd.file():
                continue
            break
        if not fnRefEnd:
            continue

        # Get lexemes of the begin and end refs
        lexer = objFile.lexer(expand_macros=True)
        fnLexBegin = lexer.lexeme(fnRefBegin.line(), fnRefBegin.column())
        fnLexEnd = lexer.lexeme(fnRefEnd.line(), fnRefEnd.column())

        # Skip if the object isn't between the function start and end
        if not lexemeBetweenOrAtLexemes(fnLexBegin, objLex, fnLexEnd):
            continue

        return lexToString(fnLexEnd)

    return None


def lexemeBetweenOrAtLexemes(lexA, lexB, lexC):
    # Make sure the order is lexA, lexB
    if lexB.line_begin() < lexA.line_begin():
        return False
    if lexB.line_begin() == lexA.line_begin() and lexB.column_begin() < lexA.column_begin():
        return False

    # Make sure the order is lexB, lexC
    if lexC.line_begin() < lexB.line_begin():
        return False
    if lexC.line_begin() == lexB.line_begin() and lexC.column_begin() < lexB.column_begin():
        return False

    return True


def lexToString(lex):
    return f'{lex.line_begin()}:{lex.column_begin()}'


def ordinaryIdentifierDefinition(lex):
    # False if it's not a declaration/definition
    ref = lex.ref()
    if not ref or not ref.kind().check('Declarein, Definein'):
        return False

    # False for identifiers that are not ordinary identifiers
    # https://en.cppreference.com/w/c/language/name_space
    if lex.ent().kind().check('Label, Class Type, Struct Type, Union Type, Enum Type, Member, Macro'):
        return False

    return True


def differentNamedNamespaces(entA, entB):
    return getNamedNamespaces(entA) != getNamedNamespaces(entB)


def getNamedNamespaces(ent):
    namespaces = []

    # Starting at the original ent, get each named namespace parent
    parent = ent.parent()
    while parent:
        if parent.kind().check('Namespace'):
            name = parent.name()
            if name != '[unnamed]':
                namespaces.append(name)
        parent = parent.parent()

    return namespaces


def sameAsUncaptured(oldEnt, newEnt):
    # False if the old identifier can't be captured
    if not oldEnt.kind().check('Object, Parameter'):
        return False

    # False if the new identifier isn't in a lambda
    lambdaParent = newEnt.parent()
    if not lambdaParent or not lambdaParent.kind().check('Lambda Function'):
        return False

    # False if the old identifier is captured by the lambda
    for capture in lambdaParent.refs('Use Capture'):
        if capture.ent() == oldEnt:
            return False

    return True
