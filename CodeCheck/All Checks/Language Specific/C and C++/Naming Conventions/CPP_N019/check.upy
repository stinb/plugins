# This script is designed to run with Understand - CodeCheck
# Written and Converted by Kalicia Adams
# 6-9-2022
import re 
ERR1 = "Function or object name should not be fully capitalized"

# The ID for the check
def ids():
    return ('CPP_N019')

# The short name of the check
def name(id):
    return {
        'CPP_N019':  "All Checks/Language Specific/C and C++/Naming Conventions/ Function and variable names shall not be fully capitalized"
    }[id]


def tags(id):
    return {
        'CPP_N019': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],

    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Fully capitalized function and variable names do not follow C Coding standards. It is more correct to name these entities
with a mixture of upper and lower case (e.g. camel case) and/or with underscores separating words.</p>
"""

def define_options(check):
    check.option().checkbox('constStatic', 'Allow static and const names to be fully capitalized', False)

def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check,file):
    digit=False
    for objRef in file.filerefs("Define", "Function ~unresolved, Object ~member ~unknown ~unresolved"):
        if objRef.ent().name()==(objRef.ent().name()).upper(): #checking to see if the entity name is equal to an all capitalized version of the same entity name.
            for char in objRef.ent().name():
                if char.isdigit() and digit==False:
                    digit=True
            if digit==False: #If it contains a digit, ignore it. 
                if check.options().lookup('constStatic') and (re.search(r"const", objRef.ent().type()) or objRef.ent().kind().check("Static")): #check to see if static and const names are allowed to be fully capitalized
                    continue
                else:
                    check.violation(objRef.ent(), file, objRef.line(), objRef.column(), ERR1)
            else:
                continue
