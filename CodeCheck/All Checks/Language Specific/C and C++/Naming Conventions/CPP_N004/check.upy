# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2023-03-22


import re
import NamingConventions


variables = {
    'canChangePrecedence': True,
    'defaultAll':          True,
    'kind':                'Function',
    'kindNameLookup': {
        'Public':    'Public Member Function',
        'Protected': 'Protected Member Function',
        'Private':   'Private Member Function',
        'Pure':   'Virtual Pure Function',
    },
    'kindStrings': [
        'Static', 'Const', 'Pure', 'Virtual', 'Private', 'Public', 'Protected'
    ],
    'languageText': 'C/C++',
}


def ids():
    return ('CPP_N004')


def name(id):
    return {
        'CPP_N004': '''All Checks/Language Specific/C and C++/Naming Conventions/\
Naming Convention: Functions'''
    }[id]


def tags(id):
    return {
        'CPP_N004': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],
    }.get(id)


def detailed_description():
    return NamingConventions.detailed_description(variables)


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    NamingConventions.define_options(check, variables)


def check(check, file):
    options = check.options()

    for ref in file.filerefs('Define', 'Function', True):
        ent = ref.ent()
        name = ent.name()

        # Skip destructors, operators, and main
        if re.search(r'^~|^operator|^main$', name):
            continue

        # Skip constructors
        if ent.parent() and ent.parent().name() == ent.name():
            continue

        kindStr = ent.kind().longname()
        kindStr = NamingConventions.getPrimaryKind(options, kindStr, variables)

        errors = NamingConventions.checkNamingRules(options, kindStr, variables, name)
        if not errors:
            continue

        check.violation(ent, file, ref.line(), ref.column(), errors, kindStr, name)
