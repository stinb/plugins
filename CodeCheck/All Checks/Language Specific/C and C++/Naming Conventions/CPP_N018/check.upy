# This script is designed to run with Understand - CodeCheck
# Written and Converted by Kalicia Adams
# 6-9-2022
import re

ERR1 = "Macro name is not fully capitalized or Macro name contains a number"

# The ID for the check
def ids():
    return ('CPP_N018')

# The short name of the check
def name(id):
    return {
        'CPP_N018':  "All Checks/Language Specific/C and C++/Naming Conventions/All macros shall be fully capitalized"
    }[id]


def tags(id):
    return {
        'CPP_N018': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>All names defined by the #define keyword shall be fully capitalized.</p>
<p>Rationale</p>
<p>An object-like macro is a simple identifier which will be replaced by a code fragment. They are most commonly used to give 
symbolic names to numeric constants, and it is standard convention for the names of these macros to be fully capitalized.
Macros may also contain underscore characters..</p>
"""

def define_options(check):
    check.option().checkbox('reportNumerical', 'Report macro names containing numerical values', False)

def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check,file):
    for objRef in file.filerefs("Define", "Macro"):
        if objRef.ent().name()!=(objRef.ent().name()).upper(): #checking to see if the entity name is not equal to an all capitalized version of the same entity name. 
            check.violation(objRef.ent(), file, objRef.line(), objRef.column(), ERR1)
        elif check.options().lookup('reportNumerical'): #if the option is checked.
            for char in objRef.ent().name(): #Loop through each character of the entity name.
                if char.isdigit(): #see if the character is a digit.
                    check.violation(objRef.ent(), file, objRef.line(), objRef.column(), ERR1) #if there is a digit throw a violaion.
                    break #Once there is at least one found, it doesn't need to flag it again. 
        
