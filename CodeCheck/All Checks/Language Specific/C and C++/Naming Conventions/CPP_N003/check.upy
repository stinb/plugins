# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2023-03-22


import re
import NamingConventions


variables = {
    'canChangePrecedence': False,
    'defaultAll':          True,
    'kind':                'File',
    'kindNameLookup': {},
    'kindStrings': [
        'Code',
        'Header',
    ],
    'languageText': 'C/C++',
}


def ids():
    return ('CPP_N003')


def name(id):
    return {
        'CPP_N003': '''All Checks/Language Specific/C and C++/Naming Conventions/\
Naming Convention: Files'''
    }[id]


def tags(id):
    return {
        'CPP_N003': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],

    }.get(id)


def detailed_description():
    return NamingConventions.detailed_description(variables)


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    NamingConventions.define_options(check, variables)


def basename(name):
    match = re.search(r'^[^\.]+', name)
    return match[0] if match else name


def check(check, file):
    options = check.options()

    name = basename(file.name())

    kindStr = file.kind().longname()
    kindStr = NamingConventions.getPrimaryKind(options, kindStr, variables)

    errors = NamingConventions.checkNamingRules(options, kindStr, variables, name)
    if not errors:
        return

    check.violation(file, file, 1, 1, errors, kindStr, name)
