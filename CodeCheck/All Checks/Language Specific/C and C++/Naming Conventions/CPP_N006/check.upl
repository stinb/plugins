use base ("Understand::Codecheck");
use strict;
use CodeCheck::Libraries::NamingConventions;

my $kind = "Namespace";
my $kindPlural ="Namespaces";
my $languageText = "C/C++";
my $languageTest = "C++";
my $canChangePrecedence = 0;
my $defaultAll =1;
my @kindStrings = qw();
my %kindNameLookup = ();

sub check {
  my ($check) =@_;
  setlib();
  my @fileObjs = $check->get_files;
  my @files = ();
  foreach my $f(@fileObjs) {
    push(@files, $f->longname);
  }
  
  foreach my $var ($check->db->ents("c namespace")){
    
    #Build the list of Kinds for this variable
    my $kindString = $var->kind->longname();
    
    my $varkindNameArray = getPrimaryKind($check,$kindString);
    
    my $errors = checkNamingRules($var->name,$varkindNameArray,$check);

    if ( $check->option->lookup( 'oneViolation' ) ) {

      foreach my $use ( $var->refs( 'Declarein' ) ) {
        $check->violation($var,$use->file,$use->line,$use->column,NAMEERROR,$CodeCheck::Libraries::NamingConventions::kindNameLookup{$varkindNameArray},$var->name,$errors) if $errors && checkFile(\@files, $use->file);  
      }

    } else {
      $check->violation($var,0,-1,-1,NAMEERROR,$CodeCheck::Libraries::NamingConventions::kindNameLookup{$varkindNameArray},$var->name,$errors) if $errors;
    }
  }
}




#Template code, do not modify below this line
sub setlib{
    @CodeCheck::Libraries::NamingConventions::kindStrings = @kindStrings;
    %CodeCheck::Libraries::NamingConventions::kindNameLookup = %kindNameLookup;
    setOptions($kind,$kindPlural,$languageText,$languageTest,$canChangePrecedence,$defaultAll);
}
sub register_tr_text {registerNamingErrors(shift);}

sub checkID { return "CPP_N006";}

sub name { return "All Checks\\Language Specific\\C and C++\\Naming Conventions\\Naming Convention: Namespaces";}
sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Naming Conventions',
  );
}

sub description {setlib;return "(Global)Define naming convention for $languageText $kindPlural";}
sub detailed_description { setlib;return getNamingDescription();}
sub test_language { setlib;return shift eq $languageTest;}
sub define_options{ 
  my $check = shift;
  $check->option->checkbox( 'oneViolation', 'Show files where namespaces are used', 0 );
  setlib;
  setNamingOptions($check);
}
sub test_entity { return 0;}
sub test_global { return 1;}


sub checkFile {
  my @files = @{$_[0]};
  my $file = $_[1];

  return 1 if index(join(',', @files), $file->longname) != -1;
  return 0;
}

