# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 07-12-2021

import re

ERR1 = 'The base class %1 does not have a virtual destructor'

def id():
    return 'CPP_D076'

def name():
    return """\
All Checks/Language Specific/C and C++/Destructors/If a class requires a virtual \
destructor but has nothing to undo from a constructor, an empty implementation \
should be provided."""


def tags(id):
    return {
        'CPP_D076': [
            'Language: C',
            'Language: C++',
            'Destructors',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>If a class requires a virtual destructor but has nothing to
undo from a constructor, an empty implementation should be
provided for the destructor as follows:</p>
<pre><code language="C++">Class Base {
public:
    virtual ~Base() {};
};
</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # Gather base classes
    refs = file.filerefs('Base', 'Class ~Unresolved')

    for ref in refs:
        ok = False
        # Gather member functions
        mfRefs = ref.ent().refs('Define', 'Member Function Virtual')
        for mfRef in mfRefs:
            if mfRef.ent().name() == '~' + ref.ent().name():
                ok = True
                break

        if not ok:
            # Find the begin ref for a more accurate location
            ref = ref.ent().ref('Begin')
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())

