use base ("Understand::Codecheck");
use strict;
use constant ERR1 => "No Virtual Destructor in class with virtual member";
use constant ERR2 => "No Virtual Destructor in base class";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(ERR2);  
}


sub checkID { return "CPP_D055";}

sub name { return "All Checks/Language Specific/C and C++/Destructors/Non-Virtual Destructors in Base Classes";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Destructors',
  );
}

sub description {
  return "Declare destructors virtual in polymorphic base classes.";
}

sub detailed_description {
  return "Destructors in base classes must be virtual. C++ Only
  Assumptions:
    1. Classes with no virtual functions and no derived classes
     do not require a virtual destructor.
    2. All violating classes in a hierarchy will be reported.";
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

my %virtClasses;

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("c file");
  foreach my $classRef ($file->filerefs("define","class,struct,union",1)) {
    do_one_class($check,$classRef);
  }

  
}


# check one class
sub do_one_class {
    my $check = shift;
    my $classRef = shift;
    my $name = $classRef->ent->longname();

    return if checkBaseVirtualDestructor($classRef->ent);
    if (checkHasVirtualFunction($classRef->ent)) {
      $check->violation($classRef->ent,$classRef->file,$classRef->line,$classRef->column,ERR1);
      return;
    }
    if (checkHasDerivedClass($classRef->ent)) {
      $check->violation($classRef->ent,$classRef->file,$classRef->line,$classRef->column,ERR2);
      return;
    }
}


# check if class has a virtual destructor
sub checkVirtualDestructor {
    my $class = shift;
    foreach my $ref ($class->refs("define,declare","member function",1)) {
      my $func = $ref->ent();
      next if $func->name() !~ m/~/;
      return $func->kind->check("virtual");
    }
    return 0;  # no destructor found
}

# check if class has any derived classes
sub checkBaseVirtualDestructor {
    my $class = shift;
	
	if(exists $virtClasses{$class->id}){
		return $virtClasses{$class->id};
	}
	
	$virtClasses{$class->id} = 0;
	if (checkVirtualDestructor($class)){
		$virtClasses{$class->id} = 1;
		return 1;
	}
	
	my @parents = $class->refs("base");
	foreach my $parent(@parents){
		return 1 if checkBaseVirtualDestructor($parent->ent);
	}
	return 0;
}

# check if class has any virtual functions
sub checkHasVirtualFunction {
    my $class = shift;
    return $class->ref("define,declare","member function virtual");
}


# check if class has any derived classes
sub checkHasDerivedClass {
    my $class = shift;
    return $class->ref("derive");
}




