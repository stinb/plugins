#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;


use constant ERR1 => 'Assembly requires the asm declaration';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


sub checkID { return "CPP_A000";}

sub name { return "All Checks\\Language Specific\\C and C++\\Assembly\\Assembler instructions only use asm keyword";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Assembly',
  );
}

sub description { return "The asm declaration must introduce assembler instructions.";}

sub detailed_description { return <<"END_DESC"
<p>Using the asm declaration allows for consistency and is available to all C++ implementations. </p>

END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

sub define_options{}


sub check {
  my $check = shift; 
  my $file = shift; 
  return unless $file->kind->check('c file'); 
  
  my $lexer = $file->lexer;
  return unless $lexer;
  my $pragmaAsm = 0;
  foreach my $lexeme ($lexer->lexemes){
     
    return if $check->is_abort();
    
    $pragmaAsm = 1 if $lexeme->token eq "Preprocessor" && $lexeme->text eq "pragma";
    $pragmaAsm = 0 if $lexeme->token eq "Newline";
    if($lexeme->token eq "Keyword" && $lexeme->text =~ /^[_]*asm[_]*$/i){
      next if $lexeme->text eq "asm" && ! $pragmaAsm;
      $check->violation(0,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1);
    }
  
  }
}
