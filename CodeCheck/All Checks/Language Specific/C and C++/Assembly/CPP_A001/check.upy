# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

import re

ERR1 = 'Assembly code must be isolated'

def ids():
    return ('M7-4-3', 'MISRA08_7-4-3', 'CPP_A001', 'MISRA04_2.1', 'MISRA12_DIR_4.3', 'MISRA23_DIR_4.3')

def name(id):
    return {
        'M7-4-3': 'Published Standards/AUTOSAR/Assembly language shall be encapsulated and isolated.',
        'MISRA08_7-4-3': 'Published Standards/MISRA-C++ 2008/7-4-3 Assembly language shall be encapsulated and isolated.',
        'CPP_A001': 'All Checks/Language Specific/C and C++/Assembly/Assembly language shall be encapsulated and isolated.',
        'MISRA04_2.1': 'Published Standards/MISRA-C 2004/2.1 Assembly language shall be encapsulated and isolated.',
        'MISRA12_DIR_4.3': 'Published Standards/MISRA C 2012/Directive 4.3 Assembly language shall be encapsulated and isolated.',
        'MISRA23_DIR_4.3': 'Published Standards/MISRA C 2023/Directive 4.3 Assembly language shall be encapsulated and isolated.',
    }[id]




def tags(id):
    return {
        'MISRA08_7-4-3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Assembly',
        ],
        'MISRA04_2.1': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: required',
            'Assembly',
        ],
        'M7-4-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Assembly',
        ],
        'CPP_A001': [
            'Language: C',
            'Language: C++',
            'Assembly',
        ],
        'MISRA12_DIR_4.3': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Assembly',
        ],
        'MISRA23_DIR_4.3': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Assembly',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'M7-4-3': '''
<p>
C++ functions or assembler functions need to be used to isolate and encapsulate assembly language instructions. Macros can also be used.
</p>

<p><b>Rationale</b></p>

<p>
Ensuring that assembly language code is encapsulated and isolated aids portability. Where assembly language instructions are needed, they shall be encapsulated and isolated in either assembler functions or C++ functions.
</p>

<p><b>Example</b></p>

<pre><code language="C++">void Delay ( void )
{
    asm ( "NOP" );    // Compliant
}
void fn ( void )
{
    DoSomething ( );
    Delay ( );        // Assembler is encapsulated
    DoSomething ( );
    asm ( "NOP" );    // Non-compliant
    DoSomething ( );
}
</code></pre>
''',

        'MISRA08_7-4-3': '''
<p>
C++ functions or assembler functions need to be used to isolate and encapsulate assembly language instructions. Macros can also be used.
</p>

<p><b>Rationale</b></p>

<p>
Ensuring that assembly language code is encapsulated and isolated aids portability. Where assembly language instructions are needed, they shall be encapsulated and isolated in either assembler functions or C++ functions.
</p>

<p><b>Example</b></p>

<pre><code language="C++">void Delay ( void )
{
    asm ( "NOP" );    // Compliant
}
void fn ( void )
{
    DoSomething ( );
    Delay ( );        // Assembler is encapsulated
    DoSomething ( );
    asm ( "NOP" );    // Non-compliant
    DoSomething ( );
}
</code></pre>
''',

        'CPP_A001': '''
<p>
C++ functions or assembler functions need to be used to isolate and encapsulate assembly language instructions. Macros can also be used.
</p>

<p><b>Rationale</b></p>

<p>
Ensuring that assembly language code is encapsulated and isolated aids portability. Where assembly language instructions are needed, they shall be encapsulated and isolated in either assembler functions or C++ functions.
</p>

<p><b>Example</b></p>

<pre><code language="C++">void Delay ( void )
{
    asm ( "NOP" );    // Compliant
}
void fn ( void )
{
    DoSomething ( );
    Delay ( );        // Assembler is encapsulated
    DoSomething ( );
    asm ( "NOP" );    // Non-compliant
    DoSomething ( );
}
</code></pre>
''',

        'MISRA04_2.1': '''
<p>
Where assembly language instructions are required it is recommended that they be encapsulated and isolated in either (a) assembler functions, (b) C functions or (c) macros.
</p>

<p>
For reasons of efficiency it is sometimes necessary to embed simple assembly language instructions in-line, for example to enable and disable interrupts. If it is necessary to do this for any reason, then it is recommended that it be achieved by using macros.
</p>

<p>
Note that the use of in-line assembly language is an extension to standard C, and therefore also requires a deviation against Rule 1.1.
</p>

<pre><code language="C++">    #define NOP asm("   NOP")
</code></pre>
''',

        'MISRA12_DIR_4.3': '''

<p>
C++ functions or assembler functions need to be used to isolate and encapsulate assembly language instructions. Macros can also be used.
</p>

<p><b>Amplification</b></p>

<p>
Where assembly language instructions are used they shall be encapsulated and isolated in:
</p>

<p>
• Assembly language functions;
</p>

<p>
• C functions ( inline functions preferred for C99 );
</p>

<p>
• C macros.
</p>

<p><b>Rationale</b></p>

<p>
For reasons of efficiency it is sometimes necessary to embed simple assembly language instructions in-line, for example to enable and disable interrupts. If this is necessary, then it is recommended that it be achieved by using macros, or for C99, inline functions.
</p>

<p>
Encapsulating assembly language is beneficial because:
</p>

<p>
• It improves readability;
</p>

<p>
• The name, and documentation, of the encapsulating macro or function makes the intent of the assembly language clear;
</p>

<p>
• All uses of assembly language for a given purpose can share the same encapsulation which improves maintainability;
</p>

<p>
• The assembly language can easily be substituted for a diff erent target or for purposes of static analysis.
</p>

<p>
<em>Note:</em> the use of in-line assembly language is an extension to standard C, and therefore violates Rule 1.2.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#define NOP asm(" NOP")
</code></pre>
''',
        'MISRA23_DIR_4.3': '''

<p>
C++ functions or assembler functions need to be used to isolate and encapsulate assembly language instructions. Macros can also be used.
</p>

<p><b>Amplification</b></p>

<p>
Where assembly language instructions are used they shall be encapsulated and isolated in:
</p>

<p>
• Assembly language functions;
</p>

<p>
• C functions (inline functions preferred for C99 and later);
</p>

<p>
• C macros.
</p>

<p>
<em>Note:</em> the use of in-line assembly language is an extension to standard C, and therefore violates Rule 1.2.
</p>

<p><b>Rationale</b></p>

<p>
For reasons of efficiency it is sometimes necessary to embed simple assembly language instructions in-line, for example to enable and disable interrupts. If this is necessary, then it is recommended that it be achieved by using macros or inline functions. 
</p>

<p>
Encapsulating assembly language is beneficial because:
</p>

<p>
• It improves readability;
</p>

<p>
• The name, and documentation, of the encapsulating macro or function makes the intent of the assembly language clear;
</p>

<p>
• All uses of assembly language for a given purpose can share the same encapsulation which improves maintainability;
</p>

<p>
• The assembly language can easily be substituted for a different target or for purposes of static analysis.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#define NOP asm(" NOP")
</code></pre>
''',
    }[id]

def test_language(language):
    return language == 'C++'

def test_entity(file):
    return file.kind().check('header file, code file')

def test_global():
    return False

def define_options(check):
    inactive = True
    macro = False
    if check.id() in {'M7-4-3', 'MISRA08_7-4-3', 'MISRA12_DIR_4.3', 'MISRA23_DIR_4.3'}:
        inactive = False
    elif check.id() in {'MISRA04_2.1', 'CPP_A001'}:
        macro = True
    check.option().checkbox('allowMacro', 'Allow assembly isolation in macros', macro)
    check.option().checkbox('ignoreInactive', 'Ignore inactive code', inactive)

def check(check, file):
    lexer = file.lexer()
    if not lexer:
        return

    lexeme = lexer.first()
    inFunc = None
    endRef = None
    asmStatements = []

    if not check.option().lookup('ignoreInactive'):
        while lexeme:
            # Determine if we are in a function
            if lexeme.ref() and lexeme.ent().kind().check('function'):
                if lexeme.ref().kind().check('definein'):
                    inFunc = lexeme.ent()
                if inFunc:
                    endRef = inFunc.ref('endby')
                if not endRef:
                    inFunc = None
                    if lexeme:
                        lexeme = lexeme.next()
                    continue

            if inFunc and lexeme.line_begin() >= endRef.line() and lexeme.column_begin() >= endRef.column():
                # We are at the end of the function and need to determine if the number of assembly statements
                # Is a healthy percentage of the total statements. Right now all statements need to be assembly
                stmts = inFunc.metric(['CountStmt'])['CountStmt']
                if asmStatements and len(asmStatements) < stmts:
                    for asmLex in asmStatements:
                        if not (check.option().lookup('ignoreInactive') and asmLex.inactive()):
                            check.violation(inFunc, file, asmLex.line_begin(), asmLex.column_begin(), ERR1)
                asmStatements = []
                inFunc = None

            if lexeme.token() == 'Keyword' and re.search(r'^[_]*asm[_]*$', lexeme.text()):
                if inFunc:
                    asmStatements.append(lexeme)
                else:
                    check.violation(None, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

            if lexeme:
                lexeme = lexeme.next()

    elif check.option().lookup('allowMacro'):
        while lexeme:
            # Assembler use in preprocessor is okay, skip it
            if lexeme.token() == 'Preprocessor' and check.option().lookup('allowMacro'):
                while lexeme and lexeme.token() != 'Newline':
                    lexeme = lexeme.next()
                if lexeme:
                    lexeme = lexeme.next()
                continue

            if not lexeme:
                return

            # Determine if we are in a function
            if lexeme.ref() and lexeme.ent().kind().check('function'):
                if lexeme.ref().kind().check('definein'):
                    inFunc = lexeme.ent()
                if inFunc:
                    endRef = inFunc.ref('endby')

            if inFunc and endRef and lexeme.line_begin() >= endRef.line() and lexeme.column_begin() >= endRef.column():
                # We are at the end of the function and need to determine if the number of assembly statements
                # Is a healthy percentage of the total statements. Right now all statements need to be assembly
                stmts = inFunc.metric(['CountStmt'])['CountStmt']
                if asmStatements and len(asmStatements) < stmts:
                    for asmLex in asmStatements:
                        check.violation(inFunc, file, asmLex.line_begin(), asmLex.column_begin(), ERR1)
                asmStatements = []
                inFunc = None

            if lexeme.token() == 'Keyword' and re.search(r'^[_]*asm[_]*$', lexeme.text()):
                if inFunc:
                    asmStatements.append(lexeme)
                else:
                    check.violation(None, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

            if lexeme:
                lexeme = lexeme.next()
