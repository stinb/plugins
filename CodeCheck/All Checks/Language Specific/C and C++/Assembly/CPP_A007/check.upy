# This script is designed to run with Understand - CodeCheck

import re

ERR1 = 'Assembly requires the asm declaration'

def ids():
    return ('M7-4-2', 'MISRA08_7-4-2', 'CPP_A007')

def name(id):
    return {
        'M7-4-2': 'Published Standards/AUTOSAR/Assembler instructions shall only be introduced using the asm declaration.',
        'MISRA08_7-4-2': 'Published Standards/MISRA-C++ 2008/7-4-2 Assembler instructions shall only be introduced using the asm declaration.',
        'CPP_A007': 'All Checks/Language Specific/C and C++/Assembly/Assembler instructions shall only be introduced using the asm declaration.',
    }[id]




def tags(id):
    return {
        'MISRA08_7-4-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Assembly',
        ],
        'M7-4-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Assembly',
        ],
        'CPP_A007': [
            'Language: C',
            'Language: C++',
            'Assembly',
        ],
    }.get(id)

def description():
    return 'Assembler instructions shall only be introduced using the asm declaration.'

def detailed_description(id):
    return '''
<p>
Assembly requires the asm declaration.
</p>

<p><b>Rationale</b></p>

<p>
The asm declaration is available to all C++ implementations, allowing a consistent mechanism to be used.
</p>

<p>
However, the parameters to asm are still implementation-defined.
</p>

<p><b>Example</b></p>

<pre><code language="C++">void Delay_a ( void )
{
    asm ( "NOP" );   // Compliant
}
void Delay_b ( void )
{
    #pragma asm
    "NOP"            // Non-compliant
    #pragma endasm
}
</code></pre>'''

def test_language(language):
    return language == 'C++'

def test_entity(file):
    return file.kind().check('header file, code file')

def test_global():
    return False

def check(check, file):
    lexer = file.lexer()
    if not lexer:
        return

    pragmaAsm = False
    for lexeme in lexer.lexemes():
        if lexeme.token() == 'Preprocessor' and lexeme.text() == 'pragma':
            pragmaAsm = True
        elif lexeme.token() == 'Newline':
            pragmaAsm = False
        elif lexeme.token() == 'Identifier' and re.search(r'^[_]*asm[_]*$', lexeme.text()):
            if lexeme.text() == 'asm' and not pragmaAsm:
                continue
            check.violation(None, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
