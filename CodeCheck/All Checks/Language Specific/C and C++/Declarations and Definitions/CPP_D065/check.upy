# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 11-22-21


import re


ERR1 = 'Members not initialized by delegating constructor.'


def ids():
    return ('A12-1-5', 'CPP_D065')


def name(id):
    return {
        'A12-1-5': 'Published Standards/AUTOSAR/Common class initialization for non-constant members shall be done by a delegating constructor.',
        'CPP_D065': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Common class initialization for non-constant members shall be done by a delegating constructor.',
    }[id]



def tags(id):
    return {
        'A12-1-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Partially Automated',
            'Declarations and Definitions'
        ],
        'CPP_D065': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Rationale</b></p>
Common initialization of non-constant members in a delegating constructor prevents from code repetition, accidental differences and maintenance problems.
</p>

<p><b>Example</b></p>
<pre><code language="C++">// $Id: A12-1-5.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $

#include &lt;cstdint&gt;

class A
{
public:
    // Compliant
    A(std::int32_t x, std::int32_t y) : x(x + 8), y(y) {}
    explicit A(std::int32_t x) : A(x, 0) {}

private:
    std::int32_t x;
    std::int32_t y;
};

class B
{
public:
    // Non-compliant
    B(std::int32_t x, std::int32_t y) : x(x + 8), y(y) {}
    explicit B(std::int32_t x) : x(x + 8), y(0) {}

private:
    std::int32_t x;
    std::int32_t y;
};
</code></pre>

<p><b>See also</b><br>
• HIC++ v4.0 [9]: 12.4.5: Use delegating constructors to reduce code duplication.<br>
• C++ Core Guidelines [11]: C.51: Use delegating constructors to represent common actions for all constructors of a class.
</p>
'''



def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):

    # Explicit public methods
    for funRef in file.filerefs('Define', 'Public Member Function Explicit'):
        funEnt = funRef.ent()
        classEnt = funEnt.parent()

        # If the function is an constructor of a class
        if funEnt.name() == classEnt.name() and 'Class' in classEnt.kindname():

            # If the function initializes members
            if funEnt.ents('Set Init ~Implicit', 'Member Object'):
                check.violation(funEnt, file, funRef.line(), funRef.column(), ERR1)
