# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2024-05-14


import re


ERR1 = 'Global object only used in function: %1'

USE_REFS = 'Assignby, Callby, Modifyby, Setby ~Init, ~Inactive Useby'


def ids():
    return ('MISRA04_8.7', 'MISRA12_8.9', 'MISRA23_8.9', 'CPP_D023')


def name(id):
    return {
        'MISRA04_8.7': '''Published Standards/MISRA-C 2004/\
8.7 Objects shall be local if only accessed from one function''',
        'MISRA12_8.9': '''Published Standards/MISRA C 2012/\
8.9 Objects shall be local if only accessed from one function''',
        'MISRA23_8.9': '''Published Standards/MISRA C 2023/\
8.9 An object should be declared at block scope if its identifier only appears\
 in a single function''',
        'CPP_D023': '''All Checks/Language Specific/C and C++/\
Declarations and Definitions/Single-Function Global Objects''',
    }[id]


def tags(id):
    return {
        'MISRA04_8.7': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2004',
            'Category: Required',
        ],
        'MISRA12_8.9': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Advisory',
        ],
        'MISRA23_8.9': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
        ],
        'CPP_D023': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    if id == 'MISRA04_8.7':
        return '''\
<p><b>Title</b></p>
<p>Objects shall be defined at block scope if they are only accessed from within
a single function.</p>

<p><b>Description</b></p>
<p>The scope of objects shall be restricted to functions where possible. File
scope shall only be used where objects need to have either internal or external
linkage. Where objects are declared at file scope Rule 8.10 applies. It is
considered good practice to avoid making identifiers global except where
necessary. Whether objects are declared at the outermost or innermost block is
largely a matter of style. "Accessing" means using the identifier to read from,
write to, or take the address of the object.</p>

<p><b>Developer's Notes</b></p>
<p>An option is provided to allow an object if it's used outside of functions.
For example, this allows a global object that is used to define other global
objects.</p>
'''
    elif id == 'MISRA12_8.9':
        return '''\
<p><b>Title</b></p>
<p>An object should be defined at block scope if its identifier only appears in
a single function.</p>

<p><b>Rationale</b></p>
<p>Defining an object at block scope reduces the possibility that the object
might be accessed inadvertently and makes clear the intention that it should not
be accessed elsewhere.</p>

<p>Within a function, whether objects are defined at the outermost or innermost
block is largely a matter of style.</p>

<p>It is recognized that there are situations in which it may not be possible to
comply with this rule. For example, an object with static storage duration
declared at block scope cannot be accessed directly from outside the block. This
makes it impossible to set up and check the results of unit test cases without
using indirect accesses to the object. In this kind of situation, some projects
may prefer not to apply this rule.</p>

<p><b>Example</b></p>
<p>In this compliant example, <code>i</code> is declared at block scope because
it is a <i>loop counter</i>. There is no need for other functions in the same
file to use the same object for any other purpose.</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">\
void func ( void )
{
  int32_t i;

  for ( i = 0; i &lt; N; ++i )
  {
  }
}
</code></pre>

<p>In this compliant example, the function <code>count</code> keeps track of the
number of times it has been called and returns that number. No other function
needs to know the details of the implementation of count so the call counter is
defined with block scope.</p>

<pre><code language="C++">\
uint32_t count ( void )
{
  static uint32_t call_count = 0;

  ++call_count;
  return call_count;
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>An option is provided to allow an object if it's used outside of functions.
For example, this allows a global object that is used to define other global
objects.</p>
'''
    else:
        return '''\
<p><b>Title</b></p>
<p>An object should be declared at block scope if its identifier only appears in
a single function.</p>

<p><b>Rationale</b></p>
<p>Declaring an object at block scope reduces the possibility that the object
might be accessed inadvertently and makes clear the intention that it should not
be accessed elsewhere.</p>

<p>Within a function, whether objects are declared at the outermost or innermost
block is largely a matter of style.</p>

<p>It is recognized that there are situations in which it may not be possible to
comply with this rule. For example, an object with static storage duration
declared at block scope cannot be accessed directly from outside the block.
This makes it impossible to set up and check the results of unit test cases
without using indirect accesses to the object. In this kind of situation, some
projects may prefer not to apply this rule.</p>

<p><b>Example</b></p>
In this compliant example, <code>i</code> is declared at block scope because it
is a <i>loop counter</i>. There is no need for other functions in the same file
to use the same object for any other purpose.</p>

<pre><code language="C++">\
void func ( void )
{
  int32_t i;

  for ( i = 0; i &lt; N; ++i )
  {
  }
}
</code></pre>

<p>In this compliant example, the function <code>count</code> keeps track of the
number of times it has been called and returns that number. No other function
needs to know the details of the implementation of count so the call counter is
declared with block scope.</p>

<pre><code language="C++">
uint32_t count ( void )
{
  static uint32_t call_count = 0;

  ++call_count;
  return call_count;
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>An option is provided to allow an object if it's used outside of functions.
For example, this allows a global object that is used to define other global
objects.</p>
'''


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('allowIfUsedOutOfFn', 'Allow if used outside of functions', True)


def check(check, file):
    allowIfUsedOutOfFn = check.options().lookup('allowIfUsedOutOfFn')

    for objRef in file.filerefs('Define, Declare', 'Global Object ~Unknown ~Unresolved', True):
        objEnt = objRef.ent()

        # Skip if used by zero or multiple functions
        fnRefs = objEnt.refs(USE_REFS, 'Function', True)
        if len(fnRefs) != 1:
            continue

        # Skip if used outside of functions
        if allowIfUsedOutOfFn:
            if objEnt.refs(USE_REFS, 'Global Object, File', True):
                continue

        fn = fnRefs[0].ent().longname()

        check.violation(objEnt, file, objRef.line(), objRef.column(), ERR1, fn)
