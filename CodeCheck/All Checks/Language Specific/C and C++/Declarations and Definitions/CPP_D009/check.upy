# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2025-09-30


import re


ERR1 = 'Multiple declarations for an identifier straddle using-declaration: %1'


def ids():
    return ('MISRA08_7-3-5', 'CPP_D009')


def name(id):
    return {
        'MISRA08_7-3-5': '''Published Standards/MISRA-C++ 2008/\
7-3-5 Declaration and Using-Declaration Clash''',
        'CPP_D009': '''All Checks/Language Specific/C and C++/Declarations and Definitions/\
Declaration and Using-Declaration Clash''',
    }[id]


def tags(id):
    return {
        'MISRA08_7-3-5': [
            'Declarations and Definitions',
            'Identifiers',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
        ],
        'CPP_D009': [
            'Declarations and Definitions',
            'Identifiers',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    return '''\
<p><b>Title</b></p>

<p>Multiple declarations for an identifier in the same namespace shall not
straddle a <i>using-declaration</i> for that identifier.</p>

<p><b>Rationale</b></p>

<p>The set of identifiers introduced by a <i>using-declaration</i> does not
include any declarations that may be added by a subsequent declaration in the
namespace. Any subsequent declarations will not be found through the
<i>using-declaration</i>, which may not be consistent with developer
expectations.</p>

<p><b>Example</b></p>

<pre><code language="C++">\
namespace NS1
{
   void f( uint16_t ); // Example 1
}
using NS1::f;
namespace NS1
{
   void f( uint32_t ); // Example 2 – Non-compliant
}
void bar()
{
   f( 0U );
}\
</code></pre>

<p>In the above example, moving the <i>using-declaration</i> below the second
namespace would result in Example 2 being called, as it is a better match than
Example 1.</p>

<p><b>See also</b></p>

<p>ISO/IEC 14882:2003 [1] §7.3.3</p>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    # Pull all using reference and all other references for comparison
    allDeclares = file.filerefs('Using', '~File')
    everything = file.filerefs('Declare, Define')

    # Loop through each using reference
    for declare in allDeclares:
        # Compare to each other reference
        for item in everything:
            # Check name and line number
            if declare.ent().name() != item.ent().name():
                continue
            if declare.line() >= item.line():
                continue

            check.violation(declare.ent(), file, declare.line(), declare.column(), ERR1, declare.scope().name())
