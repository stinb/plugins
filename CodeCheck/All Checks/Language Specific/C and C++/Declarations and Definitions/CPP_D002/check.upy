# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2024-04-16


import re


ERR1 = 'Init-declarator-list contains more than one init-declarator'


def ids():
    return ('M8-0-1', 'MISRA08_8-0-1', 'CPP_D002')


def name(id):
    return {
        'M8-0-1': 'Published Standards/AUTOSAR/Single Declarations',
        'MISRA08_8-0-1': 'Published Standards/MISRA-C++ 2008/8-0-1 Single Declarations',
        'CPP_D002': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Single Declarations',
    }[id]


def tags(id):
    return {
        'MISRA08_8-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'M8-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D002': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)


def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Only declare one object at a time per declaration statement.</p>

<p><b>Rationale</b></p>
<p>Where multiple declarators appear in the same declaration the type of an
identifier may not meet developer expectations.</p>

<p><b>Example</b></p>
<pre><code language="C++">\
int32_t i1; int32_t j1; // Compliant
int32_t i2, *j2;        // Non-compliant
int32_t *i3, &j3 = i2;  // Non-compliant
</code></pre>

<p><b>See also</b></p>
<ul>
<li>ISO/IEC 14882:2003 [1] ยง9.2</li>
</ul>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    # Objects that aren't in templates like <int x, int y>
    for ref in file.filerefs('Declare, Define', 'Object ~TemplateParameter'):

        # Skip if no lexeme at ref
        lex = file.lexer(False).lexeme(ref.line(), ref.column())
        if not lex:
            continue

        # Skip if previous lexeme is a comma or a square bracket
            # Comma: violations are only for the first in the list
            # Square bracket: ignore things like tuples
        left = lex.previous(True, True)
        if not left or left.text() in {',', '['}:
            continue

        # Skip if next lexeme isn't a comma
        right = lex.next(True, True)
        if not right or right.text() != ',':
            continue

        check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
