# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-16-2020

def id():
    return 'CPP_DD010'

def name():
    return """\
All Checks/Language Specific/C and C++/Declarations and Definitions/The use of \
friend classes should be avoided"""


def tags(id):
    return {
        'CPP_DD010': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],

    }.get(id)

def description():
    return 'The use of friend classes should be avoided unless there is a legitimate basis in design.'

def detailed_description():
    return """\
<p>The friend functionality offered by C++ should rarely, if ever, be used as 
it violates the basic object-oriented principles of encapsulation. One valid
exception to this rule is when writing test code, where the goal may be to gain
this level of visibility.
</p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
	# find every use of friend class in the file
	if file and file.lexer():
		lexer = file.lexer()
	else:
		return
	lexeme = lexer.first()

	while lexeme:

		if lexeme and lexeme.next(ignore_whitespace=True) and lexeme.token() == "Keyword" and lexeme.text() == "friend":
			next_lex = lexeme.next(ignore_whitespace=True)

			if next_lex and next_lex.next(ignore_whitespace=True) and next_lex.token() == "Keyword" and next_lex.text() == "class":
				# find class name to use in violation
				class_lex = next_lex.next(ignore_whitespace=True)
				class_name = class_lex.text()
				class_ent = class_lex.ent()

				if class_ent:
					check.violation(class_ent, file, class_lex.line_begin(), class_lex.column_begin(), "Violation: use of friend class '%1' should be avoided", class_ent)


		lexeme = lexeme.next()

		
