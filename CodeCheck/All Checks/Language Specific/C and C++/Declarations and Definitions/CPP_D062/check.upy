# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 11-19-21


import re


ERR1 = 'Constructor initializes non-static members, while others are initialized at declaration, starting at line %1'


def ids():
    return ('A12-1-2', 'CPP_D062')


def name(id):
    return {
        'A12-1-2': 'Published Standards/AUTOSAR/Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type.',
        'CPP_D062': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type.',
    }[id]





def tags(id):
    return {
        'A12-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_D062': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Rationale</b></p>
Since 2011 C++ Language Standard it is allowed to initialize a non-static member along with the declaration of the member in the class body using NSDMI ("non-static data member initializer"). To avoid possible confusion which values are actually used, if any member is initialized by NSDMI or with a constructor, then all others should be initialized the same way.
</p>

<p><b>Exception</b></p>
The move and copy constructors are exempt from this rule, because these constructors copy the existing values from other objects.
</p>

<p><b>Example</b></p>
<pre><code language="C++">// $Id: A12-1-2.cpp 271696 2017-03-23 09:23:09Z piotr.tanski $
#include &lt;cstdint&gt;
#include &lt;utility&gt;
class A
{
public:
    A() : i1{0}, i2{0} // Compliant - i1 and i2 are initialized by the
                       // constructor only. Not compliant with A12-1-3
    {
    }
    // Implementation

private:
    std::int32_t i1;
    std::int32_t i2;
};
class B
{
public:
    // Implementation

private:
    std::int32_t i1{0};
    std::int32_t i2{
        0}; // Compliant - both i1 and i2 are initialized by NSDMI only
};
class C
{
public:
    C() : i2{0} // Non-compliant - i1 is initialized by NSDMI, i2 is in
                // member in member initializer list
    {
    }
    C(C const& oth) : i1{oth.i1}, i2{oth.i2} // Compliant by exception
    {
    }
    C(C&& oth)
        : i1{std::move(oth.i1)},
          i2{std::move(oth.i2)} // Compliant by exception
    {
    }
    // Implementation

private:
    std::int32_t i1{0};
    std::int32_t i2;
};
</code></pre>

<p><b>See also</b></p><p>
â€¢ HIC++ v4.0 [9]:12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member
</p>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def equal(ref1, ref2):
    return ref1.line() == ref2.line() and ref1.column() == ref2.column()


def check(check, file):

    for funRef in file.filerefs('Define', 'Public Member Function'):
        funEnt = funRef.ent()
        classEnt = funEnt.parent()

        # If the function is a constructor of a class
        if funEnt.name() == classEnt.name() and 'Class' in classEnt.kindname():

            # Get all the non-static data members initialized at definition
            initByDefinition = 0
            for member in classEnt.ents('Define', 'Member Object ~Static'):
                if initByDefinition:
                    break

                # Compare the ref of Define with all the refs of Setby Init
                define = member.refs('Definein')[0]
                for setby in member.refs('Setby Init'):
                    if equal(define, setby):
                        initByDefinition = setby.line()
                        break

            # Find out if the copy or move operation is used
            copyOrMove = False
            if funEnt.parameters():
                if funEnt.parameters(False) in {'const '+funEnt.name()+' &', funEnt.name()+' &&'}:
                    copyOrMove = True

            # Get all the non-static data members initialized by the constructor
            initByConstructor = False
            if not copyOrMove:
                for member in funEnt.ents('Set Init', 'Member Object ~Static'):
                    initByConstructor = True
                    break

            if initByDefinition and initByConstructor:
                check.violation(funEnt, file, funRef.line(), funRef.column(), ERR1, initByDefinition)
