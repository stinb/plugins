# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2023-06-22


import re


ERR1 = 'Global declaration should be static (to stay in this translation unit)'
ERR2 = 'Global declaration should be in function: %1'
ERR3 = 'Local declaration should be in lower scope: %1'


LOOP_NODES = {'do-while', 'while-for'}


def ids():
    return ('POWER_OF_TEN_06', 'MISRA08_3-4-1', 'M3-4-1', 'CPP_D044')


def name(id):
    return {
        'POWER_OF_TEN_06': '''Published Standards/The Power of 10/\
6 Declarations at Lowest Scope''',
        'MISRA08_3-4-1': 'Published Standards/MISRA-C++ 2008/3-4-1 \
Declarations at Lowest Scope',
        'M3-4-1': 'Published Standards/AUTOSAR/\
Declarations at Lowest Scope',
        'CPP_D044': 'All Checks/Language Specific/C and C++/Declarations and Definitions/\
Declarations at Lowest Scope',
    }[id]


def tags(id):
    return {
        'POWER_OF_TEN_06': [
            'Language: C',
            'Language: C++',
            'Standard: The Power of Ten',
            'Declarations and Definitions'
        ],
        'MISRA08_3-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Declarations and Definitions'
        ],
        'M3-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_D044': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions'
        ],
    }.get(id)


def detailed_description(id):
    return {
        'POWER_OF_TEN_06': '''\
<p>Declare all data objects at the smallest possible level of scope.</p>

<p><b>Rationale</b></p>

<p>This rule supports a basic principle of data hiding. Clearly, if an object is
not in scope, other modules cannot reference or corrupt its value. Similarly, if
a tester must diagnose an object's erroneous value, the fewer the number of
statements where the value could have been assigned, the easier it is to
diagnose the problem. The rule also discourages the reuse of variables for
multiple, incompatible purposes, which can complicate fault diagnosis.</p>

<p><b>Example</b></p>

<pre><code language="C++">#include &lt;string.h&gt;

enum { MESSAGE_SIZE = 64 };

static char message_a[MESSAGE_SIZE] = ""; // Violation - Global declaration should be local in hello_message_a
static char message_b[MESSAGE_SIZE] = "";

static void hello_message_a(void)
{
  strcpy_s(message_a, MESSAGE_SIZE, "Hi\n");
}

static void hello_message_b(void)
{
  strcpy_s(message_b, MESSAGE_SIZE, "Hi\n");
}

static void goodbye_message_b(void)
{
  strcpy_s(message_b, MESSAGE_SIZE, "Bye\n");
}

static void goodbye_message_c(void)
{
  static char message_c[MESSAGE_SIZE] = "";
  strcpy_s(message_c, MESSAGE_SIZE, "Bye\n");
}

static void loop_a(int input)
{
  int i = input;
  int limit = 10;
  while (1)
  {
    i += 2;
    if (i &gt;= limit)
      break;
  }
}

static void loop_b(int input)
{
  int i = input;  // Violation - Local declaration should be after 'if'
  int limit = 10; // Violation - Local declaration should be after 'if'
  if (1) {
    while (1)
    {
      i += 2;
      if (i &gt;= limit)
        break;
    }
  }
}
</code></pre>

<p><b>Developer's Notes</b></p>

<p>Declarations in scopes just above loops are allowed. This is because counters
or accumulators may be necessary in many loops. To be more strict with these
declarations, it requires human knowledge.</p>

<p>Currently, anonymous blocks (scope blocks, which are used for scoping and not
control flow) are not supported for this check. This is because this check
uses the control flow graph API and these blocks are not part of it.</p>

<p>Due to limitations of the control flow graph API, this check does not
properly parse <code>else if</code> nodes properly when the condition is
a GNU statement expression.</p>
''',
        'MISRA08_3-4-1': '''\
<p>An identifier declared to be an object or type shall be defined in a block
that minimizes its visibility.</p>

<p><b>Rationale</b></p>

<p>Defining variables in the minimum block scope possible reduces the visibility
of those variables and therefore reduces the possibility that these identifiers
will be used accidentally. A corollary of this is that global objects (including
singleton function objects) shall be used in more than one function.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( int32_t k )
{
    int32_t j = k * k; // Non-compliant
    {
        int32_t i = j; // Compliant
        std::cout &lt;&lt; i &lt;&lt; j &lt;&lt; std::endl;
    }
}
</code></pre>

<p>In the above example, the definition of <code>j</code> could be moved into
the same block as <code>i</code>, reducing the possibility that <code>j</code>
will be incorrectly used later in <code>f</code>.</p>

<p><b>Developer's Notes</b></p>

<p>Declarations in scopes just above loops are allowed. This is because counters
or accumulators may be necessary in many loops. To be more strict with these
declarations, it requires human knowledge.</p>

<p>Currently, anonymous blocks (scope blocks, which are used for scoping and not
control flow) are not supported for this check. This is because this check
uses the control flow graph API and these blocks are not part of it.</p>

<p>Due to limitations of the control flow graph API, this check does not
properly parse <code>else if</code> nodes properly when the condition is
a GNU statement expression.</p>
''',
        'M3-4-1': '''\
<p>An identifier declared to be an object or type shall be defined in a block
that minimizes its visibility.</p>

<p><b>Rationale</b></p>

<p>Defining variables in the minimum block scope possible reduces the visibility
of those variables and therefore reduces the possibility that these identifiers
will be used accidentally. A corollary of this is that global objects (including
singleton function objects) shall be used in more than one function.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( int32_t k )
{
    int32_t j = k * k; // Non-compliant
    {
        int32_t i = j; // Compliant
        std::cout &lt;&lt; i &lt;&lt; j &lt;&lt; std::endl;
    }
}
</code></pre>

<p>In the above example, the definition of <code>j</code> could be moved into
the same block as <code>i</code>, reducing the possibility that <code>j</code>
will be incorrectly used later in <code>f</code>.</p>

<p><b>See also</b></p>

<p>â€¢ C++ Core Guidelines [11]: ES.21: Don't introduce a variable (or constant)
before you need to use it.</p>

<p><b>Developer's Notes</b></p>

<p>Declarations in scopes just above loops are allowed. This is because counters
or accumulators may be necessary in many loops. To be more strict with these
declarations, it requires human knowledge.</p>

<p>Currently, anonymous blocks (scope blocks, which are used for scoping and not
control flow) are not supported for this check. This is because this check
uses the control flow graph API and these blocks are not part of it.</p>

<p>Due to limitations of the control flow graph API, this check does not
properly parse <code>else if</code> nodes properly when the condition is
a GNU statement expression.</p>
''',
        'CPP_D044': '''\
<p>An identifier declared to be an object or type shall be defined in a block
that minimizes its visibility.</p>

<p><b>Rationale</b></p>

<p>Defining variables in the minimum block scope possible reduces the visibility
of those variables and therefore reduces the possibility that these identifiers
will be used accidentally. A corollary of this is that global objects (including
singleton function objects) shall be used in more than one function.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( int32_t k )
{
    int32_t j = k * k; // Non-compliant
    {
        int32_t i = j; // Compliant
        std::cout &lt;&lt; i &lt;&lt; j &lt;&lt; std::endl;
    }
}
</code></pre>

<p>In the above example, the definition of <code>j</code> could be moved into
the same block as <code>i</code>, reducing the possibility that <code>j</code>
will be incorrectly used later in <code>f</code>.</p>

<p><b>Developer's Notes</b></p>

<p>Declarations in scopes just above loops are allowed. This is because counters
or accumulators may be necessary in many loops. To be more strict with these
declarations, it requires human knowledge.</p>

<p>Currently, anonymous blocks (scope blocks, which are used for scoping and not
control flow) are not supported for this check. This is because this check
uses the control flow graph API and these blocks are not part of it.</p>

<p>Due to limitations of the control flow graph API, this check does not
properly parse <code>else if</code> nodes properly when the condition is
a GNU statement expression.</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    checkGlobals(check, file)
    checkLocals(check, file)


def checkGlobals(check, file):
    for ref in file.filerefs('Declare, Define', 'Global Object'):
        checkGlobalNonStatic(check, file, ref)
        checkGlobalOneFunction(check, file, ref)


def checkGlobalNonStatic(check, file, ref):
    ent = ref.ent()

    # Skip if static or extern
    if ent.kind().check('Static, Unresolved'):
        return

    # Skip if used in multiple files
    useRef = None
    useFiles = set()
    for useRef in ent.refs('Modifyby, Setby, Useby'):
        useFile = useRef.file()
        if useFile not in useFiles:
            useFiles.add(useFile)
            if len(useFiles) > 1:
                return

    # Skip if not used in any file
    if not useRef:
        return

    # If the using file is the declaration file, make the violation at the declaration
    if ref.file() == useRef.file():
        useRef = ref

    check.violation(ent, file, useRef.line(), useRef.column(), ERR1)


def checkGlobalOneFunction(check, file, ref):
    ent = ref.ent()

    # Skip if used in 0 or 2+ functions
    users = ent.ents('Modifyby, Setby, Useby', 'Function')
    if len(users) != 1:
        return

    check.violation(ent, file, ref.line(), ref.column(), ERR2, users[0])


def checkLocals(check, file):
    lexer = None

    for define in file.filerefs('Declare, Define', '~Global Object'):
        ent = define.ent()

        # Skip if no control flow graph
        cfg = define.scope().control_flow_graph()
        if not cfg:
            continue

        otherRefs = ent.refs('Modifyby, Setby ~Init, Useby', 'Function')
        allNodes = getNodesContainingRefs(file, lexer, ent, cfg, otherRefs + [define])
        otherNodes = getNodesContainingRefs(file, lexer, ent, cfg, otherRefs)

        # Skip if the non-definition references aren't in a node
        if not otherNodes:
            continue

        # Skip if the lower node of both is the same
        if allNodes and otherNodes and allNodes[-1] == otherNodes[-1]:
            continue

        # Skip if the first lower node is a loop
        firstNodeIsLoop = False
        allNodesSet = set(allNodes)
        for node in otherNodes:
            # Break at the first lower node
            if node not in allNodesSet:
                firstNodeIsLoop = node.kind() in LOOP_NODES
                break
        if firstNodeIsLoop:
            continue

        # Get the non-definition node with the lowest non-loop scope
        for i in reversed(range(len(otherNodes))):
            node = otherNodes[i]
            if node.kind() not in LOOP_NODES:
                otherNodeLowest = node
                break

        string = nodeToString(otherNodeLowest)
        check.violation(ent, file, define.line(), define.column(), ERR3, string)


def getNodesContainingRefs(file, lexer, function, cfg, refs):
    if not refs:
        return []

    nodesContainingRefs = []

    # Dictionaries for doing a node lookup that's not available in the API
    elseToParent = dict()
    caseToEnd = dict()

    for node in cfg.nodes():
        # if: remember it for the 'else' node to find it
        if node.kind() == 'if':
            lastChild = node.children()[1]
            if lastChild.kind() == 'else':
                elseToParent[lastChild] = node

        # switch: remember the next case/default/end-switch of each case/default
        elif node.kind() == 'switch':
            children = node.children() + [node.end_node()]
            for i in range(len(children) - 1):
                caseToEnd[children[i]] = children[i + 1]

        # Get '}' node or equivalent
        endNode = getUsefulEndNode(file, lexer, node, elseToParent, caseToEnd)

        # Skip if there is no known end node
        if not endNode:
            continue

        # If the given references are in this node
        refsAllInNode = True
        for ref in refs:
            if not refBetweenNodesNonInclusive(node, ref, endNode):
                refsAllInNode = False
                break

        # If all references are in the node, then remember it
        if refsAllInNode:
            nodesContainingRefs.append(node)

    return nodesContainingRefs


def getUsefulEndNode(file, lexer, node, elseToParent, caseToEnd):
    # for/do/while: simply get the end
    if node.kind() in LOOP_NODES:
        return node.end_node()

    # else (if)
    elif node.kind() == 'else':
        # else if: get the 'no' child of the 'if' node
        if isElseIf(file, lexer, node):
            childIfNode = node.children()[0]
            # Make sure the node is the correct kind, because of CFG bugs
            if childIfNode.kind() == 'if':
                return childIfNode.children()[1]
        # else if: get the end of the previous 'if' node from elseToParent
        else:
            parentIfNode = elseToParent[node]
            return parentIfNode.end_node()

    # if: get the 'no' child
    elif node.kind() == 'if':
        return node.children()[1]

    # case/default: get next case/default/end from getNodesContainingRefs
    elif node.kind() in {'switch-case', 'switch-default'}:
        return caseToEnd[node]


def isElseIf(file, lexer, node):
    # Fix for fuzzy parser when the 'else' node is missing a location
    if node.line_begin() == None:
        return False

    # Get the else lexeme
    if not lexer:
        lexer = file.lexer(False)
    lex = lexer.lexeme(node.line_begin(), node.column_begin())

    # Match 'else'
    if not lex or lex.text() != 'else':
        return False

    # Match 'if'
    lex = lex.next(True, True)
    if not lex or lex.text() != 'if':
        return False

    return True


def nodeToString(node):
    return f'\'{node.kind()}\' starting at line {node.line_begin()}'


def refBetweenNodesNonInclusive(node1, ref, node2):
    # Make sure both nodes have position information
    if node1.line_begin() == None or node2.line_begin() == None:
        return False

    # Make sure the order is node1, ref
    if ref.line() < node1.line_end():
        return False
    if ref.line() == node1.line_end() and ref.column() <= node1.column_end():
        return False

    # Make sure the order is ref, node2
    if ref.line() > node2.line_begin():
        return False
    if ref.line() == node2.line_begin() and ref.column() >= node2.column_begin():
        return False

    return True
