# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2025-09-30


import re


ERR1 = 'Array size is not stated explicitly or implicitly'


def ids():
    return ('MISRA04_8.12', 'MISRA08_3-1-3', 'CPP_D003')


def name(id):
    return {
        'MISRA04_8.12': '''Published Standards/MISRA-C 2004/\
8.12 Array Size Missing''',
        'MISRA08_3-1-3': '''Published Standards/MISRA-C++ 2008/\
3-1-3 Array Size Missing''',
        'CPP_D003': '''All Checks/Language Specific/C and C++/Declarations and Definitions/\
Array Size Missing''',
    }[id]


def tags(id):
    return {
        'MISRA04_8.12': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2004',
            'Category: Required',
        ],
        'MISRA08_3-1-3': [
            'Declarations and Definitions',
            'Language: C',
            'Standard: MISRA C++ 2008',
            'Category: Required',
        ],
        'CPP_D003': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    match id:
        case 'MISRA04_8.12': return '''\
<p><b>Title</b></p>

<p>When an array is declared with external linkage, its size shall be stated
explicitly or defined implicitly by initialisation.</p>

<p><b>Rationale</b></p>

<p>Although it is possible to declare an array of incomplete type and access its
elements, it is safer to do so when the size of the array can be explicitly
determined.</p>

<p><b>Example</b></p>
<pre><code language="C++">\
int array1[ 10 ];              /* Compliant */
extern int array2[ ];          /* Not compliant */
int array2[ ] = { 0, 10, 15 }; /* Compliant */\
</code></pre>
'''
        case 'MISRA08_3-1-3' | 'CPP_D003': return '''\
<p><b>Title</b></p>

<p>Although it is possible to declare an array of incomplete type and access
its elements, it is safer to do so when the size of the array can be explicitly
determined.</p>

<p><b>Example</b></p>

<pre><code language="C++">\
       int32_t array1[ 10 ];              // Compliant
extern int32_t array2[ ];                 // Non-compliant
       int32_t array3[ ] = { 0, 10, 15 }; // Compliant
extern int32_t array4[ 42 ];              // Compliant\
</code></pre>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Declare'):
        ent = ref.ent()

        t = ent.type()
        if not t or '[]' not in t:
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1)
