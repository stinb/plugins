#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Array %1 size is not stated explicitly or implicitly.';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use

sub checkID { return "CPP_D003";}

sub name { return "All Checks\\Language Specific\\C and C++\\Declarations and Definitions\\When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description { return "When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
Although it is possible to declare an array of incomplete type and access its elements, it is safer to
do so when the size of the array can be explicitly determined.</p>
<br>
<p><b>Example</b></p><pre><code language="C++">  int array1[ 10 ]; // Compliant
  extern int array2[ ]; // Non-compliant
  int array3[ ] = { 0, 10, 15 }; // Compliant
  extern int array4[ 42 ]; // Compliant
</code></pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # Pull everything that is declared in our file
  my @declares = $file->filerefs("Declare");
  
  # Loop through each declaration and make sure all arrays have a defined size.
  foreach my $dec(@declares) {
	throwError($check, $dec->ent,$dec->file,$dec->line,$dec->column,ERR1,$dec->ent->name) if $dec->ent->type =~ /\[\]/;
  }
}


















