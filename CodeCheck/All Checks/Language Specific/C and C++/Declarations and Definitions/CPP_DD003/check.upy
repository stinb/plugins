# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 9-29-2020

# library for using regular expressions
import re

def ids():
    return ('CPP_DD003')

def name(id):
    return {
        'CPP_DD003': '''All Checks/Language Specific/C and C++/Declarations and Definitions/\
There shall be a function prototype for all functions'''
    }[id]


def tags(id):
    return {
        'CPP_DD003': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],

    }.get(id)

def detailed_description(id):
    return {
        'CPP_DD003': """\
<p>Implicit declaration of functions is not allowed -  - every function must be
explicitly declared before it can be called. In C90, if a function is called
without an explicit prototype, the compiler provides an implicit declaration.
To conform to this C Standard, an explicit prototype must be made for every
function before invoking it. </p>"""
    }[id]

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexer = None

    for ref in file.filerefs('define', 'function ~unresolved ~member ~lambda'):
        if check.is_aborted():
            return

        ent = ref.ent()

        stdLibFunc = re.search(r"^__", ent.name())

        # pull a list of declarations for the entity
        declarations = ent.refs('declare, declarein')
        # find the number of declarations for the entity
        decLength = len(declarations)

        # skip if it is a main function or a standard library function
        if ent.name() == 'main':
            #check.violation(ent, file, ref.line(), ref.column(), 'definition of %1 function', numLines)
            pass

        elif (stdLibFunc):
            #check.violation(ent, file, ref.line(), ref.column(), 'definition of %1 function', numLines)
            pass

        elif (decLength < 1):
            violation = check.violation(ent, file, ref.line(), ref.column(), 'Function "%1" has no associated prototype', ent)
            if not lexer:
                lexer = file.lexer()
            lexeme = lexer.lexeme(ref.line(), ref.column())
            while lexeme.previous(ignore_whitespace=True, ignore_comments=True) and not re.match(r';|}', lexeme.previous(ignore_comments=True, ignore_whitespace=True).text()):
                lexeme = lexeme.previous(ignore_whitespace=True, ignore_comments=True)

            if ref.ent().type() and ref.ent().longname() and ref.ent().parameters():
                violation.add_fixit_hint(lexeme.line_begin(), 1, lexeme.line_begin(), 1, ref.ent().type() + ' ' + ref.ent().longname() + '(' + re.sub(r',', ', ', ref.ent().parameters()) + ');\n')
