# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2025-09-30


import re


ERR1 = 'Lowercase character "L" used in literal suffix: %1'


def ids():
    return ('MISRA12_7.3', 'MISRA23_7.3', 'CPP_D020')


def name(id):
    return {
        'MISRA12_7.3': '''Published Standards/MISRA C 2012/\
7.3 Lowercase L Suffix''',
        'MISRA23_7.3': '''Published Standards/MISRA C 2023/\
7.3 Lowercase L Suffix''',
        'CPP_D020': '''All Checks/Language Specific/C and C++/Declarations and Definitions/\
Lowercase L Suffix''',
    }[id]


def tags(id):
    return {
        'MISRA12_7.3': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
        ],
        'MISRA23_7.3': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
        ],
        'CPP_D020': [
            'Declarations and Definitions',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description(id):
    return '''\
<p><b>Title</b></p>

<p>The lowercase character "l" shall not be used in a literal suffix.</p>

<p><b>Rationale</b></p>

<p>Using the uppercase suffix "L" removes the potential ambiguity between "1"
(digit 1) and "l" (letter "el") when declaring literals.</p>

<p><b>Example</b></p>

<p><i>Note</i>: the examples containing the <i>long long</i> suffix are
applicable only to C99.</p>

<pre><code language="C++">\
const int64_t    a = 0L;
const int64_t    b = 0l;    /* Non-compliant */
const uint64_t   c = 0Lu;
const uint64_t   d = 0lU;   /* Non-compliant */
const uint64_t   e = 0ULL;
const uint64_t   f = 0Ull;  /* Non-compliant */
const int128_t   g = 0LL;
const int128_t   h = 0ll;   /* Non-compliant */
const float128_t m = 1.2L;
const float128_t n = 2.4l;  /* Non-compliant */\
</code></pre>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for lex in file.lexer(False):
        # Next unless we are looking at a literal that is not a string
        if lex.token() != 'Literal':
            continue
        text = lex.text()
        if re.search(r'[\'"]', text):
            continue

        # Remove the number and keep the suffix
        suffix = re.sub(r'(^0[0-8]+)|(^0x[0-9a-fA-F]+)|(^[1-9][0-9]*\.[0-9]+)|(^[1-9][0-9]*)', '', text)
        if not suffix:
            continue
        suffix = suffix[0]

        if 'l' not in text:
            continue

        check.violation(file, file, lex.line_begin(), lex.column_begin(), ERR1, text)
