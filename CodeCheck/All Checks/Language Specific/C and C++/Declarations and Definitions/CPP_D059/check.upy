import re

ERR1 = 'Friend declaration shall not be used.'
COMPARISON_OPERATORS = {"operator==", "operator!=",
                        "operator<", "operator<=", "operator>", "operator>="}

# The ID for the check
def ids():
    return ('A11-3-1', 'CPP_D059')


# The short name of the check
def name(id):
    return {
        'A11-3-1': 'Published Standards/AUTOSAR/Friend declarations shall not be used.',
        'CPP_D059': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Friend declarations shall not be used.',
    }[id]





def tags(id):
    return {
        'A11-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_D059': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>Friend declarations reduce encapsulation and result in code that is more difficult to
maintain.</p>
<p><b>Exception</b></p>
<p>It is allowed to declare comparison operators as friend functions, see A13-5-5.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A11-3-1.cpp 325916 2018-07-13 12:26:22Z christof.meerwald $
2 class A
3 {
4 public:
5 A& operator+=(A const& oth);
6 friend A const operator+(A const& lhs, A const& rhs); // Non-compliant
7 };
8 class B
9 {
10 public:
11 B& operator+=(B const& oth);
12 friend bool operator ==(B const& lhs, B const& rhs) // Compliant by
exception
13 {
14 // Implementation
15 }
16 };
17
18 B const operator+(B const& lhs, B const& rhs) // Compliant
19 {
20 // Implementation
21 }
</code></pre>
<p><b>See also</b></p>
<p>• JSF December 2005 [8]: AV Rule 70 A class will have friends only when a function
or object requires access to the private elements of the class, but is unable to be
a member of the class for logical or efficiency reasons.</p>
<p>• HIC++ v4.0 [9]: 11.2.1 Do not use friend declarations.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"friend", file.contents()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    for lex in lexer:
        if lex.text() == "friend" and lex.token() == "Keyword":
            line_number = lex.line_begin()
            lex_line = "".join(lex_line.text()
                               for lex_line in lexer.lexemes(line_number, line_number))

            if not any(operator in lex_line for operator in COMPARISON_OPERATORS):
                check.violation(lex.ent(), file, line_number,
                                lex.column_begin(), ERR1)
