import re


ERR1 = 'Declaration or definition is not compatible with another declaration or definition in file %1 at %2:%3'


scanned_ents = []


def ids():
    return ('MISRA04_8.3', 'MISRA12_8.3', 'CPP_DD014', 'MISRA23_8.3')


def name(id):
    return {
        'MISRA04_8.3': '''Published Standards/MISRA-C 2004/\
8.3 For each function parameter the type given in the declaration and\
 definition shall be identical, and the return types shall also be identical''',
        'MISRA12_8.3': '''Published Standards/MISRA C 2012/\
8.3 All declarations of an object or function shall use the same names and type\
 qualifiers''',
        'CPP_DD014': '''All Checks/Language Specific/C and C++/Declarations and Definitions/\
Use the same parameter names and type qualifiers for all declarations and definitions''',
        'MISRA23_8.3': '''Published Standards/MISRA C 2023/\
8.3 All declarations of an object or function shall use the same names and type\
 qualifiers''',
    }[id]


def tags(id):
    return {
        'MISRA12_8.3': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'MISRA04_8.3': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'CPP_DD014': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
        'MISRA23_8.3': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA04_8.3': '''\
<p>
[Undefined 24; Koenig 59-62]
</p>

<p>
The types of the parameters and return values in the prototype and the
definition must match. This requires identical types including <i>typedef</i>
names and qualifiers, and not just identical base types.
</p>

<p><b>Developer's Notes</b></p>

<p>
Due to complexity, declarations with macros or multi-line object declarations
are not compared.
</p>
''',
        'MISRA12_8.3': '''\
<p><b>Amplification</b></p>

<p>
Storage class specifiers are not included within the scope of this rule.
</p>

<p><b>Rationale</b></p>

<p>
Using types and qualifiers consistently across declarations of the same object
or function encourages stronger typing.
</p>

<p>
Specifying parameter names in function prototypes allows the function definition
to be checked for interface consistency with its declarations.
</p>

<p><b>Exception</b></p>

<p>
Compatible versions of the same basic type may be used interchangeably. For
example, <i>int</i>, <i>signed</i> and <i>signed int</i> are all equivalent.
</p>

<p><b>Example</b></p>

<pre><code language="C++">extern void f ( signed int );
       void f (        int );   /* Compliant     - Exception */
extern void g ( int * const );
       void g ( int *       );  /* Non-compliant - type qualifiers */
</code></pre>

<p>
<i>Note</i>: all the above are not compliant with Dir 4.6.
</p>

<pre><code language="C++">extern int16_t func ( int16_t num, int16_t den );

/* Non-compliant - parameter names do not match */
int16_t func ( int16_t den, int16_t num )
{
  return num / den;
}
</code></pre>

<p>
In this example the definition of <code>area</code> uses a different type name
for the parameter <code>h</code> from that used in the declaration. This does
not comply with the rule even though <code>width_t</code> and
<code>height_t</code> are the same basic type.
</p>

<pre><code language="C++">typedef uint16_t width_t;
typedef uint16_t height_t;
typedef uint32_t area_t;

extern area_t area ( width_t w, height_t h );

area_t area ( width_t w, width_t h )
{
  return ( area_t ) w * h;
}
</code></pre>

<p>
This rule does not require that a function pointer declaration use the same
names as a function declaration. The following example is therefore compliant.
</p>

<pre><code language="C++">extern void f1 ( int16_t x );
extern void f2 ( int16_t y );

void f ( bool_t b )
{
  void ( *fp1 ) ( int16_t z ) = b ? f1 : f2;
}
</code></pre>

<p><b>See also</b></p>

<p>
Rule 8.4
</p>

<p><b>Developer's Notes</b></p>

<p>
Due to complexity, declarations with macros or multi-line object declarations
are not compared.
</p>
''',
        'CPP_DD014': '''\
<p><b>Amplification</b></p>

<p>
Storage class specifiers are not included within the scope of this rule.
</p>

<p><b>Rationale</b></p>

<p>
Using types and qualifiers consistently across declarations of the same object
or function encourages stronger typing.
</p>

<p>
Specifying parameter names in function prototypes allows the function definition
to be checked for interface consistency with its declarations.
</p>

<p><b>Exception</b></p>

<p>
Compatible versions of the same basic type may be used interchangeably. For
example, <i>int</i>, <i>signed</i> and <i>signed int</i> are all equivalent.
</p>

<p><b>Example</b></p>

<pre><code language="C++">extern void f ( signed int );
       void f (        int );   /* Compliant     - Exception */
extern void g ( int * const );
       void g ( int *       );  /* Non-compliant - type qualifiers */
</code></pre>

<pre><code language="C++">extern int16_t func ( int16_t num, int16_t den );

/* Non-compliant - parameter names do not match */
int16_t func ( int16_t den, int16_t num )
{
  return num / den;
}
</code></pre>

<p>
In this example the definition of <code>area</code> uses a different type name
for the parameter <code>h</code> from that used in the declaration. This does
not comply with the rule even though <code>width_t</code> and
<code>height_t</code> are the same basic type.
</p>

<pre><code language="C++">typedef uint16_t width_t;
typedef uint16_t height_t;
typedef uint32_t area_t;

extern area_t area ( width_t w, height_t h );

area_t area ( width_t w, width_t h )
{
  return ( area_t ) w * h;
"""  """}
</code></pre>

<p>
This rule does not require that a function pointer declaration use the same
names as a function declaration. The following example is therefore compliant.
</p>

<pre><code language="C++">extern void f1 ( int16_t x );
extern void f2 ( int16_t y );

void f ( bool_t b )
{
  void ( *fp1 ) ( int16_t z ) = b ? f1 : f2;
}
</code></pre>

<p><b>Developer's Notes</b></p>

<p>
Due to complexity, declarations with macros or multi-line object declarations
are not compared.
</p>
''',
        'MISRA23_8.3': '''\
<p><b>Amplification</b></p>

<p>
Storage class specifiers are not included within the scope of this rule.
</p>

<p><b>Rationale</b></p>

<p>
Using types and qualifiers consistently across declarations of the same object
or function encourages stronger typing.
</p>

<p>
Specifying parameter names in function prototypes allows the function definition
to be checked for interface consistency with its declarations.
</p>

<p><b>Exception</b></p>

<p>
1. Compatible versions of the same basic type may be used interchangeably. For
example, <i>int</i>, <i>signed</i> and <i>signed int</i> are all equivalent.
</p>

<p>
2. The naming requirements of this rule do not apply to unnamed function parameters. This is
covered by Rule 8.2.
</p>

<p><b>Example</b></p>

<pre><code language="C++">extern void f ( signed int a );
void f ( int a ); /* Compliant - Exception 1 */
extern void g ( signed int b );
extern void g ( signed int ); /* Compliant - Exception 2 */
extern void h ( int * const c );
extern void h ( int * c ); /* Non-compliant - mis-matched type qualifiers */
extern void j ( int d );
extern void j ( int e ); /* Non-compliant - mis-matched parameter names */

</code></pre>

<p>
<i>Note</i>: all the above are not compliant with Dir 4.6; example g() is also not compliant with Rule 8.2.
</p>

<pre><code language="C++">extern int16_t func ( int16_t num, int16_t den );

/* Non-compliant - parameter names do not match */
int16_t func ( int16_t den, int16_t num )
{
  return num / den;
}
</code></pre>

<p>
In this example the definition of <code>area</code> uses a different type name
for the parameter <code>h</code> from that used in the declaration. This does
not comply with the rule even though <code>width_t</code> and
<code>height_t</code> are the same basic type.
</p>

<pre><code language="C++">typedef uint16_t width_t;
typedef uint16_t height_t;
typedef uint32_t area_t;

extern area_t area ( width_t w, height_t h );

area_t area ( width_t w, width_t h )
{
  return ( area_t ) w * h;
}
</code></pre>

<p>
This rule does not require that a function pointer declaration use the same
names as a function declaration. The following example is therefore compliant.
</p>

<pre><code language="C++">extern void f1 ( int16_t x );
extern void f2 ( int16_t y );

void f ( bool_t b )
{
  void ( *fp1 ) ( int16_t z ) = b ? f1 : f2;
}
</code></pre>

<p><b>See also</b></p>

<p>
Rule 8.2, Rule 8.4
</p>

<p><b>Developer's Notes</b></p>

<p>
Due to complexity, declarations with macros or multi-line object declarations
are not compared.
</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    simplify = check.id() != 'MISRA04_8.3'
    unnamed = check.id() == 'MISRA23_8.3'

    check.options().checkbox('simplify', 'Use compatible basic types interchangeably (example: int = signed = signed int)', simplify)
    check.options().checkbox('unnamed', 'Do not apply naming requirements to unnamed function parameters', unnamed)


def check(check, file):
    simp_types = check.options().lookup('simplify')
    accept_unnamed = check.options().lookup('unnamed')
    
    for func_ref in file.filerefs("Define, Declare ~Implicit", "Function ~Macro ~Lambda ~Member", True):
        if func_ref.ent().id() in scanned_ents:
            continue
        
        scanned_ents.append(func_ref.ent().id())
        redef_refs = func_ref.ent().refs("Definein, Declarein ~Using")
        flagged = False

        if len(redef_refs) <= 1:
            continue

        func_param = get_param(func_ref, func_ref.ent().name(), accept_unnamed)

        if func_param is None:
            continue

        for redef_ref in redef_refs:
            redef_param = get_param(redef_ref, func_ref.ent().name(), accept_unnamed)

            if redef_param is None:
                continue

            if not is_param_identical(func_param, redef_param, simp_types, accept_unnamed):
                check.violation(redef_ref.scope(), redef_ref.file(), redef_ref.line(), redef_ref.column(), ERR1, func_ref.file(), func_ref.line(), func_ref.column())
                flagged = redef_ref

        if flagged:
            check.violation(func_ref.ent(), file, func_ref.line(), func_ref.column(), ERR1, flagged.file(), flagged.line(), flagged.column())

    for obj_ref in file.filerefs("Define, Declare ~Implicit", "Global Object", True):
        if obj_ref.ent().id() in scanned_ents:
            continue

        scanned_ents.append(obj_ref.ent().id())
        redef_refs = obj_ref.ent().refs("Definein, Declarein ~Using")
        flagged = None

        if len(redef_refs) <= 1:
            continue

        obj_spec = get_spec(obj_ref, obj_ref.ent().name())

        if obj_spec is None:
            continue

        for redef_ref in redef_refs:
            redef_spec = get_spec(redef_ref, obj_ref.ent().name())

            if redef_spec is None:
                continue

            if not is_spec_identical(obj_spec, redef_spec, simp_types):
                check.violation(redef_ref.scope(), redef_ref.file(), redef_ref.line(), redef_ref.column(), ERR1, obj_ref.file(), obj_ref.line(), obj_ref.column())
                flagged = redef_ref

        if flagged:
            check.violation(obj_ref.ent(), file, obj_ref.line(), obj_ref.column(), ERR1, flagged.file(), flagged.line(), flagged.column())


def get_spec(ref, ent_name):
    lex = ref.file().lexer(lookup_ents=False).lexeme(ref.line(), ref.column())
    spec = []

    # if Macro
    if lex.text() != ent_name:
        return None
    
    while lex and (lex.line_begin() == ref.line()) and (lex.text() != "extern"):
        if lex.text() == ",":
            while lex.token() != "Whitespace":
                lex = lex.previous()
            
            continue

        spec.insert(0, lex.text())
        lex = lex.previous(ignore_comments=True)
        
    return spec


def is_spec_identical(spec1, spec2, simplify):
    spec1 = "".join(spec1) if spec1 is not None else ""
    spec2 = "".join(spec2) if spec2 is not None else ""

    if simplify:        
        spec1 = simplifyTypes(spec1)
        spec2 = simplifyTypes(spec2)    

    spec1 = spec1.replace(" ", "")
    spec2 = spec2.replace(" ", "")

    if spec1 == spec2:
        return True

    return False


def get_param(ref, ent_name, accept_unnamed):
    lex = ref.file().lexer().lexeme(ref.line(), ref.column())
    on_param = 0
    param = []

    # if Macro or pointer function
    if (lex.text() != ent_name):
        return None
    elif (lex.next(True, True).text() != "("):
        return []

    prev_append = None

    while lex:
        if lex.text() == "(":
            on_param += 1
        elif lex.text() == ")":
            on_param -= 1
        
            if not on_param:
                if accept_unnamed and prev_append and ((prev_append.token() != "Identifier") or (prev_append.ent() and prev_append.ent().kind().check("Type"))):
                    param.append("[unnamed]")

                break
        elif lex.text() == "::":
            if param:
                param.pop()
        elif (on_param == 1) and lex.text() == "=":
            while lex.text() not in [",", ")"]:
                lex = lex.next(ignore_comments=True)
            continue
        elif (on_param == 1) and (lex.text() == ",") and accept_unnamed and prev_append and ((prev_append.token() != "Identifier") or (prev_append.ent() and prev_append.ent().kind().check("Type"))):
            param.append("[unnamed]")
            param.append(lex.text())
            prev_append = lex
        elif (on_param == 1) and lex.token() in ["Identifier", "Keyword", "Operator"]:
            param.append(lex.text())
            prev_append = lex

        lex = lex.next(ignore_comments=True)

    return param


def is_param_identical(param1, param2, simplify, accept_unnamed):
    if accept_unnamed and param1 and param2 and ("[unnamed]" in param1 or "[unnamed]" in param2) and (len(param1) == len(param2)):
        new_param1 = []
        new_param2 = []

        for i, (p1, p2) in enumerate(zip(param1, param2)):
            if "[unnamed]" in (p1, p2):
                continue

            new_param1.append(p1)
            new_param2.append(p2)

        param1 = new_param1
        param2 = new_param2

    if simplify:
        return simplify_param(param1) == simplify_param(param2)  

    return param1 == param2


def simplify_param(param):
    if param is None:
        return []
    
    param = " ".join(param)
    param = param.split(",")
    new_param = []

    for p in param:
        new_param.append(simplifyTypes(p))

    return new_param


def simplifyTypes(string):
    # Convert unsigned long longs
    string = re.sub(r'\bunsigned\slong\slong\sint\b', 'ulli', string)
    string = re.sub(r'\bunsigned\slong\slong\b', 'ulli', string)

    # Convert long longs
    string = re.sub(r'\bsigned\slong\slong\sint\b', 'slli', string)
    string = re.sub(r'\bsigned\slong\slong\b', 'slli', string)
    string = re.sub(r'\blong\slong\sint\b', 'slli', string)
    string = re.sub(r'\blong\slong\b', 'slli', string)

    # Convert unsigned longs
    string = re.sub(r'\bunsigned\slong\sint\b', 'uli', string)
    string = re.sub(r'\bunsigned\slong\b', 'uli', string)

    # Convert longs
    string = re.sub(r'\bsigned\slong\sint\b', 'sli', string)
    string = re.sub(r'\bsigned\slong\b', 'sli', string)
    string = re.sub(r'\blong\sint\b', 'sli', string)
    string = re.sub(r'\blong\b', 'sli', string)

    # Convert unsigned shorts
    string = re.sub(r'\bunsigned\sshort\sint\b', 'usi', string)
    string = re.sub(r'\bunsigned\sshort\b', 'usi', string)

    # Convert shorts
    string = re.sub(r'\bsigned\sshort\sint\b', 'ssi', string)
    string = re.sub(r'\bsigned\sshort\b', 'ssi', string)
    string = re.sub(r'\bshort\sint\b', 'ssi', string)
    string = re.sub(r'\bshort\b', 'ssi', string)

    # Convert unsigned int
    string = re.sub(r'\bunsigned\sint\b', 'ui', string)
    string = re.sub(r'\bunsigned\b', 'ui', string)

    # Convert int
    string = re.sub(r'\bsigned\sint\b', 'si', string)
    string = re.sub(r'\bint\b', 'si', string)
    string = re.sub(r'\bsigned\b', 'si', string)

    # Remove all std::
    string = re.sub(r'\bstd::\b', '', string)

    return string