# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2024-07-23


import re


ERR1 = 'Inline function should be static'


def ids():
    return ('MISRA12_8.10', 'MISRA23_8.10', 'CPP_D017')


def name(id):
    return {
        'MISRA12_8.10': '''Published Standards/MISRA C 2012/\
8.10 Non-static Inline Functions''',
        'MISRA23_8.10': '''Published Standards/MISRA C 2023/\
8.10 Non-static Inline Functions''',
        'CPP_D017': '''All Checks/Language Specific/C and C++/Declarations and Definitions/\
Non-static Inline Functions''',
    }[id]


def tags(id):
    return {
        'MISRA12_8.10': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Functions',
            'Declarations and Definitions',
        ],
        'MISRA23_8.10': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Functions',
            'Declarations and Definitions',
        ],
        'CPP_D017': [
            'Language: C',
            'Language: C++',
            'Functions',
            'Declarations and Definitions',
        ],
    }.get(id)


def detailed_description(id):
    if id == 'CPP_D017':
        return'''\
<p><b>Title</b></p>
<p>An <i>inline function</i> shall be declared with the static storage
class.</p>

<p><b>Rationale</b></p>
<p>If an <i>inline function</i> is declared with external linkage but not
defined in the same translation unit, the behaviour is undefined.</p>

<p>A call to an <i>inline function</i> declared with external linkage may call
the external definition of the function, or it may use the inline definition.
Although this should not affect the behaviour of the called function, it might
affect execution timing and therefore have an impact on a real-time program.</p>

<p><i>Note</i>: an <i>inline function</i> can be made available to several
translation units by placing its definition in a <i>header file</i>.</p>
'''
    else:
        return '''\
<p><b>Title</b></p>
<p>An <i>inline function</i> shall be declared with the static storage
class.</p>

<p><b>Rationale</b></p>
<p>If an <i>inline function</i> is declared with external linkage but not
defined in the same translation unit, the behaviour is undefined.</p>

<p>A call to an <i>inline function</i> declared with external linkage may call
the external definition of the function, or it may use the inline definition.
Although this should not affect the behaviour of the called function, it might
affect execution timing and therefore have an impact on a real-time program.</p>

<p><i>Note</i>: an <i>inline function</i> can be made available to several
translation units by placing its definition in a <i>header file</i>.</p>

<p><b>See also</b></p>
<p>Rule 5.9</p>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('declare', 'Ignore function declarations', False)


def check(check, file):
    if check.options().lookup('declare'):
        refKind = 'Define'
    else:
        refKind = 'Declare, Define'

    for ref in file.filerefs(refKind, 'Function ~Member ~Static ~Template ~Unknown ~Unnamed ~Unresolved'):
        ent = ref.ent()

        # Only inline functions
        if not ent.freetext('Inline'):
            continue

        # Skip operator overloads
        if re.search(r'^operator[^\w]', ent.name()):
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1)
