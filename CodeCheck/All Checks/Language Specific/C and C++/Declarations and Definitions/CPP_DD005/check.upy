# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-30-2020

import re

def id():
    return 'CPP_DD005'

def name():
    return """\
All Checks/Language Specific/C and C++/Declarations and Definitions/Any defined \
constants that are used as argument or return variables shall be placed in an \
include file"""


def tags(id):
    return {
        'CPP_DD005': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],

    }.get(id)

def description():
    return 'Any defined constants that are used as argument or return \
variables shall be placed in an include file.'

def detailed_description():
    return """\
<p>Any defined constants that are used as argument or return variables shall be 
placed in an include file. These constants include error/status values and 
function control codes. As a corollary to this, it is important to document the 
source of any constants that are passed by an object but are actually defined
by other objects or functions.
</p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
	# skip code files that are included by another
	if not file.refs('includeby'):

		# pull all unique global/local objects and parameters defined in the file
		obj_refs = file.filerefs('define', 'object, parameter', True)

		for obj in obj_refs:
			if not obj.ent().type():
				continue
			# proceed if the object is of const type
			is_const = re.search(r'const', obj.ent().type())

			# flag const used in return
			if is_const and obj.ent().refs('c useby return'):
				return_refs = obj.ent().refs('c useby return')
				for return_ref in return_refs:
					check.violation(obj.ent(), file, return_ref.line(), return_ref.column(), "Violation: const '%1' used as a return variable, place in an include file", obj.ent())

			# flag const used as a parameter/argument
			if is_const and obj.ent().kindname() == "Parameter":
				check.violation(obj.ent(), file, obj.line(), obj.column(), "Violation: const '%1' used as an argument, place in an include file", obj.ent())
