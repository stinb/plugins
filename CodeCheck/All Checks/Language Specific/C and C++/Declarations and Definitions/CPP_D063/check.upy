ERR1 = 'Data members shall be initialized using NSDMI.'


# The ID for the check
def ids():
    return ('A12-1-3', 'CPP_D063')


# The short name of the check
def name(id):
    return {
        'A12-1-3': 'Published Standards/AUTOSAR/If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead.',
        'CPP_D063': 'All Checks/Language Specific/C and C++/Declarations and Definitions/If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead.',
    }[id]





def tags(id):
    return {
        'A12-1-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_D063': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>If all user-defined constructors of a class initialize data members with
constant values that are the same across all constructors, then data
members shall be initialized using NSDMI instead.</p>
<p><b>Rationale</b></p>
<p>Using NSDMI lets the compiler to generate the function that can be more efficient
than a user-defined constructor that initializes data member variables with pre-defined
constant values.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A12-1-3.cpp 291949 2017-10-19 21:26:22Z michal.szczepankiewicz $
2 #include &lt;cstdint&gt;
3 #include &lt;string&gt;
4 class A
5 {
6 public:
7 A() : x(0), y(0.0F), str() // Non-compliant
8 {
9 }
10 // ...
11
12 private:
13 std::int32_t x;
14 float y;
15 std::string str;
16 };
17 class B
18 {
19 public:
20 // ...
21
22 private:
23 std::int32_t x = 0; // Compliant
24 float y = 0.0F; // Compliant
25 std::string str = ""; // Compliant
26 };
27 class C
28 {
29 public:
30 C() : C(0, 0.0F, decltype(str)()) // Compliant
31 {
32 }
33 C(std::int32_t i, float f, std::string s) : x(i), y(f), str(s) // Compliant
34 {
35 }
36 // ...
37
38 private:
39 std::int32_t x =
40 0; // Non-compliant - there's a constructor that initializes C
41 // class with user input
42 float y = 0.0F; // Non-compliant - there's a constructor that initializes C
43 // class with user input
44 std::string str = ""; // Non-compliant - there's a constructor that
45 // initializes C class with user input
46 };
</code></pre>
<p><b>See also</b></p>
<p>â€¢ C++ Core Guidelines [11]: C.45: Don't define a default constructor that only
initializes data members; use in-class member initializers instead.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    def check_violation(_ref):
        check.violation(_ref.ent(), _ref.file(),
                        _ref.line(), _ref.column(), ERR1)

    for class_ref in file.filerefs("Define", "Class"):
        member_refs = class_ref.ent().refs("Define", "~Static Member Object")
        member_initialized = False
        constructor_refs = []
        member_objs = {}
        with_set_init = False
        nsdmi = False

        for obj_ref in member_refs:
            _key = obj_ref.ent().name()
            on_value = False
            value = ""

            lexer = obj_ref.file().lexer(lookup_ents=False)
            lex = lexer.lexeme(obj_ref.line(), obj_ref.column())

            while lex and lex.text() != ";":
                if lex.text() == "=":
                    on_value = True
                elif on_value:
                    value += lex.text()

                lex = lex.next(ignore_whitespace=True,
                               ignore_comments=True)

            if value == "":
                value = False
            else:
                value = True

            member_objs[_key] = value

        member_initialized = all(member_objs.values())

        for func_ref in class_ref.ent().refs("Define", "Function"):
            if func_ref.ent().name() == class_ref.ent().name():
                set_init_objs = {}

                for set_init_ref in func_ref.ent().refs("Set Init ~Implicit", "~Static Member Object"):
                    _key = set_init_ref.ent().name()
                    with_set_init = True

                    if _key not in member_objs:
                        continue

                    on_set = False
                    value = ""

                    lexer = set_init_ref.file().lexer(lookup_ents=False)
                    lex = lexer.lexeme(
                        set_init_ref.line(), set_init_ref.column())

                    while lex and lex.text() != ")":
                        if lex.text() == "(":
                            on_set = True
                        elif on_set:
                            value += lex.text()

                        lex = lex.next(ignore_whitespace=True,
                                       ignore_comments=True)

                    if value == "":
                        value = False
                    else:
                        value = True

                    set_init_objs[_key] = value

                nsdmi = all(set_init_objs.values())

                if with_set_init:
                    constructor_refs.append(func_ref)

        if not with_set_init:
            continue

        if nsdmi and member_initialized:
            for member_ref in member_refs:
                check_violation(member_ref)
        elif not member_initialized and not nsdmi:
            for constructor_ref in constructor_refs:
                check_violation(constructor_ref)
