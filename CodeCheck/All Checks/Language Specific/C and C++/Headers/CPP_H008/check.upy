ERR1 = 'using-directives and using-declarations shall not be used in header files.'


# The ID for the check
def ids():
    return ('M7-3-6', 'MISRA08_7-3-6', 'CPP_H008')


# The short name of the check
def name(id):
    return {
        'M7-3-6': 'Published Standards/AUTOSAR/using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files.',
        'MISRA08_7-3-6': 'Published Standards/MISRA-C++ 2008/7-3-6 using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files.',
        'CPP_H008': 'All Checks/Language Specific/C and C++/Headers/using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files.',
    }[id]


def tags(id):
    return {
        'MISRA08_7-3-6': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Headers',
        ],
        'M7-3-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Headers',
        ],
        'CPP_H008': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],
    }.get(id)


# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>using-directives and using-declarations (excluding class
scope or function scope using-declarations) shall not be
used in header files.</p>

<p><b>Rationale</b></p>
<p>It is important to ensure that the order of inclusion of header files cannot affect the behaviour of
a program</p>

<p><b>Example</b></p>
<pre><code language="C++">// f1.h
void foo ( char_t a );
namespace NS1
{
 void foo( int32_t a );
}
inline void bar ( )
{
 foo ( 0 );
}
// f2.h
namespace NS1
{
}
using namespace NS1;
// f1.cc
#include "f1.h"
#include "f2.h"
int32_t m1 ( )
{
 bar ( ); // bar calls foo ( char_t );
}
// f2.cc
#include "f2.h"
#include "f1.h"
void m2 ( )
{
 bar ( ); // bar calls foo ( int32_t );
}
</code></pre>
<p>In the above example, changing the order of the header files alters the meaning of the program.</p>
<p><b>See also</b></p>
<p>ISO/IEC 14882:2003 [1] ยง7.3.3, ยง7.3.4</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if lexer:
        lex = lexer.first()
        is_using = False

        while lex:
            if lex.text() == "using" and lex.token() == "Keyword":
                is_using = True
            elif is_using:
                if lex.token() != "Identifier":
                    check.violation(None, file, lex.line_begin(),
                                    lex.column_begin(), ERR1)
                is_using = False

            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
