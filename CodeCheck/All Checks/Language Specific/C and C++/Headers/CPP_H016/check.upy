# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-11-2020

import re

def id():
    return 'CPP_H016'

def name():
    return """\
All Checks/Language Specific/C and C++/Headers/If prototypes, typedefs, macros, structure definitions, or enums are needed in multiple modules, they shall be placed in header files"""


def tags(id):
    return {
        'CPP_H016': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],

    }.get(id)

def description():
    return """\
If prototypes, typedefs, macros, structure definitions, or enums are needed in multiple modules, they shall be placed in header files."""

def detailed_description():
    return """\
<p><b>Developers Note:</b></p><p> This CodeCheck looks for uses of the specified entities 
across multiple files. If Understand finds this to be the case, and the file 
the entity is declared/defined in is not #included by any other file, the 
entity should be placed in a header file. </p>
<p>This check has natural limitations the programmer should expect - for 
example, when a macro is defined in one file and used in another without being 
told where to find it (via an #include), Understand cannot interpret what the 
entity is, so it cannot recognize the use of the entity.</p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # skip any file that has been included by another file
    is_included = file.refs("includeby")

    if is_included:
        pass
    else:
        # find all function prototypes in the file
        for proto in file.filerefs("declare", "function", True):
            if proto.ent().parent() and re.search(r"^std",proto.ent().parent().name()):
                continue

            # find all refs of use
            proto_uses = proto.ent().refs("define, callby, useby, modifyby")

            if not proto_uses:
                pass
            else:
                # initialize a violation flag
                is_violation = False

                for proto_use in proto_uses:
                    # check for uses of the proto outside of the current file
                    current_file_name = file.simplename()
                    file_used_in = proto_use.file().simplename()

                    if current_file_name != file_used_in:
                        is_violation = True

                if is_violation == True:
                    check.violation(proto.ent(), file, proto.line(), proto.column(), "Prototype %1 is needed in multiple modules, place in a header file", 
                        proto.ent())

        # find all typedefs in the file
        for typed in file.filerefs("define", "typedef", True):

            # find all refs of use
            typed_uses = typed.ent().refs("typedby, useby, modifyby")

            if not typed_uses:
                pass
            else:
                # initialize a violation flag
                is_violation = False

                for typed_use in typed_uses:
                    # check for uses of the typedef outside of the current file
                    current_file_name = file.simplename()
                    file_used_in = typed_use.file().simplename()

                    if current_file_name != file_used_in:
                        is_violation = True

                if is_violation == True:
                    check.violation(typed.ent(), file, typed.line(), typed.column(), "Typedef %1 is needed in multiple modules, place in a header file", 
                        typed.ent())

        # find all macros in the file
        for macro in file.filerefs("define", "macro", True):

            # find all refs of use
            macro_uses = macro.ent().refs("useby, modifyby")

            if not macro_uses:
                pass
            else:
                # initialize a violation flag
                is_violation = False

                for macro_use in macro_uses:
                    # check for uses of the typedef outside of the current file
                    current_file_name = file.simplename()
                    file_used_in = macro_use.file().simplename()

                    if current_file_name != file_used_in:
                        is_violation = True

                if is_violation == True:
                    check.violation(macro.ent(), file, macro.line(), macro.column(), "Macro %1 is needed in multiple modules, place in a header file", 
                        macro.ent())

        # find all struct definitions in the file
        for struct in file.filerefs("define", "struct", True):

            # find all refs of use
            struct_uses = struct.ent().refs("typedby, useby, modifyby")

            if not struct_uses:
                pass
            else:
                # initialize a violation flag
                is_violation = False

                for struct_use in struct_uses:
                    # check for uses of the typedef outside of the current file
                    current_file_name = file.simplename()
                    file_used_in = struct_use.file().simplename()

                    if current_file_name != file_used_in:
                        is_violation = True

                if is_violation == True:
                    check.violation(struct.ent(), file, struct.line(), struct.column(), "Struct %1 is needed in multiple modules, place in a header file", 
                        struct.ent())

        # find all enums in the file
        for enum in file.filerefs("define", "enum", True):

            # find all refs of use
            enum_uses = enum.ent().refs("typedby, useby, modifyby")

            if not enum_uses:
                pass
            else:
                # initialize a violation flag
                is_violation = False

                for enum_use in enum_uses:
                    # check for uses of the typedef outside of the current file
                    current_file_name = file.simplename()
                    file_used_in = enum_use.file().simplename()

                    if current_file_name != file_used_in:
                        is_violation = True

                if is_violation == True:
                    check.violation(enum.ent(), file, enum.line(), enum.column(), "Enum %1 is needed in multiple modules, place in a header file", 
                        enum.ent())
