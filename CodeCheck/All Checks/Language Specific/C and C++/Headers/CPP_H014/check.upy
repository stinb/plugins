# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-10-2020

import re

# The ID for the check
def ids():
    return ('CPP_H014')

# The short name of the check
def name(id):
    return {
        'CPP_H014':  "All Checks/Language Specific/C and C++/Headers/All public header files shall be capable of being included by a C++ file as well as a C file"
    }[id]


def tags(id):
    return {
        'CPP_H014': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],

    }.get(id)

def description():
    return """\
All public header files shall be capable of being included by a C++ file as well as a C file."""

def detailed_description():
    return """\
<p><b>Developer's Notes</b></p> <p>For the purposes of this CodeCheck, several assumptions
have to be made. These assumptions are the following:</p>
<p>n1. A header file that is only included by CPP files is assumed to be a CPP
header</p>
<p>n2. Any header included by a C file needs an extern "C" wrapper or a
_cplusplus preprocessor macro</p>
<p>n3. Header files that are not included by any other file are treated by
Understand as source code files and will not be checked</p>"""

def test_entity(file):
    return file.kind().check('header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # for each header file, look at file it was included by and check that it is a C file
    includebys = file.refs("includeby")

    for ref in includebys:
        cpp_file = re.search(r".cpp", ref.ent().simplename())

        # ignore headers included by CPP files, these are assumed to be CPP headers
        if cpp_file:
            pass
        else:
            # spin up lexer
            lexer = file.lexer()
            lexeme = lexer.first()
            extern_c_found = False

            while lexeme:
                if lexeme and lexeme.next(ignore_whitespace=True) and \
                lexeme.text() == "extern" and lexeme.token() == "Keyword" and lexeme.next(ignore_whitespace=True).text() == "\"C\"":
                    extern_c_found = True

                lexeme = lexeme.next()

            if extern_c_found == False:
                check.violation(ref.ent(), file, ref.line(), ref.column(), "Header file %2 (included by C file %1) is incapable of inclusion by C++ files", ref.ent(), file)
