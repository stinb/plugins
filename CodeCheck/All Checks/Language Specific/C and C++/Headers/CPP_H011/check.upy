# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-2-2020

import re

def id():
    return 'CPP_H011'

def name():
    return """\
All Checks/Language Specific/C and C++/Headers/Absolute path names shall not be \
used for header files"""


def tags(id):
    return {
        'CPP_H011': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],

    }.get(id)

def description():
    return 'Absolute path names shall not be used for header files.'

def detailed_description():
    return """\
<p>It is typically not good practice to use absolute path names when attempting to
#include a header file. This is partly due to convention,
and partly due to the complications that can arise due to the path being different between systems.</p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    if not file.filerefs("include","file"):
        return

    if file and file.lexer():
        lexer = file.lexer()
    else:
        return
    lexeme = lexer.first()

    while lexeme:
        # look for include directives
        if (lexeme.token() == "Preprocessor" and lexeme.text() == "include"):
            # create temp to loop through lexemes until we find the included file one
            temp = lexeme.next(ignore_whitespace=True)
            headerName = temp.text()

            hasRoot = re.search(r"(^\"[A-Za-z0-9\s]+\:)|(\"\/)", headerName)

            if hasRoot:
                # strip the quotes/brackets on either end
                headerName = headerName[1:-1]
                check.violation(file, file, temp.line_begin(), temp.column_begin(), '#include of header file %1 contains an absolute path', headerName)


        lexeme = lexeme.next()
