# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2023-02-20


import re


ERR1 = 'Standard header file tgmath.h used'


def ids():
    return ('MISRA12_21.11', 'CPP_H020', 'MISRA23_21.11')


def name(id):
    return {
        'MISRA12_21.11': '''Published Standards/MISRA C 2012/\
21.11 The standard header file <tgmath.h> shall not be used''',
        'CPP_H020': '''All Checks/Language Specific/C and C++/Headers/\
The standard header file <tgmath.h> shall not be used''',
        'MISRA23_21.11': '''Published Standards/MISRA C 2023/\
21.11 The standard header file <tgmath.h> shall not be used''',
    }[id]


def tags(id):
    return {
        'MISRA12_21.11': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Headers',
        ],
        'CPP_H020': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],
        'MISRA23_21.11': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Headers',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA12_21.11': """\
<p><b>Amplification</b></p>
<p>
None of the facilities that are specified as being provided by &lt;tgmath.h&gt;
shall be used.
</p>

<p><b>Rationale</b></p>
<p>
Using the facilities of &lt;tgmath.h&gt; may result in undefined behaviour.
</p>

<p><b>Example</b></p>
<pre><code language="C++">#include &lt;tgmath.h&gt; /* Non-compliant */

float f1, f2;

void f ( void )
{
  f1 = sqrt ( f2 );   /* Generic sqrt used */
}

#include &lt;math.h&gt;

float f1, f2;

void f ( void )
{
  f1 = sqrtf ( f2 ); /* Compliant - float version of sqrt used */
}
</code></pre>""",
        'CPP_H020': """\
<p><b>Amplification</b></p>
<p>
None of the facilities that are specified as being provided by &lt;tgmath.h&gt;
shall be used.
</p>

<p><b>Rationale</b></p>
<p>
Using the facilities of &lt;tgmath.h&gt; may result in undefined behaviour.
</p>

<p><b>Example</b></p>
<pre><code language="C++">#include &lt;tgmath.h&gt; /* Non-compliant */

float f1, f2;

void f ( void )
{
  f1 = sqrt ( f2 );   /* Generic sqrt used */
}

#include &lt;math.h&gt;

float f1, f2;

void f ( void )
{
  f1 = sqrtf ( f2 ); /* Compliant - float version of sqrt used */
}
</code></pre>""",
        'MISRA23_21.11': """\
<p><b>Amplification</b></p>
<p>
The standard header file &lt;tgmath.h&gt; should not be #include'd.
</p>

<p>
Note: Due to the duplication of macro names between &lt;tgmath.h&gt;, &lt;math.h&gt; and &lt;complex.h&gt;
this rule does not have the additional requirement that none of the features that are specified as being
provided by &lt;tgmath.h&gt; should be used, as use by means of #including either of these other
standard header files is not constrained. Any other definition of a macro specified as being provided
by &lt;tgmath.h&gt; will be a violation of Rule 21.1 and/or Rule 21.2.
</p>

<p><b>Rationale</b></p>
<p>
Using the facilities of &lt;tgmath.h&gt; may result in undefined behaviour.
</p>

<p><b>Example</b></p>
<pre><code language="C++">#include &lt;tgmath.h&gt;

float f1, f2;
void f ( void )
{
 f1 = sqrt ( f2 ); /* Non-compliant - generic sqrt used */
}

#include &lt;math.h&gt;

float f1, f2;

void f ( void )
{
  f1 = sqrtf ( f2 ); /* Compliant - float version of sqrt used */
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>
This check automatically flags the use of tgmath.h library.
</p>""",
    }[id]


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('oneViolation', 'Limit one violation per file', True)


def check(check, file):
    oneViolation = check.options().lookup('oneViolation')

    for ref in file.filerefs('Include', 'File', oneViolation):
        ent = ref.ent()
        if ent.name() == 'tgmath.h':
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
