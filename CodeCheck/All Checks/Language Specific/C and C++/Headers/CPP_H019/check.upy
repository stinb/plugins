# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 06-22-2021

import re

ERR1 = 'Forward referencing should be used, when appropriate, over direct inclusion'

def id():
    return 'CPP_H019'

def name():
    return """\
All Checks/Language Specific/C and C++/Headers/Forward referencing should be \
used, when appropriate, over direct inclusion when documenting dependencies \
within a header file."""


def tags(id):
    return {
        'CPP_H019': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],

    }.get(id)

def detailed_description():
    return """\
<p>Unnecessary header inclusion can greatly
increase compile time. Additionally, limiting direct inclusion
of header files minimizes the chances for complete project
recompilation as changes are made to header files. In general,
header files should be included only in the source file that uses
them, and not in other headers. Conversely, header files
should include only other header files that are absolutely
necessary for the source to compile.</p>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # Find Included files
    iRefs = file.filerefs('Include', 'File')
    for iRef in iRefs:
        # Find Class definitions from this include file
        dRefs = iRef.ent().refs('Define', 'Class')
        for dRef in dRefs:
            # Find any refs being used inside the file that had the include
            refs = dRef.ent().refs()
            for ref in refs:
                if ref.file().name() == file.name():
                    check.violation(iRef.ent(), file, iRef.line(), iRef.column(), ERR1)
                    break
