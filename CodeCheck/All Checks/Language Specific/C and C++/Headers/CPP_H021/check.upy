# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2023-02-21


import re


ERR1 = 'Standard header file setjmp.h used'
ERR2 = 'Standard header file csetjmp used'


def ids():
    return ('MISRA12_21.4', 'CPP_H021', 'MISRA23_21.4', 'MISRA23_21.10.2')


def name(id):
    return {
        'MISRA12_21.4': '''Published Standards/MISRA C 2012/\
21.4 The standard header file <setjmp.h> shall not be used''',
        'CPP_H021': '''All Checks/Language Specific/C and C++/Headers/\
The standard header file <setjmp.h> shall not be used''',
        'MISRA23_21.4': '''Published Standards/MISRA C 2023/\
21.4 The standard header file <setjmp.h> shall not be used''',
        'MISRA23_21.10.2': '''Published Standards/MISRA C++ 2023/\
21.10.2 The standard header file <csetjmp> shall not be used''',
    }[id]


def tags(id):
    return {
        'MISRA12_21.4': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Headers',
        ],
        'CPP_H021': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],
        'MISRA23_21.4': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Headers',
        ],
        'MISRA23_21.10.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Headers',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA12_21.4': """\
<p><b>Amplification</b></p>
None of the facilities that are specified as being provided by &lt;setjmp.h&gt;
shall be used.
</p>

<p><b>Rationale</b></p>
<i>setjmp</i> and <i>longjmp</i> allow the normal function call mechanisms to be
bypassed. Their use may lead to undefined and unspecified behaviour.
</p>""",
        'CPP_H021': """\
<p><b>Amplification</b></p>
None of the facilities that are specified as being provided by &lt;setjmp.h&gt;
shall be used.
</p>

<p><b>Rationale</b></p>
<i>setjmp</i> and <i>longjmp</i> allow the normal function call mechanisms to be
bypassed. Their use may lead to undefined and unspecified behaviour.
</p>""",
        'MISRA23_21.4': """\
<p><b>Amplification</b></p>
The standard header file &lt;setjmp.h&gt; shall not be #include'd, and none of the features that are
specified as being provided by &lt;setjmp.h&gt; shall be used.
</p>

<p><b>Rationale</b></p>
<i>setjmp</i> and <i>longjmp</i> allow the normal function call mechanisms to be
bypassed. Their use may lead to undefined and unspecified behaviour.
</p>""",
        'MISRA23_21.10.2': """\
<p><b>Amplification</b></p>
<p>In addition, none of the facilities that are specified as being provided by &lt;csetjmp&gt; shall be used.</p>
<p>Note: use of &lt;setjmp.h&gt; and the facilities it provides are also prohibited by this rule.</p>

<p><b>Rationale</b></p>
<p>The use of <i>setjmp</i> and <i>longjmp</i> allow the normal function return mechanisms to be bypassed.
Their use may result in undefined and unspecified behaviour. For example, it is undefined behaviour if
longjmp results in the omission of non-trivial object destruction.<p>
<p>Safety standards, such as IEC 61508 [11] (Part 3, Table B.9) or ISO 26262 [9] (Part 6, Table 6),
encourage the use of the “single-entry single-exit” principle as part of the “modular approach”.
Unstructured languages, such as assembly, allow jumps between arbitrary points in a program,
violating this principle. C++, with its concept of functions and the corresponding calling mechanism,
enforces the “single-entry single-exit” principle through its language definition — for example, multiple
return statements within a function all return to the call site.</p>
<p>Note: the C++ Standard states that aspects of the behaviour associated with these facilities are defined
in the related version of ISO 9899 [6].</p>""",
    }[id]


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    csetjmp = True if (check.id() == 'MISRA23_21.10.2') else False

    check.options().checkbox('oneViolation', 'Limit one violation per file', True)
    check.options().checkbox('csetjmp', 'Flag the use of standard header file csetjmp', csetjmp)


def check(check, file):
    oneViolation = check.options().lookup('oneViolation')
    csetjmp = check.options().lookup('csetjmp')

    for ref in file.filerefs('Include', 'File', oneViolation):
        ent = ref.ent()
        if ent.name() == 'setjmp.h':
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
        elif csetjmp and (ent.name() == 'csetjmp'):
            check.violation(ent, file, ref.line(), ref.column(), ERR2)
