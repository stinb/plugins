# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 10-12-2020

def id():
    return 'CPP_VF000'

def name():
    return """\
All Checks/Language Specific/C and C++/Virtual Functions/Every class that \
contains virtual functions shall provide a virtual destructor"""


def tags(id):
    return {
        'CPP_VF000': [
            'Language: C',
            'Language: C++',
            'Virtual Functions',
        ],

    }.get(id)

def description():
    return 'When implementing virtual functions, every class that contains \
virtual functions shall provide a virtual destructor.'

def detailed_description():
    return """\
<p>Virtual destructors are necessary when the programmer will potentially be 
deleting an instance of a derived class through a pointer to the base class. 
If the destructor is not declared virtual, and a pointer is declared that 
points to a derived object, calling delete on the pointer will have undefined 
behavior.
</p>"""

def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'

def check(check, file):
	# find every class definition in file
	for item in file.filerefs('define', 'class'):
		curr_class = item.ent()
		class_name = curr_class.simplename()
		
		# grab all virtual methods for the class
		virtual_methods = curr_class.refs('define', 'member function virtual')

		destruct_found = 0
		nondestruct_found = 0

		# if class has no virtual methods, ignore
		if len(virtual_methods) < 1:
			pass
		else:
			# attach a tilde to the class name for destructor comparison
			class_name = "~" + class_name
			for meth in virtual_methods:
				if meth.ent().simplename() == class_name:
					destruct_found = 1
				else:
					nondestruct_found = 1

			if nondestruct_found == 1 and destruct_found == 0:
				check.violation(curr_class, file, item.line(), item.column(), "Violation: Class '%1' is missing a virtual destructor", curr_class)

