# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2023-02-27


import re


ERR1 = 'Unused parameter "%1" at index %2 in virtual/overriding function'
ERR2 = 'Unused parameters in virtual/overriding function'


def ids():
    return ('MISRA08_0-1-12', 'CPP_V015')


def name(id):
    return {
        'MISRA08_0-1-12':
        '''Published Standards/MISRA-C++ 2008/\
0-1-12 There shall be no unused parameters (named or unnamed) in the set of\
 parameters for a virtual function and all the functions that override it''',
        'CPP_V015':
        '''All Checks/Language Specific/C and C++/Virtual Functions/\
There shall be no unused parameters (named or unnamed) in the set of parameters\
 for a virtual function and all the functions that override it''',
    }[id]


def tags(id):
    return {
        'MISRA08_0-1-12': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Virtual Functions',
        ],
        'CPP_V015': [
            'Language: C',
            'Language: C++',
            'Virtual Functions',
        ],
    }.get(id)


def detailed_description():
    return '''\
<p><b>Rationale</b></p>

<p>
<i>Unused</i> function parameters are often due to design changes and can lead
to mismatched parameter lists.
</p>

<p><b>Example</b></p>

<pre><code language="C++">class A
{
public:
  virtual void withunusedpara    ( uint16_t * para1,
                                   int16_t    unusedpara ) = 0;
  virtual void withoutunusedpara ( uint16_t * para1,
                                   int16_t  & para2      ) = 0;
};

class B1: public A
{
public:
  virtual void withunusedpara ( uint16_t * para1,
                                int16_t    unusedpara )
  {
    *para1 = 1U;
  }
  virtual void withoutunusedpara ( uint16_t * para1,
                                   int16_t  & para2 )
  {
    *para1 = 1U;
  }
};

class B2: public A
{
public:
  virtual void withunusedpara ( uint16_t * para1,
                                int16_t    unusedpara )
  {
    *para1 = 1U;
  }
  virtual void withoutunusedpara ( uint16_t * para1,
                                   int16_t  & para2 )
  {
    para2 = 0;
  }
};

</code></pre>

<p><b>See also</b></p>

<p>
Rule 0-1-11
</p>
'''


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('eachParam', 'Violation for each parameter', True)


def check(check, file):
    eachParam = check.options().lookup('eachParam')

    funcRefs = file.filerefs('Define', 'Function Virtual', True)
    funcRefs += file.filerefs('Declare', 'Function Virtual Pure', True)

    for ref in funcRefs:
        ent = ref.ent()

        # Skip if function is not overridden by another function
        doppelgangerRefs = ent.refs('Overriddenby')
        if not doppelgangerRefs:
            continue

        # Get all parameters from base function
        parameters = []
        for param in ent.refs('Define', 'Parameter', True):
            # Skip ellipsis from parameters if user is using fuzzy parser
            if param.ent().name() == '...':
                continue
            parameters.append(param)

        # This is a special case for pure virtual functions
        if not parameters:
            # parameters = ent.freetext('Parameters').split(',')
            parametersText = ent.freetext('Parameters')
            if parametersText:
                parameters = parametersText.split(',')

        # Keep track of which parameters are used
        parametersUsed = [False] * len(parameters)
        parametersUnused = [None] * len(parameters)

        # For each function that overrides the base function
        for clone in doppelgangerRefs:
            i = 0
            parametersTwin = clone.ent().refs('Define', 'Parameter', True)
            # For each argument in the overriding method, mark as used
            for paramRef in parametersTwin:
                if not ((0 <= i < len(parametersUsed)) and (0 <= i < len(parametersUnused))):
                    break
                param = paramRef.ent()
                if param.refs('Setby, Useby'):
                    parametersUsed[i] = True
                else:
                    signature = param.type() + ' ' + param.name()
                    parametersUnused[i] = signature
                i += 1

        # If all parameters are not accounted for, throw an error
        for i in range(len(parametersUsed)):
            if parametersUsed[i]:
                continue
            signature = parametersUnused[i]
            if eachParam:
                check.violation(ent, file, ref.line(), ref.column(), ERR1, signature, i)
            else:
                check.violation(ent, file, ref.line(), ref.column(), ERR2)
                break
