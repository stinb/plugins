#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => "Unused Type declaration %1";

# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use

sub checkID { return "CPP_U006";}

sub name { return "All Checks\\Language Specific\\C and C++\\Unnecessary Constructs\\A project shall not contain unused type declarations";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Unnecessary Constructs',
  );
}

# This is the full description of the rule being tested
sub description {
  return "A project shall not contain unused type declarations.";
}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"
<p><b>Rationale</b></p>
If a type is declared but not <i>used</i>, then it is unclear to a reviewer if the type is redundant or it has
been left unused by mistake.</p>
<p><b>Example</b></p><pre><code language="C++">  int16_t unusedtype()
  {
    typedef int16_t local_Type; // Non-compliant
    return 67;
  }
  </code></pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}

# This determines if this script is per file
sub test_entity {
  return 1;
}

# This determines if this script is per project or per file
sub test_global {
  return 0;
}

# Any defined options go here
sub define_options{}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("c file");

  # loop through all variable types
  # ~Unnamed so the fuzzy parser doesn't get hung up on unnamed structs
  my @entrefs = $file->filerefs("Define","Type ~Unnamed ~Class ~TemplateParameter",1);

  # Check that each type is use
  ENT: foreach my $ref(@entrefs) {

    next ENT if $ref->ent->refs("useby ~inactive, typedby, specializeby, nameby, derive");

    $check->violation($ref->ent,$ref->file,$ref->line,$ref->column,ERR1,$ref->ent->name);
  }
}
