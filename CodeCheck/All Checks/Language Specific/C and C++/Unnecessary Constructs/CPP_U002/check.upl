# Report inline functions which have more than 5 lines of code (XLOC)
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Inline function has more than %1 lines.';
use constant OPT1 => "Maximum Lines of Code";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


sub checkID { return "CPP_U002";}

sub name { return "All Checks\\Language Specific\\C and C++\\Unnecessary Constructs\\Inline Functions have more than X LOC";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Unnecessary Constructs',
  );
}

sub description {
  return "Report inline functions which have more than X lines of code.";
}

sub detailed_description {
  return 'Report inline functions which have more than X lines of code.
  Assumptions:
 1. inline functions are both explicit \'inline\' and members defined
 within their class declaration.
 ';
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
  #return 1;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
    $check->option->integer("xloc",OPT1,5);
}

# loop through all inline functions
sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check('c file');
  my $xloc = $check->option->lookup("xloc");
    my @entrefs = $file->filerefs("define","function ~unresolved ~unknown");
  my @ents = map{$_->ent;}@entrefs;
    foreach my $func (sort {$a->longname() cmp $b->longname()} @ents) {
  if (($func->freetext("inline")) ||($func->ref("definein","class ~unknown ~unresolved") && !$func->ref("declarein"))) {
      my $lines = $func->metric("CountLineCodeExe");
    if ($lines > $xloc){
      $check->violation($func,$func->ref->file,$func->ref->line,$func->ref->column,ERR1,$xloc);
    }
  }
    }
}
