# Percent Lack of Cohesion Codecheck
# Written by Jordan Colbeth
# Calculates the percentage of class methods use a given class instance variable.
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Lack of cohesion is too high (%1%)';

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "METRIC_12";}

sub name { return "All Checks\\Metrics\\Lack of Cohesion in Methods";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Metrics',
  );
}

sub description {
  return "Calculates what percentage of class methods use a given class instance variable.";
}

sub detailed_description {
  return  <<"END_DESC"
<p><b>Rationale</b></p>
Lack of cohesion is equal to 100% minus average cohesion for class data members. It calculates what percentage of class methods
use a given class instance variable. To calculate, average the percentages for all of that class' instance variables and subtract from
100%. A lower percentage means higher cohesion between class data and methods.</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language eq "C++";
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
  $check->option->integer("maxPercentage","Maximum Percentage",25);
}

sub check {

  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'file' );

  my $maxPercentage = $check->option->lookup("maxPercentage");
  my $metric = "PercentLackOfCohesion";

  # pull a list of all unique class objects in the file
  my @objectList = $file->filerefs('define', 'class, struct, union, interface',1);

  foreach my $obj (@objectList) {
    my $percentage = $obj->ent->metric($metric);
    if ($percentage > $maxPercentage) {
      $check->violation($obj->ent,$file,$obj->line,$obj->column,ERR1,$percentage);
    }
  }
}
