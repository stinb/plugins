use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Too many Paths (%1)';
use constant OPT1 => "Maximum Paths Allowed";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(OPT1);
}

sub checkID { return "METRIC_07";}


sub name { return "All Checks\\Metrics\\Program Unit Path Count";}

sub tags {
  return (
    'Language: Ada',
    'Language: C',
    'Language: C++',
    'Language: C#',
    'Language: Fortran',
    'Language: Java',
    'Language: Jovial',
    'Language: Python',
    'Language: Pascal',
    'Language: VHDL',
    'Language: Web',
    'Metrics',
  );
}

sub description {
  return "Number of unique paths through this program unit(NPATH)";
}

sub detailed_description {
  return  <<"END_DESC"
Number of unique paths though a body of code, not counting abnormal exits or gotos.
END_DESC
}

sub test_language {
  return 1;
}

sub test_entity {
  return 1;
}

sub define_options{
 my $check = shift;
 $check->option->integer("maxPathsAllowed",OPT1,80);
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("file");
  
  my @definerefs = $file->filerefs("define, ada declare body, vhdl declare","ada entry, ada function, ada procedure, ada protected, ada task,"
   ."c function,"
   ."csharp method,"
   ."basic method,"
   ."fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
   ."java method,"
   ."jovial subroutine,"
   ."pascal compunit, pascal function, pascal procedure,"
   ."vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
   ."web function, web method",1);
  my $maxPaths = $check->option->lookup("maxPathsAllowed");
  

  
  foreach my $ref (@definerefs){
    my $ent = $ref->ent;
    my $paths = $ent->metric("CountPath");
    if ($paths > $maxPaths){
      $check->violation($ent,$ref->file,$ref->line,-1,ERR1,$paths);
    }
  }
}
