# Package Coupling Codecheck
# Written by Jordan Colbeth
# Reports Ada packages that are coupled to X or more other packages
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Package is coupled with too many others (Couplings:%1)';

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "METRIC_10";}

sub name { return "All Checks\\Metrics\\Coupled Packages";}

sub tags {
  return (
    'Language: Ada',
    'Metrics',
  );
}

sub description {
  return "Check the amount of coupling between packages.";
}

sub detailed_description {
  return  <<"END_DESC"
<p><b>Rationale</b></p>
An Ada package refers to a collection of related entities, the collection being composed of procedures, functions,
variables, constants, types, subtypes, and even other packages. One of the biggest advantages of Ada over other 
programming languages is its system of modularization and separate compilation. When packages are coupled
with others, complexity increases and we can defeat the goal of modularization. 
</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language eq "Ada";
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
  $check->option->integer("maxCouples","Maximum Couples Per Package",5);
}

sub check {

  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'ada file' );

  if ($file->name() =~ /UndCC_Violation/) {
    $check->violation($file, $file, -1, -1, "UndCC_Violation testing keyword found");
    return;
  }

  my $maxCouples = $check->option->lookup("maxCouples");
  my $metric = "CountPackageCoupled";

  # pull a list of all unique packages objects in the file
  my @objectList = $file->filerefs('declare, define', 'package',1);

  foreach my $obj (@objectList) {
    my $coupleCount = $obj->ent->metric($metric);
    if ($coupleCount && $coupleCount > $maxCouples) {
      $check->violation($obj->ent,$file,$obj->line,$obj->column,ERR1,$coupleCount);
    }
  }
}
