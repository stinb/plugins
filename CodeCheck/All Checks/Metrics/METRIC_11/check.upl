# Max Inheritance Tree Codecheck
# Written by Jordan Colbeth
# Reports classes having a depth greater than X within an inheritance hierarchy
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Class is too deep within the inheritance hierarchy (Depth:%1)';

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "METRIC_11";}

sub name { return "All Checks\\Metrics\\Depth of Inheritance Tree";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Language: PHP',
    'Metrics',
  );
}

sub description {
  return "Check the depth of a class within the inheritance hierarchy.";
}

sub detailed_description {
  return  <<"END_DESC"
<p><b>Rationale</b></p>
The depth of a class within the inheritance hierarchy is the maximum number of nodes from the class node to the root of the 
inheritance tree. The root node has a depth of 0. The deeper within the hierarchy, the more methods the class can inherit,
increasing its complexity.</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language eq "C++" || $language eq "Web";
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
  $check->option->integer("maxDepth","Maximum Depth",5);
}

sub check {

  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'file' );

  my $maxDepth = $check->option->lookup("maxDepth");
  my $metric = "MaxInheritanceTree";

  # pull a list of all unique class objects in the file
  my @objectList = $file->filerefs('define', 'class, struct, union, interface, PHP class, PHP interface',1);

  foreach my $obj (@objectList) {
    my $depth = $obj->ent->metric($metric);
    if ($depth > $maxDepth) {
      $check->violation($obj->ent,$file,$obj->line,$obj->column,ERR1,$depth);
    }
  }
}
