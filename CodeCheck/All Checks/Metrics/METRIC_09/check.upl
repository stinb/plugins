# Class Coupling Codecheck
# Written by Jordan Colbeth
# Reports object classes that are coupled to X or more other object classes
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Object class is coupled with too many others (Couplings:%1)';

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "METRIC_09";}

sub name { return "All Checks\\Metrics\\Coupling Between Object Classes";}

sub tags {
  return (
    'Language: Ada',
    'Language: C',
    'Language: C++',
    'Language: C#',
    'Language: Fortran',
    'Language: Java',
    'Language: Jovial',
    'Language: Python',
    'Language: Pascal',
    'Language: VHDL',
    'Language: Web',
    'Metrics',
  );
}

sub description {
  return "Check the amount of coupling between classes.";
}

sub detailed_description {
  return  <<"END_DESC"
<p><b>Rationale</b></p>
The Coupling Between Object Classes (CBO) metric for a class is a count of the number of other classes to which it is coupled. Class A is
coupled to Class B if Class A uses a type, data, or member from Class B. This metric is also referred to as Efferent Coupling (EC).
Excessive coupling between classes is detrimental to modular design and prevents reuse. In addition, the higher the inter-object
class coupling, the more rigorous testing must be. For these reasons, inter-object class couples should be kept to a minimum.</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return 1;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
  $check->option->integer("maxCouples","Maximum Couples Per Class",5);
}

sub check {

  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'file' );

  my $maxCouples = $check->option->lookup("maxCouples");
  my $metric = "CountClassCoupled";

  # pull a list of all unique class objects in the file
  my @objectList = $file->filerefs('define', 'class, struct, interface',1);

  foreach my $obj (@objectList) {
    my $coupleCount = $obj->ent->metric($metric);
    if ($coupleCount && $coupleCount > $maxCouples) {
      $check->violation($obj->ent,$file,$obj->line,$obj->column,ERR1,$coupleCount);
    }
  }
}
