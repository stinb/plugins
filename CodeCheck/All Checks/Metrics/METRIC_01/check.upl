# Report functions which have a depth greater than X.
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => "Called by too many functions (%1)";
use constant OPT1 => "Maximum Calling Functions";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(OPT1);
}

sub checkID { return "METRIC_01";}


sub name { return "All Checks\\Metrics\\Program Unit Callby Count";}

sub tags {
  return (
    'Language: Ada',
    'Language: C',
    'Language: C++',
    'Language: C#',
    'Language: Fortran',
    'Language: Java',
    'Language: Jovial',
    'Language: Python',
    'Language: Pascal',
    'Language: VHDL',
    'Language: Web',
    'Metrics',
  );
}

sub description {
  return "How many functions call this program unit directly";
}

sub detailed_description {
  return  <<"END_DESC"
How many functions directly call this function. Multiple calls are only counted once.
END_DESC
}

sub test_language {
  my $language = shift;
  return 1;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
  $check->option->integer("MaxCallers",OPT1,5);
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("file");
  my $maxCallers = $check->option->lookup("MaxCallers");

  #Get all the function references
  my @entrefs = $file->filerefs("define, declare body, vhdl declare","ada entry, ada function, ada package, ada procedure, ada protected, ada task,"
     ."c function,"
   ."csharp method,"
   ."basic method,"
   ."fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
   ."java method,"
   ."jovial subroutine,"
   ."pascal compunit, pascal function, pascal procedure,"
   ."python function,"
   ."vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
   ."web function, web method",1);

  foreach my $funcDef (@entrefs){
    my @callers = $funcDef->ent->ents("callby");
    my $callNum = scalar @callers;
    if ($callNum  > $maxCallers) {
      $check->violation($funcDef->ent,$funcDef->file,$funcDef->line,$funcDef->column,ERR1,$callNum);
    }
  }
   
}
