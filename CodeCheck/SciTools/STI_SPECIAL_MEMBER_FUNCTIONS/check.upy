#
#          Copyright (c) 2023, Scientific Toolworks, Inc.
#
# This file contains proprietary information of Scientific Toolworks, Inc.
# and is protected by federal copyright law. It may not be copied or
# distributed in any form or medium without prior written authorization
# from Scientific Toolworks, Inc.
#
# Author: Jason Haslam
#

import understand
from special_member_function import is_special_member_function

ERR_DEFAULT = 'Replace empty body of special member function with `= default`'
ERR_DELETE = 'Mark unimplemeted private special member function with `= delete`'

ENT_KINDS = 'member function ~template'
REF_KINDS = 'declare ~implicit ~default ~delete,define'

def ids():
    return ('STI_SPECIAL_MEMBER_FUNCTIONS', 'CPP_U009')

def name(id):
    return {
        'STI_SPECIAL_MEMBER_FUNCTIONS': 'SciTools/Special Member Functions',
        'CPP_U009': 'All Checks/Language Specific/C and C++/Unnecessary Contructs/Special Member Functions',
    }[id]

def tags(id):
    return {
        'STI_SPECIAL_MEMBER_FUNCTIONS': [
            'Language: C++',
            'Standard: SciTools\' Recommended Checks',
            'Category: Recommended',
            'Unnecessary Contructs', 
            'Severity: 75'
        ],
        'CPP_U009': [
            'Language: C++',
            'Unnecessary Contructs',
        ],
    }.get(id)

def description():
  return 'Find empty and unimplemented special member functions'

def detailed_description():
  return """\
<h3>Special Member Functions</h3>

<p>This check finds special member functions with empty definitions and
suggests replacing the empty definition with `= default`. It also finds
private special member functions without any definition and suggests
adding `= delete`.</p>

<p>Classes with implicitly generated or explicitly defaulted special member
functions (constructor, destructor, copy constructor, and copy assignment
operator) are trivial. Meeting the conditions of a trivial class allows the
compiler to optimize copy (e.g. by calling std::memcpy). Defining these
functions with an empty body may frustrate this optimization.</p>

<p>Prior to C++11, the idiomatic way to prevent calls to implicitly
generated special member functions was to declare them private without
providing any definition. Attempts to call these functions would manifest
as a linker error because of the missing definition. Explicitly deleting
them promotes the error to a much more obvious compile-time error.</p>

<p><b>Compliant</b></p>

<pre><code language="C++">\
class Test {
public:
  Test() = default;
  Test(const Test &) = delete;
};
</code></pre>

<p><b>Non-Compliant</b></p>

<pre><code language="C++">\
class Test {
public:
  Test() {}

private:
  Test(const Test &); // unimplemented
};
</code></pre>"""

def test_entity(file):
  return file.file_type() == 'C++'

def test_global(file):
  return False

def test_language(language):
  return language == 'C++'

def define_options(check):
  pass

def check(check, file):
  try:
    lexer = file.lexer(False, 1, False, False)
  except understand.UnderstandError:
    return

  for ref in file.filerefs(REF_KINDS, ENT_KINDS):
    ent = ref.ent()
    if not is_special_member_function(ent):
      continue

    line = ref.line()
    column = ref.column()
    if ent.kind().check('private') and not ent.refs('definein'):
      violation = check.violation(ent, file, line, column, ERR_DELETE)

      begin = find_next(lexer.lexeme(line, column), ')')
      end = find_next(begin, ';')
      if begin and end:
        violation.add_fixit_hint(
          begin.line_begin(), begin.column_begin() + 1,
          end.line_begin(), end.column_begin(), ' = delete')

    elif ref.kind().check('define') and not has_initializer_list(ent):
      cfg = ent.control_flow_graph()
      if cfg and cfg.is_trivial():
        violation = check.violation(ent, file, line, column, ERR_DEFAULT)

        begin = find_next(lexer.lexeme(line, column), ')')
        end = find_next(begin, '}')
        if begin and end:
          violation.add_fixit_hint(
            begin.line_begin(), begin.column_begin() + 1,
            end.line_begin(), end.column_begin() + 1, ' = default;')

def has_initializer_list(ent):
  parent = ent.parent()
  if not parent:
    return False

  if ent.name() != parent.name():
    return False

  # This is good enough if the body is empty.
  return ent.refs('init ~implicit,call ~implicit')

def find_next(lexeme, token):
  while lexeme and lexeme.text() != token:
    lexeme = lexeme.next(True, True)

  return lexeme
