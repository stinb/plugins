#
#          Copyright (c) 2023, Scientific Toolworks, Inc.
#
# This file contains proprietary information of Scientific Toolworks, Inc.
# and is protected by federal copyright law. It may not be copied or
# distributed in any form or medium without prior written authorization
# from Scientific Toolworks, Inc.
#
# Author: Jason Haslam
#

ERR_FMT = 'Remove unnecessary friend {} declaration'

def ids():
    return ('STI_FRIENDS', 'CPP_U008')

def name(id):
    return {
        'STI_FRIENDS': 'SciTools/Unnecessary Friends',
        'CPP_U008': 'All Checks/Language Specific/C and C++/Unnecessary Contructs/Unnecessary Friends',
    }[id]

def tags(id):
    return {
        'STI_FRIENDS': [
            'Language: C++',
            'Standard: SciTools\' Recommended Checks',
            'Category: Recommended',
            'Unnecessary Contructs', 
            'Severity: 75'
        ],
        'CPP_U008': [
            'Language: C++',
            'Unnecessary Contructs',
        ],
    }.get(id)

def description():
    return 'Find unnecessary friend declarations'

def detailed_description():
    return """\
<h3>Unnecessary Friends</h3>

<p>This check finds friend class and function declarations that are not
necessary because the friend doesn't access internal members. This usually
happens when design improvements render friend access unnecessary, but the
friend declaration gets overlooked.</p>

<p>Friend access breaks encapsulation and makes it difficult to ensure that
class invariants are maintained. It should be granted sparingly and only when
necessary. Leftover unnecessary friend declarations give the impression that
the friend requires access to class internals.</p>
"""

def test_entity(file):
    return file.kind().check('c file')

def test_global(file):
    return False

def test_language(language):
    return language == 'C++'

def define_options(check):
    pass

def check(check, file):
    for ref in file.filerefs('define', 'class,struct'):
        ent = ref.ent()
        friend_refs = ent.refs('friend')
        if not friend_refs:
            continue

        members = ent.ents('declare,define', 'protected member,private member')
        lookup_base_members(ent, members)
        for friend_ref in friend_refs:
            friend = friend_ref.ent()
            if find_friend_reference(members, friend):
                continue

            line = friend_ref.line()
            column = friend_ref.column()
            text = ERR_FMT.format(friend.kind().name().lower())
            violation = check.violation(ent, file, line, column, text)
            violation.add_fixit_hint(line, 1, line + 1, 1, '')

def lookup_base_members(ent, members):
    for base in ent.ents('public base', 'class,struct'):
        members.extend(base.ents('declare,define', 'protected member'))
        lookup_base_members(base, members)

def find_friend_reference(members, friend):
    for member in members:
        for ent in (ref.ent() for ref in member.refs() if not ref.isforward()):
            if ent == friend:
                return True

            parent = ent
            parents = {parent}
            while parent := parent.parent():
                if parent in parents:
                    break

                parents.add(parent)

                if parent == friend:
                    return True

    return False
