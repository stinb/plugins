# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 2/4/21
import re

ERR1 = 'Max Length(%1) Exceeded: %2 lines of Code.'
ERR2 = 'Max Length(%1) Exceeded: %2 lines.'
OPT1 = "Maximum Lines"
OPT2 = "Count only Lines of Code(ignore comment lines, blank lines, etc)"


# The ID for the check
def ids():
    return ('RECOMMENDED_04', 'METRIC_04')

# The short name of the check
def name(id):
    return {
            'RECOMMENDED_04': 'SciTools\' Recommended Checks/Functions Too Long', \
            'METRIC_04': 'All Checks/Metrics/Program Unit Max Length', \
            }[id] \


def tags(id):
    return {
        'RECOMMENDED_04': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Metrics',
        ],
        'METRIC_04': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Metrics',
        ],
    }.get(id)

# The short description of the check \
def description(id):
    return {
            'RECOMMENDED_04': 'Program units should not have more than the specified number of lines',
            'METRIC_04': 'Program units should not have more than the specified number of lines',
            }[id]
    return ""

# The long description of the check
def detailed_description(id):
    return {
            'RECOMMENDED_04': """\
<p><b>Rationale</b></p>
<p>Long functions are usually complex and difficult to read meaning they
are also difficult to comprehend and to test.</p>
<p>Functions, Methods, Packages, Procedures, Subroutines etc. are tested
by this check.</p>""",
            'METRIC_04': """\
<p><b>Rationale</b></p>
<p>Long functions are usually complex and difficult to read meaning they are
also difficult to comprehend and to test.</p>
<p>Functions, Methods, Packages, Procedures, Subroutines etc. should not be
longer than the specified number of lines.</p>""",
            }[id]
    return
# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file, java file, ada file, vhdl file')

def test_global():
    return False

def test_language(language):
    return re.search(r'ada|c|c#|cobol|fortran|java|jovial|pascal|vhdl|php', language.lower())

def define_options(check):
    check.option().integer("LineLimit",OPT1,200)
    check.option().checkbox("CodeOnly",OPT2,False)

def check(check, file):

    definerefs = file.filerefs("define, declare body, vhdl declare","ada entry, ada function, ada procedure, ada protected, ada task,"
       + "c function,"
       + "csharp method,"
       + "fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
       + "java method,"
       + "jovial subroutine,"
       + "pascal compunit, pascal function, pascal procedure,"
       + "vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
       + "web function, web method",True)


    for ref in definerefs:
        func = ref.ent()

        maxLines = check.option().lookup("LineLimit")
        codeOnly = check.option().lookup("CodeOnly")

        # Obtain CountLine and CountLineCode metrics
        linesList = ["CountLine", "CountLineCode"]
        lines = func.metric(linesList)

        if codeOnly and lines["CountLineCode"] > maxLines:
            check.violation(func, ref.file(), ref.line(), 1, ERR1, maxLines, lines)

        elif not codeOnly and lines["CountLine"] and lines["CountLine"] > maxLines:
            check.violation(func, file, ref.line(), 1, ERR2, maxLines, lines)

