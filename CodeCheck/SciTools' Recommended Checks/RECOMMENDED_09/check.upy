# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 2/8/21
import re

ERR1 = 'Nested Comment: /* found inside C-style comment'
ERR2 = 'Character sequence /* or // used within a comment'

# The ID for the check
def ids():
    return ('RECOMMENDED_09', 'CPP_C002', 'MISRA04_2.3', 'MISRA08_2-7-1', 'M2-7-1', 'MISRA23_5.7.1', 'MISRA12_3.1', 'MISRA23_3.1')

# The short name of the check
def name(id):
    return {
        'RECOMMENDED_09': 'All Checks/Nested Comments', \
        'CPP_C002': 'All Checks/Language Specific/C and C++/Comments/No Nested Comments', \
        'MISRA04_2.3': 'Published Standards/MISRA-C 2004/2.3 The character sequence &#47;* shall not be used within a comment.', \
        'MISRA08_2-7-1': 'Published Standards/MISRA-C++ 2008/2-7-1 The character sequence &#47;* shall not be used within a C-style comment.', \
        'M2-7-1': 'Published Standards/AUTOSAR/The character sequence &#47;* shall not be used within a C-style comment.', \
        'MISRA23_5.7.1': 'Published Standards/MISRA C++ 2023/5.7.1 The character sequence &#47;* shall not be used within a C-style comment', \
        'MISRA12_3.1': 'Published Standards/MISRA C 2012/3.1 The character sequences &#47;* and &#47;&#47; shall not be used within a comment',
        'MISRA23_3.1': 'Published Standards/MISRA C++ 2023/3.1 The character sequences &#47;* and &#47;&#47; shall not be used within a comment',
    }[id] \




def tags(id):
    return {
        'MISRA08_2-7-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Comments',
        ],
        'MISRA04_2.3': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Comments',
        ],
        'M2-7-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Comments',
        ],
        'RECOMMENDED_09': [
            'Language: C',
            'Language: C++',
            'Comments',
        ],
        'CPP_C002': [
            'Language: C',
            'Language: C++',
            'Comments',
        ],
        'MISRA23_5.7.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Comments',
        ],
        'MISRA12_3.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Comments',
        ],
        'MISRA23_3.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Comments',
        ],
    }.get(id)

# The short description of the check
def description():
    return """\
The character sequence /* shall not be used within a C-style comment."""

# The long description of the check
def detailed_description(id):
    return {
        'RECOMMENDED_09': """\
<p><b>Rationale</b></p>
<p>Nested C-Style comments (/*) can lead to runaway comments and is not
supported by the C or C++ standard even though some compilers support this
as a non-portable language extension. A comment beginning with /* continues
until the first */ is encountered. Any /* occurring inside a comment is a
violation of this rule.</p>""",
        'CPP_C002': """\
<p><b>Rationale</b></p>
<p>C-style comments that have the character sequence /* are often referred to
as nested comments and should not be used even though they are supported by
some compilers. Comments that begin with the /* and end with the */ are not a
violation.</p>""",
        'MISRA04_2.3': """\
<p><b>Rationale</b></p>
C does not support the nesting of comments even though some compilers support this as a language extension. A comment begins with /* and continues until the first */ is encountered. Any /* occurring inside a comment is a violation of this rule. Consider the following code fragment:
</p>
<p><b>Example</b></p>
<pre><code language="C++">/* some comment, end comment marker accidentally omitted
&lt;&lt;new Page&gt;&gt;
Perform_Critical_Safety_Function(X);
/* this comment is not compliant */
</code></pre>
<p>
In reviewing the page containing the call to the function, the assumption is that it is executed code.
</p>
<p>
Because of the accidental omission of the end comment marker, the call to the safety critical function will not be executed.
</p>
""",
        'MISRA08_2-7-1': """\
<p><b>Rationale</b></p>
Nested C-Style comments (/*) can lead to runaway comments and is not supported by the C or C++ standard even though some compilers support this as a non-portable language extension. A comment beginning with /* continues until the first */ is encountered. Any /* occurring inside a comment is a violation of this rule.
</p>
<p><b>Example</b></p>
<pre><code language="C++">/* some comment, end comment marker accidentally omitted
Perform_Critical_Safety_Function(X);
/* this "comment" is Non-compliant */
</code></pre>
<p>
In reviewing the code containing the call to the function, the assumption is that it is executed code.
</p>
<p>
Because of the accidental omission of the end comment marker, the call to <code>Perform_Critical_Safety_Function</code> will not be executed.
</p>
""",
        'M2-7-1': """\
<p><b>Rationale</b></p>
Nested C-Style comments (/*) can lead to runaway comments and is not supported by the C or C++ standard even though some compilers support this as a non-portable language extension. A comment beginning with /* continues until the first */ is encountered. Any /* occurring inside a comment is a violation of this rule.
</p>
<p><b>Example</b></p>
<pre><code language="C++">/* some comment, end comment marker accidentally omitted
Perform_Critical_Safety_Function(X);
/* this "comment" is Non-compliant */
</code></pre>
<p>
In reviewing the code containing the call to the function, the assumption is that it is executed code.
</p>
<p>
Because of the accidental omission of the end comment marker, the call to <code>Perform_Critical_Safety_Function</code> will not be executed.
</p>
""",
        'MISRA23_5.7.1': """\
<p><b>Rationale</b></p>
<p>
C++ does not support the nesting of C-style comments, even though some compilers support this as
a non-portable language extension. A comment beginning with /* continues until the first */ is
encountered.
</p>
<p>
Any /* sequence occurring inside a C-style comment is a violation of this rule.
</p>
<p><b>Example</b></p>
<p>Consider the following code fragment:</p>
<pre><code language="C++">/* some comment, end comment marker accidentally omitted

Perform_Critical_Safety_Function(X);
/* this comment is not compliant */
</code></pre>
<p>
In reviewing the code containing the call to the function, the assumption is that it is executed. However,
because the end comment marker is missing, the call to Perform_Critical_Safety_Function
will not be executed.
</p>
""",
        'MISRA12_3.1': """
<p><b>Rationale</b></p>
<p>If a comment starting sequence, /* or //, occurs within a /* comment, is it quite likely to be caused
by a missing */ comment ending sequence.</p>
<p>If a comment starting sequence occurs within a // comment, it is probably because a region of code
has been commented-out using //.</p>

<p><b>Exception</b></p>
<p>The sequence // is permitted within a // comment.</p>

<p><b>Example</b></p>
<p>Consider the following code fragment:</p>
<pre><code language="C++">/* some comment, end comment marker accidentally omitted
  &lt;&lt;new Page&gt;&gt;
  Perform_Critical_Safety_Function( X );
  /* this comment is non-compliant */</code></pre>

<p>In reviewing the page containing the call to the function, the assumption is that it is executed code.
Because of the accidental omission of the end comment marker, the call to the safety critical function
will not be executed.</p>

<p>In the following C99 example, the presence of // comments changes the meaning of the program:</p>
<pre><code language="C++">x = y // /*
 + z
 // */
 ;</code></pre>

<p>This gives x = y + z; but would have been x = y; in the absence of the two // comment start
sequences.</p>

<p><b>See also</b></p>
<p>Dir 4.4</p>
""",
            'MISRA23_3.1': """
<p><b>Rationale</b></p>
<p>If a comment starting sequence, /* or //, occurs within a /* comment, is it quite likely to be caused
by a missing */ comment ending sequence.</p>
<p>If a comment starting sequence occurs within a // comment, it is probably because a region of code
has been commented-out using //.</p>

<p><b>Exception</b></p>
<p>1. Uniform resource identifiers, of the form {scheme}://{path}, are permitted within comments.</p>
<p>2. The sequence // is permitted within a // comment.</p>

<p><b>Example</b></p>
<p>Consider the following code fragment:</p>
<pre><code language="C++">/* some comment, end comment marker accidentally omitted
  &lt;&lt;new Page&gt;&gt;
  Perform_Critical_Safety_Function( X );
  /* this comment is non-compliant */</code></pre>

<p>In reviewing the page containing the call to the function, the assumption is that it is executed code.
Because of the accidental omission of the end comment marker, the call to the safety critical function
will not be executed.</p>

<p>In the following C99 example, the presence of // comments changes the meaning of the program:</p>
<pre><code language="C++">x = y // /*
 + z
 // */
 ;</code></pre>

<p>This gives x = y + z; but would have been x = y; in the absence of the two // comment start
sequences.</p>
<p>The following example demonstrates the use of a URI in a comment, and is compliant by exception 1.</p>
<pre><code language="C++">/*
** The MISRA C:2012 example suite can be found at
** https://gitlab.com/MISRA/MISRA-C/MISRA-C-2012
*/
</code></pre>

<p><b>See also</b></p>
<p>Dir 4.4</p>
""",
    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def define_options(check):
    flag_slashes = (check.id() in ['MISRA12_3.1', 'MISRA23_3.1']) 

    check.option().checkbox('flag_slashes', 'Include the character sequence //', flag_slashes)


def check(check, file):
    lexer = file.lexer(False)
    lexemes = lexer.lexemes()
    flag_slashes = check.option().lookup('flag_slashes')

    for lexeme in lexemes:
        if flag_slashes and (lexeme.token() == "Comment") and re.search(r"^/\*[\s\S]*?(/\*|(?<!:)//)", lexeme.text()):
            check.violation(None, file, lexeme.line_begin(), lexeme.column_begin(), ERR2)
        elif lexeme.token() == 'Comment' and re.search(r'^/\*.*/\*', lexeme.text(), re.DOTALL):
            violation = check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
            violation.add_fixit_hint(lexeme.line_begin(), lexeme.column_begin(), lexeme.line_end(), lexeme.column_end() + 1, '/*' + re.sub(r'/\*', '  ', lexeme.text()))
