# This script is designed to run with Understand - CodeCheck
# Report functions which have a depth greater than X
# Written by Jason Quinn
# 2/2/21
import re

ERR1 = 'Program overly complex (Complexity:%1)'

# The ID for the check
def ids():
    return ("RECOMMENDED_10", "METRIC_03", "HIS_04", "VHDL_13", "AC_HIS_04")

# The short name of the check
def name(id):
    return {
            'RECOMMENDED_10': 'All Checks/Overly Complex Functions', \
            'METRIC_03': 'All Checks/Metrics/Program Unit Cyclomatic Complexity', \
            'HIS_04': 'Published Standards/Hersteller Initiative Software (HIS) Metrics/4. Cyclomatic Complexity (v(G))', \
            'VHDL_13': 'All Checks/Language Specific/Vhdl/VHDL_13' +  ' Cyclomatic Complexity', \
            'AC_HIS_04': 'All Checks/Cyclomatic Complexity (v(G))', \
            }[id] \



def tags(id):
    return {
        'RECOMMENDED_10': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Standard: SciTools\' Recommended Checks',
            'Metrics',
        ],
        'METRIC_03': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Metrics',
        ],
        'HIS_04': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Standard: Hersteller Initiative Software (HIS) Metrics',
            'Metrics',
        ],
        'AC_HIS_04': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Metrics',
        ],
        'VHDL_13': [
            'Language: VHDL',
            'Metrics',
        ],
    }.get(id)

# The short description of the check \
def description(id):
    return {
            'RECOMMENDED_10': 'Test the McCabe Cyclomatic Complexity for program units',
            'METRIC_03': 'Program Units which have a Cyclomatic Complexity greater than X',
            'HIS_04': 'Program Units which have a Cyclomatic Complexity greater than X',
            'AC_HIS_04': 'Program Units which have a Cyclomatic Complexity greater than X',
            'VHDL_13': 'Program Units which have a Cyclomatic Complexity greater than X',
            }[id]

# The long description of the check
def detailed_description(id):
    return {
            'RECOMMENDED_10': """\
<p><b>Rationale</b></p>
<p>Overly complex programs are difficult to comprehend and have many possible
paths making them difficult to test and validate. There are several variants
for Cyclomatic Complexity:</p>
<p><b>Cyclomatic Complexity</b></p>
<p>Also known as McCabe Cyclomatic complexity or as Conditional Complexity
and is defined as per the original NIST paper on the subject:</p>
<p>Edges - Nodes + Connected Components.</p>
<p><b>Modified Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity except that each decision in a multi-decision
structure (switch in C/Java, Case in Ada, computed Goto and arithmetic if
in FORTRAN) statement is not counted and instead the entire multi-way decision
structure counts as 1</p>
<p><b>Strict Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity with logical conjunction and logical and in
conditional expressions also adding 1 to the complexity for each of their
occurrences.</p>""",
            'METRIC_03': """\
<p><b>Rationale</b></p>
<p>Overly complex programs are difficult to comprehend and have many possible
paths making them difficult to test and validate. There are several variants
for Cyclomatic Complexity:</p>
<p><b>Cyclomatic Complexity</b></p>
<p>Also known as McCabe Cyclomatic complexity or as Conditional Complexity
and is defined as per the original NIST paper on the subject:</p>>
<p>Edges - Nodes + Connected Components.</p>
<p><b>Modified Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity except that each decision in a multi-decision
structure (switch in C/Java, Case in Ada, computed Goto and arithmetic if
in FORTRAN) statement is not counted and instead the entire multi-way decision
structure counts as 1</p>
<p><b>Strict Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity with logical conjunction and logical and in
conditional expressions also adding 1 to the complexity for each of their
occurrences.</p>""",
            'HIS_04': """\
<p>Measurement for the decrease in v(G): Allocation across several functions
with paging into and out of sub-functions.</p>
<p><b>Rationale</b></p>
<p>Overly complex programs are difficult to comprehend and have many possible
paths making them difficult to test and validate. There are several variants
for Cyclomatic Complexity:</p>
<p><b>Cyclomatic Complexity</b></p>
<p>Also known as McCabe Cyclomatic complexity or as Conditional Complexity and
is defined as per the original NIST paper on the subject:</p>
<p>Edges - Nodes + Connected Components.</p>
<p><b>Modified Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity except that each decision in a multi-decision
structure (switch in C/Java, Case in Ada, computed Goto and arithmetic if in
FORTRAN) statement is not counted and instead the entire multi-way decision
structure counts as 1</p>
<p><b>Strict Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity with logical conjunction and logical and in
conditional expressions also adding 1 to the complexity for each of their
occurrences.</p>
<p>Developer's Note: This check cannot pick up PHP/Javascript functions that
are embedded in an html file. They must be placed in a separate .php or .js
file.</p>""",
            'AC_HIS_04': """\
<p>Measurement for the decrease in v(G): Allocation across several functions
with paging into and out of sub-functions.</p>
<p><b>Rationale</b></p>
<p>Overly complex programs are difficult to comprehend and have many possible
paths making them difficult to test and validate. There are several variants
for Cyclomatic Complexity:</p>
<p><b>Cyclomatic Complexity</b></p>
<p>Also known as McCabe Cyclomatic complexity or as Conditional Complexity and
is defined as per the original NIST paper on the subject:</p>
<p>Edges - Nodes + Connected Components.</p>
<p><b>Modified Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity except that each decision in a multi-decision
structure (switch in C/Java, Case in Ada, computed Goto and arithmetic if in
FORTRAN) statement is not counted and instead the entire multi-way decision
structure counts as 1</p>
<p><b>Strict Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity with logical conjunction and logical and in
conditional expressions also adding 1 to the complexity for each of their
occurrences.</p>
<p>Developer's Note: This check cannot pick up PHP/Javascript functions that
are embedded in an html file. They must be placed in a separate .php or .js
file.</p>""",
            'VHDL_13': """\
<p>Overly complex programs are difficult to comprehend and have many possible
paths making them difficult to test and validate. There are several variants
for Cyclomatic Complexity:</p>
<p><b>Cyclomatic Complexity</b></p>
<p>Also known as McCabe Cyclomatic complexity or as Conditional Complexity and
is defined as per the original NIST paper on the subject:</p>
<p>Edges - Nodes + Connected Components.</p>
<p><b>Modified Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity except that each decision in a multi-decision
structure (switch in C/Java, Case in Ada, computed Goto and arithmetic if in
FORTRAN) statement is not counted and instead the entire multi-way decision
structure counts as 1</p>
<p><b>Strict Cyclomatic Complexity</b></p>
<p>The Cyclomatic Complexity with logical conjunction and logical and in
conditional expressions also adding 1 to the complexity for each of their
occurrences.</p>""",
            }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file, java file, ada file, csharp file, vhdl file')

def test_global():
    return False

def test_language(language):
    return re.search(r'ada|c|c#|cobol|fortran|java|jovial|pascal|vhdl|php', language.lower())

def define_options(check):
    check.option().integer("maxComplexity", "Maximum Complexity", 20)
    check.option().choice("metric", "Variant", ["Cyclomatic Complexity", "Modified Cyclomatic Complexity", "Strict Cyclomatic Complexity"], "Modified Cyclomatic Complexity")

def check(check, file):
    maxComplexity = check.option().lookup("maxComplexity")
    metric = ["Cyclomatic"]
    if re.search(r'Modified', check.option().lookup("metric")):
        metric = ["CyclomaticModified"]

    if re.search(r'Strict', check.option().lookup("metric")):
        metric = ["CyclomaticStrict"]

    # Get all the function references
    entRefs = file.filerefs("define, declare body, vhdl declare", "ada entry, ada function, ada package, ada procedure, ada protected, ada task,"
    + "c function,"
    + "csharp method,"
    + "fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
    + "java method,"
    + "jovial subroutine,"
    + "python function,"
    + "pascal compunit, pascal function, pascal procedure,"
    + "vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
    + "web function, web method", True)

    for funcDef in entRefs:
        complexity = funcDef.ent().metric(metric)
        if complexity[metric[0]] and complexity[metric[0]] > maxComplexity:
            check.violation(funcDef.ent(), funcDef.file(), funcDef.line(), funcDef.column(), ERR1, complexity)
