# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 2/7/24

import re

ERR1 = "Future work needed: key phrase '%1' found"

# The ID for the check
def ids():
    return ('RECOMMENDED_19')

# The short name of the check
def name(id):
    return {
        'RECOMMENDED_19': 'SciTools\' Recommended Checks/Comments Indicating Future Fixes',
    }[id]

def tags(id):
    return {
        'RECOMMENDED_19': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Comments',
        ],
    }.get(id)

# The short description of the check
def description():
    return "Look for comments in your code that indicate future work is needed."

# The long description of the check
def detailed_description(id):
    return {
        'RECOMMENDED_19': """\
<p><b>Rationale</b></p>
<p>Identifying areas of code that still need work is crucial for ensuring that software is functional, 
performant, reliable, maintainable, secure, and user-friendly. It allows developers to prioritize their 
efforts effectively and deliver high-quality software products.</p>
<p><b>Developer's Note</b></p>
<p>This check automatically looks for the phrases 'Fix me', 'To Do', 'TBD', as well as different variations of those phrases. 
Additional phrases the user is interested in flagging can be added in the above Options textbar.</p>""",
    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return re.search(r'ada|c++|c#|cobol|fortran|java|jovial|pascal|python|vhdl|php|web', language.lower())

def define_options(check):
    check.option().text('phrases', 'Enter a comma-separated list of key words/phrases to look for: ', 'fixme,fix me,todo,to do,tbd')

def check(check, file):
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    phrases_string = check.option().lookup('phrases')
    phrases_list = phrases_string.split(",")

    lexeme = lexer.first()

    while lexeme:
        if lexeme.token() == "Comment":
            # lowercase the comment string to normalize
            comment = lexeme.text().lower()

            # strip dashes, periods and underscores from the comment
            comment = comment.replace('-',' ')
            comment = comment.replace('_',' ')
            comment = comment.replace('.','')

            # cycle through the phrases, flagging if seen in the comment
            for phrase in phrases_list:
                if re.search(phrase, comment):
                    check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1, phrase)

        lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=False)
