# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 2/4/21
import re

ERR1 = 'Function %1 has an implicit declaration'

# The ID for the check
def ids():
    return ('RECOMMENDED_05', 'MISRA12_17.3', 'CPP_F010', 'CPP_D033', 'MISRA23_17.3')

# The short name of the check
def name(id):
    return {
            'RECOMMENDED_05': 'All Checks/Functions shall not be declared implicitly', \
            'MISRA12_17.3': 'Published Standards/MISRA C 2012/17.3 A function shall not be declared implicitly', \
            'CPP_F010': 'All Checks/Language Specific/C and C++/Functions/Functions shall not be declared implicitly', \
            'CPP_D033': 'All Checks/Language Specific/C and C++/Declarations and Definitions/A function shall not be declared implicitly', \
            'MISRA23_17.3': 'Published Standards/MISRA C 2023/17.3 A function shall not be declared implicitly', \
            }[id] \


def tags(id):
    return {
        'MISRA12_17.3': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Mandatory',
            'Functions',
            'Declarations and Definitions',
        ],
        'RECOMMENDED_05': [
            'Language: C',
            'Language: C++',
            'Functions',
            'Declarations and Definitions',
        ],
        'CPP_F010': [
            'Language: C',
            'Language: C++',
            'Functions',
            'Declarations and Definitions',
        ],
        'CPP_D033': [
            'Language: C',
            'Language: C++',
            'Functions',
            'Declarations and Definitions',
        ],
        'MISRA23_17.3': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Mandatory',
            'Functions',
            'Declarations and Definitions',
        ],
    }.get(id)

# The short description of the check \
def description(id):
    return {
            'RECOMMENDED_05': '( Advisory ) Functions shall not be declared implicitly.',
            'MISRA12_17.3': '17.3 ( Mandatory ) A function shall not be declared implicitly.',
            'CPP_F010': '( Advisory ) Functions shall not be declared implicitly.',
            'CPP_D033': '( Mandatory ) A function shall not be declared implicitly.',
            'MISRA23_17.3': '17.3 ( Mandatory ) A function shall not be declared implicitly.',
            }[id]



# The long description of the check
def detailed_description(id):
    return {
            'RECOMMENDED_05': """\
<p><b>Rationale</b></p>
<p>In C89, when calling a function, foo, that has not been declared, the
function call is also considered an implicit declaration. While this is
technically acceptable when another translation unit has a globally visable
definition of foo, this situation could imply a more serious issue.</p>
<p>Typically, when a function from another translation unit is used, the
declaration is placed in a header file and then included in all code files
where that function is used. An implicit declaration is usually a result of
the declaration present in the header file being misspelled. Enforcing that
this declaration exist in a header file allows the compiler to perform
type checking, which can make debugging easier.</p>
<p><b>Example</b></p>

<pre><code language="C++">  /* Header file foo.h  */
  int fop();          // Misspelled declaration, fop is not defined
  int bar();


  /* Code file foo.c    */
  #include "foo.h"

  int foo() {
    return 0;         // foo is defined in the global scope, and so this program will still compile
  }


  /* Code file bar.c    */
  #include "foo.h"

  int bar() {
    return foo();     // UndCC_Violation: foo is not declared 
                      // This function call will now become an implicit declaration
  }

</code></pre>""",
            'MISRA12_17.3': """\
<p><b>Rationale</b></p>
<p>Provided that a function call is made in the presence of a prototype, a
constraint ensures that the number of arguments matches the number of
parameters and that each argument can be assigned to its corresponding
parameter.</p>
<p>If a function is declared implicitly, a C90 compiler will assume that the
function has a return type of int. Since an implicit function declaration does
not provide a prototype, a compiler will have no information about the number
of function parameters and their types. Inappropriate type conversions may
result in passing the arguments and assigning the return value, as well as other
undefined behaviour.</p>
<p><b>Example</b></p>
<p>If the function power is declared as:</p>
<pre><code language="C++">  extern double power ( double d, int n );
</code></pre>
<p>but the declaration is not visible in the following code then undefined
behaviour will occur.</p>
<pre><code language="C++">  void func ( void )
  {
    /* Non-compliant - return type and both argument type s incorrect */
    double sq1 = power ( 1, 2.0 );
  }
</code></pre>
<p><b>See also</b></p>
<p>Rule 8.2, Rule 8.4</p>""",
            'CPP_F010': """\
<p><b>Rationale</b></p>
<p>In C89, when calling a function, foo, that has not been declared, the
function call is also considered an implicit declaration. While this is
technically acceptable when another translation unit has a globally visable
definition of foo, this situation could imply a more serious issue.</p>
<p>Typically, when a function from another translation unit is used, the
declaration is placed in a header file and then included in all code files where
that function is used. An implicit declaration is usually a result of the
declaration present in the header file being misspelled. Enforcing that this
declaration exist in a header file allows the compiler to perform type checking,
which can make debugging easier.</p>
<p><b>Example</b></p>
<pre><code language="C++">  /* Header file foo.h  */
  int fop();          // Misspelled declaration, fop is not defined
  int bar();


  /* Code file foo.c    */
  #include "foo.h"

  int foo() {
    return 0;         // foo is defined in the global scope, and so this program will still compile
  }


  /* Code file bar.c    */
  #include "foo.h"

  int bar() {
    return foo();     // UndCC_Violation: foo is not declared 
                      // This function call will now become an implicit declaration
  }

</code></pre>""",
            'CPP_D033': """\
<p><b>Rationale</b></p>
<p>Provided that a function call is made in the presence of a prototype, a
constraint ensures that the number of arguments matches the number of parameters
and that each argument can be assigned to its corresponding parameter.</p>
<p>If a function is declared implicitly, a C90 compiler will assume that the
function has a return type of int. Since an implicit function declaration does
not provide a prototype, a compiler will have no information about the number of
function parameters and their types. Inappropriate type conversions may result
in passing the arguments and assigning the return value, as well as other
undefined behaviour.</p>
<p><b>Example</b></p>
<p>If the function power is declared as:</p>
<pre><code language="C++">  extern double power ( double d, int n );
</code></pre>
<p>but the declaration is not visible in the following code then undefined
behaviour will occur.</p>
<pre><code language="C++">  void func ( void )
  {
    /* Non-compliant - return type and both argument type s incorrect */
    double sq1 = power ( 1, 2.0 );
  }
</code></pre>""",
            'MISRA23_17.3': """\
<p><b>Rationale</b></p>
<p>Provided that a function call is made in the presence of a prototype, a
constraint ensures that the number of arguments matches the number of
parameters and that each argument can be assigned to its corresponding
parameter.</p>
<p>If a function is declared implicitly, a C90 compiler will assume that the
function has a return type of int. Since an implicit function declaration does
not provide a prototype, a compiler will have no information about the number
of function parameters and their types. Inappropriate type conversions may
result in passing the arguments and assigning the return value, as well as other
undefined behaviour.</p>
<p><b>Example</b></p>
<p>If the function power is declared as:</p>
<pre><code language="C++">  extern double power ( double d, int n );
</code></pre>
<p>but the declaration is not visible in the following code then undefined
behaviour will occur.</p>
<pre><code language="C++">  void func ( void )
  {
    /* Non-compliant - return type and both argument type s incorrect */
    double sq1 = power ( 1, 2.0 );
  }
</code></pre>
<p><b>See also</b></p>
<p>Rule 8.2, Rule 8.4</p>""",
            }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'


def check(check, file):

    # Pull functions declared and functions called into two different lists
    functionsDeclared = file.filerefs('Declare ~Inactive', 'C Function ~Member ~Template ~Unresolved ~Unknown')
    functionsCalled = file.filerefs('Call ~Inactive', 'C Function ~Member ~Template ~Unresolved ~Unknown')

    if not (functionsDeclared or functionsCalled):
        return

    # Loop through all functions declared
    for declare in functionsDeclared:

        callByReferences = declare.ent().refs('Callby')
        for callBy in callByReferences:

            # Throw an error if any callby reference matches our declaration reference (Signifies implicit declaration in strict)
            if callBy.line() == declare.line() and callBy.column() == declare.column():
                check.violation(declare.ent(), declare.file(), declare.line(), declare.column(), ERR1, declare.ent().name())
                break

    for call in functionsCalled:
        defineRef = call.ent().ref('Definein')
        declareReferences = call.ent().refs('Declarein')

        if not defineRef:
            continue

        if defineRef.file().longname() == call.file().longname() and not declareReferences:
            if defineRef.line() > call.line():
                check.violation(call.ent(), call.file(), call.line(), call.column(), ERR1, call.ent().name())

            continue

        #below is the culprit, find a replacement
        elif re.search(r'Header', defineRef.file().kind().longname()):
            continue

        if not declareReferences:
            check.violation(call.ent(), call.file(), call.line(), call.column(), ERR1, call.ent().name())
            continue
            
