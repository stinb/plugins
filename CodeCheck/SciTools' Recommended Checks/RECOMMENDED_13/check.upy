# This script is designed to run with Understand - CodeCheck
# Every defined function shall be called at least once
# Converted to Python by Jason Quinn
# 2/2/21
import re

ERR1 = 'Violation: %1 defined but not called.'
IGNORE1 = 'Ignore Virtual Functions (They can cause false positives since static analysis tools cannot track dynamic polymorphism)'
IGNORE2 = 'Ignore Member Functions (They can cause false positives with Template member functions)'

# The ID for the check
def ids():
    return ('RECOMMENDED_13', 'MISRA08_0-1-10', 'CPP_F003', 'M0-1-10', 'MISRA23_0.2.4')

# The short name of the check
def name(id):
    return {
        'RECOMMENDED_13': 'All Checks/Unused Functions',
        'MISRA08_0-1-10': 'Published Standards/MISRA-C++ 2008/0-1-10 All defined functions called',
        'CPP_F003': 'All Checks/Language Specific/C and C++/Functions/Unused Functions',
        'M0-1-10': 'Published Standards/AUTOSAR/Every defined function shall be called at least once.',
        'MISRA23_0.2.4': 'Published Standards/MISRA C++ 2023/0.2.4 Functions with limited visibility should be used at least once',
    }[id]




def tags(id):
    return {
        'MISRA08_0-1-10': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Functions',
        ],
        'M0-1-10': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Functions',
        ],
        'RECOMMENDED_13': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Functions',
        ],
        'CPP_F003': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
        'MISRA23_0.2.4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Functions',
        ],
    }.get(id)

# The short description of the check
def description(id):
    return {
            'RECOMMENDED_13': 'Every defined function shall be called at least once.',
            'MISRA08_0-1-10': '0-1-10 (Required) Every defined function shall be called at least once.',
            'CPP_F003': 'Every defined function shall be called at least once.',
            'M0-1-10': 'Every defined function shall be called at least once.',
            'MISRA23_0.2.4': 'Functions with limited visibility should be used at least once.',
            }[id]

# The long description of the check
def detailed_description(id):
    return {
            'RECOMMENDED_13': """\
<p><b>Rationale</b></p>
<p>Functions or procedures that are not called may be symptomatic of a serious
problem, such as missing paths. Note that unused prototypes and main are not
violations of this rule. </p>""",
            'MISRA08_0-1-10': """\
<p><b>Rationale</b></p>
<p>Functions or procedures that are not called may be symptomatic of a serious
problem, such as missing paths.</p>
<p><b>Exception</b></p>
<p>Note that unused prototypes and main are not violations of this rule.
</p>""",
            'CPP_F003': """\
<p><b>Rationale</b></p>
<p>Functions or procedures that are not called may be symptomatic of a serious
problem, such as missing paths. Note that unused prototypes and main are not
violations of this rule. </p>""",
			'M0-1-10': """\
<p><b>Rationale</b></p>
<p>Functions or procedures that are not called may be symptomatic of a serious problem, such as
missing paths.</p>
<p>Note that an unused prototype is not a violation of this rule.</p>
<p>See Section 3.5 for associated library issues.</p>
<p><b>Example</b></p>
<pre><code language="C++">void f1 ( )
{
}
void f2 ( ) // Non-compliant
{
}
void f3 ( ); // Compliant prototype
int32_t main ( )
{
 f1 ( );
 return ( 0 );
}
</code></pre>
<p>
Note: This rule enforces developers to statically and explicitly use every function in
the source code. A function does not necessarily need to be called at run-time. Rule
M0-1-1 detects all unreachable code occurrences.
</p>""",
			'MISRA23_0.2.4': """\
<p><b>Amplification</b></p>
<p>A function has limited visibility if it:</p>
<p>1. Is declared in an anonymous namespace; or</p>
<p>2. Is a member of a class in an anonymous namespace; or</p>
<p>3. Has namespace scope and is declared static; or</p>
<p>4. Is a private, non-virtual member.</p>
<p>A function is used when:</p>
<p>1. Its address is taken (including by reference); or</p>
<p>2. It is called; or</p>
<p>3. It is an operand of an expression in an unevaluated context; or</p>
<p>4. Another function in the same overload set is used.</p>
<p>This rule does not apply to:</p>
<p>1. Special member functions;</p>
<p>2. Functions de9ned as = delete.</p>

<p><b>Rationale</b></p>
<p>Functions with limited visibility are not generally used within an extensible API. If they are present but
remain unused, then there may be an issue in the software design.</p>
<p>Unused functions in an overload set are acceptable as it allows the set to be internally consistent.</p>

<p><b>Exception</b></p>
<p>Functions that have at least one declaration with the [[maybe_unused]] attribute are permitted to
be unused as the intent is explicit.</p>

<p><b>Example</b></p>
<pre><code language="C++">struct Foo
{
 int32_t m1() // Public - rule does not apply
 {
 return -1;
 }
 static int32_t m2() // Class scope - rule does not apply
 {
 return 42;
 }
 Foo()
 {
 m3();
 }
private:
 void m3() { } // Compliant - called
 void m4() { } // Non-compliant - not used
 void m5() { } // Compliant - used by a friend
 friend void ( *f4() )();
protected:
 void m6() { } // Protected - rule does not apply
};
static void f1() { } // Non-compliant - not used
namespace
{
 void f2() { } // Non-compliant - not used
}
static void f3() { } // Compliant - address taken in f4()
void ( *f4() )() // Rule does not apply - visibility not limited
{
 Foo bar;
 bar.m5();
 return &f3;
}
namespace A
{
 struct C1 {};
 static void swap( C1 &, C1 & ); // Compliant - overload set for call in f5
}
namespace B
{
 struct C2 {};
 static void swap( C2 &, C2 & ); // Non-compliant
}
namespace
{
 template&lt; typename T &gt;
 void swap( T &, T & ); // Compliant - overload set for call in f5
}
void f5( A::C1 c1, A::C1 c2 ) // Rule does not apply - visibility not limited
{
 swap( c1, c2 );
}
</code></pre>
""",
            }[id]


    return 
# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language,id):
    if id == 'RECOMMENDED_13':
        return language in {'Ada', 'C++', 'C#', 'Fortran', 'Java', 'Jovial', 'Pascal', 'Plm', 'Python', 'VHDL', 'Web'}
    else:
        return language in {'C++'}

def define_options(check):
    if check.id() == 'RECOMMENDED_13':
        lang = True
    else:
        lang = False
    if check.id() == 'MISRA23_0.2.4':
        limitedVisibility = True
    else:
        limitedVisibility = False

    check.option().checkbox('ignoreVirtual', IGNORE1, True)
    check.option().checkbox('ignoreMember', IGNORE2, False)
    check.option().checkbox('exclusions', 'Exclude standard library functions', False)
    check.option().checkbox('limitedVisibility', 'Only check functions with limited visibility', limitedVisibility)
    check.option().checkbox('lang', 'Include other languages besided C and C++', lang)


def check(check, file):
    lang = check.option().lookup('lang')
    if not lang and not file.kind().check('C'):
        return
    
    standardLibraries = {}
    limitedVisibility = check.option().lookup('limitedVisibility')
    refs = None

    if check.option().lookup('exclusions'):
        standardLibraries = {
            'cstdlib.h': True,
            'csignal.h': True,
            'csetjmp.h': True,
            'cstdarg.h': True,
            'typeinfo.h': True,
            'typeindex.h': True,
            'type_traits.h': True,
            'bitset.h': True,
            'functional.h': True,
            'utility.h': True,
            'ctime.h': True,
            'chrono.h': True,
            'cstddef.h': True,
            'initializer_list.h': True,
            'tuple.h': True,
            'any.h': True,
            'optional.h': True,
            'variant.h': True,
            'new.h': True,
            'memory.h': True,
            'scoped_allocator.h': True,
            'memory_resource.h': True,
            'climits.h': True,
            'cfloat.h': True,
            'cstdint.h': True,
            'cinttypes.h': True,
            'limits.h': True,
            'exception.h': True,
            'stdexcept.h': True,
            'cassert.h': True,
            'system_error.h': True,
            'cerrno.h': True,
            'cctype.h': True,
            'cwctype.h': True,
            'cstring.h': True,
            'cwchar.h': True,
            'cuchar.h': True,
            'string.h': True,
            'string_view.h': True,
            'array.h': True,
            'vector.h': True,
            'deque.h': True,
            'list.h': True,
            'forward_list.h': True,
            'set.h': True,
            'map.h': True,
            'unordered_set.h': True,
            'unordered_map.h': True,
            'stack.h': True,
            'queue.h': True,
            'algorithm.h': True,
            'execution.h': True,
            'iterator.h': True,
            'cmath.h': True,
            'complex.h': True,
            'valarray.h': True,
            'random.h': True,
            'numeric.h': True,
            'ratio.h': True,
            'cfenv.h': True,
            'iosfwd.h': True,
            'ios.h': True,
            'istream.h': True,
            'ostream.h': True,
            'iostream.h': True,
            'fstream.h': True,
            'sstream.h': True,
            'strstream.h': True,
            'iomanip.h': True,
            'streambuf.h': True,
            'cstdio.h': True,
            'locale.h': True,
            'clocale.h': True,
            'codecvt.h': True,
            'regex.h': True,
            'atomic.h': True,
            'thread.h': True,
            'mutex.h': True,
            'shared_mutex.h': True,
            'future.h': True,
            'condition_variable.h': True,
            'filesystem.h': True,
            'assert.h': True,
            'ctype.h': True,
            'errno.h': True,
            'fenv.h': True,
            'float.h': True,
            'inttypes.h': True,
            'iso646.h': True,
            'math.h': True,
            'setjmp.h': True,
            'signal.h': True,
            'stdalign.h': True,
            'stdarg.h': True,
            'stdatomic.h': True,
            'stdbool.h': True,
            'stddef.h': True,
            'stdint.h': True,
            'stdio.h': True,
            'stdlib.h': True,
            'stdnoreturn': True,
            'tgmath.h': True,
            'threads.h': True,
            'time.h': True,
            'uchar.h': True,
            'wchar.h': True,
            'wctype.h': True}

    if not lang:
        refs = file.filerefs("Define, ~Delete Declare", "Function", True)
    else:
        refs = file.filerefs("define, declare, vhdl declare","ada entry, ada function, ada procedure, ada protected, ada task,"
        + "c function,"
        + "csharp method,"
        + "fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
        + "java method,"
        + "jovial subroutine,"
        + "pascal compunit, pascal function, pascal procedure,"
        + "python function,"
        + "vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
        + "web function, web method",True)

    for ref in refs:
        skip = False

        if ref.ent().kind().check("Virtual, Template, Unresolved, Unknown, Lambda Function"):
            skip = True
        elif ref.ent().longname() == '[unnamed]':
            skip = True
        elif ref.ent().kind().check("virtual") and check.option().lookup('ignoreVirtual'):
            skip = True
        elif ref.ent().kind().check("member") and check.option().lookup('ignoreMember'):
            skip = True
        elif ref.ent().parent() and ref.ent().name() == ref.ent().parent().name() and ref.ent().parent().kind().check("template"):
            skip = True
        if ref.file().name() in standardLibraries.keys():
            return True
        if limitedVisibility:
            if ref.ent().kind().check("~Static") and ref.ent().parent() and ref.ent().parent().id() == file.id():
                skip = True
            elif ref.ent().kind().check("Public, Protected"):
                skip = True
            elif ref.ent().contents() and "[[maybe_unused]]" in ref.ent().contents():
                skip = True
            else:
                lex = file.lexer().lexeme(ref.line(), ref.column())
                if lex:
                    lex = lex.previous(True, True)

                if lex and lex.text() == "]":
                    while lex and lex.text() != "[":
                        if lex.text() == "maybe_unused" and lex.token() == "Identifier":
                            skip = True
                            break
                        
                        lex = lex.previous(True, True)


        if not skip and not isUsed(ref.ent(), ref):
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())

def isUsed(ent, ref):
    if re.search(r'^~', ent.name()) or ent.ref('useby') or ent.ref('callby') or ent.name() == 'main':
        return True
    if ent.kind().check("virtual"):
        subRefs = ent.refs("overriddenby")
        for sub in subRefs:
            if isUsed(sub.ent()):
                return True
    if ent.kind().check("member"):
        if ent.ref('instance, instanceof, call'):
            return True

    return False
