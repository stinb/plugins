# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 2/2/21
import re

ERR1 = 'Max Length(%1) Exceeded: %2 lines of Code.'
ERR2 = 'Max Length(%1) Exceeded: %2 lines.'
OPT1 = "Maximum Lines"
OPT2 = "Count only Lines of Code(ignore comment lines, blank lines, etc)"

# The ID for the check
def id():
    return 'RECOMMENDED_02'

# The short name of the check
def name():
    return "SciTools' Recommended Checks\\Files too long"



def tags(id):
    return {
        'RECOMMENDED_02': [
            'Language: C',
            'Language: C++',
        ],
    }.get(id)

# The short description of the check
def description():
    return """\
Program files should not have more than the specified number of lines"""

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Long files are usually complex and difficult to read meaning they are also
difficult to comprehend and to test.
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, java file, ada file, vhdl file')

def test_global():
    return False

def test_language(language):
    return True


def define_options(check):
    check.option().integer("LineLimit", OPT1, 200)
    check.option().checkbox("CodeOnly", OPT2, False)

def check(check, file):
    maxLines = check.option().lookup("LineLimit")
    codeOnly = check.option().lookup("CodeOnly")

    cl = ["CountLine"]
    clc = ["CountLineCode"]
    lines = file.metric(cl)
    linesCode = file.metric(clc)

    if codeOnly and linesCode[clc[0]] > maxLines:
        check.violation(file, file, 0, 0, ERR1, maxLines, linesCode)

    elif not codeOnly and lines[cl[0]] > maxLines:
        check.violation(file, file, 0, 0, ERR2, maxLines, lines)

