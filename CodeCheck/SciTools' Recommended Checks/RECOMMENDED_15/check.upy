# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 2/11/21
import re

ERR1 = 'Unused Static Global Variable'

# The ID for the check
def ids():
    return ('RECOMMENDED_15', 'CPP_U004')

# The short name of the check
def name(id):
    return {
        'RECOMMENDED_15': 'All Checks/Unused Static Globals', \
        'CPP_U004': 'All Checks/Language Specific/C and C++/Unnecessary Constructs/Unused Static Globals', \
    }[id] \


def tags(id):
    return {
        'RECOMMENDED_15': [
            'Language: C',
            'Language: C++',
            'Unnecessary Constructs',
        ],
        'CPP_U004': [
            'Language: C',
            'Language: C++',
            'Unnecessary Constructs',
        ],
    }.get(id)

# The short description of the check \
def description():
    return "Find Static Global Variables that are defined but not used."

# The long description of the check
def detailed_description(id):
    return {
        'RECOMMENDED_15': """\
<p><b>Rationale</b></p>
<p>Static Globals that are defined but not used can lead to memory management
issues as well as making code more difficult to follow. They can also be
indicitive of an error where a programmer meant to use one variable and
accidentally used another. This check ignores references inside inactive
code (ie #if 0...#endif).</p>""",
        'CPP_U004': """\
<p><b>Rationale</b></p>
<p>Static Globals that are defined but not used can lead to memory management
issues as well as making code more difficult to follow. They can also be
indicitive of an error where a programmer meant to use one variable and
accidentally used another. This check ignores references inside inactive
code (ie #if 0...#endif).</p>""",
    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    # Loop through static globals
    lexer = None

    entrefs = file.filerefs('define', 'object static global ~unresolved', True)
    for ref in entrefs:
        if ref.ent().refs('setby ~init, useby ~inactive, modifyby'):
            continue

        violation = check.violation(ref.ent(), ref.file(), ref.line(), ref.column(), ERR1)
        if lexer == None:
            lexer = file.lexer()
        lexeme = lexer.lexeme(ref.line(), ref.column())
        while lexeme and lexeme.text() != ';':
            lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

        if lexeme:
            violation.add_fixit_hint(ref.line(), 1, lexeme.line_begin(), lexeme.column_begin() + len(lexeme.text()))
