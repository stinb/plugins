# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 2/15/21

import re

ERR1 = 'Violation: trigraph found: %1'


# The ID for the check
def ids():
    return ('RECOMMENDED_11', 'CPP_E019', 'MISRA12_4.2', 'MISRA04_4.2', 'MISRA08_2-3-1', 'A2-5-1', 'MISRA23_5.0.1', 'MISRA23_4.2')

# The short name of the check
def name(id):
    return {
        'RECOMMENDED_11': 'All Checks/Trigraphs shall not be used', \
        'CPP_E019': 'All Checks/Language Specific/C and C++/Expressions/Avoid Trigraphs', \
        'MISRA12_4.2': 'Published Standards/MISRA C 2012/4.2 Trigraphs should not be used', \
        'MISRA04_4.2': 'Published Standards/MISRA-C 2004/4.2 Trigraphs shall not be used', \
        'MISRA08_2-3-1': 'Published Standards/MISRA-C++ 2008/2-3-1 Trigraphs shall not be used', \
        'A2-5-1': 'Published Standards/AUTOSAR/2-3-1 Trigraphs shall not be used', \
        'MISRA23_5.0.1': 'Published Standards/MISRA C++ 2023/5.0.1 Trigraph-like sequences should not be used', \
        'MISRA23_4.2': 'Published Standards/MISRA C 2023/4.2 Trigraphs should not be used', \
    }[id] \



def tags(id):
    return {
        'MISRA08_2-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Expressions',
        ],
        'MISRA12_4.2': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Expressions',
        ],
        'MISRA04_4.2': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Expressions',
        ],
        'A2-5-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'RECOMMENDED_11': [
            'Language: C',
            'Language: C++',
            'Standard: SciTools\' Recommended Checks',
            'Expressions',
        ],
        'CPP_E019': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_5.0.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Expressions',
        ],
        'MISRA23_4.2': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Expressions',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    return {
        'RECOMMENDED_11': """\
<p><b>Rationale</b></p>
<p>Trigraphs are denoted by a sequence of 2 question marks followed by a
specified third character (e.g. ??- represents a "~" (tilde) character and ??)
represents a "]"). They can cause accidental confusion with other uses of two
question marks.</p>""",
        'CPP_E019': """\
<p><b>Rationale</b></p>
<p>Trigraphs are 2 question marks followed by a specific third character (e.g.
??- represents a "~" (tilde) character and ??) represents a "]"). They can be
confused with other uses of two question marks.</p>""",
        'MISRA12_4.2': """\
<p><b>Rationale</b></p>
<p>Trigraphs are denoted by a sequence of two question marks followed by a
specified third character (e.g. ??- represents a ~ (tilde) character and ??)
represents a ] ). They can cause accidental confusion with other uses of two
question marks.</p>

<p>
Note: the so-called digraphs:</p>

<p>
&lt;: :&gt; &lt;% %&gt; %: %:%:</p>

<p>
are permitted because they are tokens. Trigraphs are replaced wherever they appear
in the program prior to preprocessing.</p>

<p><b>Example</b></p>
<p>For example the string
</p>

<pre><code language="C++">"(Date should be in the form ??-??-??)"
</code></pre>

<p>
would not behave as expected, actually being interpreted by the compiler as
</p>

<pre><code language="C++">"(Date should be in the form ~~]"
</code></pre>
""",
        'MISRA04_4.2': """\
Trigraphs are denoted by a sequence of 2 question marks followed by a specified
third character (e.g. ??- represents a "~" (tilde) character and ??) represents
a "]"). They can cause accidental confusion with other uses of two question
marks.""",
        'MISRA08_2-3-1': """\
<p><b>Rationale</b></p>
<p>Trigraphs are denoted to be a sequence of 2 question marks followed by a specified
third character (e.g. ??' represents a ~character. They can cause accidental confusion
with other uses of two question marks.</p>
<p>The Trigraphs are: ??=, ??/, ??', ??(, ??), ??!, ??&lt;, ??&gt;, ??-.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-5-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;iostream&gt;
void Fn1()
{
  std::cout &lt;&lt; "Enter date ??/??/??"; // Non-compliant, ??/??/?? becomes \\??
  // after trigraph translation
}
void Fn2()
{
  std::cout &lt;&lt; "Enter date dd/mm/yy"; // Compliant
}
</code></pre>
<p><b>See also</b></p>
<p>
• MISRA C++2008: Rule 2-3-1 (Required) Trigraphs shall not be used.<br>
• JSF December 2005 [8]: AV Rule 11 Trigraphs will not be used.<br>
• HIC++ v4.0 [9]: 2.2.1 Do not use digraphs or trigraphs.
</p>
""",
        'A2-5-1': """\
<p><b>Rationale</b></p>
<p>Trigraphs are denoted to be a sequence of 2 question marks followed by a specified
third character (e.g. ??' represents a ~character. They can cause accidental confusion
with other uses of two question marks.</p>
<p>The Trigraphs are: ??=, ??/, ??', ??(, ??), ??!, ??&lt;, ??&gt;, ??-.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-5-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;iostream&gt;
void Fn1()
{
  std::cout &lt;&lt; "Enter date ??/??/??"; // Non-compliant, ??/??/?? becomes \\??
  // after trigraph translation
}
void Fn2()
{
  std::cout &lt;&lt; "Enter date dd/mm/yy"; // Compliant
}
</code></pre>
<p><b>See also</b></p>
<p>
• MISRA C++2008: Rule 2-3-1 (Required) Trigraphs shall not be used.<br>
• JSF December 2005 [8]: AV Rule 11 Trigraphs will not be used.<br>
• HIC++ v4.0 [9]: 2.2.1 Do not use digraphs or trigraphs.
</p>
""",
        'MISRA23_5.0.1': """\
<p><b>Amplification</b></p>
<p>Trigraph-like sequences occur when the following character sequences appear in the source code:</p>
<p>??= ??/ ??' ??( ??) ??! ??< ??> ??-</p>
<p><b>Rationale</b></p>
<p>Trigraphs were removed from the language in C++17. However, to prevent possible confusion, the
sequences should not be used as it is unclear whether their replacement is expected.</p>
<p><b>Example</b></p>
<pre><code language="C++">
const char * msg = "(Date format is ??-??-??)"; // Non-compliant
const char * msg = "(Date format is ?\\?-?\\?-?\\?)"; // Compliant
</code></pre>
<p><b>See also</b></p>
<p>Rule 4.1.2</p>
""",
        'MISRA23_4.2': """\
<p><b>Rationale</b></p>
<p>Trigraphs are denoted by a sequence of two question marks followed by a
specified third character (e.g. ??- represents a ~ (tilde) character and ??)
represents a ] ). They can cause accidental confusion with other uses of two
question marks.</p>

<p>
Note: the so-called digraphs:</p>

<p>
&lt;: :&gt; &lt;% %&gt; %: %:%:</p>

<p>
are permitted because they are tokens. Trigraphs are replaced wherever they appear
in the program prior to preprocessing.</p>

<p><b>Example</b></p>
<p>For example the string
</p>

<pre><code language="C++">"(Date should be in the form ??-??-??)"
</code></pre>

<p>
would not behave as expected, actually being interpreted by the compiler as
</p>

<pre><code language="C++">"(Date should be in the form ~~]"
</code></pre>
""",
    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    con = file.contents()

    # Check for trigraph in file
    if re.search(r"\?\?[=\/'\(\)!<>-]", con.lower(), re.DOTALL):
        lexer = file.lexer(lookup_ents=False)

        lexemes = lexer.lexemes()

        # If lexeme is a trigraph then throw violation
        for lexeme in lexemes:
            if re.search(r"\?\?[=\/'\(\)!<>-]", lexeme.text(), re.DOTALL) and lexeme.token() != 'Comment':
                check.violation(file, file, lexeme.line_begin(), 1, ERR1, lexeme.text())

