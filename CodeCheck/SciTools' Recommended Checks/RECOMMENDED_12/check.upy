# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10/08/21

import re
from collections import defaultdict

ERR1 = 'Unreachable Code'

# The ID for the check
def ids():
    return ('RECOMMENDED_12', 'M0-1-1', 'MISRA12_2.1', 'MISRA04_14.1', 'MISRA08_0-1-1', 'MISRA23_2.1', 'MISRA23_0.0.1', 'CPP_C034')

# The short name of the check
def name(id):
    return {
        'RECOMMENDED_12': 'SciTools\' Recommended Checks/Unreachable Code', 
        'M0-1-1': 'Published Standards/AUTOSAR/A project shall not contain unreachable code',
        'MISRA12_2.1': 'Published Standards/MISRA C 2012/2.1 A project shall not contain unreachable code',
        'MISRA04_14.1': 'Published Standards/MISRA-C 2004/14.1 There shall be no unreachable code',
        'MISRA08_0-1-1': 'Published Standards/MISRA-C++ 2008/0-1-1 A project shall not contain unreachable code',
        'MISRA23_2.1': 'Published Standards/MISRA C 2023/2.1 A project shall not contain unreachable code',
        'MISRA23_0.0.1': 'Published Standards/MISRA C++ 2023/0.0.1 A function shall not contain unreachable statements',
        'CPP_C034': 'All Checks/Language Specific/C and C++/Control Flow/Unreachable Code'
    }[id] 


def tags(id):
    return {
        'RECOMMENDED_12': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Control Flow',
        ],
        'M0-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'MISRA12_2.1': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA04_14.1': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA08_0-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA23_2.1': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA23_0.0.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Control Flow',
        ],
        'CPP_C034': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'RECOMMENDED_12': """\
<p><b>Rationale</b></p>
<p>Verify that source code does not contain unreachable code. It only returns
the first instance of unreachable code in each function/method. This check
identifies code that will never be reached due to flow issues, such as the
code after a 'goto' or 'return' statement. It doesn't actually consider the
values inside of the conditional statements since those frequently change at
runtime.</p>""",
        'M0-1-1': """\
<p><b>Unreachable Code (C, C++, ObjC)</b></p>
Code is unreachable if there is no syntactic (control flow) path
to it. If such code exists, it is unclear if this is intentional or 
simply that an appropriate path has been accidentally omitted. Compilers may 
choose not to generate code for these constructs, meaning that, even
if the unreachable code is intentional, it may not be present in 
the final executable code.
<p>Missing statements, often caused by editing activities, are a common source 
of unreachable code.</p>
<b>Example</b><pre>
int16_t with_unreach ( int16_t para ) 
{ 
   int16_t local;
   local = 0;
   switch ( para ) 
   {
      local = para;   // unreachable - Non-compliant
      case 1: 
      { 
         break; 
      }
      default: 
      { 
         break; 
      }
   } 
   return para; 
   para++;            // unreachable - Non-compliant 
}</p>
""",
        'MISRA12_2.1': """\
<p><b>Unreachable Code (C, C++, ObjC)</b><br><br>
<p>Provided that a program does not exhibit any undefined behavior,
unreachable code cannot be executed and cannot have any effect on the program's
outputs. The presence of unreachable code may therefore indicate an error in
the program's logic.
</p>
 
<p>
A compiler is permitted to remove any unreachable code although it does not
have to do so. Unreachable code that is not removed by the compiler wastes
resources, for example:
</p>
 
<ul>
<li>
It occupies space in the target machine's memory;
</li>
<li>
Its presence may cause a compiler to select longer, slower jump instructions
when transferring control around the unreachable code;
</li>
<li>
Within a loop, it might prevent the entire loop from residing in an instruction
cache.
</li>
</ul>
 
<p>
It is sometimes desirable to insert code that appears to be unreachable in
order to handle exceptional cases. For example, in a switch statement in which
every possible value of the controlling expression is covered by an explicit
case, a default clause shall be present according to Rule 16.4. The purpose of
the default clause is to trap a value that should not normally occur but that
may have been generated as a result of:
</p>
 
<ul>
<li>
Undefined behavior present in the program;
</li>
<li>
A failure of the processor hardware.
</li>
</ul>
 
<p>
If a compiler can prove that a default clause is unreachable, it may remove it,
thereby eliminating the defensive action. On the assumption that the defensive 
action is important, it will be necessary either to demonstrate that the
compiler does not eliminate the code despite it being unreachable, or to take 
steps to make the defensive code reachable. The former course of action 
requires a deviation against this rule, probably with a review of the object
code or unit testing being used to support such a deviation. The latter course
of action can usually be achieved by means of a volatile access. For example, a
compiler might determine that the range of values held by x is covered by the 
case clauses in a switch statement such as:
</p>
 
<pre><code language="C++">

uint16_t x;
 
switch ( x )
 
</code></pre>
 
<p>
By forcing x to be accessed by means of a volatile qualified lvalue, the
compiler has to assume that the controlling expression could take any value:
</p>
 
<pre>

switch ( *( volatile uint16_t * ) &x )
 
</pre>

<p>
<em>Note:</em> code that has been conditionally excluded by pre-processor 
directives is not subject to this rule as it is not presented to the later 
phases of translation.
</p>

<p><b>Example</b></p>

<pre><code langauge="C++">

  enum light { red, amber, red_amber, green };

  enum light next_light ( enum light c )
  {
    enum light res;
    switch ( c )
    {
      case red:
        res = red_amber;
        break;
      case red_amber:
        res = green;
        break;
      case green:
        res = amber;
        break;
      case amber:
        res = red;
        break;
      default:
      {
         /*
          * This default will only be reachable if the parameter c
          * holds a value that is not a member of enum light.
          */
        error_handler ( );
        break;
      }
    }
    return res;
    res = c;  /* Non-compliant - this statement is
               * certainly unreachable */
  }

</code></pre>

<p><b>See also</b></p>
<p>Rule 14.3, Rule 16.4
</p>"
""",
        'MISRA04_14.1': """\
<p><b>Unreachable Code (C, C++, ObjC)</b></p>
<p>This rule refers to code which cannot under any circumstances be
reached, and which can be identified as such at compile time. Code that 
can be reached but may never be executed is excluded from the rule (e.g. 
defensive programming code).</p>
<p>A portion of code is unreachable if there 
is no control flow path from the relevant entry point to that code. For 
example, unlabelled code following an unconditional control transfer is 
unreachable:</p>
<pre><code language="C++">switch (event) 
{ 
   case E_wakeup: 
      do_wakeup(); 
      break;       /* unconditional control transfer   */ 
      do_more();   /* Not compliant - unreachable code */ 
      /* ... */ 
   default: 
      /* ... */ 
      break; 
}</code></pre>
<p>A whole function will be unreachable if there is no means by which it can be 
called. Code that is excluded by pre-processor directives is not present 
following pre-processing, and is therefore not subject to this rule.</p>
""",
        'MISRA08_0-1-1': """\
<p><b>Unreachable Code (C, C++, ObjC)</b></p>
<p>Code is unreachable if there is no syntactic (control flow) path
to it. If such code exists, it is unclear if this is intentional or 
simply that an appropriate path has been accidentally omitted. Compilers may 
choose not to generate code for these constructs, meaning that, even
if the unreachable code is intentional, it may not be present in 
the final executable code.
<p>Missing statements, often caused by editing activities, are a common source 
of unreachable code.</p>
<b>Example</b><pre><code language="C++">
int16_t with_unreach ( int16_t para ) 
{ 
   int16_t local;
   local = 0;
   switch ( para ) 
   {
      local = para;   // unreachable - Non-compliant
      case 1: 
      { 
         break; 
      }
      default: 
      { 
         break; 
      }
   } 
   return para; 
   para++;            // unreachable - Non-compliant 
}</code></pre>


""",
        'MISRA23_2.1': """\
<p><b>Unreachable Code (C, C++, ObjC)</b></p>
<p>Provided that a program does not exhibit any undefined behavior,
unreachable code cannot be executed and cannot have any effect on the program's
outputs. The presence of unreachable code may therefore indicate an error in
the program's logic.
</p>
 
<p>
A compiler is permitted to remove any unreachable code although it does not
have to do so. Unreachable code that is not removed by the compiler wastes
resources, for example:
</p>
 
<ul>
<li>
It occupies space in the target machine's memory;
</li>
<li>
Its presence may cause a compiler to select longer, slower jump instructions
when transferring control around the unreachable code;
</li>
<li>
Within a loop, it might prevent the entire loop from residing in an instruction
cache.
</li>
</ul>
 
<p>
It is sometimes desirable to insert code that appears to be unreachable in
order to handle exceptional cases. For example, in a switch statement in which
every possible value of the controlling expression is covered by an explicit
case, a default clause shall be present according to Rule 16.4. The purpose of
the default clause is to trap a value that should not normally occur but that
may have been generated as a result of:
</p>
 
<ul>
<li>
Undefined behavior present in the program;
</li>
<li>
A failure of the processor hardware.
</li>
</ul>
 
<p>
If a compiler can prove that a default clause is unreachable, it may remove it,
thereby eliminating the defensive action. On the assumption that the defensive 
action is important, it will be necessary either to demonstrate that the
compiler does not eliminate the code despite it being unreachable, or to take 
steps to make the defensive code reachable. The former course of action 
requires a deviation against this rule, probably with a review of the object
code or unit testing being used to support such a deviation. The latter course
of action can usually be achieved by means of a volatile access. For example, a
compiler might determine that the range of values held by x is covered by the 
case clauses in a switch statement such as:
</p>
 
<pre>
<code language="C++">
uint16_t x;
 
switch ( x )
 
</code></pre>
 
<p>
By forcing x to be accessed by means of a volatile qualified lvalue, the
compiler has to assume that the controlling expression could take any value:
</p>
 
<pre>
<code language="C++">switch ( *( volatile uint16_t * ) &x )</code> 
</pre>

<p>
<em>Note:</em> code that has been conditionally excluded by pre-processor 
directives is not subject to this rule as it is not presented to the later 
phases of translation.
</p>

<p><b>Example</b></p>

<pre>
<code language="C++">
  enum light { red, amber, red_amber, green };

  enum light next_light ( enum light c )
  {
    enum light res;
    switch ( c )
    {
      case red:
        res = red_amber;
        break;
      case red_amber:
        res = green;
        break;
      case green:
        res = amber;
        break;
      case amber:
        res = red;
        break;
      default:
      {
         /*
          * This default will only be reachable if the parameter c
          * holds a value that is not a member of enum light.
          */
        error_handler ( );
        break;
      }
    }
    return res;
    res = c;  /* Non-compliant - this statement is
               * certainly unreachable */
  }
</code>
</pre>

<p><b>See also</b></p>
<p>Rule 14.3, Rule 16.4
</p>
""",
        'MISRA23_0.0.1': """\
<p><b>Amplification</b></p>
<p>
A statement is unreachable if the block containing it is not reachable from the entry block of the Control Flow Graph (CFG) for the function.
</p>
<p>
For the purpose of this rule:
</p>
<ul>
<li>Both operands of a reachable logical AND (&&) or logical OR (||) operator are considered reachable; and
</li>>
<li>
All three operands of a reachable conditional operator (?:) are considered reachable; and
</li>
<li>
The blocks linked by the edges from a condition of a selection-statement or an iteration-statement
are all considered reachable, except when the condition is a constant expression, in which case
only the blocks linked by edges selected by the condition are considered reachable; and
</li>
<li>
A call to a function declared [[noreturn]] has no CFG out edge; and
</li>
<li>
If a try compound-statement of a (function-)try-block does not contain a reachable, potentially throwing statement, then all catch-handlers are unreachable, otherwise all catch-handlers are
considered reachable subject to the restriction that a catch-handler that appears after a more
generic handler of the same try-block is not reachable.
</li>
<li>
The rule does not apply to statements in the discarded branch of a constexpr if statement.
</li>
<p><b>Rationale</b></p>
<p>
Unreachable code often indicates a defect in the program, as, assuming that the program does not
exhibit any undefined behaviour, unreachable code cannot be executed and cannot have any effect on
the program’s outputs.
</p>
<p>
In order to avoid crosstalk with Rule 0.0.2, the handling of logical and conditional operators in the
conceptual CFG used by this rule diCers from that in a traditional CFG.
</p>
<p><b>Example</b></p>
<pre>
<code language="C++">
bool f0();
int32_t f1( int32_t c, int32_t & res )
{
 if ( false && f0() ) { } // Compliant - statement is considered to be reachable
 return res;
 res = c; // Non-compliant - not reachable from entry block
 bool result; // Non-compliant - not reachable from entry block
}
void f2( int32_t i )
{
 while ( true ) // Constant condition - single edge into body of loop
 {
   if ( i != 0 )
   {
     break; // Adds edge to statements following the loop body
   }
 }
 ++i; // Compliant - reachable via 'break'
 while ( true ) // Constant condition - single edge into body of loop
 { 
   f();
 }
 ++i; // Non-compliant - not reachable from entry block
}
void f3( int32_t i )
{
 goto LABEL;
 ++i; // Non-compliant - no edge to this block
LABEL:
++i; // Compliant
}
class BaseException {};
class DerivedException: public BaseException {};
void f4()
{
 try { /* ... */ }
 catch ( BaseException & b ) { }
 catch ( DerivedException & d ) { } // Non-compliant - will be caught above
}
void f5() noexcept;
void f6()
{
 try { f5(); }
 catch ( int32_t ) { } // Non-compliant - f5 is not potentially-throwing
 catch ( ... ) { } // Non-compliant - f5 is not potentially-throwing
}
void f7( int32_t i )
{
 try
 {
   throw i;
   ++i; // Non-compliant - no edge to this block
 }
 catch ( int32_t ) { } // Compliant - all catch-handlers are reachable
 catch ( int16_t ) { } // Compliant - all catch-handlers are reachable
 ++i; // Compliant
}
void f8();
int32_t f9( int32_t i )
{
 try
 {
   f8(); // Potentially-throwing
   return i * 2; // Compliant
 }
 catch( int32_t ) { } // Compliant - all catch-handlers are reachable
 return 0; // Compliant - even if f8 throws a type
} // other than int32_t
[[noreturn]] void f10() noexcept;
int32_t f11()
{
 f10(); // Does not return
 return 0; // Non-compliant
}
</code></pre>
""",
    'CPP_C034': """\
<p><b>Unreachable Code (C, C++, ObjC)</b></p>
<p>Verify that source code does not contain unreachable code. It only returns
the first instance of unreachable code in each function/method. This check
identifies code that will never be reached due to flow issues, such as the
code after a 'goto' or 'return' statement. It doesn't actually consider the
values inside of the conditional statements since those frequently change at
runtime.</p>
"""
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('file ~dll')

def test_global():
    return False

def test_language(language, id):
    if id == 'RECOMMENDED_12':
        return language in {'Ada', 'C++', 'C#', 'Fortran', 'Java', 'Jovial', 'Pascal', 'Plm', 'Python', 'VHDL', 'Web'}
    else:
        return language in {'C++'}


def check(check, file):
    funcRefs = file.filerefs("definein, body declarein", "c function ~unknown ~unresolved" +
            ",java method ~abstract" +
            ",fortran subroutine, fortran function, fortran main program ~unknown ~unresolved" +
            ",c# method ~abstract" +
            ",vhdl procedure, vhdl function" +
            ",web function, web method" +
            ",ada procedure, ada function, ada task", True)




    for funcRef in funcRefs:
        func = funcRef.ent()
        if not func.control_flow_graph():
            continue

        cfg = func.control_flow_graph()

        # Connect nodes
        start = cfg.start()
        end = start.end_node()
        nodes = cfg.nodes()
        nodeDict = {}
        for node in nodes:
            nodeDict[node] = [False, False, []]
            children = node.children()
            for child in children:
                if not child in nodeDict.keys():
                    nodeDict[child] = [False, False, []]

                nodeDict[child][2].append(1)


        try:
            traverse(start, nodeDict)
            filter(nodes, nodeDict, start, end)
            collapse(nodes, nodeDict)
        except:
            return


        for node in nodes:
            if node == end:
                continue
            if not (nodeDict[node][0] or nodeDict[node][1]):
                try:
                    check.violation(func, file, node.line_begin(), node.column_begin(), ERR1)
                except:
                    check.violation(func, file, 1, 1, ERR1)
                
                break



# mark children reachable from node as 'reachable'
def traverse(node, nodeDict):
    toVisit = [node]
    while toVisit:
        n = toVisit.pop(0)
        if not nodeDict[n][0]:
            nodeDict[n][0] = True
            toVisit.extend(n.children())

    return node, nodeDict


# mark implicit nodes as 'filtered'
def filter(nodes, nodeDict, start, end):
    for node in nodes:
        kind = node.kind()
        if (kind == 'block-begin' and node['children'] <= 1) or kind in ['do-while','end-case','else','end-if','loop','end-loop','end-switch','end-block','end-try','repeat-until','end-with-do']:
            nodeDict[node][1] = True


    return nodes, nodeDict
            


# collapse node into parent and mark as 'filtered'
def collapse(nodes, nodeDict):
    for node in nodes:
        if len(node.children()) == 1:
            kind = node.kind()
            child = node.children()[0]
            if kind == 'passive' and node.children()[0].kind() == 'passive' and len(nodeDict[node.children()[0]][2]) == 1:
                nodeDict[node.children()[0]][1] = True

    return nodes
