ERR1 = 'Do not treat a predefined identifier as an object if it might only be implemented as a macro.'
PREDEFINED_IDENTIFIER = {"assert", "errno", "math_errhandling",
                         "setjmp", "va_arg", "va_copy", "va_end", "va_start"}


# The ID for the check
def id():
    return ('MSC38-C')


# The short name of the check
def name(id):
    return {
        'MSC38-C': 'Published Standards/SEI Cert Standards/C/Do not treat a predefined identifier as an object if it might only be implemented as a macro',
    }[id]





def tags(id):
    return {
        'MSC38-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
            'Identifiers',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not treat a predefined identifier as an object if it might only be implemented as a macro'


# The long description of the check
def detailed_description():
    return """
<p>Do not treat a predefined identifier as an object if it might only be implemented as a macro</p>
<p><b>Risk Assessment</b></p>
<p>Accessing objects or functions underlying the specific macros enumerated in this rule is undefined behavior.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/MSC38-C.+Do+not+treat+a+predefined+identifier+as+an+object+if+it+might+only+be+implemented+as+a+macro</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">extern int errno;
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for obj_ref in file.filerefs("Define, Declare", "Object"):
        if obj_ref.ent().longname() in PREDEFINED_IDENTIFIER:
            check.violation(obj_ref.ent(), file, obj_ref.line(),
                            obj_ref.column(), ERR1)
