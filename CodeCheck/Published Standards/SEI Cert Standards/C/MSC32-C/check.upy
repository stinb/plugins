ERR1 = 'Properly seed pseudorandom number generators.'


# The ID for the check
def id():
    return ('MSC32-C')


# The short name of the check
def name(id):
    return {
        'MSC32-C': 'Published Standards/SEI Cert Standards/C/Properly seed pseudorandom number generators',
    }[id]





def tags(id):
    return {
        'MSC32-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 50',
            'Likelihood: Likely',
            'Remediation Cost: Low',
            'Priority: P18',
            'Level: L1',
            'Libraries',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Properly seed pseudorandom number generators'


# The long description of the check
def detailed_description():
    return """
<p>Properly seed pseudorandom number generators</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/MSC32-C.+Properly+seed+pseudorandom+number+generators</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void func(void) {
  for (unsigned int i = 0; i &lt; 10; ++i) {
    /* Always generates the same sequence */
    printf("%ld, ", random());
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        random_ref = None
        srandom_ref = None

        for call_ref in func_ref.ent().refs("Call", "Function"):
            if call_ref.ent().longname() == "random" or call_ref.ent().longname() == "rand":
                random_ref = call_ref
            elif call_ref.ent().longname() == "srandom" or call_ref.ent().longname() == "srand":
                srandom_ref = call_ref

        if (random_ref and not srandom_ref) or (random_ref and srandom_ref and random_ref.line() < srandom_ref.line()):
            check.violation(random_ref.ent(), file,
                            random_ref.line(), random_ref.column(), ERR1)
