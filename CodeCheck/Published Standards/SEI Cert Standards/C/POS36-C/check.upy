ERR1 = 'Observe correct revocation order while relinquishing privileges.'


# The ID for the check
def id():
    return ('POS36-C')


# The short name of the check
def name(id):
    return {
        'POS36-C': 'Published Standards/SEI Cert Standards/C/Observe correct revocation order while relinquishing privileges',
    }[id]





def tags(id):
    return {
        'POS36-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 75',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P12',
            'Level: L1',
            'Libraries',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Observe correct revocation order while relinquishing privileges'


# The long description of the check
def detailed_description():
    return """
<p>Observe correct revocation order while relinquishing privileges</p>
<p><b>Risk Assessment</b></p>
<p>Failing to observe the correct revocation order while relinquishing privileges allows an attacker to regain elevated privileges.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/POS36-C.+Observe+correct+revocation+order+while+relinquishing+privileges</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">/* Drop superuser privileges in incorrect order */

if (setuid(getuid()) == -1) {
  /* handle error condition */
}
if (setgid(getgid()) == -1) {
  /* handle error condition */
}

/* It is still possible to regain group privileges due to
 * incorrect relinquishment order */
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        setuid_called = False

        for call_ref in sorted(func_ref.ent().refs("Call"), key=lambda x: x.line()):
            if call_ref.ent().name() == "setuid":
                setuid_called = True
            elif call_ref.ent().name() == "setgid" and setuid_called:
                check.violation(call_ref.ent(), file,
                                call_ref.line(), call_ref.column(), ERR1)
                break
