# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2024-01-16


import re
import enum


ERR1 = 'Inappropriate storage duration for shared object for POSIX threads'

RE_DYNAMIC_STORAGE = r'^(m|c|re|aligned_)alloc\('
RE_THREAD_LOCAL_STORAGE = r'^(__thread)|((_T|t)hread_local)$'

class Storage(enum.Enum):
    Automatic = 0
    Static = 1
    ThreadLocal = 2


def ids():
    return ('POS50-C', 'CPP_M021')


def name(id):
    return {
        'POS50-C': '''Published Standards/SEI Cert Standards/C/\
Declare objects shared between POSIX threads with appropriate storage durations''',
        'CPP_M021': '''All Checks/Language Specific/C and C++/Memory Allocation/\
Declare objects shared between POSIX threads with appropriate storage durations''',
    }[id]


def tags(id):
    return {
        'POS50-C': [
            'Memory Allocation',
            'Language: C',
            'Language: C++',
            'Standard: SEI CERT C',
            'Severity: 50',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P4',
            'Level: L3',
        ],
        'CPP_M021': [
            'Memory Allocation',
            'Language: C',
            'Language: C++',
        ],
    }.get(id)


def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Declare objects shared between POSIX threads with appropriate storage
durations</p>

<p><b>Risk Assessment</b></p>
<p>Threads that reference the stack of other threads can potentially overwrite
important information on the stack, such as function pointers and return
addresses. However, it would be difficult for an attacker to exploit this code
from this error alone. The compiler will not generate warnings if the programmer
decides to give another thread access to one thread's local variables, so a
programmer may not catch a potential error at compile time. The remediation cost
for this error is high because analysis tools have difficulty diagnosing
problems with concurrency and race conditions.</p>

<p><b>Full Standard</b></p>
<p><a href='https://wiki.sei.cmu.edu/confluence/display/c/POS50-C.+Declare+objects+shared+between+POSIX+threads+with+appropriate+storage+durations'>
https://wiki.sei.cmu.edu/confluence/display/c/POS50-C.+Declare+objects+shared+between+POSIX+threads+with+appropriate+storage+durations</a></p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">\
void *childThread(void *val) {
  /*
   * Depending on the order of thread execution, the object
   * referred to by val may be out of its lifetime, resulting
   * in a potentially incorrect result being printed out.
   */
  int *res = (int *)val;
  printf("Result: %d\\n", *res);
  return NULL;
}

void createThread(pthread_t *tid) {
  /* Store 1 in val on the stack. */
  int val = 1;
  int result;
  if ((result = pthread_create(tid, NULL, childThread, &val)) != 0) {
    /* Handle error */
  }
}

int main(void) {
  pthread_t tid;
  int result;
  createThread(&tid);
  if ((result = pthread_join(tid, NULL)) != 0) {
    /* Handle error */
  }
  return 0;
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>This check relies on simple expressions in arguments, which result in a
reference between the argument and the parameter.</p>
'''


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Assign Ptr', 'Object, Parameter'):
        ent = ref.ent()

        # Skip if not used by pthread_create
        callee = ref.scope().parent()
        if not callee or callee.name() != 'pthread_create':
            continue

        # Check lexemes to see if it's the last argument of pthread_create
        # Skip if no lexeme: the entity name
        lex = file.lexer(False).lexeme(ref.line(), ref.column())
        if not lex or lex.text() != ent.name():
            continue
        # Skip if no lexeme: )
        lex = lex.next(True, True)
        if not lex or lex.text() != ')':
            continue

        # Skip if the value is dynamically allocated
        originalEnt = getOriginalEnt(ent)
        value = originalEnt.value()
        if value and re.search(RE_DYNAMIC_STORAGE, value):
            continue

        # Get definition to find the storage duration
        defineIn = originalEnt.ref('Definein')
        if defineIn:
            # Skip if static storage
            storage = getStorageDuration(defineIn)
            if storage == Storage.Static:
                continue
            # Skip if not static storage and exists at thread-synchronization
            else:
                idEnt = getIdEnt(callee, ref)
                idEntDefineIn = idEnt.ref('Definein') if idEnt else None
                if idEntDefineIn:
                    # See if the id exists at the same time as the last argument
                    bothExist = False
                    idEntParent = idEnt.parent()
                    originalEntParent = originalEnt.parent()
                    if idEntParent and originalEntParent \
                    and idEntParent.kind().check('Function') \
                    and originalEntParent.kind().check('Function'):
                        bothExist = idEntParent == originalEntParent
                    else:
                        bothExist = True
                    # See if the id exists and the thread is synced here
                    caller = idEnt.parent() or originalEnt.parent()
                    caller = caller if caller.kind().check('Function') else None
                    if bothExist and threadSynced(idEnt, caller):
                        continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1)


def threadSynced(idEnt, callerOrNone):
    idUses = None

    for assignBy in idEnt.refs('Assignby Value', 'Parameter'):
        # Skip if not a synchronization function
        callee = assignBy.ent().parent()
        if not callee or callee.name() != 'pthread_join':
            continue

        # If there's a specified caller
        if callerOrNone:
            # Get the id uses
            if idUses == None:
                idUses = idEnt.refs('Useby', 'Function')
            # See if the user is the specified caller
            for idUse in idUses:
                if refAtRef(idUse, assignBy):
                    return idUse.ent() == callerOrNone

        return True

    return False


def getIdEnt(callee, assignPtrRef):
    ref = assignPtrRef
    ent = ref.ent()

    # Get caller or fail
    caller = None
    for useby in ent.refs('Useby', 'Function'):
        if refAtRef(useby, ref):
            caller = useby.ent()
            break
    if not caller:
        return None

    # Get the call ref of pthread_create or fail
    call = None
    for otherCall in callee.refs('Callby', 'Function'):
        # Skip if pthread_create call is in another function
        if otherCall.ent() != caller:
            continue
        # Skip if pthread_create call isn't before the last argument
        if not refBeforeRef(otherCall, ref):
            continue
        # Set the call to be the last one in the file
        if not call or not refBeforeRef(call, otherCall):
            call = otherCall
    if not call:
        return None

    # Find the id ent in the call
    idEnt = None
    for use in caller.refs('Use', 'Object, Parameter'):
        otherEnt = use.ent()
        # Skip if not an id
        t = otherEnt.type()
        if use.kind().check('Addr'):
            if t != 'pthread_t':
                continue
        else:
            if t != 'pthread_t *':
                continue
        # Skip if not between pthread_create call and last argument
        if not refBeforeRef(call, use) or not refBeforeRef(use, ref):
            continue
        # Found
        idEnt = otherEnt
        break

    return getOriginalEnt(idEnt) if idEnt else None


def refAtRef(a, b):
    return a.file() == b.file() and a.line() == b.line() and a.column() == b.column()


def refBeforeRef(a, b):
    if a.file() != b.file():
        return False
    aLine, bLine = a.line(), b.line()
    if aLine > bLine or (aLine == bLine and a.column() >= b.column()):
        return False
    return True


def getOriginalEnt(ent):
    seen = set()

    while True:
        assigners = ent.ents('Assign Ptr')
        if len(assigners) != 1:
            return ent

        assigner = assigners[0]

        if assigner in seen:
            return ent
        seen.add(ent)

        ent = assigner

    return ent


def getStorageDuration(defineInRef):
    if isThreadLocal(defineInRef):
        return Storage.ThreadLocal
    elif defineInRef.scope().kind().check('Static, Global'):
        return Storage.Static
    else:
        return Storage.Automatic


def isThreadLocal(defineInRef):
    ref = defineInRef
    line = ref.line()

    lex = ref.file().lexer(False).lexeme(line, ref.column())
    while lex and lex.line_begin() == line:
        text = lex.text()
        if re.search(RE_THREAD_LOCAL_STORAGE, text):
            return True
        if text in {';', '{', '}'}:
            return False
        lex = lex.previous(True, True)

    return False
