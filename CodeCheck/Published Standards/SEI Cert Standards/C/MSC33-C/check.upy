ERR1 = 'Do not pass invalid data to the asctime() function.'


# The ID for the check
def id():
    return ('MSC33-C')


# The short name of the check
def name(id):
    return {
        'MSC33-C': 'Published Standards/SEI Cert Standards/C/Do not pass invalid data to the asctime() function',
    }[id]





def tags(id):
    return {
        'MSC33-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 75',
            'Likelihood: Likely',
            'Remediation Cost: Low',
            'Priority: P27',
            'Level: L1',
            'Libraries',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not pass invalid data to the asctime() function'


# The long description of the check
def detailed_description():
    return """
<p>Do not pass invalid data to the asctime() function</p>
<p><b>Risk Assessment</b></p>
<p>On implementations that do not detect output-string-length overflow, it is possible to overflow the output buffers.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/MSC33-C.+Do+not+pass+invalid+data+to+the+asctime%28%29+function</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;time.h&gt;

void func(struct tm *time_tm) {
  char *time = asctime(time_tm);
  /* ... */
}
</code></pre>
<p><b>Developer's Notes</b></p><p>This check automatically flags the use of asctime function.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Call", "Unresolved Function"):
        if func_ref.ent().name() == "asctime":
            check.violation(func_ref.ent(), file, func_ref.line(),
                            func_ref.column(), ERR1)
