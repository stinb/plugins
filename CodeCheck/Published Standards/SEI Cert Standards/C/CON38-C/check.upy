ERR1 = 'Preserve thread safety and liveness when using condition variables.'


# The ID for the check
def id():
    return ('CON38-C')


# The short name of the check
def name(id):
    return {
        'CON38-C': 'Published Standards/SEI Cert Standards/C/Preserve thread safety and liveness when using condition variables',
    }[id]





def tags(id):
    return {
        'CON38-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
            'Threads',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Preserve thread safety and liveness when using condition variables'


# The long description of the check
def detailed_description():
    return """
<p>Preserve thread safety and liveness when using condition variables</p>
<p><b>Risk Assessment</b></p>
<p>Failing to preserve the thread safety and liveness of a program when using condition variables can lead to indefinite blocking and denial of service (DoS).</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/CON38-C.+Preserve+thread+safety+and+liveness+when+using+condition+variables</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;stdio.h&gt;
#include &lt;threads.h&gt;

enum { NTHREADS = 5 };

mtx_t mutex;
cnd_t cond;

int run_step(void *t) {
  static size_t current_step = 0;
  size_t my_step = *(size_t *)t;

  if (thrd_success != mtx_lock(&mutex)) {
    /* Handle error */
  }

  printf("Thread %zu has the lock\n", my_step);
  while (current_step != my_step) {
    printf("Thread %zu is sleeping...\n", my_step);

    if (thrd_success != cnd_wait(&cond, &mutex)) {
      /* Handle error */
    }

    printf("Thread %zu woke up\n", my_step);
  }
  /* Do processing ... */
  printf("Thread %zu is processing...\n", my_step);
  current_step++;

  /* Signal awaiting task */
  if (thrd_success != cnd_signal(&cond)) {
    /* Handle error */
  }

  printf("Thread %zu is exiting...\n", my_step);

  if (thrd_success != mtx_unlock(&mutex)) {
    /* Handle error */
  }
  return 0;
}
int main(void) {
  thrd_t threads[NTHREADS];
  size_t step[NTHREADS];

  if (thrd_success != mtx_init(&mutex, mtx_plain)) {
    /* Handle error */
  }

  if (thrd_success != cnd_init(&cond)) {
    /* Handle error */
  }

  /* Create threads */
  for (size_t i = 0; i &lt; NTHREADS; ++i) {
    step[i] = i;

    if (thrd_success != thrd_create(&threads[i], run_step,
                                    &step[i])) {
      /* Handle error */
    }
  }

  /* Wait for all threads to complete */
  for (size_t i = NTHREADS; i != 0; --i) {
    if (thrd_success != thrd_join(threads[i-1], NULL)) {
      /* Handle error */
    }
  }

  mtx_destroy(&mutex);
  cnd_destroy(&cond);
  return 0;
}
</code></pre>
<p><b>Developer's Notes</b></p><p>This check flags the cnd_signal or pthread_cond_signal that does not use a condition variable array.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for call_ref in file.filerefs("Call", "Unresolved Function"):
        if call_ref.ent().name() in {"cnd_signal", "pthread_cond_signal"}:
            lex = lexer.lexeme(call_ref.line(), call_ref.column())
            on_param = 0

            while lex:
                if lex.text() == "(" and lex.token() == "Punctuation":
                    on_param += 1
                elif lex.text() == ")" and lex.token() == "Punctuation":
                    on_param -= 1

                    if not on_param:
                        break
                elif lex.token() == "Identifier" and lex.ent() and ("cnd_t" in lex.ent().type() or "pthread_cond_t" in lex.ent().type()):
                    lex_next = lex.next(ignore_whitespace=True)

                    if lex_next.text() != "[":
                        check.violation(call_ref.ent(), file,
                                        call_ref.line(), call_ref.column(), ERR1)
                    break

                lex = lex.next(ignore_whitespace=True,
                               ignore_comments=True)
