# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2023-04-27


import re

from Modules import findClose, refComparatorSameFile


ERR1 = 'Privilege relinquishment is not ensured'

SET_ID_FUNCTIONS = {'seteuid', 'setuid'}
GET_ID_FUNCTIONS = {'geteuid', 'getuid'}


def ids():
    return ('POS37-C')


def name(id):
    return {
        'POS37-C': '''Published Standards/SEI Cert Standards/C/\
Ensure that privilege relinquishment is successful''',
    }[id]





def tags(id):
    return {
        'POS37-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 75',
            'Likelihood: Probable',
            'Remediation Cost: Low',
            'Priority: P18',
            'Level: L1',
            'Miscellaneous',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'POS37-C': '''\
<p>
Ensure that privilege relinquishment is successful
</p>

<p><b>Risk Assessment</b></p>
<p>
If privilege relinquishment conditions are left unchecked, any flaw in the
program may lead to unintended system compromise corresponding to the more
privileged user or group account.
</p>

<p>
For the full standard:
<i>
https://wiki.sei.cmu.edu/confluence/display/c/POS37-C.+Ensure+that+privilege+relinquishment+is+successful
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">/* Code intended to run with elevated privileges */

/* Temporarily drop privileges */
if (seteuid(getuid()) != 0) {
  /* Handle error */
}

/* Code intended to run with lower privileges */

if (need_more_privileges) {
  /* Restore privileges */
  if (seteuid(0) != 0) {
    /* Handle error */
  }

  /* Code intended to run with elevated privileges */
}

/* ... */

/* Permanently drop privileges */
if (setuid(getuid()) != 0) {
  /* Handle error */
}

/*
 * Code intended to run with lower privileges,
 * but if privilege relinquishment failed,
 * attacker can regain elevated privileges!
 */
</code></pre>
''',
    }[id]


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for define in file.filerefs('Define', 'Function'):
        caller = define.ent()

        privilegeChanged = False
        privilegeChecked = False

        # Get all calls and ensure that they're sorted
        calls = caller.refs('Call')
        calls.sort(key=refComparatorSameFile)
        for call in calls:
            callee = call.ent()

            # If privilege is changed
            if callee.name() in SET_ID_FUNCTIONS:
                privilegeChanged = True

                # For the last privilege change, see if privilege escalation
                # is checked to be impossible
                privilegeChecked = isPrivilegeChecked(call)

        if privilegeChanged and not privilegeChecked:
            check.violation(caller, file, define.line(), define.column(), ERR1)


def isPrivilegeChecked(call):
    if call.ent().name() != 'setuid':
        return False

    lexer = call.file().lexer(lookup_ents=False, expand_macros=True)
    lex = lexer.lexeme(call.line(), call.column())

    # Match (
    lex = lex.next(True, True)
    if not lex or lex.text() != '(':
        return False

    # Match anything but get-functions until )
    close = findClose(lex)
    if not close:
        return False
    while lex and not lexemesEqual(lex, close):
        if lex.text() in GET_ID_FUNCTIONS:
            return False
        lex = lex.next(True, True)

    # Match == or !=
    lex = lex.next(True, True)
    if not lex or lex.text() not in {'==', '!='}:
        return False

    return True


def lexemesEqual(a, b):
    return a.column_begin() == b.column_begin() and a.line_begin() == b.line_begin()
