ERR1 = 'Guarantee that storage for strings has sufficient space for character data and the null terminator.'


# The ID for the check
def id():
    return ('STR31-C')


# The short name of the check
def name(id):
    return {
        'STR31-C': 'Published Standards/SEI Cert Standards/C/Guarantee that storage for strings has sufficient space for character data and the null terminator',
    }[id]





def tags(id):
    return {
        'STR31-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 75',
            'Likelihood: Likely',
            'Remediation Cost: Medium',
            'Priority: P18',
            'Level: L1',
            'Memory Allocation',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Guarantee that storage for strings has sufficient space for character data and the null terminator'


# The long description of the check
def detailed_description():
    return """
<p>Guarantee that storage for strings has sufficient space for character data and the null terminator</p>
<p><b>Risk Assessment</b></p>
<p>Copying string data to a buffer that is too small to hold that data results in a buffer overflow. Attackers can exploit this condition to execute arbitrary code with the permissions of the vulnerable process.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/STR31-C.+Guarantee+that+storage+for+strings+has+sufficient+space+for+character+data+and+the+null+terminator</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;stddef.h&gt;

void copy(size_t n, char src[n], char dest[n]) {
   size_t i;

   for (i = 0; src[i] && (i &lt; n); ++i) {
     dest[i] = src[i];
   }
   dest[i] = '\\0';
}



#include &lt;stdio.h&gt;

#define BUFFER_SIZE 1024

void func(void) {
  char buf[BUFFER_SIZE];
  if (gets(buf) == NULL) {
    /* Handle error */
  }
}


#include &lt;stdio.h&gt;

enum { BUFFERSIZE = 32 };

void func(void) {
  char buf[BUFFERSIZE];
  char *p;
  int ch;
  p = buf;
  while ((ch = getchar()) != '\\n' && ch != EOF) {
    *p++ = (char)ch;
  }
  *p++ = 0;
  if (ch == EOF) {
      /* Handle EOF or error */
  }
}


#include &lt;stdio.h&gt;

enum { BUF_LENGTH = 1024 };

void get_data(void) {
  char buf[BUF_LENGTH];
  if (1 != fscanf(stdin, "%s", buf)) {
    /* Handle error */
  }

  /* Rest of function */
}


#include &lt;string.h&gt;

int main(int argc, char *argv[]) {
  /* Ensure argv[0] is not null */
  const char *const name = (argc && argv[0]) ? argv[0] : "";
  char prog_name[128];
  strcpy(prog_name, name);

  return 0;
}



#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

void func(void) {
  char buff[256];
  char *editor = getenv("EDITOR");
  if (editor == NULL) {
    /* EDITOR environment variable not set */
  } else {
    strcpy(buff, editor);
  }
}


#include &lt;stdio.h&gt;

void func(const char *name) {
  char filename[128];
  sprintf(filename, "%s.txt", name);
}
</code></pre>
<p><i>Developer Notes: </i>This check only flags the following: 1. The use of gets function. 2. Copying an object returned by getenv using strcpy.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for call_ref in file.filerefs("Call", "Unresolved Function"):
        if call_ref.ent().name() == "gets":
            check.violation(call_ref.ent(), file, call_ref.line(),
                            call_ref.column(), ERR1)

    for func_ref in file.filerefs("Define", "Function"):
        getenv_objs = []

        for obj_ref in func_ref.ent().refs("Define", "Object"):
            obj_val = obj_ref.ent().value()

            if obj_val and "getenv" in obj_val:
                getenv_objs.append(obj_ref.ent().id())

        for call_ref in func_ref.ent().refs("Call", "Unresolved Function"):
            if call_ref.ent().name() == "strcpy":
                lex = lexer.lexeme(call_ref.line(), call_ref.column())
                on_param = 0
                param_ctr = 0

                while lex:
                    if lex.text() == "(":
                        on_param += 1
                    elif lex.text() == ")":
                        on_param -= 1

                        if not on_param:
                            break
                    elif (on_param == 1) and (lex.text() == ","):
                        param_ctr += 1
                    elif (param_ctr == 1) and lex.ent() and (lex.ent().id() in getenv_objs):
                        check.violation(call_ref.ent(), file,
                                        call_ref.line(), call_ref.column(), ERR1)

                    lex = lex.next(ignore_whitespace=True)
