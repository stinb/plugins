import re


ERR1 = 'Do not access shared objects in signal handlers.'


# The ID for the check
def id():
    return ('SIG31-C')


# The short name of the check
def name(id):
    return {
        'SIG31-C': 'Published Standards/SEI Cert Standards/C/Do not access shared objects in signal handlers',
    }[id]





def tags(id):
    return {
        'SIG31-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 75',
            'Likelihood: Likely',
            'Remediation Cost: High',
            'Priority: P9',
            'Level: L2',
            'Libraries',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not access shared objects in signal handlers'


# The long description of the check
def detailed_description():
    return """
<p>Do not access shared objects in signal handlers</p>
<p><b>Risk Assessment</b></p>
<p>Accessing or modifying shared objects in signal handlers can result in accessing data in an inconsistent state. Michal Zalewski's paper "Delivering Signals for Fun and Profit" [Zalewski 2001] provides some examples of vulnerabilities that can result from violating this and other signal-handling rules.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/SIG31-C.+Do+not+access+shared+objects+in+signal+handlers</i></p>
<p><b>Exceptions</b></p>
<p><i>SIG31-C-EX1:  The C Standard, 7.14.1.1 paragraph 5 [ISO/IEC 9899:2011], makes a special exception for errno when a valid call to the signal() function results in a SIG_ERR return, allowing errno to take an indeterminate value. (See ERR32-C. Do not rely on indeterminate values of errno.)</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;signal.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

enum { MAX_MSG_SIZE = 24 };
char *err_msg;

void handler(int signum) {
  strcpy(err_msg, "SIGINT encountered.");
}

int main(void) {
  signal(SIGINT, handler);

  err_msg = (char *)malloc(MAX_MSG_SIZE);
  if (err_msg == NULL) {
    /* Handle error */
  }
  strcpy(err_msg, "No errors yet.");
  /* Main code loop */
  return 0;
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for call_ref in file.filerefs("Call", "Unresolved Function"):
        if call_ref.ent().name() == "signal":
            lex = lexer.lexeme(call_ref.line(), call_ref.column())
            on_param = 0

            while lex:
                if lex.text() == "(":
                    on_param += 1
                elif lex.text() == ")":
                    on_param -= 1

                    if not on_param:
                        break
                elif on_param and (lex.token() == "Identifier") and lex.ent() and lex.ent().kind().check("Function"):
                    for obj_ref in lex.ent().refs("", "Global Object"):
                        ent_type = obj_ref.ent().type()
                        ent_utype = obj_ref.ent().freetext("UnderlyingType")

                        if (ent_type and "volatile" in ent_type) or (ent_utype and re.search(r"^_Atomic", ent_utype)):
                            continue

                        check.violation(
                            obj_ref.scope(), file, obj_ref.line(), obj_ref.column(), ERR1)
                        break

                lex = lex.next(ignore_whitespace=True)
