ERR1 = 'Do not perform operations that can block while holding a POSIX lock.'
BLOCKING_FUNCS = {"recv", "recvfrom", "recvmsg", "send", "sendmsg", "sendto", "fopen", "fclose", "freopen",
                  "fprintf", "fscanf", "printf", "scanf", "sprintf", "sscanf", "vfprintf", "vprintf", "vsprintf"}


# The ID for the check
def id():
    return ('POS52-C')


# The short name of the check
def name(id):
    return {
        'POS52-C': 'Published Standards/SEI Cert Standards/C/Do not perform operations that can block while holding a POSIX lock',
    }[id]





def tags(id):
    return {
        'POS52-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P2',
            'Level: L3',
            'Libraries',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not perform operations that can block while holding a POSIX lock'


# The long description of the check
def detailed_description():
    return """
<p>Do not perform operations that can block while holding a POSIX lock</p>
<p><b>Risk Assessment</b></p>
<p>Blocking or lengthy operations performed within synchronized regions could result in a deadlocked or an unresponsive system.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/POS52-C.+Do+not+perform+operations+that+can+block+while+holding+a+POSIX+lock</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">pthread_mutexattr_t attr;
pthread_mutex_t mutex;

void thread_foo(void *ptr) {
  uint32_t num;
  int result;
  int sock;

  /* sock is a connected TCP socket */

  if ((result = pthread_mutex_lock(&mutex)) != 0) {
    /* Handle Error */
  }

  if ((result = recv(sock, (void *)&num, sizeof(uint32_t), 0)) &lt; 0) {
    /* Handle Error */
  }

  /* ... */

  if ((result = pthread_mutex_unlock(&mutex)) != 0) {
    /* Handle Error */
  }
}

int main() {
  pthread_t thread;
  int result;

  if ((result = pthread_mutexattr_settype(
      &mutex, PTHREAD_MUTEX_ERRORCHECK)) != 0) {
    /* Handle Error */
  }

  if ((result = pthread_mutex_init(&mutex, &attr)) != 0) {
    /* Handle Error */
  }

  if (pthread_create(&thread, NULL,(void *)& thread_foo, NULL) != 0) {
    /* Handle Error */
  }

  /* ... */

  pthread_join(thread, NULL);

  if ((result = pthread_mutex_destroy(&mutex)) != 0) {
    /* Handle Error */
  }

  return 0;
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for func_ref in file.filerefs("Define", "Function"):
        mutex_locked = False

        for call_ref in sorted(func_ref.ent().refs("Call", "Function"), key=lambda x: x.line()):
            if call_ref.ent().name() in {"pthread_mutex_lock", "pthread_mutex_trylock"}:
                mutex_locked = True
            elif call_ref.ent().name() == "pthread_mutex_unlock":
                mutex_locked = False
            elif mutex_locked and call_ref.ent().name() in BLOCKING_FUNCS:
                if call_ref.ent().name() in {"recv", "recvfrom", "recvmsg", "send", "sendmsg", "sendto"}:
                    compliant = False
                    lex = lexer.lexeme(call_ref.line(), call_ref.column())
                    on_param = 0

                    while lex:
                        if lex.text() == "(":
                            on_param += 1
                        elif lex.text() == ")":
                            on_param -= 1

                            if not on_param:
                                break
                        elif on_param and lex.text() == "O_NONBLOCK" and lex.token() == "Identifier":
                            compliant = True
                            break

                        lex = lex.next(ignore_whitespace=True)

                    if compliant:
                        continue

                check.violation(call_ref.ent(), file,
                                call_ref.line(), call_ref.column(), ERR1)
