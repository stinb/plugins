ERR1 = 'Do not violate constraints.'


# The ID for the check
def id():
    return ('MSC40-C')


# The short name of the check
def name(id):
    return {
        'MSC40-C': 'Published Standards/SEI Cert Standards/C/Do not violate constraints',
    }[id]





def tags(id):
    return {
        'MSC40-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
            'Expressions',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not violate constraints'


# The long description of the check
def detailed_description():
    return """
<p>Do not violate constraints</p>
<p><b>Risk Assessment</b></p>
<p>Constraint violations are a broad category of error that can result in unexpected control flow and corrupted data.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/MSC40-C.+Do+not+violate+constraints</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">static int I = 12;
extern inline void func(int a) {
  int b = a * I;
  /* ... */
}


extern inline void func(void) {
  static int I = 12;
  /* Perform calculations which may modify I */
}


/* file1.c */

/* Externally linked definition of the function get_random() */
extern unsigned int get_random(void) {
  /* Initialize the seeds */
  static unsigned int m_z = 0xdeadbeef;
  static unsigned int m_w = 0xbaddecaf;

  /* Compute the next pseudorandom value and update the seeds */
  m_z = 36969 * (m_z & 65535) + (m_z &gt;&gt; 16);
  m_w = 18000 * (m_w & 65535) + (m_w &gt;&gt; 16);
  return (m_z &lt;&lt; 16) + m_w;
}


/* file2.c */

/* Inline definition of get_random function */
inline unsigned int get_random(void) {
  /*
   * Initialize the seeds
   * Constraint violation: static duration storage referenced
   * in non-static inline definition
   */
  static unsigned int m_z = 0xdeadbeef;
  static unsigned int m_w = 0xbaddecaf;

  /* Compute the next pseudorandom value and update the seeds */
  m_z = 36969 * (m_z & 65535) + (m_z &gt;&gt; 16);
  m_w = 18000 * (m_w & 65535) + (m_w &gt;&gt; 16);
  return (m_z &lt;&lt; 16) + m_w;
}

int main(void) {
  unsigned int rand_no;
  for (int ii = 0; ii &lt; 100; ii++) {
    /*
     * Get a pseudorandom number. Implementation defined whether the
     * inline definition in this file or the external definition
     * in file2.c is called.
     */
    rand_no = get_random();
    /* Use rand_no... */
  }

  /* ... */

  /*
   * Get another pseudorandom number. Behavior is
   * implementation defined.
   */
  rand_no = get_random();
  /* Use rand_no... */
  return 0;
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for func_ref in file.filerefs("Define", "Function ~Static"):
        lexes = lexer.lexemes(func_ref.line(), func_ref.line())
        is_extern = False
        is_inline = False

        for lex in lexes:
            if lex.ent() and lex.ent().id() == func_ref.ent().id():
                break
            elif lex.text() == "extern" and lex.token() == "Keyword":
                is_extern = True
            elif lex.text() == "inline" and lex.token() == "Identifier":
                is_inline = True

        if is_extern and is_inline:
            flagged_lines = []

            for obj_ref in func_ref.ent().refs("", "Static Object"):
                if obj_ref.line() in flagged_lines:
                    continue

                flagged_lines.append(obj_ref.line())
                check.violation(obj_ref.ent(), obj_ref.file(),
                                obj_ref.line(), obj_ref.column(), ERR1)
        elif is_inline and func_ref.ent().ref("", "Static Object"):
            check.violation(func_ref.ent(), func_ref.file(),
                            func_ref.line(), func_ref.column(), ERR1)
