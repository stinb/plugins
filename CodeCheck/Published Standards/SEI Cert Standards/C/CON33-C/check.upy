ERR1 = "Avoid race conditions when using library functions. Consider remediating risk function '%1'"


# The ID for the check
def id():
    return ('CON33-C')


# The short name of the check
def name(id):
    return {
        'CON33-C': 'Published Standards/SEI Cert Standards/C/Avoid race conditions when using library functions',
    }[id]





def tags(id):
    return {
        'CON33-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 50',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P4',
            'Level: L3',
            'Libraries',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Avoid race conditions when using library functions'


# The long description of the check
def detailed_description():
    return """
<p>Avoid race conditions when using library functions</p>
<p><b>Risk Assessment</b></p>
<p>Race conditions caused by multiple threads invoking the same library function can lead to abnormal termination of the application, data integrity violations, or a denial-of-service attack.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/CON33-C.+Avoid+race+conditions+when+using+library+functions</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

void f(FILE *fp) {
  fpos_t pos;
  errno = 0;

  if (0 != fgetpos(fp, &pos)) {
    char *errmsg = strerror(errno);
    printf("Could not get the file position: %s\n", errmsg);
  }
}
</code></pre>
<p><b>Developer's Notes</b></p><p>This check automatically flags the use of a standard library function that is not guaranteed to be reentrant with respect to threads. See the link for the full list of functions.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    RISK_FUNCTIONS = {"rand", "srand", "getenv", "getenv_s", "strtok", "strerror", "asctime", "ctime", "localtime",
                      "gmtime", "setlocale", "ATOMIC_VAR_INIT", "atomic_init", "tmpname", "mbrtoc16", "c16rtomb", "mbrtoc32", "c32rtomb"}

    for call_ref in file.filerefs("Call", "Unresolved Function"):
        if call_ref.ent().name() in RISK_FUNCTIONS:
            check.violation(call_ref.ent(), file,
                            call_ref.line(), call_ref.column(), ERR1, call_ref.ent().name())
