ERR1 = 'Do not rely on an environment pointer following an operation that may invalidate it.'


# The ID for the check
def id():
    return ('ENV31-C')


# The short name of the check
def name(id):
    return {
        'ENV31-C': 'Published Standards/SEI Cert Standards/C/Do not rely on an environment pointer following an operation that may invalidate it',
    }[id]





def tags(id):
    return {
        'ENV31-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
            'Pointers',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not rely on an environment pointer following an operation that may invalidate it'


# The long description of the check
def detailed_description():
    return """
<p>Do not rely on an environment pointer following an operation that may invalidate it</p>
<p><b>Risk Assessment</b></p>
<p>Using the envp environment pointer after the environment has been modified can result in undefined behavior.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/ENV31-C.+Do+not+rely+on+an+environment+pointer+following+an+operation+that+may+invalidate+it</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(int argc, const char *argv[], const char *envp[]) {
  if (setenv("MY_NEW_VAR", "new_value", 1) != 0) {
    /* Handle error */
  }
  if (envp != NULL) {
    for (size_t i = 0; envp[i] != NULL; ++i) {
      puts(envp[i]);
    }
  }
  return 0;
}


#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(int argc, const char *argv[], const char *envp[]) {
  if (_putenv_s("MY_NEW_VAR", "new_value") != 0) {
    /* Handle error */
  }
  if (envp != NULL) {
    for (size_t i = 0; envp[i] != NULL; ++i) {
      puts(envp[i]);
    }
  }
  return 0;
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        if func_ref.ent().name() == "main":
            for param_ref in func_ref.ent().refs("Define", "Parameter"):
                if param_ref.ent().name() == "envp":
                    for call_ref in func_ref.ent().refs("Call", "Unresolved Function"):
                        if call_ref.ent().name() in ["setenv", "unsetenv", "putenv", "_putenv_s", "_wputenv_s"]:
                            for use_ref in param_ref.ent().refs("Useby"):
                                if use_ref.line() > call_ref.line():
                                    check.violation(
                                        use_ref.scope(), file, use_ref.line(), use_ref.column(), ERR1)
