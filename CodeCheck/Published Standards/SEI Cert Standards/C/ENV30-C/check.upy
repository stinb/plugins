ERR1 = 'Do not modify the object referenced by the return value of %1 function.'


# The ID for the check
def ids():
    return ('ENV30-C', 'MISRA23_25.5.2', 'MISRA23_21.19')


# The short name of the check
def name(id):
    return {
        'ENV30-C': 'Published Standards/SEI Cert Standards/C/Do not modify the object referenced by the return value of certain functions',
        'MISRA23_25.5.2': 'Published Standards/MISRA C++ 2023/25.5.2 The pointers returned by the C++ Standard Library functions localeconv, getenv, setlocale or strerror must only be used as if they have pointer to const-qualified type',
        'MISRA23_21.19': 'Published Standards/MISRA C 2023/21.19 The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type',
    }[id]



def tags(id):
    return {
        'ENV30-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
            'Functions',
        ],
        'MISRA23_25.5.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Mandatory',
            'Functions',
        ],
        'MISRA23_21.19': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Mandatory',
            'Functions',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not modify the object referenced by the return value of certain functions'


def detailed_description(id):
    return {
        'ENV30-C': """
<p>Do not modify the object referenced by the return value of certain functions</p>
<p><b>Risk Assessment</b></p>
<p>Modifying the object pointed to by the return value of getenv(), setlocale(), localeconv(), asctime(), or strerror() is undefined behavior. Even if the modification succeeds, the modified object can be overwritten by a subsequent call to the same function.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/ENV30-C.+Do+not+modify+the+object+referenced+by+the+return+value+of+certain+functions</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;stdlib.h&gt;

void trstr(char *c_str, char orig, char rep) {
  while (*c_str != '\\0') {
    if (*c_str == orig) {
      *c_str = rep;
    }
    ++c_str;
  }
}

void func(void) {
  char *env = getenv("TEST_ENV");
  if (env == NULL) {
    /* Handle error */
  }
  trstr(env,'"', '_');
}


#include &lt;locale.h&gt;

void f2(void) {
  struct lconv *conv = localeconv();

  if ('\\0' == conv-&gt;decimal_point[0]) {
    conv-&gt;decimal_point = ".";
  }
}
</code></pre>
""",
        'MISRA23_25.5.2': """
<p><b>Amplification</b></p>
<p>The localeconv function returns a pointer of type struct lconv *. This pointer must be regarded
as if it had type const struct lconv *.</p>
<p>A struct lconv object includes pointers of type char * and the getenv, setlocale, and strerror
functions each return a pointer of type char *. These pointers are used to access C-style strings
(null-terminated arrays of type char). For the purposes of this rule, these pointers must be regarded
as if they had type const char *.</p>
<p>The addresses of these functions shall not be taken.</p>

<p><b>Rationale</b></p>
<p>The C++ Standard states that undefined behaviour occurs if a program modifies:</p>
<p>● The structure pointed to by the value returned by localeconv;</p>
<p>● The strings returned by getenv, setlocale or strerror.</p>
<p>Note: the C++ Standard does not specify the behaviour that results if the strings referenced by the
structure pointed to by the value returned by localeconv are modified. This rule prohibits any
changes to these strings as they are considered to be undesirable.</p>
<p>Treating the pointers returned by the various functions as if they were const-qualified allows an analysis
tool to detect any attempt to modify an object through one of the pointers. Additionally, assigning
the return values of the functions to const-qualified pointers will result in the compiler issuing a
diagnostic if an attempt is made to modify an object.</p>
<p>Note: if a modified version is required, a program should make and modify a copy of any value covered
by this rule.</p>
<p>Preventing the addresses of these functions from being taken allows compliance checks to be made
decidable.</p>

<p><b>Example</b></p>
<p>The following examples are non-compliant as the returned pointers are assigned to non const-qualified
pointers. Whilst this will not be reported by a compiler (it is not ill-formed), an analysis tool will be able
to report a violation.</p>
<pre><code language="C++">void f1()
{
 char * s1 = setlocale( LC_ALL, 0 ); // Non-compliant
 struct lconv * conv = localeconv(); // Non-compliant
 s1[ 1 ] = 'A'; // Undefined behaviour
 conv-&gt;decimal_point = "^"; // Undefined behaviour
}
</code></pre>

<p>The following examples are compliant as the returned pointers are assigned to const-qualified pointers.
Any attempt to modify an object through a pointer will be reported by a compiler or analysis tool as
this is ill-formed.</p>
<pre><code language="C++">void f2()
{
 char str[ 128 ];
 ( void ) strcpy( str,
 setlocale( LC_ALL, 0 ) ); // Compliant - 2nd parameter to
 // strcpy takes a const char *
 const struct lconv * conv = localeconv(); // Compliant
 conv-&gt;decimal_point = "^"; // Ill-formed
}
</code></pre>

<p>The following example shows that whilst the use of a const-qualified pointer gives compile time
protection of the value returned by localeconv, the same is not true for the strings it references.
Modification of these strings can be detected by an analysis tool.</p>
<pre><code language="C++">void f3()
{
 const struct lconv * conv = localeconv(); // Compliant
 conv-&gt;grouping[ 2 ] = 'x'; // Non-compliant
}
</code></pre>

<p><b>Developer's Note:</b></p>
<p>This check flags the modification of the variable where the returned pointer was assigned to.</p>
""",
        'MISRA23_21.19': """
<p><b>Amplification</b></p>
<p>The localeconv function returns a pointer of type struct lconv *. This pointer must be regarded
as if it had type const struct lconv *.</p>
<p>A struct lconv object includes pointers of type char * and the getenv, setlocale, and strerror
functions each return a pointer of type char *. These pointers are used to access C-style strings
(null-terminated arrays of type char). For the purposes of this rule, these pointers must be regarded
as if they had type const char *.</p>

<p><b>Rationale</b></p>
<p>The C Standard states that undefined behaviour occurs if a program modifies:</p>
<p>● The structure pointed to by the value returned by localeconv;</p>
<p>● The strings returned by getenv, setlocale or strerror.</p>
<p>Note: the C Standard does not specify the behaviour that results if the strings referenced by the
structure pointed to by the value returned by localeconv are modified. This rule prohibits any
changes to these strings as they are considered to be undesirable.</p>
<p>Treating the pointers returned by the various functions as if they were const-qualified allows an analysis
tool to detect any attempt to modify an object through one of the pointers. Additionally, assigning
the return values of the functions to const-qualified pointers will result in the compiler issuing a
diagnostic if an attempt is made to modify an object.</p>
<p>Note: if a modified version is required, a program should make and modify a copy of any value covered
by this rule.</p>

<p><b>Example</b></p>
<p>The following examples are non-compliant as the returned pointers are assigned to non const-qualified
pointers. Whilst this will not be reported by a compiler (it is not ill-formed), an analysis tool will be able
to report a violation.</p>
<pre><code language="C++">void f1 ( void )
{
 char *s1 = setlocale ( LC_ALL, 0 ); /* Non-compliant */
 struct lconv *conv = localeconv (); /* Non-compliant */
 s1[ 1 ] = 'A'; /* Undefined behaviour */
 conv-&gt;decimal_point = "^"; /* Undefined behaviour */
}
</code></pre>

<p>The following examples are compliant as the returned pointers are assigned to const-qualified pointers.
Any attempt to modify an object through a pointer will be reported by a compiler or analysis tool as
this is ill-formed.</p>
<pre><code language="C++">void f2 ( void )
{
 char str[ 128 ];
 ( void ) strcpy ( str,
 setlocale ( LC_ALL, 0 ) ); /* Compliant - 2nd parameter to
 strcpy takes a const char * */
 const struct lconv *conv = localeconv (); /* Compliant */
 conv-&gt;decimal_point = "^"; /* Constraint violation */
}
</code></pre>

<p>The following example shows that whilst the use of a const-qualified pointer gives compile time
protection of the value returned by localeconv, the same is not true for the strings it references.
Modification of these strings can be detected by an analysis tool.</p>
<pre><code language="C++">void f3 ( void )
{
 const struct lconv *conv = localeconv (); /* Compliant */
 conv-&gt;grouping[ 2 ] = 'x'; /* Non-compliant */
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 7.4, Rule 11.8</p>

<p><b>Developer's Note:</b></p>
<p>This check flags the modification of the variable where the returned pointer was assigned to.</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'

def define_options(check):
    asctime = False if check.id() in ['MISRA23_25.5.2', 'MISRA23_21.19'] else True
    check.option().checkbox('asctime', 'Include asctime', asctime)

def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    LIB_FUNCS = ["getenv", "setlocale", "localeconv", "asctime", "strerror"]

    if not check.option().lookup('asctime'):
        LIB_FUNCS.remove('asctime')

    for func_ref in file.filerefs("Define", "Function"):
        for obj_ref in func_ref.ent().refs("Set Init, Set", "Object"):
            lex = lexer.lexeme(obj_ref.line(), obj_ref.column())

            while lex and (lex.text() != ";"):
                if (lex.token() == "Identifier") and (lex.text() in LIB_FUNCS):
                    for mod_ref in obj_ref.ent().refs("Modifyby, Setby ~Init"):
                        if mod_ref.line() > obj_ref.line():
                            check.violation(
                                obj_ref.ent(), file, mod_ref.line(), mod_ref.column(), ERR1, lex.text())
                            break

                    for param_ref in obj_ref.ent().refs("Assignby Ptr", "Parameter"):
                        if param_ref.ent().refs("Modifyby"):
                            check.violation(
                                obj_ref.ent(), file, param_ref.line(), param_ref.column(), ERR1, lex.text())
                            break

                    break

                lex = lex.next(ignore_whitespace=True)
