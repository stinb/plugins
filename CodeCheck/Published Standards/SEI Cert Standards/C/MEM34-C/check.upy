ERR1 = 'Only free memory allocated dynamically.'


# The ID for the check
def id():
    return ('MEM34-C')


# The short name of the check
def name(id):
    return {
        'MEM34-C': 'Published Standards/SEI Cert Standards/C/Only free memory allocated dynamically',
    }[id]





def tags(id):
    return {
        'MEM34-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 75',
            'Likelihood: Likely',
            'Remediation Cost: Medium',
            'Priority: P18',
            'Level: L1',
            'Memory Allocation',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Only free memory allocated dynamically'


# The long description of the check
def detailed_description():
    return """
<p>Only free memory allocated dynamically</p>
<p><b>Risk Assessment</b></p>
<p>The consequences of this error depend on the implementation, but they range from nothing to arbitrary code execution if that memory is reused by malloc().</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/MEM34-C.+Only+free+memory+allocated+dynamically</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

enum { MAX_ALLOCATION = 1000 };

int main(int argc, const char *argv[]) {
  char *c_str = NULL;
  size_t len;

  if (argc == 2) {
    len = strlen(argv[1]) + 1;
    if (len &gt; MAX_ALLOCATION) {
      /* Handle error */
    }
    c_str = (char *)malloc(len);
    if (c_str == NULL) {
      /* Handle error */
    }
    strcpy(c_str, argv[1]);
  } else {
    c_str = "usage: $&gt;a.exe [string]";
    printf("%s\n", c_str);
  }
  free(c_str);
  return 0;
}



#include &lt;stdlib.h&gt;

enum { BUFSIZE = 256 };

void f(void) {
  char buf[BUFSIZE];
  char *p = (char *)realloc(buf, 2 * BUFSIZE);
  if (p == NULL) {
    /* Handle error */
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for call_ref in file.filerefs("Call", "Unresolved Function"):
        if call_ref.ent().name() in {"free", "realloc"}:
            lex = lexer.lexeme(call_ref.line(), call_ref.column())
            on_param = 0
            last_set_dynamic = False

            while lex:
                if lex.text() == "(":
                    on_param += 1
                elif lex.text() == ")":
                    on_param -= 1

                    if not on_param:
                        break
                elif on_param and lex.token() == "Identifier" and lex.ref() and lex.ref().kind().check("Useby"):
                    for set_ref in sorted(lex.ent().refs("Setby"), key=lambda x: x.line()):
                        if set_ref.line() > call_ref.line():
                            break

                        is_dynamic = False

                        if set_ref.ent().id() != call_ref.scope().id():
                            continue

                        set_lex = lexer.lexeme(
                            set_ref.line(), set_ref.column())
                        on_set = False

                        while set_lex and (set_lex.text() != ";"):
                            if set_lex.text() == "=":
                                on_set = True
                            elif on_set and set_lex.token() == "Identifier" and set_lex.text() in {"malloc", "calloc", "realloc", "aligned_alloc"}:
                                is_dynamic = True

                            set_lex = set_lex.next(ignore_whitespace=True)

                        last_set_dynamic = is_dynamic

                lex = lex.next(ignore_whitespace=True)

            if not last_set_dynamic:
                check.violation(call_ref.ent(), file,
                                call_ref.line(), call_ref.column(), ERR1)
