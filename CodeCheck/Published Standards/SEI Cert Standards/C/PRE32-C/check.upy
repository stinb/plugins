ERR1 = 'Do not use preprocessor directives in invocations of function-like macros.'


# The ID for the check
def id():
    return ('PRE32-C')


# The short name of the check
def name(id):
    return {
        'PRE32-C': 'Published Standards/SEI Cert Standards/C/Do not use preprocessor directives in invocations of function-like macros',
    }[id]





def tags(id):
    return {
        'PRE32-C': [
            'Language: C',
            'Standard: SEI CERT C',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
            'Preprocessor',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not use preprocessor directives in invocations of function-like macros'


# The long description of the check
def detailed_description():
    return """
<p>Do not use preprocessor directives in invocations of function-like macros</p>
<p><b>Risk Assessment</b></p>
<p>Including preprocessor directives in macro arguments is undefined behavior.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/PRE32-C.+Do+not+use+preprocessor+directives+in+invocations+of+function-like+macros</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;string.h&gt;

void func(const char *src) {
  /* Validate the source string; calculate size */
  char *dest;
  /* malloc() destination string */
  memcpy(dest, src,
    #ifdef PLATFORM1
      12
    #else
      24
    #endif
  );
  /* ... */
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for func_ref in file.filerefs("Call ~Implicit", "Function ~Frominclude"):
        lex = lexer.lexeme(func_ref.line(), func_ref.column())
        on_param = 0

        if lex and lex.next(ignore_whitespace=True) and lex.next(ignore_whitespace=True).text() != "(":
            continue

        while lex and lex.text() != ";":
            if lex.text() == "(" and lex.token() == "Punctuation":
                on_param += 1
            elif lex.text() == ")" and lex.token() == "Punctuation":
                on_param -= 1

                if not on_param:
                    break
            elif on_param and lex.token() == "Preprocessor":
                check.violation(func_ref.ent(), file,
                                func_ref.line(), func_ref.column(), ERR1)
                break

            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
