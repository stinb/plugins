# https://wiki.sei.cmu.edu/confluence/display/cplusplus/CTR55-CPP.+Do+not+use+an+additive+operator+on+an+iterator+if+the+result+would+overflow
# Written by Ian Reed November 2023.

def id():
  return ("CTR55-CPP")

def name(id):
  return {
    "CTR55-CPP": "Published Standards/SEI Cert Standards/C++/Do not use an additive operator on an iterator if the result would overflow",
  }[id]

def detailed_description():
  return '''
<p><b>Title</b></p>
<p>Do not use an additive operator on an iterator if the result would overflow</p>

<p>Expressions that have an integral type can be added to or subtracted from a pointer, resulting in a value of the pointer type. If the resulting pointer is not a valid member of the container, or one past the last element of the container, the behavior of the additive operator is undefined.
Because iterators are a generalization of pointers, the same constraints apply to additive operators with random access iterators.
Do not allow an expression of integral type to add to or subtract from a pointer or random access iterator when the resulting value would overflow the bounds of the container.</p>

<p><b>Full Standard</b></p>
<p><a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/CTR55-CPP.+Do+not+use+an+additive+operator+on+an+iterator+if+the+result+would+overflow">
https://wiki.sei.cmu.edu/confluence/display/cplusplus/CTR55-CPP.+Do+not+use+an+additive+operator+on+an+iterator+if+the+result+would+overflow</a></p>

<p><b>Risk Assessment</b></p>
<p>If adding or subtracting an integer to a pointer results in a reference to an element outside the array or one past the last element of the array object, the behavior is undefined but frequently leads to a buffer overflow or buffer underrun, which can often be exploited to run arbitrary code.</p>
<p>Iterators and standard template library containers exhibit the same behavior and caveats as pointers and arrays.</p>

<p><b>Noncompliant Code Example</b></p>
<p>In this noncompliant code example, a random access iterator from a std::vector is used in an additive expression, but the resulting value could be outside the bounds of the container rather than a past-the-end value.</p>
<pre><code language="C++">
#include &lt;iostream&gt;
#include &lt;vector&gt;

void f(const std::vector&lt;int&gt; &amp;c) {
  for (auto i = c.begin(), e = i + 20; i != e; ++i) {
    std::cout &lt;&lt; *i &lt;&lt; std::endl;
  }
}
</code></pre>

<p><b>Compliant Solution</b></p>
<p>This compliant solution assumes that the programmer's intention was to process up to 20 items in the container. Instead of assuming all containers will have 20 or more elements, the size of the container is used to determine the upper bound on the addition.</p>
<pre><code language="C++">
#include &lt;algorithm&gt;
#include &lt;vector&gt;
void f(const std::vector&lt;int&gt; &amp;c) {
  const std::vector&lt;int&gt;::size_type maxSize = 20;
  for (auto i = c.begin(), e = i + std::min(maxSize, c.size()); i != e; ++i) {
  }
}
</code></pre>
'''

def tags(id):
  return {
    'CTR55-CPP': [
      'Language: C',
      'Language: C++',
      'Standard: SEI CERT C++',
      'Severity: High',
      'Likelihood: Likely',
      'Remediation Cost: Medium',
      'Priority: P18',
      'Level: L1'
    ],
  }.get(id)

def test_language(language):
  return language == 'C++'

def test_entity(file):
  return file.kind().check('code file, header file')

def test_global():
  return False

iteratorNameEndings = ["iterator::operator+", "iterator::operator-", "iterator::operator+=", "iterator::operator-="]
ERR1 = "Use of %1 operator on iterator may overflow"
def check(check, file):
  refs = file.filerefs("C Call")
  for ref in refs:
    if not endsWithAny(ref.ent().longname(), iteratorNameEndings):
      continue
    l = ref.file().lexer().lexeme(ref.line(), ref.column())
    left = l.previous(True, True)
    right = l.next(True, True)
    if isViolation(left):
      check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, l.text())
    if isViolation(right):
      check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, l.text())

def isViolation(l):
  if not l:
    return False
  if l.token() == "Literal":
    return isNumberAndNotAllowed(l.text())
  if l.token() == "Identifier" and l.ent():
    return isNumberAndNotAllowed(l.ent().value())
  return False

def isNumberAndNotAllowed(text):
  try:
    # we attempt to parse it as an int, and catch the exception if it fails.
    number = int(text)
    if number < -1 or number > 1:
      return True # it is a number, and it is not -1, 0, or 1.
    return False
  except:
    return False # not a number

def endsWithAny(text, endings):
  for ending in endings:
    if text.endswith(ending):
      return True
  return False
