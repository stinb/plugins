ERR1 = 'Do not cast to an out-of-range enumeration value.'


# The ID for the check
def id():
    return ('INT50-CPP')


# The short name of the check
def name(id):
    return {
        'INT50-CPP': 'Published Standards/SEI Cert Standards/C++/Do not cast to an out-of-range enumeration value',
    }[id]


# The short description of the check
def description():
    return 'Do not cast to an out-of-range enumeration value'


# The long description of the check
def detailed_description():
    return """
<p>Do not cast to an out-of-range enumeration value</p>
<p><b>Risk Assessment</b></p>
<p>It is possible for unspecified values to result in a buffer overflow, leading to the execution of arbitrary code by an attacker. However, because enumerators are rarely used for indexing into arrays or other forms of pointer arithmetic, it is more likely that this scenario will result in data integrity violations rather than arbitrary code execution.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/cplusplus/INT50-CPP.+Do+not+cast+to+an+out-of-range+enumeration+value</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre>
enum EnumType {
  First,
  Second,
  Third
};
 
void f(int intVar) {
  EnumType enumVar = static_cast&lt;EnumType&gt;(intVar);
 
  if (enumVar &lt; First || enumVar &gt; Third) {
    // Handle error
  }
}
</pre>
<p><i>Developer Notes: </i>This check automatically flags a casting to an enumeration except when it is scoped or fixed unscoped.</p>
"""


def tags(id):
    return {
        'INT50-CPP': [
            'Language: C',
            'Language: C++',
            'Standard: SEI CERT C++',
            'Severity: 50',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
            'Expressions',
        ],
    }.get(id)


def test_language(language):
    return language == 'C++'


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        for cast_ref in func_ref.ent().refs("Cast Use", "Enum"):
            def_ref = cast_ref.ent().ref("Definein")

            if not def_ref:
                continue

            lex = def_ref.file().lexer().lexeme(def_ref.line(), def_ref.column())
            compliant = False

            if (lex.previous(ignore_whitespace=True).text() == "class") or ((lex.next(ignore_whitespace=True).text() == ":") and (lex.next(ignore_whitespace=True).next(ignore_whitespace=True).text() == "int")):
                compliant = True

            if not compliant:
                check.violation(cast_ref.ent(), file,
                                cast_ref.line(), cast_ref.column(), ERR1)
