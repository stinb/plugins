# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-31-2023

import re

ERR1 = "Invalid use of reference, pointer, or iterator referencing elements of \
a container"

def id():
    return 'CTR51-CPP'

def name():
    return "Published Standards/SEI Cert Standards/C++/" +  """\
Use valid references, pointers, and iterators to reference elements of a \
container"""




def tags(id):
    return {
        'CTR51-CPP': [
            'Language: C',
            'Language: C++',
            'Standard: SEI CERT C++',
            'Severity: 75',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P6',
            'Level: L2',
            'Functions',
        ],
    }.get(id)

def detailed_description():
    return """\
<p>Iterators are a generalization of pointers that allow a C++ program to work
with different data structures (containers) in a uniform manner
[ISO/IEC 14882-2014]. Pointers, references, and iterators share a close
relationship in which it is required that referencing values be done through a
valid iterator, pointer, or reference. Storing an iterator, reference, or
pointer to an element within a container for any length of time comes with a
risk that the underlying container may be modified such that the stored
iterator, pointer, or reference becomes invalid. For instance, when a sequence
container such as std::vector requires an underlying reallocation, outstanding
iterators, pointers, and references will be invalidated [Kalev 99]. Use only a
valid pointer, reference, or iterator to refer to an element of a container.
</p>
<p><b>Non-compliant Code Example</b></p>
<p>In this noncompliant code example, pos is invalidated after the first call to
insert(), and subsequent loop iterations have undefined behavior.</p>
<pre><code language="C++">#include &lt;deque&gt;
  
void f(const double *items, std::size_t count) {
  std::deque&lt;double&gt; d;
  auto pos = d.begin();
  for (std::size_t i = 0; i &lt; count; ++i, ++pos) {
    d.insert(pos, items[i] + 41.0);
  }
}</code></pre>
<p><b>Compliant Solution (Updated Iterator)</b></p>
<p>In this compliant solution, pos is assigned a valid iterator on each
insertion, preventing undefined behavior.</p>

<pre><code language="C++">#include &lt;deque&gt;
  
void f(const double *items, std::size_t count) {
  std::deque&lt;double&gt; d;
  auto pos = d.begin();
  for (std::size_t i = 0; i &lt; count; ++i, ++pos) {
    pos = d.insert(pos, items[i] + 41.0);
  }
}</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    # List of functions to check given by standard
    functions = ['insert', 'emplace_front', 'emplace_back', 'emplace', 'push_front', 'push_back', 'erase', 'pop_back', 'resize', 'clear', 'erase_after', 'pop_front', 'remove', 'unique', 'remove_if', 'unique', 'reserve', 'rehash']

    refs = file.filerefs('call', 'unresolved function')
    lexer = None
    # Look for calls on the functions listed
    for ref in refs:
        # Check if call is in the functions list
        if ref.ent().name() in functions:
            if not lexer:
                if not file.lexer():
                    return
                lexer = file.lexer()
            lexeme = lexer.lexeme(ref.line(), ref.column())
            ok = False
            # Look for equals sign before
            while lexeme and not re.search(r';|{|}', lexeme.text()):
                if lexeme.text() == '=':
                    ok = True
                lexeme = lexeme.previous(True, True)
            if not ok:
                check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
