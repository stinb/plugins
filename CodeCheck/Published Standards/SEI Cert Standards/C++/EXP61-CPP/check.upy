ERR1 = 'A lambda object must not outlive any of its reference captured objects.'


# The ID for the check
def id():
    return ('EXP61-CPP')


# The short name of the check
def name(id):
    return {
        'EXP61-CPP': 'Published Standards/SEI Cert Standards/C++/A lambda object must not outlive any of its reference captured objects',
    }[id]


# The short description of the check
def description():
    return 'A lambda object must not outlive any of its reference captured objects'


# The long description of the check
def detailed_description():
    return """
<p>A lambda object must not outlive any of its reference captured objects</p>
<p><b>Risk Assessment</b></p>
<p>Referencing an object outside of its lifetime can result in an attacker being able to run arbitrary code.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/cplusplus/EXP61-CPP.+A+lambda+object+must+not+outlive+any+of+its+reference+captured+objects</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">auto g() {
  int i = 12;
  return [&] {
    i = 100;
    return i;
  };
}
 
void f() {
  int j = g()();
}


auto g(int val) {
  auto outer = [val] {
    int i = val;
    auto inner = [&] {
      i += 30;
      return i;
    };
    return inner;
  };
  return outer();
}
 
void f() {
  auto fn = g(12);
  int j = fn();
}
</code></pre>
"""

def tags(id):
    return {
        'EXP61-CPP': [
            'Language: C',
            'Language: C++',
            'Standard: SEI CERT C++',
            'Severity: 75',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P6',
            'Level: L2',
            'Memory Allocation',
        ],
    }.get(id)


def test_language(language):
    return language == 'C++'


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def check(check, file):
    for func_ref in file.filerefs("Define", "Lambda Function"):
        for capt_ref in func_ref.ent().refs("Use Capture"):
            lex = capt_ref.file().lexer().lexeme(capt_ref.line(), capt_ref.column())

            if lex.text() == "&":
                for ret_ref in capt_ref.ent().refs("Useby Return"):
                    check.violation(ret_ref.scope(), file,
                                    ret_ref.line(), ret_ref.column(), ERR1)

        for obj_ref in func_ref.ent().refs("Define", "Object Local"):
            for capt_ref in obj_ref.ent().refs("Useby Capture"):
                lex = capt_ref.file().lexer().lexeme(capt_ref.line(), capt_ref.column())

                if lex.text() == "&":
                    for ret_ref in capt_ref.ent().refs("Use Return"):
                        check.violation(ret_ref.ent(), file,
                                        ret_ref.line(), ret_ref.column(), ERR1)
