ERR1 = 'Exception objects must be nothrow copy constructible.'


# The ID for the check
def id():
    return ('ERR60-CPP')


# The short name of the check
def name(id):
    return {
        'ERR60-CPP': 'Published Standards/SEI Cert Standards/C++/Exception objects must be nothrow copy constructible',
    }[id]


# The short description of the check
def description():
    return 'Exception objects must be nothrow copy constructible'


# The long description of the check
def detailed_description():
    return """
<p>Exception objects must be nothrow copy constructible</p>
<p><b>Risk Assessment</b></p>
<p>Allowing the application to abnormally terminate can lead to resources not being freed, closed, and so on. It is frequently a vector for denial-of-service attacks.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/cplusplus/ERR60-CPP.+Exception+objects+must+be+nothrow+copy+constructible</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;exception&gt;
#include &lt;string&gt;
 
class S : public std::exception {
  std::string m;
public:
  S(const char *msg) : m(msg) {}
   
  const char *what() const noexcept override {
    return m.c_str();  
  }
};
  
void g() {
  // If some condition doesn't hold...
  throw S("Condition did not hold");
}
 
void f() {
  try {
    g();
  } catch (S &s) {
    // Handle error
  }
}
</code></pre>
"""


def tags(id):
    return {
        'ERR60-CPP': [
            'Language: C',
            'Language: C++',
            'Standard: SEI CERT C++',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
            'Exception Handling',
        ],
    }.get(id)


def test_language(language):
    return language == 'C++'


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        for catch_ref in func_ref.ent().refs("Catch Exception"):
            compliant = False

            for base_ref in catch_ref.ent().refs("Base"):
                if base_ref.ent().name() == "runtime_error":
                    compliant = True
                    break

            if not compliant:
                for obj_ref in catch_ref.ent().refs("Define", "Member Object"):
                    obj_type = obj_ref.ent().type()

                    if obj_type and "runtime_error" in obj_type:
                        for set_ref in obj_ref.ent().refs("Setby"):
                            if set_ref.ent().name() == catch_ref.ent().name():
                                compliant = True
                                break

                    if compliant:
                        break

            if not compliant:
                check.violation(catch_ref.ent(), file,
                                catch_ref.line(), catch_ref.column(), ERR1)
