ERR1 = 'Use valid iterator ranges.'


# The ID for the check
def id():
    return ('CTR53-CPP')


# The short name of the check
def name(id):
    return {
        'CTR53-CPP': 'Published Standards/SEI Cert Standards/C++/Use valid iterator ranges',
    }[id]


# The short description of the check
def description():
    return 'Use valid iterator ranges'


# The long description of the check
def detailed_description():
    return '''
<p><b>Title</b></p>
<p>Use valid iterator ranges</p>

<p><b>Risk Assessment</b></p>
<p>Using an invalid iterator range is similar to allowing a buffer overflow, which can lead to an attacker running arbitrary code.</p>

<p><b>Full Standard</b></p>
<p><a href='https://wiki.sei.cmu.edu/confluence/display/cplusplus/CTR53-CPP.+Use+valid+iterator+ranges'>
https://wiki.sei.cmu.edu/confluence/display/cplusplus/CTR53-CPP.+Use+valid+iterator+ranges</a></p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
 
void f(const std::vector&lt;int&gt; &c) {
  std::for_each(c.end(), c.begin(), [](int i) { std::cout &lt;&lt; i; });
}


#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
 
void f(const std::vector&lt;int&gt; &c) {
  std::vector&lt;int&gt;::const_iterator e;
  std::for_each(c.begin(), e, [](int i) { std::cout &lt;&lt; i; });
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>This check only covers the std::for_each function.</p>
'''


def tags(id):
    return {
        'CTR53-CPP': [
            'Language: C',
            'Language: C++',
            'Standard: SEI CERT C++',
            'Severity: 75',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P6',
            'Level: L2'
        ],
    }.get(id)


def test_language(language):
    return language == 'C++'


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def check(check, file):
    for call_ref in file.filerefs("Call", "Unresolved Function Template"):
        if call_ref.ent().name() == "for_each":
            lex = file.lexer().lexeme(call_ref.line(), call_ref.column())
            on_param = 0
            param_ctr = 0
            itr = None

            while lex:
                if lex.text() == "(":
                    on_param += 1
                elif lex.text() == ")":
                    on_param -= 1

                    if not on_param:
                        break
                elif (on_param == 1) and (lex.text() == ","):
                    param_ctr += 1

                    if param_ctr == 2:
                        break
                elif (on_param == 1) and (param_ctr == 0) and not itr and lex.ent():
                    itr = lex.ent().id()

                    if (lex.next().text() == ".") and ("begin" not in lex.next().next().text()):
                        check.violation(
                            lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                elif (on_param == 1) and (param_ctr == 1) and itr and lex.ent():
                    if (lex.ent().id() != itr) or ((lex.next().text() == ".") and ("end" not in lex.next().next().text())):
                        check.violation(
                            lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)

                    break

                lex = lex.next(True, True)
