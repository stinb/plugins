# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 8-9-22


import re


ERR1 = '%1 called'


def ids():
    return ('ERR52-CPP')


def name(id):
    return {
        'ERR52-CPP': '''Published Standards/SEI Cert Standards/C++/Do not use setjmp() or longjmp()''',
    }[id]


def tags(id):
    return {
        'ERR52-CPP': [
            'Language: C',
            'Language: C++',
            'Standard: SEI CERT C++',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
            'Libraries',
        ],
    }.get(id)


def detailed_description():
    return '''
<p>
Do not use setjmp() or longjmp()
</p>

<p><b>Risk Assessment</b></p>
<p>
Using setjmp() and longjmp() could lead to a denial-of-service attack due to resources not being properly destroyed.
</p>

<p>
For the full standard:
<i>
https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046492
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">#include &lt;csetjmp&gt;
#include &lt;iostream&gt;

static jmp_buf env;

struct Counter {
  static int instances;
  Counter() { ++instances; }
  ~Counter() { --instances; }
};

int Counter::instances = 0;

void f() {
  Counter c;
  std::cout &lt;&lt; "f(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  std::longjmp(env, 1);
}

int main() {
  std::cout &lt;&lt; "Before setjmp(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  if (setjmp(env) == 0) {
    f();
  } else {
    std::cout &lt;&lt; "From longjmp(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  }
  std::cout &lt;&lt; "After longjmp(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
}
</code></pre>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def check(check, file):
    # Skip if the header isn't included
    header = False
    for ent in file.ents('Include', 'Header'):
        if ent.name() in {'setjmp.h', 'csetjmp'}:
            header = True
            break
    if not header:
        return

    # Find each call to one of the functions
    for ref in file.filerefs('Call', 'Function'):
        ent = ref.ent()

        if ent.name() not in {'setjmp','_setjmp', 'longjmp', '_longjmp'}:
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1, ent.name())
