ERR1 = 'Do not delete an array through a pointer of the incorrect type.'


# The ID for the check
def id():
    return ('EXP51-CPP')


# The short name of the check
def name(id):
    return {
        'EXP51-CPP': 'Published Standards/SEI Cert Standards/C++/Do not delete an array through a pointer of the incorrect type',
    }[id]


# The short description of the check
def description():
    return 'Do not delete an array through a pointer of the incorrect type'


# The long description of the check
def detailed_description():
    return """
<p>Do not delete an array through a pointer of the incorrect type</p>
<p><b>Risk Assessment</b></p>
<p>Attempting to destroy an array of polymorphic objects through the incorrect static type is undefined behavior. In practice, potential consequences include abnormal program execution and memory leaks.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/cplusplus/EXP51-CPP.+Do+not+delete+an+array+through+a+pointer+of+the+incorrect+type</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="C++">struct Base {
  virtual ~Base() = default;
};
 
struct Derived final : Base {};
 
void f() {
   Base *b = new Derived[10];
   // ...
   delete [] b;
}
</code></pre>
"""

def tags(id):
    return {
        'EXP51-CPP': [
            'Language: C',
            'Language: C++',
            'Standard: SEI CERT C++',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
            'Pointers',
        ],
    }.get(id)


def test_language(language):
    return language == 'C++'


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def check(check, file):
    for obj_ref in file.filerefs("Define", "Struct, Class"):
        for derived_ref in obj_ref.ent().refs("Derive"):
            for typed_ref in obj_ref.ent().refs("Typedby"):
                ent_val = typed_ref.ent().value()

                if ent_val and derived_ref.ent().name() in ent_val:
                    for use_ref in typed_ref.ent().refs("Useby"):
                        lex = use_ref.file().lexer().lexeme(use_ref.line(), use_ref.column())
                        lex = lex.previous(ignore_whitespace=True)

                        if ((lex.text() == "]") and
                            (lex.previous(ignore_whitespace=True).text() == "[") and
                                (lex.previous(ignore_whitespace=True).previous(ignore_whitespace=True).text() == "delete")):
                            check.violation(
                                use_ref.scope(), file, use_ref.line(), use_ref.column(), ERR1)
