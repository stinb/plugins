ERR1 = 'Ensure atomicity when reading and writing 64-bit values.'


# The ID for the check
def ids():
    return ('VNA05-J', 'JAVA_VNA05')


# The short name of the check
def name(id):
    return {
        'VNA05-J': 'Published Standards/SEI Cert Standards/Java/Ensure atomicity when reading and writing 64-bit values',
        'JAVA_VNA05': 'All Checks/Language Specific/Java/Visibility and Atomicity/Ensure atomicity when reading and writing 64-bit values',
    }[id]





def tags(id):
    return {
        'VNA05-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
        ],
        'JAVA_VNA05': [
            'Language: Java',
            'Visibility and Atomicity',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Ensure atomicity when reading and writing 64-bit values'


# The long description of the check
def detailed_description():
    return """
<p>Ensure atomicity when reading and writing 64-bit values</p>
<p><b>Risk Assessment</b></p>
<p>Failure to ensure the atomicity of operations involving 64-bit values in multithreaded applications can result in reading and writing indeterminate values. However, many Java Virtual Machines read and write 64-bit values atomically even though the specification does not require them to.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/VNA05-J.+Ensure+atomicity+when+reading+and+writing+64-bit+values</i></p>
<p><b>Exceptions</b></p>
<p><i>VNA05-J-EX0: If all reads and writes of 64-bit long and double values occur within a synchronized region, the atomicity of the read/write is guaranteed. This requires both that the value is exposed only through synchronized methods in the class and that the value is inaccessible from other code (whether directly or indirectly). For more information, see VNA02-J. Ensure that compound operations on shared variables are atomic.</i></p>
<p><i>VNA05-J-EX1: This rule can be ignored for platforms that guarantee that 64-bit long and double values are read and written as atomic operations. Note, however, that such guarantees are not portable across different platforms.</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">class LongContainer {
  private long i = 0;

  void assignValue(long j) {
    i = j;
  }

  void printLong() {
    System.out.println("i = " + i);
  }
}
</code></pre>
<p><i>Developer Notes: </i>This check is recommended for multithreaded applications.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for class_ref in file.filerefs("Define", "Class"):
        for var_ref in class_ref.ent().refs("Define", "Member Variable"):
            if var_ref.ent().type() in {"long", "double"}:
                for ref in var_ref.ent().refs("", "Member Method"):
                    define_ref = ref.ent().ref("Definein")
                    lexes = lexer.lexemes(
                        define_ref.line(), define_ref.column())
                    compliant = False

                    for lex in lexes:
                        if lex.text() == "synchronized" and lex.token() == "Keyword":
                            compliant = True
                            break

                    if not compliant:
                        check.violation(ref.ent(), file,
                                        ref.line(), ref.column(), ERR1)
