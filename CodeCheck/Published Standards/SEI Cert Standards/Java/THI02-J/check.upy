# This script is designed to run with Understand - CodeCheck
# Micah Morgan - 09/08/2022

ERR1 = "Notify all waiting threads rather than a single thread."

DEF_NAME = "Notify all waiting threads rather than a single thread."

SINGLE = ["java.lang.Object.notify", "java.util.concurrent.locks.Condition.signal"]

# The ID for the check
def ids():
    return ('THI02-J', 'JAVA_THI02')

# Required - Return the short name of the check
def name(id):
    return {
        'THI02-J': "Published Standards/SEI Cert Standards/Java/" + DEF_NAME,
        'JAVA_THI02': "All Checks/Language Specific/Java/Thread APIs/" + DEF_NAME,
    }[id]




def tags(id):
    return {
        'THI02-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
        ],
        'JAVA_THI02': [
            'Language: Java',
            'Thread APIs',
        ],
    }.get(id)

# The short description of the check
def description():
    return DEF_NAME

# The long description of the check
def detailed_description():
    return """
<p>Avoid using notify() or signal().</p>
<p><b>Risk Assessment</b></p>
<p>Notifying a single thread rather than all waiting threads can violate the liveness property of the system.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/THI02-J.+Notify+all+waiting+threads+rather+than+a+single+thread</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public final class ProcessStep implements Runnable {
  private static final Object lock = new Object();
  private static int time = 0;
  private final int step; // Do Perform operations when field time
                          // reaches this value

  public ProcessStep(int step) {
    this.step = step;
  }

  @Override public void run() {
    try {
      synchronized (lock) {
        while (time != step) {
          lock.wait();
        }

        // Perform operations

        time++;
        lock.notify();
      }
    } catch (InterruptedException ie) {
      Thread.currentThread().interrupt(); // Reset interrupted status
    }
  }

  public static void main(String[] args) {
    for (int i = 4; i &gt;= 0; i--) {
      new Thread(new ProcessStep(i)).start();
    }
  }
}</code></pre>
<p><i>Developer Notes: </i>Due to the complexity of the exceptions when notify() and signal() may be used, these situations are not checked for and may result in false positives.</p>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

# Options for the check
def define_options(check):
    pass

def check(check, file):
    #get all cases of notify and signal
    for cRef in file.filerefs("Call"):
        if cRef.ent() and cRef.ent().longname() in SINGLE:
            pm(ERR1, check, cRef.ent(), file, cRef.line(), cRef.column())

def pm(s, check, ent = None, file = None, line=-1, col = -1):
    check.violation(ent, file, line, col, str(s))
