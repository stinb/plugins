import re


ERR1 = 'Never use assertions to validate method arguments.'


# The ID for the check
def ids():
    return ('MET01-J', 'JAVA_MET01')


# The short name of the check
def name(id):
    return {
        'MET01-J': 'Published Standards/SEI Cert Standards/Java/Never use assertions to validate method arguments',
        'JAVA_MET01': 'All Checks/Language Specific/Java/Methods/Never use assertions to validate method arguments',
    }[id]





def tags(id):
    return {
        'MET01-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P8',
            'Level: L2',
        ],
        'JAVA_MET01': [
            'Language: Java',
            'Methods',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Never use assertions to validate method arguments'


# The long description of the check
def detailed_description():
    return """
<p>Never use assertions to validate method arguments</p>
<p><b>Risk Assessment</b></p>
<p>Using assertions to validate method arguments can result in inconsistent computations, runtime exceptions, and control flow vulnerabilities.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/MET01-J.+Never+use+assertions+to+validate+method+arguments</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public static int getAbsAdd(int x, int y) {
  assert x != Integer.MIN_VALUE;
  assert y != Integer.MIN_VALUE;
  int absX = Math.abs(x);
  int absY = Math.abs(y);
  assert (absX &lt;= Integer.MAX_VALUE - absY);
  return absX + absY;
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for func_ref in file.filerefs("Define", "Method"):
        if re.search(r"^test", func_ref.ent().name()):
            continue

        lex = lexer.lexeme(func_ref.line(), func_ref.column())
        on_body = 0
        on_assert = False

        while lex:
            if lex.text() == "{" and lex.token() == "Punctuation":
                on_body += 1
            elif lex.text() == "}" and lex.token() == "Punctuation":
                on_body -= 1

                if not on_body:
                    break
            elif on_body and lex.text() == "assert" and lex.token() == "Identifier":
                on_assert = True
            elif on_assert and lex.text() == ";" and lex.token() == "Punctuation":
                on_assert = False
            elif on_assert and lex.ent() and lex.ent().kind().check("Parameter"):
                check.violation(func_ref.ent(), file,
                                func_ref.line(), func_ref.column(), ERR1)
                break

            lex = lex.next(ignore_whitespace=True,
                           ignore_comments=True)
