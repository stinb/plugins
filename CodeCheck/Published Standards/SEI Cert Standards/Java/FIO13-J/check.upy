import re


ERR1 = 'Do not log sensitive information outside a trust boundary.'


# The ID for the check
def ids():
    return ('FIO13-J', 'JAVA_FIO13')


# The short name of the check
def name(id):
    return {
        'FIO13-J': 'Published Standards/SEI Cert Standards/Java/Do not log sensitive information outside a trust boundary',
        'JAVA_FIO13': 'All Checks/Language Specific/Java/Input Output/Do not log sensitive information outside a trust boundary',
    }[id]





def tags(id):
    return {
        'FIO13-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P4',
            'Level: L3',
        ],
        'JAVA_FIO13': [
            'Language: Java',
            'Input Output',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not log sensitive information outside a trust boundary'


# The long description of the check
def detailed_description():
    return """
<p>Do not log sensitive information outside a trust boundary</p>
<p><b>Risk Assessment</b></p>
<p>Logging sensitive information can violate system security policies and can violate user privacy when the logging level is incorrect or when the log files are insecure.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/FIO13-J.+Do+not+log+sensitive+information+outside+a+trust+boundary</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public void logRemoteIPAddress(String name) {
  Logger logger = Logger.getLogger("com.organization.Log");
  InetAddress machine = null;
  try {
    machine = InetAddress.getByName(name);
  } catch (UnknownHostException e) {
    Exception e = MyExceptionReporter.handle(e);
  } catch (SecurityException e) {
    Exception e = MyExceptionReporter.handle(e);
    logger.severe(name + "," + machine.getHostAddress() + "," +
                  e.toString());
  }
}
</code></pre>
<p><i>Developer Notes: </i>The check only covers the use of Java Logging API Framework.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    for call_ref in file.filerefs("Call", "Method Public Member"):
        if re.search(r"java.util.logging.Logger.\b(finer|fine|config|info|warning|severe)\b", call_ref.ent().longname()):
            check.violation(call_ref.ent(), file,
                            call_ref.line(), call_ref.column(), ERR1)
