import re


ERR1 = 'Prevent exceptions while logging data.'


# The ID for the check
def ids():
    return ('ERR02-J', 'JAVA_ERR02')


# The short name of the check
def name(id):
    return {
        'ERR02-J': 'Published Standards/SEI Cert Standards/Java/Prevent exceptions while logging data',
        'JAVA_ERR02': 'All Checks/Language Specific/Java/Exceptional Behavior/Prevent exceptions while logging data',
    }[id]



def tags(id):
    return {
        'ERR02-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Likely',
            'Remediation Cost: High',
            'Priority: P6',
            'Level: L2',
        ],
        'JAVA_ERR02': [
            'Language: Java',
            'Exceptional Behavior',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Prevent exceptions while logging data'


# The long description of the check
def detailed_description():
    return """
<p>Prevent exceptions while logging data</p>
<p><b>Risk Assessment</b></p>
<p>Exceptions thrown during data logging can cause loss of data and can conceal security problems.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/ERR02-J.+Prevent+exceptions+while+logging+data</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">try {
  // ...
} catch (SecurityException se) {
  System.err.println(se);
  // Recover from exception
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for catch_ref in file.filerefs("Use", "Catch Parameter"):
        lex = lexer.lexeme(catch_ref.line(), catch_ref.column())

        if catch_ref.kind().check("Deref"):
            lex = lex.next().next()

            if lex.token() == "Identifier" and lex.text() == "printStackTrace":
                check.violation(catch_ref.ent(), file,
                                catch_ref.line(), catch_ref.column(), ERR1)
        else:
            while lex and lex.line_begin() == catch_ref.line():
                lex = lex.previous(ignore_whitespace=True)

                if lex.text() == "(" and lex.token() == "Punctuation":
                    lex = lex.previous(ignore_whitespace=True)
                    break

            if re.search(r"^print.*", lex.text()):
                check.violation(catch_ref.ent(), file,
                                catch_ref.line(), catch_ref.column(), ERR1)
