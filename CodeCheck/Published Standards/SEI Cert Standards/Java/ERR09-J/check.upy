ERR1 = 'Do not allow untrusted code to terminate the JVM.'


# The ID for the check
def ids():
    return ('ERR09-J', 'JAVA_ERR09')


# The short name of the check
def name(id):
    return {
        'ERR09-J': 'Published Standards/SEI Cert Standards/Java/Do not allow untrusted code to terminate the JVM',
        'JAVA_ERR09': 'All Checks/Language Specific/Java/Exceptional Behavior/Do not allow untrusted code to terminate the JVM',
    }[id]





def tags(id):
    return {
        'ERR09-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
        ],
        'JAVA_ERR09': [
            'Language: Java',
            'Exceptional Behavior',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not allow untrusted code to terminate the JVM'


# The long description of the check
def detailed_description():
    return """
<p>Do not allow untrusted code to terminate the JVM</p>
<p><b>Risk Assessment</b></p>
<p>Allowing unauthorized calls to System.exit() may lead to denial of service.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/ERR09-J.+Do+not+allow+untrusted+code+to+terminate+the+JVM</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class InterceptExit {
  public static void main(String[] args) {
    // ...
    System.exit(1);  // Abrupt exit
    System.out.println("This never executes");
  }
}
</code></pre>
<p><i>Developer Notes: </i>This check automatically flags the use of System.exit() method when security manager is not set.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    for call_ref in file.filerefs("Call Nondynamic", "Static Method Public Member"):
        if call_ref.ent().longname() == "java.lang.System.exit":
            compliant = False

            for func_ref in call_ref.scope().refs("Call Nondynamic", "Static Method Public Member"):
                if func_ref.ent().name() == "setSecurityManager":
                    compliant = True

            if not compliant:
                check.violation(call_ref.ent(), file,
                                call_ref.line(), call_ref.column(), ERR1)
