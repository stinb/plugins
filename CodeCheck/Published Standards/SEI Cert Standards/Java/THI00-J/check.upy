# This script is designed to run with Understand - CodeCheck
# Micah Morgan - 4/21/2022

ERR1 = 'Do not invoke Thread.run()'

DEF_NAME = "Do not invoke Thread.run()"

RUN = "java.lang.Thread.run"

# The ID for the check
def ids():
    return ('THI00-J', 'JAVA_THI00')

# The short name of the check
def name(id):
    return {
        'THI00-J': "Published Standards/SEI Cert Standards/Java/" + DEF_NAME,
        'JAVA_THI00': "All Checks/Language Specific/Java/Thread APIs/" + DEF_NAME,
    }[id]




def tags(id):
    return {
        'THI00-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
        ],
        'JAVA_THI00': [
            'Language: Java',
            'Thread APIs',
        ],
    }.get(id)

# The short description of the check
def description():
    return DEF_NAME

# The long description of the check
def detailed_description():
    return """
<p>Do not invoke Thread.run()</p>
<p><b>Risk Assessment</b></p>
<p>Failure to start threads correctly can cause unexpected behavior.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88487912</i></p>
<p><b>Exceptions</b></p>
<p><i>THI00-J-EX1: </i>Runtime system code involved in starting new threads is permitted to invoke a Thread object's run() method directly; this is an obvious necessity for a working Java runtime system. Note that the likelihood that this exception applies to user-written code is vanishingly small.</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public final class Foo implements Runnable {
  @Override public void run() {
    // ...
  }

  public static void main(String[] args) {
    Foo foo = new Foo();
    new Thread(foo).run();
  }
}</code></pre>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

# Options for the check
def define_options(check):
    pass

def check(check, file):
    for mRef in file.filerefs("Call","Method ~Constructor"):
        if mRef.ent().longname() == RUN:
            pm(ERR1, check, mRef.scope(), mRef.file(), mRef.line(), mRef.column())

def pm(s, check, ent = None, file = None, line=-1, col = -1):
    check.violation(ent, file, line, col, str(s))
