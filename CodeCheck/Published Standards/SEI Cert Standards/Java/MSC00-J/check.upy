ERR1 = 'Use SSLSocket rather than Socket for secure data exchange.'


# The ID for the check
def ids():
    return ('MSC00-J', 'JAVA_MSC00')


# The short name of the check
def name(id):
    return {
        'MSC00-J': 'Published Standards/SEI Cert Standards/Java/Use SSLSocket rather than Socket for secure data exchange',
        'JAVA_MSC00': 'All Checks/Language Specific/Java/Miscellaneous/Use SSLSocket rather than Socket for secure data exchange',
    }[id]





def tags(id):
    return {
        'MSC00-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Likely',
            'Remediation Cost: High',
            'Priority: P6',
            'Level: L2',
        ],
        'JAVA_MSC00': [
            'Language: Java',
            'Miscellaneous',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Use SSLSocket rather than Socket for secure data exchange'


# The long description of the check
def detailed_description():
    return """
<p>Use SSLSocket rather than Socket for secure data exchange</p>
<p><b>Risk Assessment</b></p>
<p>Use of plain sockets fails to provide any guarantee of the confidentiality and integrity of data transmitted over those sockets.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/MSC00-J.+Use+SSLSocket+rather+than+Socket+for+secure+data+exchange</i></p>
<p><b>Exceptions</b></p>
<p><i>MSC00-J-EX0: Because of the mechanisms that SSLSocket provides to ensure the secure transfer of packets, significant performance overhead may result. Regular sockets are sufficient under the following circumstances:</p>
<p>The data being sent over the socket is not sensitive.</p>
<p>The data is sensitive but properly encrypted (see SER02-J. Sign then seal objects before sending them outside a trust boundary for more information).</p>
<p>The network path of the socket never crosses a trust boundary. This could happen when, for example, the two endpoints of the socket are within the same local network and the entire network is trusted.</p></i>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">// Exception handling has been omitted for the sake of brevity
class EchoServer {
  public static void main(String[] args) throws IOException {
    ServerSocket serverSocket = null;
    try {
      serverSocket = new ServerSocket(9999);
      Socket socket = serverSocket.accept();
      PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
      BufferedReader in = new BufferedReader(
          new InputStreamReader(socket.getInputStream()));
      String inputLine;
      while ((inputLine = in.readLine()) != null) {
        System.out.println(inputLine);
        out.println(inputLine);
      }
    } finally {
      if (serverSocket != null) {
        try {
          serverSocket.close();
        } catch (IOException x) {
          // Handle error
        }
      }
    }
  }
}

class EchoClient {
  public static void main(String[] args)
                          throws UnknownHostException, IOException {
    Socket socket = null;
    try {
      socket = new Socket("localhost", 9999);
      PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
      BufferedReader in = new BufferedReader(
          new InputStreamReader(socket.getInputStream()));
      BufferedReader stdIn = new BufferedReader(
          new InputStreamReader(System.in));
      String userInput;
      while ((userInput = stdIn.readLine()) != null) {
        out.println(userInput);
        System.out.println(in.readLine());
      }
    } finally {
      if (socket != null) {
        try {
          socket.close();
        } catch (IOException x) {
          // Handle error
        }
      }
    }
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    for type_ref in file.filerefs("Typed", "Class Type Public Member"):
        if type_ref.ent().longname() == "java.net.Socket":
            check.violation(type_ref.scope(), file,
                            type_ref.line(), type_ref.column(), ERR1)
