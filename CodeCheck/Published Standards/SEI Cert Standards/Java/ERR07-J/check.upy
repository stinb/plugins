ERR1 = 'Do not throw RuntimeException, Exception, or Throwable.'


# The ID for the check
def ids():
    return ('ERR07-J', 'JAVA_ERR07')


# The short name of the check
def name(id):
    return {
        'ERR07-J': 'Published Standards/SEI Cert Standards/Java/Do not throw RuntimeException, Exception, or Throwable',
        'JAVA_ERR07': 'All Checks/Language Specific/Java/Exceptional Behavior/Do not throw RuntimeException, Exception, or Throwable',
    }[id]



def tags(id):
    return {
        'ERR07-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Likely',
            'Remediation Cost: Medium',
            'Priority: P6',
            'Level: L2',
        ],
        'JAVA_ERR07': [
            'Language: Java',
            'Exceptional Behavior',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not throw RuntimeException, Exception, or Throwable'


# The long description of the check
def detailed_description():
    return """
<p>Do not throw RuntimeException, Exception, or Throwable</p>
<p><b>Risk Assessment</b></p>
<p>Throwing RuntimeException, Exception, or Throwable prevents classes from catching the intended exceptions without catching other unintended exceptions as well.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/ERR07-J.+Do+not+throw+RuntimeException%2C+Exception%2C+or+Throwable</i></p>
<p><b>Exceptions</b></p>
<p><i>ERR07-J-EX0: Classes that sanitize exceptions to comply with a security policy are permitted to translate specific exceptions into more general exceptions. This translation could potentially result in throwing RuntimeException, Exception, or Throwable in some cases, depending on the requirements of the security policy.</i>...</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">boolean isCapitalized(String s) {
  if (s == null) {
    throw new RuntimeException("Null String");
  }
  if (s.equals("")) {
    return true;
  }
  String first = s.substring(0, 1);
  String rest = s.substring(1);
  return (first.equals(first.toUpperCase()) &&
          rest.equals(rest.toLowerCase()));
}


private void doSomething() throws Exception {
  //...
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    ERROR_LIST = {"Exception", "RuntimeException", "Throwable"}

    for throw_ref in file.filerefs("Throw, Call", "Class Type Public Member, Method Constructor Member Public"):
        if throw_ref.ent().name() in ERROR_LIST:
            check.violation(throw_ref.ent(), file, throw_ref.line(),
                            throw_ref.column(), ERR1)
