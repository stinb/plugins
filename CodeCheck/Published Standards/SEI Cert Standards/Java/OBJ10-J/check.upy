# This script is designed to run with Understand - CodeCheck
# Micah Morgan - 3/31/2022

ERR1 = 'Do not use public static nonfinal fields.'

DEF_NAME = "Do not use public static nonfinal fields"

# The ID for the check
def ids():
    return ('OBJ10-J', 'JAVA_OBJ10')

# The short name of the check
def name(id):
    return {
        'OBJ10-J': "Published Standards/SEI Cert Standards/Java/" + DEF_NAME,
        'JAVA_OBJ10': "All Checks/Language Specific/Java/Object Orientation/" + DEF_NAME,
    }[id]




def tags(id):
    return {
        'OBJ10-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P8',
            'Level: L2',
        ],
        'JAVA_OBJ10': [
            'Language: Java',
            'Object Orientation',
        ],
    }.get(id)

# The short description of the check
def description():
    return DEF_NAME

# The long description of the check
def detailed_description():
    return """
<p>Do not use public static nonfinal fields</p>
<p><b>Risk Assessment</b></p>
<p>Unauthorized modifications of public static variables can result in unexpected behavior and violation of class invariants. Furthermore, because static variables can be visible to code loaded by different class loaders when those class loaders are in the same delegation chain, such variables can be used as a covert communication channel between different application domains.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/OBJ10-J.+Do+not+use+public+static+nonfinal+fields</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">class DataSerializer implements Serializable {
  public static long serialVersionUID = 1973473122623778747L;
  // ...
}</code></pre>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    for var in file.filerefs("Define", "Public Static ~Final Variable"):
        pm(ERR1, check, var.ent(), file, var.line(), var.column())

def pm(s, check, ent = None, file = None, line = -1, col = -1):
    check.violation(ent, file, line, col, str(s))
