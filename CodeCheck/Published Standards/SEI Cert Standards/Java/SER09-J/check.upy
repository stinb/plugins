ERR1 = 'Do not invoke overridable methods from the readObject() method.'


# The ID for the check
def ids():
    return ('SER09-J', 'JAVA_SER09')


# The short name of the check
def name(id):
    return {
        'SER09-J': 'Published Standards/SEI Cert Standards/Java/Do not invoke overridable methods from the readObject() method',
        'JAVA_SER09': 'All Checks/Language Specific/Java/Serialization/Do not invoke overridable methods from the readObject() method',
    }[id]





def tags(id):
    return {
        'SER09-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
        ],
        'JAVA_SER09': [
            'Language: Java',
            'Serialization',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not invoke overridable methods from the readObject() method'


# The long description of the check
def detailed_description():
    return """
<p>Do not invoke overridable methods from the readObject() method</p>
<p><b>Risk Assessment</b></p>
<p>Invoking overridable methods from the readObject() method can lead to initialization errors.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/SER09-J.+Do+not+invoke+overridable+methods+from+the+readObject%28%29+method</i></p>
<p><b>Exceptions</b></p>
<p><i>SER09-J-EX0: The readObject() method may invoke the overridable methods defaultReadObject() and readFields() in class java.io.ObjectInputStream [SCG 2009].</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">private void readObject(final ObjectInputStream stream)
                        throws IOException, ClassNotFoundException {
  overridableMethod();
  stream.defaultReadObject();
}

public void overridableMethod() {
  // ...
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    for implements_ref in file.filerefs("Implement Couple", "Interface Type Public"):
        if implements_ref.ent().longname() == "java.io.Serializable":
            for func_ref in implements_ref.scope().refs("Define", "Method Member"):
                if func_ref.ent().name() == "readObject" and func_ref.ent().type() == "void":
                    for call_ref in func_ref.ent().refs("Call", "Method Public Member"):
                        if call_ref.ent().longname() in {"java.io.ObjectInputStream.defaultReadObject", "java.io.ObjectInputStream.readFields"}:
                            continue
                        elif not call_ref.ent().kind().check("Final"):
                            check.violation(
                                call_ref.ent(), file, call_ref.line(), call_ref.column(), ERR1)
