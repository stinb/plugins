# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11-1-2022

import re


ERR1 = "Java char parameter passed to method \'%1\' may not fully represent the Unicode code point"


def ids():
    return ('STR01-J', 'JAVA_STR01')



def name(id):
    return {
        'STR01-J': 'Published Standards/SEI Cert Standards/Java/Do not assume that a Java char fully represents a Unicode code point',
        'JAVA_STR01': 'All Checks/Language Specific/Java/Characters and Strings/Do not assume that a Java char fully represents a Unicode code point',
    }[id]



def tags(id):
    return {
        'STR01-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
        ],
        'JAVA_STR01': [
            'Language: Java',
            'Characters and Strings',
        ],
    }.get(id)

def detailed_description():
    return '''
<p>
Do not assume that a Java char fully represents a Unicode code point
</p>

<p><b>Risk Assessment</b></p>
<p>
Forming strings consisting of partial characters can result in unexpected behavior.
</p>

<p>
For the full standard:
<i>
https://wiki.sei.cmu.edu/confluence/display/java/STR01-J.+Do+not+assume+that+a+Java+char+fully+represents+a+Unicode+code+point
</i>
</p>

<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public static String trim(String string) {
  char ch;
  int i;
  for (i = 0; i &lt; string.length(); i += 1) {
    ch = string.charAt(i);
    if (!Character.isLetter(ch)) {
      break;
    }
  }
  return string.substring(i);
}
</code></pre>

'''

INVALID_TYPES = ["char", "char[]"]

def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    lexer = None

    # look for calls to java.lang.Character methods such as isLetter
    for method in file.filerefs("Java Call Nondynamic", "Public Static Method", False):

        if method.ent().parent() and re.search(r"java.lang.Character", method.ent().parent().longname()):

            # check the arguments, if they are not int code points then flag violation
            for invalid_type in INVALID_TYPES:

                if invalid_type in method.ent().parameters():

                    check.violation(method.ent(), file, method.line(), method.column(), ERR1, method.ent())


