ERR1 = 'Do not catch NullPointerException or any of its ancestors.'


# The ID for the check
def ids():
    return ('ERR08-J', 'JAVA_ERR08')


# The short name of the check
def name(id):
    return {
        'ERR08-J': 'Published Standards/SEI Cert Standards/Java/Do not catch NullPointerException or any of its ancestors',
        'JAVA_ERR08': 'All Checks/Language Specific/Java/Exceptional Behavior/Do not catch NullPointerException or any of its ancestors',
    }[id]




def tags(id):
    return {
        'ERR08-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Likely',
            'Remediation Cost: Medium',
            'Priority: P12',
            'Level: L1',
        ],
        'JAVA_ERR08': [
            'Language: Java',
            'Exceptional Behavior',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not catch NullPointerException or any of its ancestors'


# The long description of the check
def detailed_description():
    return """
<p>Do not catch NullPointerException or any of its ancestors</p>
<p><b>Risk Assessment</b></p>
<p>Catching NullPointerException may mask an underlying null dereference, degrade application performance, and result in code that is hard to understand and maintain. Likewise, catching RuntimeException, Exception, or Throwable may unintentionally trap other exception types and prevent them from being handled properly.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors</i></p>
<p><b>Exceptions</b></p>
<p><i>ERR08-J-EX0: A catch block may catch all exceptions to process them before rethrowing them (filtering sensitive information from exceptions before the call stack leaves a trust boundary, for example). Refer to ERR01-J. Do not allow exceptions to expose sensitive information and weaknesses CWE 7 and CWE 388 for more information. In such cases, a catch block should catch Throwable rather than Exception or RuntimeException.</i></p>
<p><i>ERR08-J-EX1: Task processing threads such as worker threads in a thread pool or the Swing event dispatch thread are permitted to catch RuntimeException when they call untrusted code through an abstraction such as the Runnable interface [Goetz 2006, p. 161].</i></p>
<p><i>ERR08-J-EX2: Systems that require substantial fault tolerance or graceful degradation are permitted to catch and log general exceptions such as Throwable at appropriate levels of abstraction.</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">boolean isName(String s) {
  try {
    String names[] = s.split(" ");

    if (names.length != 2) {
      return false;
    }
    return (isCapitalized(names[0]) && isCapitalized(names[1]));
  } catch (NullPointerException e) {
    return false;
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for type_ref in file.filerefs("Typed", "Class Type Public Member"):
        if type_ref.ent().longname() == "java.lang.NullPointerException":
            lexemes = lexer.lexemes(type_ref.line(), type_ref.line())

            for lex in lexemes:
                if lex.text() == "catch" and lex.token() == "Keyword":
                    check.violation(type_ref.ent(), file,
                                    type_ref.line(), type_ref.column(), ERR1)
