# This script is designed to run with Understand - CodeCheck
# Micah Morgan - 5/24/2022

ERR1 = 'Do not use Thread.stop() to terminate threads.'

DEF_NAME = "Do not use Thread.stop() to terminate threads."

# The ID for the check
def ids():
    return ('THI05-J', 'JAVA_THI05')

# Required - Return the short name of the check
def name(id):
    return {
        'THI05-J': "Published Standards/SEI Cert Standards/Java/" + DEF_NAME,
        'JAVA_THI05': "All Checks/Language Specific/Java/Thread APIs/" + DEF_NAME,
    }[id]




def tags(id):
    return {
        'THI05-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
        ],
        'JAVA_THI05': [
            'Language: Java',
            'Thread APIs',
        ],
    }.get(id)

# The short description of the check
def description():
    return DEF_NAME

# The long description of the check
def detailed_description():
    return """
<p>Do not use Thread.stop() to terminate threads</p>
<p><b>Risk Assessment</b></p>
<p>Forcing a thread to stop can result in inconsistent object state. Critical resources could also leak if cleanup operations are not carried out as required.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/THI05-J.+Do+not+use+Thread.stop%28%29+to+terminate+threads</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public static void main(String[] args) throws InterruptedException {
    Thread thread = new Thread(new Container());
    thread.start();
    Thread.sleep(5000);
    thread.stop(); // violation
  }</code></pre>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

# Options for the check
def define_options(check):
    pass

def check(check, file):
    for mRef in file.filerefs("Call", "Final Method"):
        if mRef.ent() and mRef.ent().longname() == "java.lang.Thread.stop":
            pm(ERR1, check, mRef.scope(), mRef.file(), mRef.line(), mRef.column())

def pm(s, check, ent = None, file = None, line=-1, col = -1):
    check.violation(ent, file, line, col, str(s))
