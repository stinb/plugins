import re


ERR1 = 'Generate strong random numbers.'


# The ID for the check
def ids():
    return ('MSC02-J', 'JAVA_MSC02')


# The short name of the check
def name(id):
    return {
        'MSC02-J': 'Published Standards/SEI Cert Standards/Java/Generate strong random numbers',
        'JAVA_MSC02': 'All Checks/Language Specific/Java/Miscellaneous/Generate strong random numbers',
    }[id]





def tags(id):
    return {
        'MSC02-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 75',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P12',
            'Level: L1',
        ],
        'JAVA_MSC02': [
            'Language: Java',
            'Miscellaneous',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Generate strong random numbers'


# The long description of the check
def detailed_description():
    return """
<p>Generate strong random numbers</p>
<p><b>Risk Assessment</b></p>
<p>Predictable random number sequences can weaken the security of critical applications such as cryptography.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/MSC02-J.+Generate+strong+random+numbers</i></p>
<p><b>Exceptions</b></p>
<p><i>MSC02-J-EX0: Using the default constructor for java.util.Random applies a seed value that is "very likely to be distinct from any other invocation of this constructor" [API 2014] and may improve security marginally. As a result, it may be used only for noncritical applications operating on nonsensitive data. Java's default seed uses the system's time in milliseconds. When used, explicit documentation of this exception is required.
For noncritical cases, such as adding some randomness to a game or unit testing, the use of class Random is acceptable. However, it is worth reiterating that the resulting low-entropy random numbers are insufficiently random to be used for more security-critical applications, such as cryptography.</i></p>
<p><i>MSC02-J-EX1: Predictable sequences of pseudorandom numbers are required in some cases, such as when running regression tests of program behavior. Use of the insecure java.util.Random class is permitted in such cases. However, security-related applications may invoke this exception only for testing purposes; this exception may not be applied in a production context.</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">import java.util.Random;
// ...

Random number = new Random(123L);
//...
for (int i = 0; i &lt; 20; i++) {
  // Generate another random integer in the range [0, 20]
  int n = number.nextInt(21);
  System.out.println(n);
}
</code></pre>
"""

def test_language(language):
    return language == 'Java'

# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def check(check, file):
    if not re.search(r"import java.util.Random;", file.contents()):
        return

    for create_ref in file.filerefs("Create", "Class Type Public Member"):
        if create_ref.ent().longname() == "java.util.Random":
            check.violation(create_ref.ent(), file,
                            create_ref.line(), create_ref.column(), ERR1)
