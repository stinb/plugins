# This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 11/09/2022

import re

ERR1 = 'Value returned by getSize() is unreliable, local resources may still be exhausted'

DEF_NAME = "Safely extract files from ZipInputStream"

# The ID for the check
def ids():
    return ('IDS04-J', 'JAVA_IDS04')

# The short name of the check
def name(id):
    return {
        'IDS04-J': "Published Standards/SEI Cert Standards/Java/" + DEF_NAME,
        'JAVA_IDS04': "All Checks/Language Specific/Java/Input Validation and Data Sanitization/" + DEF_NAME,
    }[id]




def tags(id):
    return {
        'IDS04-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P2',
            'Level: L3',
        ],
        'JAVA_IDS04': [
            'Language: Java',
            'Input Validation and Data Sanitization',
        ],
    }.get(id)

# The short description of the check
def description():
    return DEF_NAME

# The long description of the check
def detailed_description():
    return """
<p>Safely extract files from ZipInputStream</p>
<p><b>Risk Assessment</b></p>
<p>None</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream</i></p>
<p><b>Exceptions</b></p>
<p><i>N/A</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">static final int BUFFER = 512;
static final int TOOBIG = 0x6400000; // 100MB
// ...

public final void unzip(String filename) throws java.io.IOException{
  FileInputStream fis = new FileInputStream(filename);
  ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
  ZipEntry entry;
  try {
    while ((entry = zis.getNextEntry()) != null) {
      System.out.println("Extracting: " + entry);
      int count;
      byte data[] = new byte[BUFFER];
      // Write the files to the disk, but only if the file is not insanely big
      if (entry.getSize() &gt; TOOBIG ) {
         throw new IllegalStateException("File to be unzipped is huge.");
      }
      if (entry.getSize() == -1) {
         throw new IllegalStateException("File to be unzipped might be huge.");
      }
      FileOutputStream fos = new FileOutputStream(entry.getName());
      BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
      while ((count = zis.read(data, 0, BUFFER)) != -1) {
        dest.write(data, 0, count);
      }
      dest.flush();
      dest.close();
      zis.closeEntry();
    }
  } finally {
    zis.close();
  }
}
</code></pre>
<p><b>Developer's Notes</b></p><p>
This check is only partially coverable, as there is no way to check the resource consumption of a file being unzipped using static analysis
or to check the validation of a filename being unzipped. This check simply reports any use of the method ZipEntry.getSize(), as a malicious attacker
could forge the field in the ZIP file that purports to show the uncompressed size of the file, so value returned by said method is unreliable.
</p>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    for pub_method in file.filerefs("Java Call", "Java Method Public Member"):

        if pub_method.ent().longname() == "java.util.zip.ZipEntry.getSize":
            check.violation(pub_method.ent(), file, pub_method.line(), pub_method.column(), ERR1)






