ERR1 = 'Do not trust the values of environment variables.'


# The ID for the check
def ids():
    return ('ENV02-J', 'JAVA_ENV02')


# The short name of the check
def name(id):
    return {
        'ENV02-J': 'Published Standards/SEI Cert Standards/Java/Do not trust the values of environment variables',
        'JAVA_ENV02': 'All Checks/Language Specific/Java/Runtime Environment/Do not trust the values of environment variables',
    }[id]



def tags(id):
    return {
        'ENV02-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Likely',
            'Remediation Cost: Low',
            'Priority: P9',
            'Level: L2',
        ],
        'JAVA_ENV02': [
            'Language: Java',
            'Runtime Environment',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not trust the values of environment variables'


# The long description of the check
def detailed_description():
    return """
<p>Do not trust the values of environment variables</p>
<p><b>Risk Assessment</b></p>
<p>Untrusted environment variables can provide data for injection and other attacks if not properly sanitized.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/ENV02-J.+Do+not+trust+the+values+of+environment+variables</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">String username = System.getenv("USER");
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    for call_ref in file.filerefs("Call Nondynamic", "Method Public Member"):
        if call_ref.ent().longname() in {"java.lang.System.getenv"}:
            check.violation(call_ref.ent(), file,
                            call_ref.line(), call_ref.column(), ERR1)
