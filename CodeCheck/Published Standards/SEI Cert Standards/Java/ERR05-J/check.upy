ERR1 = 'Do not let checked exceptions escape from a finally block.'


# The ID for the check
def ids():
    return ('ERR05-J', 'JAVA_ERR05')


# The short name of the check
def name(id):
    return {
        'ERR05-J': 'Published Standards/SEI Cert Standards/Java/Do not let checked exceptions escape from a finally block',
        'JAVA_ERR05': 'All Checks/Language Specific/Java/Exceptional Behavior/Do not let checked exceptions escape from a finally block',
    }[id]



def tags(id):
    return {
        'ERR05-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
        ],
        'JAVA_ERR05': [
            'Language: Java',
            'Exceptional Behavior',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not let checked exceptions escape from a finally block'


# The long description of the check
def detailed_description():
    return """
<p>Do not let checked exceptions escape from a finally block</p>
<p><b>Risk Assessment</b></p>
<p>Failure to handle an exception in a finally block may have unexpected results.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/ERR05-J.+Do+not+let+checked+exceptions+escape+from+a+finally+block</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Operation {
  public static void doOperation(String some_file) {
    // ... Code to check or set character encoding ...
    try {
      BufferedReader reader =
          new BufferedReader(new FileReader(some_file));
      try {
        // Do operations
      } finally {
        reader.close();
        // ... Other cleanup code ...
      }
    } catch (IOException x) {
      // Forward to handler
    }
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    lex = lexer.first()

    while lex:
        if lex.text() == "finally" and lex.token() == "Keyword":
            finally_lex = lex
            on_body = 0
            has_catch = False

            while lex:
                lex = lex.next(ignore_whitespace=True,
                               ignore_comments=True)

                if lex.text() == "{" and lex.token() == "Punctuation":
                    on_body += 1
                elif lex.text() == "}" and lex.token() == "Punctuation":
                    on_body -= 1

                    if not on_body:
                        break
                elif lex.text() == "catch" and lex.token() == "Keyword":
                    has_catch = True
                    break

            if not has_catch:
                check.violation(None, file, finally_lex.line_begin(),
                                finally_lex.column_begin(), ERR1)

        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
