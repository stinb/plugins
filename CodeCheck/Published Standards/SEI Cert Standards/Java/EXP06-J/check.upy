# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 11-8-2022

import re

ERR1 = "Side effects were produced in assertion"
DEF_NAME = "Expressions used in assertions must not produce side effects"

# The ID for the check
def ids():
    return ('EXP06-J', 'JAVA_EXP06')

# Required - Return the short name of the check
def name(id):
    return {
        'EXP06-J': "Published Standards/SEI Cert Standards/Java/" + DEF_NAME,
        'JAVA_EXP06': "All Checks/Language Specific/Java/Expressions/" + DEF_NAME,
    }[id]





def tags(id):
    return {
        'EXP06-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Low',
            'Priority: P3',
            'Level: L3',
        ],
        'JAVA_EXP06': [
            'Language: Java',
            'Expressions',
        ],
    }.get(id)

# The description of the check
def detailed_description():
    return """
<p>Expressions used in assertions must not produce side effects.
</p>
<p><b>Risk Assessment</b></p>
<p>The assert statement is a convenient mechanism for incorporating diagnostic
tests in code. The behavior of the assert statement depends on the status of a
runtime property. When enabled, the assert statement evaluates its expression
argument and throws an AssertionError if false. When disabled, assert is a
no-op; any side effects resulting from evaluation of the expression in the
assertion are lost. Consequently, expressions used with the standard assert
statement must not produce side effects.</p>
<p>For the full standard:
<i>https://wiki.sei.cmu.edu/confluence/display/java/EXP06-J.+Expressions+used+\
in+assertions+must+not+produce+side+effects</i>
</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">private ArrayList&lt;String&gt; names;

void process(int index) {
  assert names.remove(null); // Side effect
  // ...
}</code></pre>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):

    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        # Look for all 'assert' keywords
        if lexeme.text() == 'assert':
            while lexeme and lexeme.text() != ';':
                # Throw violation is assert uses a function or method
                if lexeme.ent() and re.search(r'function|method', lexeme.ent().kindname().lower()):
                    check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
                    break


                lexeme = lexeme.next(True, True)

        if lexeme:
            lexeme = lexeme.next(True, True)
