ERR1 = 'Overridable method should not be called in a constructor.'


# The ID for the check
def ids():
    return ('MET05-J', 'JAVA_MET05')


# The short name of the check
def name(id):
    return {
        'MET05-J': 'Published Standards/SEI Cert Standards/Java/Ensure that constructors do not call overridable methods',
        'JAVA_MET05': 'All Checks/Language Specific/Java/Methods/Ensure that constructors do not call overridable methods',
    }[id]





def tags(id):
    return {
        'MET05-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P8',
            'Level: L2',
        ],
        'JAVA_MET05': [
            'Language: Java',
            'Methods',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Ensure that constructors do not call overridable methods'


# The long description of the check
def detailed_description():
    return """
<p>Ensure that constructors do not call overridable methods</p>
<p><b>Risk Assessment</b></p>
<p>Allowing a constructor to call overridable methods can provide an attacker with access to the this reference before an object is fully initialized, which could lead to a vulnerability.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/MET05-J.+Ensure+that+constructors+do+not+call+overridable+methods</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">class SuperClass {
  public SuperClass () {
    doLogic();
  }

  public void doLogic() {
    System.out.println("This is superclass!");
  }
}

class SubClass extends SuperClass {
  private String color = "red";

  public void doLogic() {
    System.out.println("This is subclass! The color is :" + color);
    // ...
  }
}

public class Overridable {
  public static void main(String[] args) {
    SuperClass bc = new SuperClass();
    // Prints "This is superclass!"
    SuperClass sc = new SubClass();
    // Prints "This is subclass! The color is :null"
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    for constructor_ref in file.filerefs("Define", "Method Constructor Member"):
        for call_ref in constructor_ref.ent().refs("Call", "Method Member"):
            if not call_ref.ent().kind().check("Final"):
                check.violation(call_ref.ent(), file,
                                call_ref.line(), call_ref.column(), ERR1)
