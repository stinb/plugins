# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 8-11-2022

import re
ERR1 = 'File created without appropriate access permissions'

DEF_NAME = "Create files with appropriate access permissions"

# The ID for the check
def ids():
    return ('FIO01-J', 'JAVA_FIO01')

# Required - Return the short name of the check
def name(id):
    return {
        'FIO01-J': "Published Standards/SEI Cert Standards/Java/" + DEF_NAME,
        'JAVA_FIO01': "All Checks/Language Specific/Java/Input Output/" + DEF_NAME,
    }[id]



def tags(id):
    return {
        'FIO01-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Probable',
            'Remediation Cost: High',
            'Priority: P4',
            'Level: L3',
        ],
        'JAVA_FIO01': [
            'Language: Java',
            'Input Output',
        ],
    }.get(id)

# The description of the check
def detailed_description():
    return """
<p>Create files with appropriate access permissions</p>
<p><b>Risk Assessment</b></p>
<p>Files on multiuser systems are generally owned by a particular user. The
owner of the file can specify which other users on the system should be allowed
to access the contents of these files.</p>
<p>These file systems use a privileges and permissions model to protect file
access. When a file is created, the file access permissions dictate who may
access or operate on the file. When a program creates a file with insufficiently
restrictive access permissions, an attacker may read or modify the file before
the program can modify the permissions. Consequently, files must be created with
access permissions that prevent unauthorized file access.</p>
<p>For the full standard:
<i>https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+\
appropriate+access+permissions</i>
</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Replace {
  public static void main(String[] args) {
    String original = "insecure";
    original.replace('i', '9');
    System.out.println(original);
  }
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    if not re.search(r'FileWriter|FileOutputStream', file.contents()):
        return

    refs = file.filerefs('Create')
    for ref in refs:
        # Throw violation if FileWriter or FileOutputStream was used
        if re.search(r'FileWriter|FileOutputStream', ref.ent().name()):
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)

