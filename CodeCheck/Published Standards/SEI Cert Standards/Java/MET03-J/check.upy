# This script is designed to run with Understand - CodeCheck
# Micah Morgan - 5/3/2022

ERR1 = 'Methods that perform a security check must be declared private or final.'

DEF_NAME = "Methods that perform a security check must be declared private or final."

# The ID for the check
def ids():
    return ('MET03-J', 'JAVA_MET03')

def name(id):
    return {
        'MET03-J': "Published Standards/SEI Cert Standards/Java/" + DEF_NAME,
        'JAVA_MET03': "All Checks/Language Specific/Java/Methods/" + DEF_NAME,
    }[id]




def tags(id):
    return {
        'MET03-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P8',
            'Level: L2',
        ],
        'JAVA_MET03': [
            'Language: Java',
            'Methods',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p>Methods that perform a security check must be declared private or final.</p>
<p><b>Risk Assessment</b></p>
<p>Failure to declare a class's method private or final affords the opportunity for a malicious subclass to bypass the security checks performed in the method.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/MET03-J.+Methods+that+perform+a+security+check+must+be+declared+private+or+final</i></p>
<p><b>Exceptions</b></p>
<p><i>MET03-J-EX0:: </i>Classes that are declared final are exempt from this rule because their member methods cannot be overridden.</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public void readSensitiveFile() {
  try {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {  // Check for permission to read file
      sm.checkRead("/temp/tempFile"); // violation
    }
    // Access the file
  } catch (SecurityException se) {
    // Log exception
  }
}</code></pre>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

# Options for the check
def define_options(check):
    pass

def check(check, file):
    for ref in file.filerefs("Call", "Method"):
        if "java.lang.SecurityManager.check" in ref.ent().longname():
            pMethod = reScope(ref.scope(), "Method", check)
            pClass = reScope(ref.scope(), "Class", check)

            pmGood = pMethod and ("Final" in pMethod.kindname() or "Private" in pMethod.kindname())
            pcGood = pClass and "Final" in pClass.kindname()
            if not ( pmGood or pcGood ):
                pm(ERR1, check, ref.ent(), ref.file(), ref.line(), ref.column())


def reScope(ent, stopOn, check=None):
    if stopOn in ent.kindname():
        return ent

    for p in ent.refs("Definein"):
        return reScope(p.ent(), stopOn, check)

    return None

def pm(s, check, ent = None, file = None, line=-1, col = -1):
    check.violation(ent, file, line, col, str(s))
