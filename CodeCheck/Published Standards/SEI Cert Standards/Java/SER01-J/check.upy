ERR1 = 'Do not deviate from the proper signatures of serialization methods.'


# The ID for the check
def ids():
    return ('SER01-J', 'JAVA_SER01')


# The short name of the check
def name(id):
    return {
        'SER01-J': 'Published Standards/SEI Cert Standards/Java/Do not deviate from the proper signatures of serialization methods',
        'JAVA_SER01': 'All Checks/Language Specific/Java/Serialization/Do not deviate from the proper signatures of serialization methods',
    }[id]





def tags(id):
    return {
        'SER01-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 75',
            'Likelihood: Likely',
            'Remediation Cost: Low',
            'Priority: P27',
            'Level: L1',
        ],
        'JAVA_SER01': [
            'Language: Java',
            'Serialization',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not deviate from the proper signatures of serialization methods'


# The long description of the check
def detailed_description():
    return """
<p>Do not deviate from the proper signatures of serialization methods</p>
<p><b>Risk Assessment</b></p>
<p>Deviating from the proper signatures of serialization methods can lead to unexpected behavior. Failure to limit the accessibility of the readObject() and writeObject() methods can leave code vulnerable to untrusted invocations. Declaring readResolve() and writeReplace() methods to be static or private can force subclasses to silently ignore them, while declaring them public allows them to be invoked by untrusted code.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/SER01-J.+Do+not+deviate+from+the+proper+signatures+of+serialization+methods</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Ser implements Serializable {
  private final long serialVersionUID = 123456789;
  private Ser() {
    // Initialize
  }
  public static void writeObject(final ObjectOutputStream stream)
    throws IOException {
    stream.defaultWriteObject();
  }
  public static void readObject(final ObjectInputStream stream)
      throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
  }
}

class Extendable implements Serializable {
  protected static Object readResolve() {
    // ...
  }

  protected static Object writeReplace() {
    // ...
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    for implements_ref in file.filerefs("Implement Couple", "Interface Type Public"):
        if implements_ref.ent().longname() == "java.io.Serializable":
            for func_ref in implements_ref.scope().refs("Define", "Method Member"):
                if func_ref.ent().name() in {"writeObject", "readObject", "readOjbectNoData"} and func_ref.ent().type() == "void":
                    if func_ref.ent().kind().check("Public, Protected, Static"):
                        check.violation(func_ref.ent(), file,
                                        func_ref.line(), func_ref.column(), ERR1)
                elif func_ref.ent().name() in {"readResolve", "writeReplace"} and func_ref.ent().type() == "Object":
                    if func_ref.ent().kind().check("Public, Private, Static"):
                        check.violation(func_ref.ent(), file,
                                        func_ref.line(), func_ref.column(), ERR1)
