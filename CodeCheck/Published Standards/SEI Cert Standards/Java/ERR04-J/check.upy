ERR1 = 'Do not complete abruptly from a finally block.'


# The ID for the check
def ids():
    return ('ERR04-J', 'JAVA_ERR04')


# The short name of the check
def name(id):
    return {
        'ERR04-J': 'Published Standards/SEI Cert Standards/Java/Do not complete abruptly from a finally block',
        'JAVA_ERR04': 'All Checks/Language Specific/Java/Exceptional Behavior/Do not complete abruptly from a finally block',
    }[id]





def tags(id):
    return {
        'ERR04-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Medium',
            'Priority: P4',
            'Level: L3',
        ],
        'JAVA_ERR04': [
            'Language: Java',
            'Exceptional Behavior',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not complete abruptly from a finally block'


# The long description of the check
def detailed_description():
    return """
<p>Do not complete abruptly from a finally block</p>
<p><b>Risk Assessment</b></p>
<p>Abrupt completion of a finally block masks any exceptions thrown inside the associated try and catch blocks.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/ERR04-J.+Do+not+complete+abruptly+from+a+finally+block</i></p>
<p><b>Exceptions</b></p>
<p><i>ERRO4-J-EX0: Control flow statements whose destination is within the finally block are perfectly acceptable. For example, the following code does not violate this rule because the break statement exits within the while loop but not within the finally block.</i>...</p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">class TryFinally {
  private static boolean doLogic() {
    try {
      throw new IllegalStateException();
    } finally {
      System.out.println("logic done");
      return true;
    }
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    lex = lexer.first()

    while lex:
        if lex.text() == "finally" and lex.token() == "Keyword":
            while lex.text() != "{":
                lex = lex.next()

            lex = lex.next()
            on_body = 1
            on_loop = False
            on_loop_body = 0

            while on_body:
                if lex.text() in {"while", "for", "do"} and lex.token() == "Keyword":
                    on_loop = True
                elif ((lex.text() in {"break", "continue"} and not on_loop)
                      or (lex.text() in {"return", "throw"})) and lex.token() == "Keyword":
                    check.violation(None, file, lex.line_begin(),
                                    lex.column_begin(), ERR1)
                elif lex.text() == "{" and lex.token() == "Punctuation":
                    if on_loop:
                        on_loop_body += 1
                    on_body += 1
                elif lex.text() == "}" and lex.token() == "Punctuation":
                    if on_loop:
                        on_loop_body -= 1

                        if not on_loop_body:
                            on_loop = False
                    on_body -= 1

                lex = lex.next(ignore_whitespace=True,
                               ignore_comments=True)

        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
