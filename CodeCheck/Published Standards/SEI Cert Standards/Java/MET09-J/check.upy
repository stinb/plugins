ERR1 = 'Class must also define the hashCode() method.'


# The ID for the check
def ids():
    return ('MET09-J', 'JAVA_MET09')


# The short name of the check
def name(id):
    return {
        'MET09-J': 'Published Standards/SEI Cert Standards/Java/Classes that define an equals() method must also define a hashCode() method',
        'JAVA_MET09': 'All Checks/Language Specific/Java/Methods/Classes that define an equals() method must also define a hashCode() method',
    }[id]





def tags(id):
    return {
        'MET09-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: High',
            'Priority: P1',
            'Level: L3',
        ],
        'JAVA_MET09': [
            'Language: Java',
            'Methods',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Classes that define an equals() method must also define a hashCode() method'


# The long description of the check
def detailed_description():
    return """
<p>Classes that define an equals() method must also define a hashCode() method</p>
<p><b>Risk Assessment</b></p>
<p>Overriding the equals() method without overriding the hashCode() method can lead to unexpected results.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/MET09-J.+Classes+that+define+an+equals%28%29+method+must+also+define+a+hashCode%28%29+method</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public final class CreditCard {
  private final int number;

  public CreditCard(int number) {
    this.number = number;
  }

  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof CreditCard)) {
      return false;
    }
    CreditCard cc = (CreditCard)o;
    return cc.number == number;
  }

  public static void main(String[] args) {
    Map&lt;CreditCard, String&gt; m = new HashMap&lt;CreditCard, String&gt;();
    m.put(new CreditCard(100), "4111111111111111");
    System.out.println(m.get(new CreditCard(100)));
  }
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    for class_ref in file.filerefs("Define", "Class"):
        has_equals = False
        has_hashcode = False

        for func_ref in class_ref.ent().refs("Define", "Method"):
            func_name = func_ref.ent().name()
            func_type = func_ref.ent().type()

            if func_name == "equals" and func_type == "boolean":
                has_equals = True
            elif func_name == "hashCode" and func_type == "int":
                has_hashcode = True

        if has_equals and not has_hashcode:
            check.violation(class_ref.ent(), file,
                            class_ref.line(), class_ref.column(), ERR1)
