ERR1 = 'Do not construct BigDecimal objects from floating-point literals.'


# The ID for the check
def ids():
    return ('NUM10-J', 'JAVA_NUM10')


# The short name of the check
def name(id):
    return {
        'NUM10-J': 'Published Standards/SEI Cert Standards/Java/Do not construct BigDecimal objects from floating-point literals',
        'JAVA_NUM10': 'All Checks/Language Specific/Java/Numeric Types and Operations/Do not construct BigDecimal objects from floating-point literals',
    }[id]





def tags(id):
    return {
        'NUM10-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Probable',
            'Remediation Cost: Low',
            'Priority: P6',
            'Level: L2',
        ],
        'JAVA_NUM10': [
            'Language: Java',
            'Numeric Types and Operations',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Do not construct BigDecimal objects from floating-point literals'


# The long description of the check
def detailed_description():
    return """
<p>Do not construct BigDecimal objects from floating-point literals</p>
<p><b>Risk Assessment</b></p>
<p>Using the BigDecimal(double val) constructor with decimal floating-point literals can lead to loss of precision.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/NUM10-J.+Do+not+construct+BigDecimal+objects+from+floating-point+literals</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">// Prints 0.1000000000000000055511151231257827021181583404541015625
// when run in FP-strict mode
System.out.println(new BigDecimal(0.1));
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def get_ent_type(entity):
    typed_ref = entity.ref("Typed")

    seen = set()
    while typed_ref and typed_ref not in seen:
        obj_ent = typed_ref.ent()
        obj_ref_type = obj_ent.type()
        typed_ref = typed_ref.ent().ref("Typed")
        seen.add(typed_ref)

        if not typed_ref:
            return obj_ent, obj_ref_type

    return entity, entity.type()


def check(check, file):
    for call_ref in file.filerefs("Call", "Method Constructor Member Public"):
        if call_ref.ent().name() == "BigDecimal":
            param_ref = call_ref.ent().ref("Define", "Parameter")

            if param_ref and param_ref.ent().type() == "double":
                check.violation(call_ref.ent(), file,
                                call_ref.line(), call_ref.column(), ERR1)
