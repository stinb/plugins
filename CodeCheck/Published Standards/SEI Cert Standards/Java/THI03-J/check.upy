ERR1 = 'Always invoke wait() and await() methods inside a loop.'


# The ID for the check
def ids():
    return ('THI03-J', 'JAVA_THI03')


# The short name of the check
def name(id):
    return {
        'THI03-J': 'Published Standards/SEI Cert Standards/Java/Always invoke wait() and await() methods inside a loop',
        'JAVA_THI03': 'All Checks/Language Specific/Java/Thread APIs/Always invoke wait() and await() methods inside a loop',
    }[id]





def tags(id):
    return {
        'THI03-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 25',
            'Likelihood: Unlikely',
            'Remediation Cost: Medium',
            'Priority: P2',
            'Level: L3',
            'Control Flow',
        ],
        'JAVA_THI03': [
            'Language: Java',
            'JAVA_THI03',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Always invoke wait() and await() methods inside a loop'


# The long description of the check
def detailed_description():
    return """
<p>Always invoke wait() and await() methods inside a loop</p>
<p><b>Risk Assessment</b></p>
<p>Failure to encase the wait() or await() methods inside a while loop can lead to indefinite blocking and denial of service (DoS).</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/THI03-J.+Always+invoke+wait%28%29+and+await%28%29+methods+inside+a+loop</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">synchronized (object) {
  if (&lt;condition does not hold&gt;) {
    object.wait();
  }
  // Proceed when condition holds
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    for method_ref in file.filerefs("Define", "Method"):
        wait_await_refs = {}  # key: line number, value: call ref

        for call_ref in method_ref.ent().refs("Call", "Final Method Public Member, Abstract Method Default Member"):
            if call_ref.ent().name() in {"wait", "await"}:
                wait_await_refs[call_ref.line()] = call_ref

        if wait_await_refs:
            lines_on_while_loop = []
            method_ent = method_ref.ent()
            method_cfg = method_ent.control_flow_graph()

            for node in method_cfg.nodes():
                if node.kind() in {"while-for", "while"}:
                    start_line = node.line_begin()
                    node_end = node.end_node()

                    while node_end and (start_line <= node_end.line_end()):
                        lines_on_while_loop.append(start_line)
                        start_line += 1

            for ref in wait_await_refs:
                if ref not in lines_on_while_loop:
                    check.violation(wait_await_refs[ref].ent(
                    ), file, wait_await_refs[ref].line(), wait_await_refs[ref].column(), ERR1)
