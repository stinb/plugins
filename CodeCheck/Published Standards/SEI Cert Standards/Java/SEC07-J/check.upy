ERR1 = "Call the superclass's getPermissions() method when writing a custom class loader."


# The ID for the check
def ids():
    return ('SEC07-J', 'JAVA_SEC07')


# The short name of the check
def name(id):
    return {
        'SEC07-J': "Published Standards/SEI Cert Standards/Java/Call the superclass's getPermissions() method when writing a custom class loader",
        'JAVA_SEC07': "All Checks/Language Specific/Java/Platform Security/Call the superclass's getPermissions() method when writing a custom class loader", \
    }[id]


def tags(id):
    return {
        'SEC07-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 75',
            'Likelihood: Probable',
            'Remediation Cost: Low',
            'Priority: P18',
            'Level: L1',
        ],
        'JAVA_SEC07': [
            'Language: Java',
            'Platform Security',
        ],
    }.get(id)

# The short description of the check
def description():
    return "Call the superclass's getPermissions() method when writing a custom class loader"


# The long description of the check
def detailed_description():
    return """
<p>Call the superclass's getPermissions() method when writing a custom class loader</p>
<p><b>Risk Assessment</b></p>
<p>Failure to consult the default system policy while defining a custom class loader violates the tenets of defensive programming and can result in classes defined with unintended permissions.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/SEC07-J.+Call+the+superclass%27s+getPermissions%28%29+method+when+writing+a+custom+class+loader</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">protected PermissionCollection getPermissions(CodeSource cs) {
  PermissionCollection pc = new Permissions();
  // Allow exit from the VM anytime
  pc.add(new RuntimePermission("exitVM"));
  return pc;
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def test_language(language):
    return language == 'Java'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class"):
        check_getperm = False

        for ext_ref in class_ref.ent().refs("Extend Couple", "Class"):
            for meth_ref in ext_ref.ent().refs("Define", "Method"):
                if meth_ref.ent().name() == "getPermissions":
                    check_getperm = True
                    break

        if check_getperm:
            compliant = False

            for meth_ref in class_ref.ent().refs("Define", "Method"):
                if meth_ref.ent().name() == "getPermissions":
                    for var_ref in meth_ref.ent().refs("Define", "Variable"):
                        var_value = var_ref.ent().value()

                        if (var_ref.ent().type() == "PermissionCollection") and var_value and ("super.getPermissions" in var_value):
                            compliant = True
                            break

            if not compliant:
                check.violation(meth_ref.ent(), file,
                                meth_ref.line(), meth_ref.column(), ERR1)
