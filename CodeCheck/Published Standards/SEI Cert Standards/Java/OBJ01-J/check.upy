# This script is designed to run with Understand - CodeCheck
# Jordan Colbeth - 6/20/2022

import re

ERR1 = 'Accessibility of mutable field \'%1\' is not limited'
ERR2 = 'Accessibility of primitive field \'%1\' is not limited'

# The ID for the check
def ids():
    return ('OBJ01-J', 'JAVA_OBJ01')

# The short name of the check
def name(id):
    return {
        'OBJ01-J': "Published Standards/SEI Cert Standards/Java/" + "Limit accessibility of fields",
        'JAVA_OBJ01': "All Checks/Language Specific/Java/Object Orientation/" + "Limit accessibility of fields",
    }[id]




def tags(id):
    return {
        'OBJ01-J': [
            'Language: Java',
            'Standard: SEI CERT Java',
            'Severity: 50',
            'Likelihood: Likely',
            'Remediation Cost: Medium',
            'Priority: P12',
            'Level: L1',
        ],
        'JAVA_OBJ01': [
            'Language: Java',
            'Object Orientation',
        ],
    }.get(id)

# The short description of the check
def description():
    return "Limit accessibility of fields"

# The long description of the check
def detailed_description():
    return """
<p>Limit accessibility of fields</p>
<p><b>Risk Assessment</b></p>
<p>Invariants cannot be enforced for public nonfinal fields or for final fields that reference a mutable object. A protected member \
of an exported (non-final) class represents a public commitment to an implementation detail. Attackers can manipulate such fields to \
violate class invariants, or they may be corrupted by multiple threads accessing them concurrently [Bloch 2008]. As a result, fields \
must be declared private or package-private.<br><br>
<p><b>Developer's Notes</b></p><p> Sound detection and application of the exceptions to this rule is infeasible. Therefore, this check reports \
all detected cases without suppressing those cases covered by the exceptions, and will likely produce a number of false positives.</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre><code language="Java">public class Widget {
  public int total; // Number of elements

  void add() {
    if (total &lt; Integer.MAX_VALUE) {
      total++;
      // ...
    } else {
      throw new ArithmeticException("Overflow");
    }
  }

  void remove() {
    if (total &gt; 0) {
      total--;
      // ...
    } else {
      throw new ArithmeticException("Overflow");
    }
  }
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('Java File')

def test_global():
    return False

def test_language(language):
    return language == 'Java'

def check(check, file):
    for final_var in file.filerefs("declare,define", "final variable", True):
        final_var_ent = final_var.ent()

        # check if mutable field has been declared public
        if re.search(r"Public", final_var_ent.kind().longname()):
            check.violation(final_var_ent, file, final_var.line(), final_var.column(), ERR1, final_var_ent.name())

    for var in file.filerefs("declare,define", "variable ~final", True):
        var_ent = var.ent()

        # check if primitive field has been declared public
        if re.search(r"Public", var_ent.kind().longname()):
            check.violation(var_ent, file, var.line(), var.column(), ERR2, var_ent.name())
