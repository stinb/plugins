# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 3/4/21
import re

ERR1 = 'Consider alternative for virtual function %1.'

# The ID for the check
def id():
    return 'EFFECTIVECPP_35'

# The short name of the check
def name():
    return "Published Standards\\Effective C++ (3rd Edition) Scott Meyers\\35. Consider alternatives to virtual functions"



def tags(id):
    return {
        'EFFECTIVECPP_35': [
            'Language: C',
            'Language: C++',
            'Standard: Effective C++',
            'Functions',
        ],
    }.get(id)

# The short description of the check
def description():
    return """\
Sometimes a virtual function is the obvious way to design things, and in some
sense that's its weakness. Because of this you may not give adequate
consideration to its alternatives."""

# The long description of the check
def detailed_description():
    return """\
<p>The fundamental advice of this item is to consider alternatives to virtual
functions when searching for a design for the problem you're trying to solve.
Here are the alternatives we examined:</p>
<ul><li>Use the non-virtual interface idiom (NVI idiom), a form of the Template
Method design pattern that wraps public non-virtual member functions around
less accessible virtual functions.</li>
<li>Replace virtual functions with function pointer data members, a
stripped-down manifestation of the Strategy design pattern.</li>
<li>Replace virtual functions with tr1::function data members, thus allowing
use of any callable entity with a signature compatible with what you need.
This, too, is a form of Strategy design pattern.</li>
<li>Replace virtual functions in one hierarchy with virtual functions in
another hierarchy. This is the conventional implementation of the Strategy
design pattern.</li></ul>
"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    refs = file.filerefs('define, declare', 'virtual function')
    for ref in refs:
        check.violation (ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())
