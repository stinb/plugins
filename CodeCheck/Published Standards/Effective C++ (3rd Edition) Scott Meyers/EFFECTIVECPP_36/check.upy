# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 3/5/21
import re

ERR1 = 'Inherited non-virtual function %1 was redefined.'

# The ID for the check
def ids():
    return ('EFFECTIVECPP_36', 'CPP_DD026')

# The short name of the check
def name(id):
    return {
            'EFFECTIVECPP_36': "Published Standards\\Effective C++ (3rd Edition) Scott Meyers\\36. Never redefine an inherited non-virtual function",
            'CPP_DD026': "All Checks/Language Specific/C and C++/Declarations and Definitions/Never redefine an inherited non-virtual function"
            }[id]



def tags(id):
    return {
        'EFFECTIVECPP_36': [
            'Language: C',
            'Language: C++',
            'Standard: Effective C++',
            'Declarations and Definitions',
        ],
        'CPP_DD026': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The short description of the check
def description():
    return """\
Redefining an inherited non-virtual function can give the appearance that both
should funciton the same"""

# The long description of the check
def detailed_description():
    return """\
<pre><code language="C++">class B{
public:
    void mf();
    ...
};
class D: public B {...};</code></pre>
<p>Even without knowing anything about B, D, or mf, given an object x of type
D</p>
<pre><code language="C++">D x;        //x is an object of type D</code></pre>
<p>you would probably be quite surprised if this,</p>
<pre><code language="C++">B *pB = &x;        //get pointer to x
pB-&gt;mf();               //call mf through pointer</code></pre>
<p>behaved differentyly from this:</p>
<pre><code language="C++">D *pD = &x;        //get pointer to x
pD-&gt;mf();               //call mf through pointer</code></pre>
<p>That's because in both cases you're invoking the member function mf on the
object x. Because it's the same function and the same object in both cases,
it should behave the same way, right?</p>
<p> Right, it should. But it might not. In particular, it won't if mf is
non-virtual and D has defined its own version of mf.</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    seen = []
    # Gather all classes that inherit or are inherited by another class
    refs = file.filerefs('public', 'class', True)
    for ref in refs:
        # Gather member functions that aren't virtual
        mfRefs = ref.ent().refs('define, declare', 'function ~virtual ~unknown ~implicit', True)
        for mfRef in mfRefs:
            # Check if seen
            if mfRef.ent().name() not in seen:
                seen.append(mfRef.ent().name())
            else:
                check.violation(mfRef.ent(), file, mfRef.line(), mfRef.column(), ERR1, mfRef.ent().name())
