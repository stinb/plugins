# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 3/4/21
import re

ERR1 = 'Object %1 was not initialized.'

# The ID for the check
def id():
    return 'EFFECTIVECPP_04'

# The short name of the check
def name():
    return "Published Standards\\Effective C++ (3rd Edition) Scott Meyers\\4. Make sure that objects are initialized before they are used"



def tags(id):
    return {
        'EFFECTIVECPP_04': [
            'Language: C',
            'Language: C++',
            'Standard: Effective C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The short description of the check
def description():
    return "Objects need to be initialized before they are used."

# The long description of the check
def detailed_description():
    return """\
<p>C++ can seem rather fickle about initializing the values of objects. For
example, if you say this,</p>
<pre><code language="C++">    int x;
</code></pre>
<p>In some contexts, x is guarenteed to be initialized (to zero), but in
others, it's not. If you say this,</p>
<pre><code language="C++">class Point {
    int x, y;
};

...
Point p;
</code></pre>
<p>p's data members are sometimes guarenteed to be initialized (to zero), but
sometimes they're not. If you're coming from a language where unitialized
objects can't exist, pay attention, because this is important.</p>
<p>Reading unitialized values yields undefined behavior. On some platforms,
the mere act of reading an uninitialized value can halt your program. More
typically, the result of the read will be semi-random bits, which will then
pollute the object you read the bits into, eventually leading to inscrutable
program behavior and a lot of unpleasant debugging.</p>
<p>Now, there are rules that describe when object initialization is guaranteed
to take place and when it isn't. Unfortunately, the rules are complicated --
too complicated to be worth memorizing, in my opinion. In general, if you're
in the C part of C++ (see Item 1) and initialization would probably incur a
runtime cost, it's not guaranteed to take place. If you cross into the non-C
parts of C++, things sometimes change. This explains why an array (from the C
part of C++) isn't necessarily guaranteed to have its contents initialized,
but a vector (from the STL part of C++ is.</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexer = None
    refs = file.filerefs('Define, Declare', 'Object ~unknown ~unresolved ~TemplateParameter ~Global', True)
    if not refs:
        return

    for ref in refs:
        if not ref.ent().ref('init'):
            if not lexer:
                lexer = file.lexer()

            lexeme = lexer.lexeme(ref.line(), ref.column())
            while lexeme.previous(ignore_whitespace=True, ignore_comments=True) and not re.match(r'}|;', lexeme.previous(ignore_whitespace=True, ignore_comments=True).text()):
                lexeme = lexeme.previous(ignore_whitespace=True, ignore_comments=True)

            if lexeme and lexeme.text() == 'catch':
                continue
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())


