ERR1 = 'The %1 library should not be used'


def ids():
    return ('CPP_L003', 'MISRA08_27-0-1', 'MISRA23_30.0.1', 'M27-0-1')


def name(id):
    return {
        'CPP_L003': 'All Checks/Language Specific/C and C++/Libraries/The stream input&#47;output library <cstdio> shall not be used',
        'MISRA08_27-0-1': 'Published Standards/MISRA-C++ 2008/27-0-1 The stream input&#47;output library <cstdio> shall not be used',
        'MISRA23_30.0.1': 'Published Standards/MISRA C++ 2023/30.0.1 The C Library input&#47;output functions shall not be used',
        'M27-0-1': 'Published Standards/AUTOSAR/The stream input&#47;output library <cstdio> shall not be used'
    }[id]


def tags(id):
    return {
        'CPP_L003': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
        'MISRA08_27-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Libraries',
        ],
        'MISRA23_30.0.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Libraries',
        ],
        'M27-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'CPP_L003': """
<p><b>Rationale</b></p>
<p>This includes file and I/O functions <i>fgetpos</i>, <i>fopen</i>, <i>ftell</i>, <i>gets</i>, <i>perror</i>, <i>remove</i>, <i>rename</i>, etc.</p>
<p>Streams and file I/O have a large number of <i>unspecified</i>, <i>undefined</i> and <i>implementation-defined</i>
<i>behaviours</i> associated with them.</p>

<p><b>Example</b></p><pre><code language="C++">#include &lt;cstdio&gt; // Non-compliant
void fn ( )
{
  char_t array [ 10 ];
  gets ( array ); // Can lead to buffer over-run
}
</code></pre>
""",

        'MISRA08_27-0-1': """
<p><b>Rationale</b></p>
<p>This includes file and I/O functions <i>fgetpos</i>, <i>fopen</i>, <i>ftell</i>, <i>gets</i>, <i>perror</i>, <i>remove</i>, <i>rename</i>, etc.</p>
<p>Streams and file I/O have a large number of <i>unspecified</i>, <i>undefined</i> and <i>implementation-defined</i>
<i>behaviours</i> associated with them.</p>

<p><b>Example</b></p><pre><code language="C++">#include &lt;cstdio&gt; // Non-compliant
void fn ( )
{
  char_t array [ 10 ];
  gets ( array ); // Can lead to buffer over-run
}
</code></pre>
""",

        'MISRA23_30.0.1': """
<p><b>Amplification</b></p>
<p>This rule applies to the functions that are specified as being provided by &lt;cstdio&gt; and the wide-character equivalents specified as being provided by &lt;cwchar&gt;.</p>
<p>None of these identifiers shall be used and no macro with one of these names shall be expanded.</p>
<p>Notes:</p>
<p>1. Use of the same functions from &lt;stdio.h&gt; and &lt;wchar.h&gt; are also prohibited by this rule.</p>
<p>2. This rule does not prohibit the use of the facilities provided by &lt;fstream&gt;, even though they
may indirectly use functions from &lt;cstdio&gt; or &lt;cwchar&gt;.</p>

<p><b>Rationale</b></p>
<p>Streams and file input/output have undefined, unspecified and implementation-defined behaviours
associated with them.</p>
""",
        'M27-0-1': """
<p><b>Rationale</b></p>
<p>This includes file and I/O functions fgetpos, fopen, ftell, gets, perror,
remove, rename, etc.</p>
<p>Streams and file I/O have a large number of unspecified, undefined and
implementation-defined behaviours associated with them.</p>
<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstdio&gt; // Non-compliant
void fn ( )
{
  char_t array [ 10 ];
  gets ( array ); // Can lead to buffer over-run
}
</code></pre>
""",        
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def define_options(check):
    wchar = (check.id() == "MISRA23_30.0.1")

    check.options().checkbox('wchar', 'Flag the use of cwchar or wchar.h library', wchar)


def check(check, file):
    wchar = check.options().lookup('wchar')    

    for inc_ref in file.filerefs("Include", "Header File"):
        if inc_ref.ent().name() in ["cstdio", "stdio.h"] or (wchar and inc_ref.ent().name() in ["cwchar", "wchar.h"]):
            check.violation(inc_ref.ent(), file, inc_ref.line(), inc_ref.column(), ERR1, inc_ref.ent().name())
