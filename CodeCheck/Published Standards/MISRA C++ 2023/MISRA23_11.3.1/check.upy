import re


ERR1 = "Variables of array type should not be declared"


# The ID for the check
def ids():
    return ('MISRA23_11.3.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_11.3.1': "Published Standards/MISRA C++ 2023/11.3.1 Variables of array type should not be declared"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_11.3.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Variables',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_11.3.1': """
<p><b>Rationale</b></p>
<p>A variable of array type does not have value semantics and its size has to be managed separately. It is
possible to use types that do not have these limitations. For example:</p>
<p>● std::array — provides value semantics and manages the size;</p>
<p>● std::string_view — manages the size.</p>

<p><b>Exception</b></p>
<p>The declaration of an array of const character type is permitted when it is immediately initialized with
a string literal.</p>

<p><b>Example</b></p>
<pre><code language="C++">void foo() noexcept
{
 const size_t size { 10 };
 wchar_t a1 [ size ]; // Non-compliant
 std::array&lt; wchar_t, size &gt; a2; // Compliant
}

void bar( int a[ 10 ], // Rule does not apply - pointer to int
 int ( &b )[ 10 ], // Rule does not apply - reference to array
 int ( *c )[ 10 ]) // Rule does not apply - pointer to array
{
}

struct S
{
 std::uint16_t a3[ 10 ]; // Non-compliant
};

using namespace std::literals;
const char s1[] = "abcd"; // Compliant by exception
 char s2[] = "abcd"; // Non-compliant
const auto best = "abcd"sv; // Compliant</code></pre>

<p><b>See also</b></p>
<p>7.11.2</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for obj_ref in file.filerefs("Define, Declare", "Object"):            
        obj_type = str(obj_ref.ent().freetext("UnderlyingType"))

        if ("const" in obj_type) and ("char" in obj_type) and obj_ref.ent().freetext("InitText"):
            continue
        elif re.search("\[.*\]$", obj_type):
            check.violation(obj_ref.ent(), file, obj_ref.line(), obj_ref.column(), ERR1)

        
            


            
