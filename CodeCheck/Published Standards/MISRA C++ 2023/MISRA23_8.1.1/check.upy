ERR1 = "A non-transient lambda shall not implicitly capture 'this'"


# The ID for the check
def ids():
    return ('MISRA23_8.1.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_8.1.1': "Published Standards/MISRA C++ 2023/8.1.1 A non-transient lambda shall not implicitly capture this"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_8.1.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Expressions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_8.1.1': """
<p><b>Rationale</b></p>
<p>If a lambda with implicit capture (having = or & in the capture list) attempts to capture a member
variable of a class, what is in fact captured is the this pointer. This behaviour can be surprising, and
may result in undefined behaviour if the lambda is called after the objectâ€™s lifetime has ended. This issue
cannot occur for a transient lambda.</p>
<p>Note: implicitly capturing this using [=] is deprecated from C++20.</p>

<p><b>Example</b></p>
<pre><code language="C++">class A
{
 int16_t val;

 void f()
 {
 auto a1 = [=]() // Non-compliant - val is not captured, but
 { return val; }; // 'this' is implicitly captured
 auto a2 = [&]() // Non-compliant - val is not captured, but
 { return val; }; // 'this' is implicitly captured
 auto a3 = [this]() // Compliant - 'this' explicitly captured
 { return val; };
 auto a4 = [self = *this]() // Compliant - current object captured by copy
 { return self.val; };
 auto i = [&]() // Rule does not apply - transient lambda
 { return val; } ();
 }
};</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for lambda_ref in file.filerefs("Define", "Lambda"):
        end_ref = lambda_ref.ent().ref("Endby")

        lex = file.lexer(lookup_ents=False).lexeme(end_ref.line(), end_ref.column())
        lex = lex.next(True, True)

        # transient, called immediately
        if lex.text() == "(":
            continue

        lex = file.lexer().lexeme(lambda_ref.line(), lambda_ref.column())

        while lex.text() != "[":
            lex = lex.next()

        lex = lex.next()

        if lex.text() in "=&" and (lex.next().text() == "]"):
            check.violation(lambda_ref.ent(), lambda_ref.file(), lambda_ref.line(), lambda_ref.column(), ERR1)

        
            


            
