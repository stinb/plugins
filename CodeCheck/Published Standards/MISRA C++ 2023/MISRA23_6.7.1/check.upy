ERR1 = "Local variables shall not have static storage duration"


# The ID for the check
def ids():
    return ('MISRA23_6.7.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_6.7.1': 'Published Standards/MISRA C++ 2023/6.7.1 Local variables shall not have static storage duration'
    }[id]


def tags(id):
    return {
        'MISRA23_6.7.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Variables',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_6.7.1': """
<p><b>Amplification</b></p>
<p>This rule does not apply to variables declared constexpr or const.</p>

<p><b>Rationale</b></p>
<p>The use of mutable variables with static storage duration, even when they do not have linkage,
potentially results in hidden temporal coupling. This can lead to data races (and thus undefined
behaviour). Additionally, functions with persistent state are usually more difficult to understand and
test.</p>
<p>Note: the lifetime of local variables with static storage duration ends at program termination in the
reverse order of their creation. Suitable care should be taken to ensure that the code executed during
destruction does not access a previously destroyed variable.</p>

<p><b>Example</b></p>
<pre><code language="C++">int32_t bar();
int32_t ga = 0; // Compliant - but violates "See also"
int32_t foo()
{
 int32_t a = 0; // Compliant
 static int32_t b = 0; // Non-compliant
 static constexpr int32_t c = 0; // Compliant
 static const int32_t d = bar(); // Compliant
}
class Application
{
 static Application & theApp()
 {
 static Application app; // Non-compliant
 return app;
 }
};</code></pre>

<p><b>See also</b></p>
<p>Rule 6.7.2</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for obj_ref in file.filerefs("Define, Declare", "Static Local Object", True):
        utype = obj_ref.ent().freetext("UnderlyingType")

        if (utype and "const" in utype) or obj_ref.ent().freetext("DefinedInMacro"):
            continue
        
        check.violation(obj_ref.ent(), file, obj_ref.line(), obj_ref.column(), ERR1)
                

                
