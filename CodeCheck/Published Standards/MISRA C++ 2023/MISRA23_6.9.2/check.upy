ERR1 = "%1 type should not be used"
PROHIBITED_TYPES = ["int", "signed int", "unsigned int", "short", "signed short", "unsigned short", "long", "signed long", "unsigned long", "signed char", "unsigned char"]


# The ID for the check
def ids():
    return ('MISRA23_6.9.2')


# The short name of the check
def name(id):
    return {
        'MISRA23_6.9.2': 'Published Standards/MISRA C++ 2023/6.9.2 The names of the standard signed integer types and standard unsigned integer types should not be used'
    }[id]


def tags(id):
    return {
        'MISRA23_6.9.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Types',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_6.9.2': """
<p><b>Amplification</b></p>
<p>This rule applies to the names of integral types constructed using the keywords char, short, int,
long, signed and unsigned (ignoring any cv-qualification). It does not apply to the use of plain
char.</p>

<p><b>Rationale</b></p>
<p>It is implementation-defined how much storage is required for any object of the standard signed integer
types or standard unsigned integer types. When the amount of storage being used is important, the
use of types having specified widths makes it clear how much storage is being reserved for each object.</p>
<p>The C++ Standard Library header file &lt;cstdint&gt; often provides a suitable set of integer types having
specified widths. If a project defines its own type aliases, it is good practice to use static_assert
to validate any size assumptions. For example:</p>
<p><pre><code language="C++">using torque_t = unsigned short;
static_assert( sizeof( torque_t ) &gt;= 2 );</code></pre></p>

<p>Notes:</p>
<p>1. Compliance with this rule does not prevent integer promotion, which is influenced by the
implemented size of int and the type used for an alias. For example, an expression of type
int16_t will only be promoted if the aliased type has a rank lower than that of int. The
presence or absence of integer promotion may have an influence on overload resolution.</p>
<p>2. Strong typing, which may be provided by class or enum types, is more robust than the use of
type aliases to represent specific width types.</p>

<p><b>Exception</b></p>
<p>1. The names of the standard signed integer types and standard unsigned integer types may be used
to define a type alias.</p>
<p>2. The name int may be used for:</p>
<p>a. The parameter to a postfix operator, which must use that type; and</p>
<p>b. The return type of main; and</p>
<p>c. The argc parameter to main.</p>

<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstdint&gt;

int x = 0; // Non-compliant - use of int
int32_t y = 0; // Compliant
int_least32_t z = 0; // Compliant

using torque_t = int; // Compliant by exception #1
torque_t w = 0;

class C
{
public:
 C operator++( int ); // Compliant by exception #2.1
};
int main() { } // Compliant by exception #2.2
int main( int argc, char * argv[] ) { } // Compliant by exception #2.2 and #2.3
</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):      
    for ref in file.filerefs("Define, Declare", "~Type ~Alias ~Enumerator"):
        ent_type = ref.ent().type()

        if (not ent_type 
            or (ref.scope().name() == "main")  
            or (ref.ent().kind().check("Function") and (ref.ent().name() == "main"))
            or (ref.ent().kind().check("Parameter") and ref.scope().name() in ["operator++", "operator--"])):
            continue       

        ent_type = ent_type.replace("const", "")
        ent_type = ent_type.replace("volatile", "")
        ent_type = ent_type.strip()

        if ent_type and ent_type in PROHIBITED_TYPES:
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ent_type)
    
    


                           
                




                
