#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-22-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => "Line-splicing used in // comment";


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA23_5.7.3";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C++ 2023\\5.7.3 Line-splicing shall not be used in // comments";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2023',
    'Category: Required',
    'Comments',
  );
}

# This is the full description of the rule being tested
sub description {
  return "Rule 5.7.3 Line-splicing shall not be used in // comments";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Amplification</b></p>
</p>This rule is applied in translation phase 2, after multibyte characters have been mapped to the basic
source character set during translation phase 1 (see [lex.phases]).</p>

<p><b>Rationale</b></p>
<p>Line-splicing occurs when the \\ character is immediately followed by a new-line character. If a source
line containing a // comment ends with a \\ character in the basic source character set, the next line
becomes part of the comment. This may result in the unintentional removal of code.</p>

<p><b>Example</b></p>
In the following non-compliant exampl e, the physical line containing the if keyword is logically part of
the previous line and is therefore a comment.
</p>

<pre><code language="C++">void f( bool b )
{
 uint16_t x = 0U; // comment \
 if ( b )
 {
 ++x; // This is always executed
 }
}
</code></pre>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}


# This is the actual test being performed on the user's code
sub check {

  my $check = shift;
  my $file = shift;
  return unless $file->kind->check('file');

  my $lexer = $file->lexer(0);
  my @lexemes = $lexer->lexemes if $lexer;

  foreach my $lexeme (@lexemes){
    if ( $lexeme->token eq 'Comment'
      && $lexeme->text =~ m! ^ // .* \\ (\n|\r) !sx ) {
      $check->violation(0, $file, $lexeme->line_begin, $lexeme->column_begin, ERR1);
    }
  }

  return;
}
