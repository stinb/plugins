ERR1 = "The literal value zero shall be the only value assigned to errno"


# The ID for the check
def ids():
    return ('MISRA23_22.4.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_22.4.1': 'Published Standards/MISRA C++ 2023/22.4.1 The literal value zero shall be the only value assigned to errno'
    }[id]


def tags(id):
    return {
        'MISRA23_22.4.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_22.4.1': """
<p><b>Amplification</b></p>
<p>Note: the C++ Standard Library is permitted to assign a non-zero value to errno.</p>

<p><b>Rationale</b></p>
<p>Various functions within the C++ Standard Library set errno to a non-zero value to indicate that an
error has been detected.</p>
<p>This rule allows this error reporting behaviour to be used, but prevents developers from using errno
as an error reporting mechanism within a projectâ€™s code. C++ provides better mechanisms for error
handling.</p>

<p><b>Example</b></p>
<pre><code language="C++">std::string getKey ( std::optional&lt; std::string &gt; const & key_data )
{
 if ( key_data.has_value() && !key_data-&gt;empty() )
 {
 return key_data.value();
 }
 errno = 42; // Non-compliant - non-zero value
 errno = EINVAL; // Non-compliant - does not expand to literal '0'
 return std::string {};
}

#define OK 0

void f()
{
 uint32_t success { 0 };
 errno = success; // Non-compliant - must use literal '0'
 errno = OK; // Compliant - 'OK' expands to literal '0'
 errnoSettingFunction();
 if ( errno != success )
 {
 handleError();
 }
}</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for use_ref in file.filerefs("Use", "Macro"):
        if use_ref.ent().name() != "errno":
            continue

        lex = file.lexer().lexeme(use_ref.line(), use_ref.column())

        while lex and (lex.text() != ";"):
            if (lex.text() == "=") and (lex.token() == "Operator"):
                lex = lex.next(True, True)

                if ((lex.token() == "Literal") and (lex.text() != "0")) or ((lex.token() == "Identifier") and lex.ent() and lex.ent().value() and (lex.ent().value() != "0")):
                    check.violation(use_ref.ent(), file, use_ref.line(), use_ref.column(), ERR1)

            lex = lex.next(True, True)
        

                           
                




                
