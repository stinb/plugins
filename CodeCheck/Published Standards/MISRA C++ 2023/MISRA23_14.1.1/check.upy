ERR1 = "Non-static data members should be either all private or all public"


# The ID for the check
def ids():
    return ('MISRA23_14.1.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_14.1.1': 'Published Standards/MISRA C++ 2023/14.1.1 Non-static data members should be either all private or all public'
    }[id]


def tags(id):
    return {
        'MISRA23_14.1.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Declarations and Definitions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_14.1.1': """
<p><b>Rationale</b></p>
<p>By implementing a class interface with member functions only and making all the class data members
inaccessible, it is possible to retain more control over how the object’s state can be modified. For
example, enforcing an invariant for the class, or making sure that the address of a data member of a
class can not be accessed by its users, making detection of possibly dangling addresses more robust.</p>
<p>However, some classes merely need to group together some data members without defining any
invariants. For such classes, making the data members public simplifies the code (less code to
maintain, easy use of structured bindings), therefore reducing the risk of errors.</p>
<p>These two situations are usually exclusive, with it being difficult to reason about a class that has both
public and private data members.</p>
<p>The use of protected data members would mean that:</p>
<p>● The members should not be directly accessed; and</p>
<p>● The members can be directly accessed by any derived class, possibly breaking the invariants
established by the base class.</p>
<p>If derived classes require privileged access to data members, those members should be private
and protected functions should be defined to allow them to be manipulated.</p>

<p><b>Example</b></p>
<pre><code language="C++">class C1 // Non-compliant - has public and private members
{
public:
 int32_t a;
private:
 int32_t b;
};

struct C2 // Compliant
{
 C2( int32_t a, int32_t b ) : a{ a }, b{ b } {}
 int32_t a;
 int32_t b;
};

class C3 // Compliant - rule does not apply to static members
{
public:
 C3( int32_t a, int32_t b ) : a{ a }, b{ b } {}
 static int32_t s;
private:
 int32_t a;
 int32_t b;
};</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class, Structure"):
        if class_ref.ent().ref("Define, Declare", "~Static Public Member Object") and class_ref.ent().ref("Define, Declare", "~Static Private Member Object"):
            check.violation(class_ref.ent(), file, class_ref.line(), class_ref.column(), ERR1)


                
