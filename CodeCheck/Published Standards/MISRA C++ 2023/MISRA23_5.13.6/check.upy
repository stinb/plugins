import re


ERR1 = 'An integer-literal of type long long shall not use a single L or l in any suffix'


# The ID for the check
def ids():
    return ('MISRA23_5.13.6')


# The short name of the check
def name(id):
    return {
        'MISRA23_5.13.6': "Published Standards/MISRA C++ 2023/5.13.6 An integer-literal of type long long shall not use a single L or l in any suffix"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_5.13.6': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Expressions',
        ],
    }.get(id)


def description(id):
    return {
        'MISRA23_5.13.6': "An integer-literal of type long long shall not use a single L or l in any suffix"
    }[id]


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_5.13.6': """
<p><b>Amplification</b></p>
<p>This rule applies to both signed long long and unsigned long long literals.</p>
<p>Note: this rule does not apply to user-defined-literals.</p>

<p><b>Rationale</b></p>
<p>A literal with a suffix that has a single L could be a signed or unsigned long long. Use of the LL
suffix for long long literals is more explicit and less error-prone.</p>

<p><b>Example</b></p>
<p>All of the following examples assume that long is 32-bits and long long is 64-bits.</p>
<pre><code language="C++">auto k1 = 12345678998L; // Non-compliant
auto k2 = 12345678998UL; // Non-compliant
auto k3 = 12345678998ull; // Compliant
auto k4 = 0xfeeddeadbeefL; // Non-compliant
auto k5 = 0xfeeddeadbeefLL; // Compliant</code></pre>

<p>The rule does not apply to the following as the value is not long long:</p>
<pre><code language="C++">auto k6 = 12345L;
auto k7 = 12345UL;
auto k8 = 0x0badc0deL;</code></pre>

<p>The rule does not apply to the following as they do not have L or l suffixes:</p>
<pre><code language="C++">auto k9 = 12345678998;
auto kA = 12345678998U;</code></pre>

<p><b>See also</b></p>
<p>Rule 5.13.5</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for obj_ref in file.filerefs("Define", "Object"):
        utype = obj_ref.ent().freetext("UnderlyingType")
        val = obj_ref.ent().value()

        if (utype and not utype.endswith("long")) or not val or not re.search("[^l]l$", val, re.I):
            continue

        val_split = re.findall(r"(0x)?([\da-f]*)", val ,re.I)
        val_split = list(val_split[0])

        if (val_split[0] and (len(val_split[1]) < 9)) or (val_split[1].isdigit() and (int(val_split[1]) < 4294967295)):
            continue

        check.violation(obj_ref.ent(), file, obj_ref.line(), obj_ref.column(), ERR1)
