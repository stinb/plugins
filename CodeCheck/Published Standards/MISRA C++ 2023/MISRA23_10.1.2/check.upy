ERR1 = "%1 should not be declared as volatile"


# The ID for the check
def ids():
    return ('MISRA23_10.1.2')


# The short name of the check
def name(id):
    return {
        'MISRA23_10.1.2': 'Published Standards/MISRA C++ 2023/10.1.2 The volatile qualifier shall be used appropriately'
    }[id]


def tags(id):
    return {
        'MISRA23_10.1.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_10.1.2': """
<p><b>Amplification</b></p>
<p>It is inappropriate to declare the following entities as volatile:</p>
<p>● Local variables;</p>
<p>● Function parameters;</p>
<p>● Function return types;</p>
<p>● Member functions;</p>
<p>● Structured bindings.</p>
<p>Note: a pointer or reference to a volatile entity is permitted.</p>

<p><b>Rationale</b></p>
<p>While the C++ Standard permits volatile qualification to be applied to the entities listed above, the
behaviour is not well-defined or well-understood. In addition, volatile does not prevent data races,
but it is often incorrectly used when trying to ensure thread safety.</p>
<p>Note: some of these uses of volatile have been deprecated in C++20 and their removal is planned
for a future version.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f1( volatile int32_t i ) // Non-compliant
{
 use< int32_t >( i );
}

void f2( volatile int32_t * p ) // Compliant - parameter is not volatile
{
 use< int32_t * >( p );
}

void f3( int32_t * volatile p ) // Non-compliant - parameter is volatile
{
 use< int32_t * >( p );
}

void f4( int32_t i )
{
 volatile int32_t j = i; // Non-compliant
 use< int32_t >( j );
}

volatile int32_t f5(); // Non-compliant

void f6()
{
 int32_t g[ 2 ] = { 1, 2 };
 auto volatile [ a, b ] = g; // Non-compliant
}

struct S
{
 volatile uint32_t reg; // Compliant
};

void f7( S s ); // Compliant - but unlikely to work as expected
void f8( S & s ); // Compliant - preserves volatile behaviour of reg</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for def_ref in file.filerefs("Define, Declare", "Local Object, Parameter, Function", True):
        utype = def_ref.ent().freetext("UnderlyingType")

        if def_ref.ent().freetext("DefinedInMacro") or (utype and ("volatile" not in utype or utype.endswith(("*", "&")))):
            continue

        check.violation(def_ref.ent(), file, def_ref.line(), def_ref.column(), ERR1, def_ref.ent().name())


                
