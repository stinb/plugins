import re


ERR1 = 'Function-like macros shall not be defined'


def ids():
    return ('CPP_P013', 'MISRA04_19.7', 'MISRA08_16-0-4', 'MISRA23_19.0.2')


def name(id):
    return {
        'CPP_P013': 'All Checks/Language Specific/C and C++/Preprocessor/Function-like macros shall not be defined',
        'MISRA04_19.7': 'Published Standards/MISRA-C 2004/19.7 A function should be used in preference to a function-like macro',
        'MISRA08_16-0-4': 'Published Standards/MISRA-C++ 2008/16-0-4 Function-like macros shall not be defined',
        'MISRA23_19.0.2': 'Published Standards/MISRA C++ 2023/19.0.2 Function-like macros shall not be defined',
    }[id]


def tags(id):
    return {
        'CPP_P013': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
        'MISRA04_19.7': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Advisory',
            'Preprocessor',
        ],
        'MISRA08_16-0-4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Preprocessor',
        ],
        'MISRA23_19.0.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Preprocessor',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'CPP_P013': """
<p><b>Rationale</b></p>
<p>While macros can provide a speed advantage over functions, functions provide a safer and more
robust mechanism. This is particularly true with respect to the type checking of parameters, and
the problem of function-like macros potentially evaluating parameters multiple times.
Inline functions should be used instead.</p>

<p><b>Example</b></p>
<pre><code language="C++">
#define FUNC_MACRO(X) ((X)+(X)) // Non-compliant
</code></pre>
""",

        'MISRA04_19.7': """
<p><b>Rationale</b></p>
<p>While macros can provide a speed advantage over functions, functions provide a safer and more 
robust mechanism. This is particularly true with respect to the type checking of parameters, and 
the problem of function-like macros potentially evaluating parameters multiple times.</p>
""",

        'MISRA08_16-0-4': """
<p><b>Rationale</b></p>
<p>While macros can provide a speed advantage over functions, functions provide a safer and more
robust mechanism. This is particularly true with respect to the type checking of parameters, and
the problem of function-like macros potentially evaluating parameters multiple times.
Inline functions should be used instead.</p>

<p><b>Example</b></p>
<pre><code language="C++">
#define FUNC_MACRO(X) ((X)+(X)) // Non-compliant
</code></pre>
""",

        'MISRA23_19.0.2': """
<p><b>Rationale</b></p>
<p>Functions have a number of advantages over function-like macros, including:</p>
<p>● Function arguments and return values are type-checked;</p>
<p>● Function arguments are evaluated once, preventing problems with potential multiple side effects;</p>
<p>● Function names follow classical scoping rules;</p>
<p>● Functions can be overloaded and templatized;</p>
<p>● The address of a function can be passed to another function;</p>
<p>● Function calls can be inlined, providing the same performance characteristics as macros;</p>
<p>● constexpr functions can be evaluated at compile-time and may be used in all contexts where
a compile-time constant is required;</p>
<p>● In many debugging systems, it is easier to step through execution of a function than a macro.</p>

<p><b>Exception</b></p>
<p>As it is not possible to implement equivalent behaviour within a function, a function-like macro may
be defined if its definition includes any of the following:</p>
<p>1. __LINE__, __FILE__ or __func__;</p>
<p>2. The # or ## operators.</p>

<p><b>Example</b></p>
<pre><code language="C++">
#define FUNC( X ) \\
 ( ( X ) + ( X ) ) // Non-compliant

template< typename T >
constexpr auto func( T x ) // Possible alternative
{
 return x + x;
}</code></pre>

<p>The following examples are compliant by exceptioneption:</p>

<pre><code language="C++">
#define ID( name ) \\
 constexpr auto name = #name; // Compliant - use of #

#define TAG( name ) \\
 class name##Tag {}; // Compliant - use of ##

#define LOG( message ) \\
 log( __func__, message ); // Compliant - use of __func__
</code></pre>

<p><b>See also</b></p>
<p>Rule 19.3.1</p>
""",
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def define_options(check):
    exception = (check.id() == "MISRA23_19.0.2")

    check.options().checkbox('exception', 'Exclude function-like macros if its definition includes any of the following: __LINE__, __FILE__, __func__ and, # or ## operators', exception)


def check(check, file):
    exception = check.options().lookup('exception')    

    for macro_ref in file.filerefs("Define", "Macro Functional"):
        val = macro_ref.ent().value()

        if not exception or (exception and not re.search("#|__(LINE|FILE|func)__", str(val))):
            check.violation(macro_ref.ent(), file, macro_ref.line(), macro_ref.column(), ERR1)
