import re


ERR1 = 'Octal escape sequence not terminated'
ERR2 = 'Hexadecimal escape sequence not terminated'
ERR3 = 'Universal character name not terminated'


def ids():
    return ('MISRA12_4.1', 'MISRA23_4.1', 'CPP_E021', 'MISRA23_5.13.2')


def name(id):
    return {
        'MISRA12_4.1': '''Published Standards/MISRA C 2012/\
4.1 Octal and Hexadecimal Sequences''',
        'MISRA23_4.1': '''Published Standards/MISRA C 2023/\
4.1 Octal and Hexadecimal Sequences''',
        'CPP_E021': '''All Checks/Language Specific/C and C++/Expressions/\
Octal and Hexadecimal Sequences''',
        'MISRA23_5.13.2': '''Published Standards/MISRA C++ 2023/\
5.13.2 Octal escape sequences, hexadecimal escape sequences and universal character names shall be terminated''',
    }[id]


def tags(id):
    return {
        'MISRA12_4.1': [
            'Expressions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
        ],
        'MISRA23_4.1': [
            'Expressions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
        ],
        'CPP_E021': [
            'Expressions',
            'Language: C',
            'Language: C++',
        ],
        'MISRA23_5.13.2': [
            'Expressions',
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
        ],
    }.get(id)


def detailed_description(id):
    if id == 'MISRA23_5.13.2':
        return '''
<p><b>Amplification</b></p>
<p>An octal escape sequence, hexadecimal escape sequence or universal character name shall be
terminated by either:</p>
<ul>
<li>The start of another escape sequence or universal character name; or</li>
<li>The end of the character constant or the end of a string literal.</li>
</ul>

<p><b>Rationale</b></p>
<p>There is potential for confusion if an octal escape sequence, hexadecimal escape sequence or universal
character name is followed by other characters. For example, the string literal "\\x1f" is a singlecharacter, zero-terminated string, whereas "\\x1g" includes the two characters '\\x1' and 'g'.
The potential for confusion is reduced if every octal escape sequence, hexadecimal escape sequence or
universal character name in a character constant or string literal is terminated.</p>

<p><b>Example</b></p>
<pre><code language="C++">const char * s1 = "\\1234"; // Non-compliant - \\123 is not terminated</code></pre>

<p>In the following, the strings pointed to by s2, s3 and s4 are equivalent to "Ag".</p>

<pre><code language="C++">const char * s2 = "\\x41g"; // Non-compliant
const char * s3 = "\\x41" "g"; // Compliant - terminated by end of literal
const char * s4 = "\\x41\\x67"; // Compliant - terminated by another escape
</code></pre>

<p>In the following, s5 contains a universal character name consisting of four hex digits (\\u), whilst s6
contains a universal character name consisting of eight hex digits (\\U).</p>

<pre><code language="C++">const char * s5 = "\\u0001F600"; // Non-compliant - \\u0001 is not terminated
const char * s6 = "\\U0001F600"; // Compliant - terminated by end of literal
</code></pre>
'''

    return '''\
<p><b>Title</b></p>
<p>Octal and hexadecimal escape sequences shall be terminated.</p>

<p><b>Amplification</b></p>
<p>An octal or hexadecimal escape sequence shall be terminated by either:</p>
<ul>
<li>The start of another escape sequence, or</li>
<li>The end of the character constant or the end of a string literal.</li>
</ul>

<p><b>Rationale</b></p>
<p>There is potential for confusion if an octal or hexadecimal escape sequence
is followed by other characters. For example, the character constant
<code>'\\x1f'</code> consists of a single character whereas the character
constant <code>'\\x1g'</code> consists of the two characters
<code>'\\x1'</code> and <code>'g'</code>. The manner in which multi-character
constants are represented as integers is implementation-defined.</p>

<p>The potential for confusion is reduced if every octal or hexadecimal escape
sequence in a character constant or string literal is terminated.</p>

<p><b>Example</b></p>
<p>In this example, each of the strings pointed to by <code>s1</code>,
<code>s2</code> and <code>s3</code> is equivalent to "Ag".</p>

<pre><code language="C++">\
const char *s1 = "\\x41g";    /* Non-compliant                            */
const char *s2 = "\\x41" "g"; /* Compliant - terminated by end of literal */
const char *s3 = "\\x41\\x67"; /* Compliant - terminated by another escape */
int c1 = '\\141t';            /* Non-compliant                            */
int c2 = '\\141\\t';           /* Compliant - terminated by another escape */\
</code></pre>

<p><b>See Also</b></p>
<p>C90: Section 6.1.3.4, C99: Section 6.4.4.4</p>
'''


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    universal = check.id() == 'MISRA23_5.13.2'

    check.option().checkbox('universal', 'Include unterminated universal character names', universal)


def check(check, file):
    universal = check.option().lookup('universal')

    for lex in file.lexer(lookup_ents=False).lexemes():
        if (lex.token() == "String") and (str(lex.text()).startswith('"\\') or str(lex.text()).startswith("'\\")):
            text = str(lex.text())
            text = text.strip('"')
            text = text.strip("'")

            texts = text.split("\\")
            
            for t in texts:
                if re.search(r"^[0-7]{3}\S+", t):
                    check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1)
                elif re.search(r"^x[0-9A-Fa-f]{2}\S+", t):
                    check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR2)
                elif universal and re.search(r"^u[0-9A-Fa-f]{4}\S+", t):
                    check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR3)
                elif universal and re.search(r"^U[0-9A-Fa-f]{8}\S+", t):
                    check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR3)
        




            
