ERR1 = "The address-of operator shall not be overloaded"


# The ID for the check
def ids():
    return ('MISRA23_16.5.2')


# The short name of the check
def name(id):
    return {
        'MISRA23_16.5.2': 'Published Standards/MISRA C++ 2023/16.5.2 The address-of operator shall not be overloaded'
    }[id]


def tags(id):
    return {
        'MISRA23_16.5.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_16.5.2': """
<p><b>Rationale</b></p>
<p>Taking the address of an object of incomplete type where the complete type contains a user-declared
operator& results in undefined behaviour (until C++11) or unspecified behaviour (since C++11).</p>
<p>Overloading the & operator can make code harder to understand as *&a may not give the same result
as a.</p>
<p>Note: std::addressof will always return the address of an object without there being a risk of
undefined or unspecified behaviour</p>

<p><b>Example</b></p>
<pre><code language="C++">// A.h
class A
{
public:
 A * operator&(); // Non-compliant
};

// f1.cc
class A;
void f1( A & a )
{
 &a; // Undefined or unspecified behaviour
}

// f2.cc
#include "A.h"
void f2( A & a )
{
 &a; // Uses user-defined operator&
}</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class"):
        for func_ref in class_ref.ent().refs("Define, Declare", "Member Function", True):
            if func_ref.ent().name() == "operator&":
                check.violation(func_ref.ent(), func_ref.file(), func_ref.line(), func_ref.column(), ERR1)


                
