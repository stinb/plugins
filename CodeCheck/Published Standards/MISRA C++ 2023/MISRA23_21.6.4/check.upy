ERR1 = "Sized version of operator delete should also be defined"
ERR2 = "Unsized version of operator delete should also be defined"


# The ID for the check
def ids():
    return ('MISRA23_21.6.4')


# The short name of the check
def name(id):
    return {
        'MISRA23_21.6.4': 'Published Standards/MISRA C++ 2023/21.6.4 If a project defines either a sized or unsized version of a global operator delete, then both shall be defined'
    }[id]


def tags(id):
    return {
        'MISRA23_21.6.4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Memory Allocation',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_21.6.4': """
<p><b>Rationale</b></p>
<p>Within a delete-expression, the C++ Standard does not always specify if the sized or the unsized version
of the deallocation function will be selected. Therefore, both versions should be provided, and have
the same effect, to ensure that the behaviour is well-defined.</p>

<p><b>Example</b></p>
<p>The following example is compliant as sized and unsized versions of operator delete are provided:</p>
<pre><code language="C++">void operator delete( void * ptr ) noexcept
{
 std::free( ptr );
}
void operator delete( void * ptr, std::size_t size ) noexcept
{
 delete( ptr );
}</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    sized_delete = None
    unsized_delete = None

    for func_ref in file.filerefs("Define", "Function"):
        if func_ref.ent().name() != "operator delete":
            continue

        for param_ref in func_ref.ent().refs("Define", "Parameter"):
            if param_ref.ent().type() and "size_t" in param_ref.ent().type():
                sized_delete = func_ref

        if not sized_delete:
            unsized_delete = func_ref

    if unsized_delete and not sized_delete:
        check.violation(unsized_delete.ent(), file, unsized_delete.line(), unsized_delete.column(), ERR1)                   
    elif sized_delete and not unsized_delete:
        check.violation(sized_delete.ent(), file, sized_delete.line(), sized_delete.column(), ERR2)                   
                




                
