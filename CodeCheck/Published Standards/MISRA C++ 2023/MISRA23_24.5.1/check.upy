ERR1 = "The character handling function %1 shall not be used"
CHAR_HANDLING_FUNCS = [ # cctype / ctype.h
    "isalnum", "isalpha", "iscntrl", "isdigit", "isgraph", "isblank",
    "islower", "isprint", "ispunct", "isspace", "isupper", "isxdigit",     
    "tolower", "toupper", 
    # cwctype / wctype.h
    "iswalnum", "iswalpha", "iswcntrl", "iswdigit", "iswgraph", "iswblank",
    "iswlower", "iswprint", "iswpunct", "iswspace", "iswupper", "iswxdigit",
    "towlower", "towupper", "iswctype", "towctrans", "wctrans", "wctype"
]


# The ID for the check
def ids():
    return ('MISRA23_24.5.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_24.5.1': "Published Standards/MISRA C++ 2023/24.5.1 The character handling functions from <cctype> and <cwctype> shall not be used"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_24.5.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',            
            'Libraries',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_24.5.1': """
<p><b>Amplification</b></p>
<p>This rule applies to the character classification functions and the character case mapping functions
from &lt;cctype&gt; and &lt;cwctype&gt;.</p>
<p>Note: this rule also applies to the same functions from &lt;ctype.h&gt; and &lt;wctype.h&gt;.</p>

<p><b>Rationale</b></p>
<p>The functions declared within &lt;cctype&gt; support the classification and case mapping of characters.
Undefined behaviour occurs if these functions are called with arguments that are not representable
as an unsigned char, or that are not equal to the value of the macro EOF. Similar issues exist for
the functions provided by &lt;cwctype&gt;.</p>
<p>The C++ Standard Library provides equivalent classification and case mapping functions within
&lt;locale&gt; that are safer to use.</p>
<p>Note: the C++ Standard states that the behaviour of the functions covered by this rule is defined in
the related version of ISO 9899 [6].</p>

<p><b>Example</b></p>
<pre><code language="C++">void f( char c )
{
 if ( std::isdigit( c ) ) {} // Non-compliant
 if ( std::isdigit( a, std::locale {} ) ) {} // Compliant version of the above
}</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for call_ref in file.filerefs("Call, Use", "Unresolved Macro, Unresolved Function ~Template"):
        if call_ref.ent().name() in CHAR_HANDLING_FUNCS:
            check.violation(call_ref.ent(), file, call_ref.line(), call_ref.column(), ERR1, call_ref.ent().name())