ERR1 = "#undef should only be used for macros defined previously in the same file"


# The ID for the check
def ids():
    return ('MISRA23_19.0.4')


# The short name of the check
def name(id):
    return {
        'MISRA23_19.0.4': 'Published Standards/MISRA C++ 2023/19.0.4 #undef should only be used for macros defined previously in the same file'
    }[id]


def tags(id):
    return {
        'MISRA23_19.0.4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Preprocessor',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_19.0.4': """
<p><b>Rationale</b></p>
<p>Since macros are not subject to the usual scoping rules of the language, complex use of #undef can
lead to confusion with respect to the existence or meaning of a macro when it is used in the code.
However, it might be desirable to limit the number of active macros at any point in the code to help
prevent inappropriate use; if a macro is only required for a specific purpose, a common idiom is to
#define it, use it and #undef it immediately afterwards.</p>
<p>Permitting #undef to be used for macros that are defined in the same file enables the scope of those
macros to be restricted whilst preventing complex uses that could lead to confusion.</p>
<p>Note: undefining a macro defined by the C++ Standard Library can result in undefined behaviour.</p>

<p><b>Example</b></p>
<pre><code language="C++">// File.cpp
#include "A.h" // This header defines the macro M
#undef M // Non-compliant - defined in another file
#define ID( name ) constexpr auto name = #name
ID( IdA );
ID( IdB );
#undef ID // Compliant - defined in this file</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if "#undef" not in file.contents():
        return
    
    lex = file.lexer(show_inactive=False).first()

    while lex:
        if lex.text() == "undef" and lex.token() == "Preprocessor":
            lex = lex.next(True, True)
            is_defined = False

            if not lex.ent():
                continue           

            for def_ref in lex.ent().refs("Definein"):
                if (def_ref.file().id() == file.id()) and (def_ref.line() < lex.line_begin()):
                    is_defined = True
                    break

            if not is_defined:
                check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)                   

        lex = lex.next(True, True)


                
