ERR1 = 'Bit-fields should not be declared'


# The ID for the check
def ids():
    return ('MISRA23_12.2.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_12.2.1': "Published Standards/MISRA C++ 2023/12.2.1 Bit-fields should not be declared"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_12.2.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Bit-fields',
        ],
    }.get(id)


def description(id):
    return {
        'MISRA23_12.2.1': "Bit-fields should not be declared"
    }[id]


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_12.2.1': """
<p><b>Rationale</b></p>
<p>There are a number of aspects of bit-fields that a developer needs to consider, including:</p>
<p>● It is implementation-defined whether the bit-fields are allocated from the high or low end of a
storage unit (usually a byte);</p>
<p>● It is implementation-defined whether or not a bit-field can overlap a storage unit boundary (e.g.
if a 6-bit bit-field and a 4-bit bit-field are declared in that order, then the 4-bit bit-field may either
start a new byte or it may use 2 bits in one byte and 2 bits in the next);</p>
<p>● If the bit-field’s width is greater than the number of bits in the object representation of the bit-field’s type, then the extra bits are padding bits and do not participate in the value representation
of the bit-field.</p>
<p>These issues are generally benign (e.g. when packing together short-length data to save storage space),
but they may lead to errors if the absolute position of the bit-fields is important (e.g. when accessing
hardware registers).</p>
<p>Provided the elements of the structure are only accessed by name, the developer need make no
assumptions about the way that the bit-fields are stored within the structure.</p>

<p><b>Example</b></p>
<pre><code language="C++">struct message
{
 unsigned char low : 4; // Non-compliant
 unsigned char high : 4; // Non-compliant
};
</code></pre>  
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def get_ent_type(entity):
    typed_ref = entity.ref("Typed")

    while typed_ref:
        obj_ent = typed_ref.ent()
        obj_ref_type = obj_ent.type()
        typed_ref = typed_ref.ent().ref("Typed")

        if not typed_ref:
            return obj_ent, obj_ref_type

    return entity, entity.type()


def check(check, file):
    for obj_ref in file.filerefs("Define", "Object"):
        lex = file.lexer().lexeme(obj_ref.line(), obj_ref.column())

        if lex.ent() and lex.ent().kind().check("Macro"):
            continue
        
        if obj_ref.ent().freetext("Bitfield") and not obj_ref.ent().freetext("DefinedInMacro"):
            check.violation(obj_ref.ent(), file, obj_ref.line(), obj_ref.column(), ERR1)

            
