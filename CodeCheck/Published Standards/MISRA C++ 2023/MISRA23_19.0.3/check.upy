# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 03/03/25

import re
import Modules

ERR1 ='#include statement preceded by code other than preprocesser directives or comments' 


# The ID for the check
def ids():
    return ('MISRA23_19.0.3', 'MISRA12_20.1', 'MISRA23_20.1', 'CPP_PR005')

# The short name of the check
def name(id):
    return {
        'MISRA23_19.0.3': 'Published Standards/MISRA C++ 2023/' + """\
19.0.3 #include directives should only be preceded by preprocessor directives or comments""",
        'MISRA12_20.1': 'Published Standards/MISRA C 2012/' + """\
20.1 #include directives should only be preceded by preprocessor directives or comments""",
        'MISRA23_20.1': 'Published Standards/MISRA C 2023/' + """\
20.1 #include directives should only be preceded by preprocessor directives or comments""",
        'CPP_PR005': """\
 All Checks/Language Specific/C and C++/Preprocessor/\
#include directives should only be preceded by preprocessor directives or comments""",
    }[id]




def tags(id):
    return {
        'MISRA23_19.0.3': [
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Preprocessor',
        ],
        'MISRA12_20.1': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Preprocessor',
        ],
        'MISRA23_20.1': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Preprocessor',
        ],
        'CPP_PR005': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    desc = """\
<p><b>Amplification</b></p>
The rule shall be applied to the contents of a file before preprocessing occurs.
</p>
<p>For purposes of this rule, the tokens used to open and close a linkage-specification are ignored.</p>

<p><b>Rationale</b></p>
To aid code readability, all the <i>#include</i> directives in a particular code file should be grouped
together near the top of the file.
</p>

<p>
Additionally, using <i>#include</i> to include a <i>standard header file</i> within a declaration or definition, or using
part of the C++ Standard Library before the inclusion of the related <i>standard header file</i> results in <i>undefined
behaviour</i>. 
</p>

<p><b>Example</b></p><pre><code language="C++">// f.h
xyz = 0;

// f.cpp
int16_t // No more includes allowed in f.cpp after this code
#include "f.h" // Non-compliant

// f1.cpp
#define F1_MACRO
#include "a.h" // Compliant

extern "C" // Linkage-specification tokens are ignored
{ // Linkage-specification token is ignored
 #include "b.h" // Compliant
} // Linkage-specification token is ignored

#include "c.h" // Compliant

extern "C" // Linkage-specification tokens are ignored
{ // Linkage-specification token is ignored
 #include "d.h" // Compliant
 void g(); // No more includes allowed in f1.cpp after this code
} // Linkage-specification token is ignored

#include "e.h" // Non-compliant
</code></pre>"""

    return {
        'MISRA23_19.0.3': desc,
        'MISRA12_20.1': desc,
        'MISRA23_20.1': desc,
        'CPP_PR005': desc

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('c file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not file.filerefs("include", "file"):
        return
    if not file.lexer():
        return
    lexer = file.lexer()
    flag = False
    lexeme = lexer.first()
    while lexeme:
        lastLex = lexeme
        if not flag and lexeme.token() == "Preprocessor":
            while lexeme and lexeme.token() != "Newline":
                lexeme = lexeme.next()
        elif lexeme.text() == 'extern':
            lexeme = lexeme.next(True, True)
            if lexeme and lexeme.token() == 'String':
                while lexeme and lexeme.text() not in ['{', ';']:
                    lexeme = lexeme.next(True, True)
                if lexeme and lexeme.text() == '{':
                    lexeme = Modules.findClose(lexeme)
        elif lexeme.token() not in ['Newline', 'Comment', 'Whitespace'] and not lexeme.inactive():
            flag = True
        elif flag and lexeme.token() == 'Preprocessor':
            nextLex = lexeme.next()
            if nextLex and nextLex.text() == 'include' and not lexeme.inactive():
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
                while lexeme and lexeme.token() != 'Newline':
                    lexeme = lexeme.next()
        if lexeme and lexeme.line_begin() == lastLex.line_begin() and lexeme.column_begin() == lastLex.column_begin():
            lexeme = lexeme.next()
