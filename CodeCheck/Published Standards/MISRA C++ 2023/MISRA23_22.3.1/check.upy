ERR1 = "The assert macro shall not be used with a constant-expression"


# The ID for the check
def ids():
    return ('MISRA23_22.3.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_22.3.1': "Published Standards/MISRA C++ 2023/22.3.1 The assert macro shall not be used with a constant-expression"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_22.3.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_22.3.1': """
<p><b>Rationale</b></p>
<p>There are a number of limitations to consider when using the assert macro. For example:</p>
<p>● An assert failure is only reported at run-time, requiring that a failure also has to be managed
at run-time;</p>
<p>● The assert macro can only be used in contexts where an expression is allowed;</p>
<p>● The assert macro may be disabled at build-time.</p>
<p>It is better to use static_assert when the condition being asserted is a constant-expression, as this
ensures that any failure will be detected at compile time.</p>

<p><b>Exception</b></p>
<p>assert( false ) or assert( false && "any string literal" ) may be used to identify paths
that are not expected to be executed.</p>

<p><b>Example</b></p>
<pre><code language="C++">static_assert( ( sizeof( int ) == 4 ), "Bad size" ); // Rule does not apply

void f( int32_t i )
{
 assert( i < 1000 ); // Compliant - not constant

 if ( i >= 0 )
 {
 assert( ( sizeof( int ) == 4 ) && "Bad size" ); // Non-compliant - constant
 }
 else
 {
 assert( false && "i is negative" ); // Compliant by exception
 }
}</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for use_ref in file.filerefs("Use", "Macro"):            
        if use_ref.ent().name() != "assert":
            continue

        lex = file.lexer(lookup_ents=False).lexeme(use_ref.line(), use_ref.column())
        on_assert = 0

        while lex:
            if (on_assert == 1) and (lex.text() in ["false", "0"]) and lex.next(True, True).text() in [")", "&&"]:
                break
            if lex.text() == "(":
                on_assert += 1
            elif lex.text() == ")":
                on_assert -= 1

                if not on_assert:
                    break
            elif (on_assert == 1) and (lex.token() == "String"):
                check.violation(use_ref.ent(), file, use_ref.line(), use_ref.column(), ERR1)
                break

            lex = lex.next(True, True)
            

        
            


            
