ERR1 = "std::vector should not be specialized with bool"


# The ID for the check
def ids():
    return ('MISRA23_26.3.1')


# The short name of the check
def name(id):
    return {
        'MISRA23_26.3.1': 'Published Standards/MISRA C++ 2023/26.3.1 std::vector should not be specialized with bool'
    }[id]


def tags(id):
    return {
        'MISRA23_26.3.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Libraries',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_26.3.1': """
<p><b>Rationale</b></p>
<p>The std::vector&lt; bool &gt; specializationâ€™s behaviour differs from that of other uses of std::vector
as it uses optimized space allocation. For example, the data member function is not available.</p>
<p>The C++ Standard guarantees that, in general, elements of a C++ Standard Library container can be
modified concurrently, but specifically notes that this is not true for std::vector&lt; bool &gt;.</p>
<p>Note: other C++ Standard Library containers do not have specializations for bool and do not exhibit
the behaviours identified above.</p>

<p><b>Example</b></p>
<pre><code language="C++">struct myBool { bool b; }; // Wrapper for bool

void foo() noexcept
{
 std::vector&lt; bool &gt; a; // Non-compliant - optimized storage
 std::vector&lt; std::uint8_t &gt; b; // Compliant
 std::vector&lt; myBool &gt; c; // Compliant
 std::array &lt; bool, 20 &gt; d; // Rule does not apply
 std::bitset&lt; 200 &gt; e; // Rule does not apply - efficient storage
}</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for type_ref in file.filerefs("Typed", "Class Type Template"):            
        if type_ref.ent().name() != "vector":
            continue

        scope_type = type_ref.scope().freetext("UnderlyingType")

        if scope_type and "std::allocator<bool>" in scope_type:
            check.violation(type_ref.ent(), file, type_ref.line(), type_ref.column(), ERR1)
    
    


                           
                




                
