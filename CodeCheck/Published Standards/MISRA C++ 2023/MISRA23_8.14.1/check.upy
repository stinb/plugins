ERR1 = 'The right-hand operand of a logical && or || operator should not contain persistent side effects'


def ids():
    return ('MISRA23_8.14.1', 'M5-14-1', 'MISRA12_13.5', 'CPP_E052', 'MISRA23_13.5')


def name(id):
    return {
        'MISRA23_8.14.1': 'Published Standards/MISRA C++ 2023/8.14.1 The right-hand operand of a logical && or || operator should not contain persistent side effects',
        'M5-14-1': "Published Standards/AUTOSAR/The right hand operand of a logical &&, || operators shall not contain side effects",
        'MISRA12_13.5': "Published Standards/MISRA C 2012/13.5 The right hand operand of a logical && or || operator shall not contain persistent side effects",
        'CPP_E052': "All Checks/Language Specific/C and C++/Expressions/The right-hand operand of a logical && or || operator should not contain persistent side effects",
        'MISRA23_13.5': "Published Standards/MISRA C 2023/13.5 The right hand operand of a logical && or || operator shall not contain persistent side effects",
    }[id]


def tags(id):
    return {
        'MISRA23_8.14.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Expressions',
        ],
        'M5-14-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'MISRA12_13.5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Expressions',
        ],
        'CPP_E052': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_13.5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Expressions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_8.14.1': """
<p><b>Rationale</b></p>
<p>The evaluation of the right-hand operand of the && and || operators is conditional on the value of the
left-hand operand. If the right-hand operand contains side effects then those side effects may or may
not occur, which may be contrary to developer expectations.</p>
<p>If evaluation of the right-hand operand would produce side effects which are not persistent at the point
in the program where the expression occurs then it does not matter whether the right-hand operand
is evaluated or not.</p>
<p>The term persistent side effect is defined in Appendix C.</p>

<p><b>Example</b></p>
<pre><code language="C++">uint16_t f( uint16_t y ) // The side effects within f are not
{ // persistent, as seen by the caller
 uint16_t temp = y;
 temp = y + 0x8080U;
 return temp;
}

uint16_t h( uint16_t y )
{
 static uint16_t temp = 0;
 temp = y + temp; // This side effect is persistent
 return temp;
}

void g( bool ishigh )
{
 if ( ishigh && ( a == f( x ) ) ) // Compliant - f() has no persistent
 { // side effects
 }
 if ( ishigh && ( a == h( x ) ) ) // Non-compliant - h() has a persistent
 { // side effect
 }
}

volatile uint16_t v;
 uint16_t x;
if ( ( x == 0u ) || ( v == 1u ) ) // Non-compliant - access to volatile v
{ // is persistent
}

( fp != nullptr ) && ( *fp )( 0 ); // Non-compliant if fp points to a function
 // with persistent side effects
if ( fp != nullptr )
{
 ( *fp )( 0 ); // Compliant version of the above
}
</code></pre>

<p><b>Developer's Note</b></p>
<p>Macro functions will be skipped in this check.</p>
""",
    'MISRA12_13.5': """
<p><b>Rationale</b></p>
<p>The evaluation of the right-hand operand of the && and || operators is
conditional on the value of the left-handoperand. If the right-hand operand
contains side eff ects then those side eff ects may or may not occur which may
be contrary to programmer expectations.</p>
<p>If evaluation of the right-hand operand would produce side eff ects which are
not persistent at the point in the program where the expression occurs then it
does not matter whether the right-hand operand is evaluated or not.</p>
<p><b>Example</b></p>
<pre><code language="C++">uint16_t f ( uint16_t y )
{
/* These side effects are not persistent as seen by the caller */
uint16_t temp = y;
tem p = y + 0x8080U;
return temp;
}
uint16_t h ( uint16_t y )
{
static uint16_t temp = 0;
/* This side effect is persistent */
temp = y + temp;
return temp;
}
void g ( void )
{
/* Compliant - f ( ) has no persistent side effects */
if ( ishigh && ( a == f ( x ) ) )
{
}
/* Non-compliant - h ( ) has a persistent side effect */
if ( ishigh && ( a == h ( x ) ) )
{
}
}
volatile uint16_t v;
uint16_t x;
/* Non-compliant - access to volatile v is persistent */
if ( ( x == 0u ) || ( v == 1u ) )
{
}
/* Non-compliant if fp points to a function with persistent side effects */
( fp != NULL ) && ( *fp ) ( 0 );</code></pre>

<p><b>Developer's Note</b></p>
<p>Macro functions will be skipped in this check.</p>
""",
    'MISRA23_13.5': """
<p><b>Rationale</b></p>
<p>The evaluation of the right-hand operand of the && and || operators is
conditional on the value of the left-handoperand. If the right-hand operand
contains side eff ects then those side eff ects may or may not occur which may
be contrary to programmer expectations.</p>
<p>If evaluation of the right-hand operand would produce side eff ects which are
not persistent at the point in the program where the expression occurs then it
does not matter whether the right-hand operand is evaluated or not.</p>
<p><b>Example</b></p>
<pre><code language="C++">uint16_t f ( uint16_t y )
{
/* These side effects are not persistent as seen by the caller */
uint16_t temp = y;
tem p = y + 0x8080U;
return temp;
}
uint16_t h ( uint16_t y )
{
static uint16_t temp = 0;
/* This side effect is persistent */
temp = y + temp;
return temp;
}
void g ( void )
{
/* Compliant - f ( ) has no persistent side effects */
if ( ishigh && ( a == f ( x ) ) )
{
}
/* Non-compliant - h ( ) has a persistent side effect */
if ( ishigh && ( a == h ( x ) ) )
{
}
}
volatile uint16_t v;
uint16_t x;
/* Non-compliant - access to volatile v is persistent */
if ( ( x == 0u ) || ( v == 1u ) )
{
}
/* Non-compliant if fp points to a function with persistent side effects */
( fp != NULL ) && ( *fp ) ( 0 );</code></pre>

<p><b>Developer's Note</b></p>
<p>Macro functions will be skipped in this check.</p>
""",
    'M5-14-1': """
<p><b>Rationale</b></p>
<p>There are some situations in C++ where certain parts of expressions may not be evaluated. If these sub-expressions contain side effects then those side effects may or may not occur, depending on the values of other sub expressions.</p>
<p>The operators which can lead to this problem are && and || where the evaluation of the right-hand operand is conditional on the value of the left-hand operand. The conditional evaluation of the right-hand operand of one of the logical operators can easily cause problems if the developer relies on a side effect occurring.</p>
<p><b>Example</b></p>
<pre><code language="C++">if ( ishigh && ( x == i++ ) ) // Non-compliant
...
if ( ishigh && ( x == f( x ) ) ) // Only acceptable if f(x) is
// known to have no side effects
</code></pre>
<p>The operations that cause side effects are accessing a volatile object, modifying an object, modifying a file, or calling a function that does any of those operations, which cause changes in the state of the execution environment of the calling function.</p>
<p><b>See also</b></p>
<p>Rule 5-2-11</p>
<p>ISO/IEC 14882:2003 [1] §3.2(2), §5.14, §5.15</p>
<p><b>Developer's Note</b></p>
<p>Macro functions will be skipped in this check.</p>""",
    'CPP_E052': """
<p><b>Rationale</b></p>
<p>There are some situations in C++ where certain parts of expressions may not be evaluated. If these sub-expressions contain side effects then those side effects may or may not occur, depending on the values of other sub expressions.</p>
<p>The operators which can lead to this problem are && and || where the evaluation of the right-hand operand is conditional on the value of the left-hand operand. The conditional evaluation of the right-hand operand of one of the logical operators can easily cause problems if the developer relies on a side effect occurring.</p>
<p><b>Example</b></p>
<pre><code language="C++">if ( ishigh && ( x == i++ ) ) // Non-compliant
...
if ( ishigh && ( x == f( x ) ) ) // Only acceptable if f(x) is
// known to have no side effects
</code></pre>
<p>The operations that cause side effects are accessing a volatile object, modifying an object, modifying a file, or calling a function that does any of those operations, which cause changes in the state of the execution environment of the calling function.</p>
<p><b>See also</b></p>
<p>Rule 5-2-11</p>
<p>ISO/IEC 14882:2003 [1] §3.2(2), §5.14, §5.15</p>
<p><b>Developer's Note</b></p>
<p>Macro functions will be skipped in this check.</p>"""
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def check(check, file):
    lex = file.lexer(True, 8, False, False).first()

    while lex:
        if lex.text() in ["&&", "||"] and lex.token() == "Operator":
            orig_lex = lex
            last_lex = None
            lex = lex.next(True, True)

            if lex.text() == "(":
                on_rho = 0
                on_index = 0

                while lex:
                    last_lex = lex
                    if lex.text() == "(":
                        on_rho += 1
                    elif lex.text() == ")":
                        on_rho -= 1

                        if not on_rho:
                            break
                    elif lex.text() == "[":
                        on_index += 1
                    elif lex.text() == "]":
                        on_index -= 1
                    elif (on_rho == 1) and lex.text() == "=":
                        break
                    elif (on_rho == 1) and not on_index and lex.ent() and lex.ent().kind().check("Function"):
                        if is_persisent(lex.ent()):
                            check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                    elif (on_rho == 1) and not on_index and lex.ent():
                        utype = lex.ent().freetext("UnderlyingType")

                        if "volatile" in str(utype):
                            check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                        elif lex.ent().kind().check("Macro") or lex.ent().freetext("DefinedInMacro"):
                            break
                        else:
                            for mod_ref in lex.ent().refs("Modifyby"):
                                if (mod_ref.line() == lex.line_begin()) and (mod_ref.column() == lex.column_begin()):
                                    check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                                    break
                            
                            for ass_ref in lex.ent().refs("Assign FunctionPtr"):
                                if is_persisent(ass_ref.ent()):
                                    check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)

                    lex = lex.next(True, True)
            elif lex.ent():
                utype = lex.ent().freetext("UnderlyingType")

                if "volatile" in str(utype):
                    check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                elif lex.ent().kind().check("Macro") or lex.ent().freetext("DefinedInMacro"):
                    break
                elif lex.ent().kind().check("Function"):
                    if is_persisent(lex.ent()):
                        check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                else:
                    for mod_ref in lex.ent().refs("Modifyby"):
                        if (mod_ref.line() == lex.line_begin()) and (mod_ref.column() == lex.column_begin()):
                            check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                            break
                    
                    for ass_ref in lex.ent().refs("Assign FunctionPtr"):
                        if is_persisent(ass_ref.ent()):
                            check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                    
        lex = lex.next(True, True)
    

def is_persisent(func_ent):
    if func_ent.refs("Set, Modify", "Static, Parameter, ~Local Object"):
        return True

    return False