ERR1 = "The <cstring> function %1 should not be used"


# The ID for the check
def ids():
    return ('MISRA23_24.5.2')


# The short name of the check
def name(id):
    return {
        'MISRA23_24.5.2': "Published Standards/MISRA C++ 2023/24.5.2 The C++ Standard Library functions memcpy, memmove and memcmp from <cstring> shall not be used"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_24.5.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_24.5.2': """
<p><b>Amplification</b></p>
<p>These functions shall not be called or have their addresses taken, and no macro having one of these
names shall be expanded.</p>
<p>Note: this rule also applies to the same functions from &lt;string.h&gt;.</p>

<p><b>Rationale</b></p>
<p>Use of memmove and memcpy can result in undefined behaviour if the blocks of memory pointed to by
their pointer parameters:</p>
<p>● Overlap (memcpy only); or</p>
<p>● Are potentially-overlapping; or</p>
<p>● Are not trivially copyable.</p>
<p>Additionally, memcmp may not indicate equality for objects that are logically equal. Specifically:</p>
<p>● Floating point values may not compare equal, as the floating point format allows multiple
representations for some values, such as zero and minus zero (which will not compare equal);
and</p>
<p>● Class objects may not compare equal due to:</p>
<p>▬ Padding between members, as its content is unspecified and effectively indeterminate; or</p>
<p>▬ Unions having different active members or members of different sizes.</p>
<p>● Buffers may not compare equal when the meaningful content does not occupy the whole buffer
and the whole buffer is compared. For example, this may happen with:</p>
<p>▬ std::vector, where memory is preallocated to enable efficient growth; or</p>
<p>▬ C-style strings, where the \\0 terminator may occur within the buffer and be followed by
irrelevant data.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f1( const uint8_t * src, uint8_t * dst, size_t len )
{
 memmove( dst, src, len ); // Non-compliant
}

struct S
{
 bool m1;
 // There may be padding here
 int64_t m2;
};

void f2( S s1, S s2 )
{
 if ( memcmp( &s1, &s2, sizeof( S ) ) != 0 ) // Non-compliant
 {
 }
};

extern char buffer1[ 12 ];
extern char buffer2[ 12 ];

void f3()
{
 strcpy( buffer1, "abc" ); // Indeterminate contents in elements 4 to 11
 strcpy( buffer2, "abc" ); // Indeterminate contents in elements 4 to 11
 if ( memcmp( buffer1, buffer2, sizeof( buffer1 ) ) != 0 ) // Non-compliant
 {
 }
}</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for call_ref in file.filerefs("Call", "Unresolved Function"):
        if call_ref.ent().name() in ["memcpy", "memmove", "memcmp"]:
            check.violation(call_ref.ent(), file, call_ref.line(), call_ref.column(), ERR1, call_ref.ent().name())


            
