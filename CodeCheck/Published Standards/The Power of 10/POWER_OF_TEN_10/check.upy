# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2023-07-26


import re


ERR1 = 'Every compiler warning may not have been enabled'


def ids():
    return ('POWER_OF_TEN_10')


def name(id):
    return {
        'POWER_OF_TEN_10': '''Published Standards/The Power of 10/\
10 All Compiler Warnings''',
    }[id]


def tags(id):
    return {
        'POWER_OF_TEN_10': [
            'Language: C',
            'Language: C++',
            'Standard: The Power of Ten',
        ],
    }.get(id)


def detailed_description():
    return '''\
<p>All code must be compiled, from the first day of development, with all
compiler warnings enabled at the most pedantic setting available. All code must
compile without warnings. All code must also be checked daily with at least one,
but preferably more than one, strong static source code analyzer and should pass
all analyses with zero warnings.</p>

<p><b>Rationale</b></p>

<p>There are several extremely effective static source code analyzers on the
market today, and quite a few freeware tools as well. There simply is no excuse
for any software development effort not to use this readily available
technology. It should be considered routine practice, even for noncritical code
development.</p>

<p>The rule of zero warnings applies even when the compiler or the static
analyzer gives an erroneous warning: If the compiler or analyzer gets confused,
the code causing the confusion should be rewritten. Many developers have been
caught in the assumption that a warning was surely invalid, only to realize much
later that the message was in fact valid for less obvious reasons. Static
analyzers have a somewhat bad reputation due to early versions that produced
mostly invalid messages, but this is no longer the case. The best static
analyzers today are fast, and they produce accurate messages. Their use should
not be negotiable on any serious software project.</p>
'''


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return True


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('warningsEnabled', 'Every warning has been enabled', False)


def check(check):
    if check.options().lookup('warningsEnabled'):
        return

    check.violation(None, None, 1, 1, ERR1)
