use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Too many call levels(%1)';
use constant ERR2 => "Recursion detected, can't count call levels";
use constant OPT1 => "Maximum call levels";
use constant OPT2 => "Skip recursive functions";
our %known = ();
our $refKinds = "define, ada declare body, vhdl declare";
our $entKinds = "ada entry, ada function, ada procedure, ada protected, ada task,"
   ."c function,"
   ."csharp method,"
   ."fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
   ."java method,"
   ."jovial subroutine,"
   ."pascal compunit, pascal function, pascal procedure,"
   ."vhdl procedure, vhdl function, vhdl process, vhdl architecture,"
   ."web function, web method";
   
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(ERR2);
  $check->add_tr_text(OPT1);
  $check->add_tr_text(OPT2);
}

sub checkID { return "HIS_09";}

sub name { return "Published Standards\\Hersteller Initiative Software (HIS) Metrics\\9. Number of call levels(LEVEL)";}

sub tags {
  return (
    'Language: Ada',
    'Language: C',
    'Language: C++',
    'Language: C#',
    'Language: Fortran',
    'Language: Jovial',
    'Language: Pascal',
    'Language: VHDL',
    'Standard: Hersteller Initiative Software (HIS) Metrics',
    'Functions',
  );
}

sub description {
  return "Depth of nesting of a function.";
}

sub detailed_description {
  return  <<"END_DESC"
Maximum nesting levels within a function + 1 
Acceptable Range &lt;= 4
Developer's Note: This check cannot pick up PHP/Javascript functions that are embedded in an html file. They must be placed in a separate .php or .js file.
END_DESC
}

sub test_language {
  return 1;
}

sub test_entity {
  return 1;
}

sub define_options{
 my $check = shift;
 $check->option->integer("maxCallDepth",OPT1,4);
 $check->option->checkbox("ignoreRecursion",OPT2,0);
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("file");
  %known = ();

  my @definerefs = $file->filerefs($refKinds, $entKinds,1);
  my $maxCallDepth = $check->option->lookup("maxCallDepth");
  my $ignoreRecursion = $check->option->lookup("ignoreRecursion");
  
  foreach my $ref (@definerefs){
    my $ent = $ref->ent;
    my $depth = getDepth($ent);
    if ($depth eq "recursive" && ! $ignoreRecursion){
      $check->violation($ent,$ref->file,$ref->line,-1,ERR2);
      return;
    }
    #return unless $depth;
    $depth++;
    if ($depth > $maxCallDepth){
      $check->violation($ent,$ref->file,$ref->line,-1,ERR1,$depth);
    }
  }
}

sub getDepth ($) {
    my $func = shift;

    return unless defined ($func);
    
    return "recursive" if ($known{$func->id()} == -1);
    return $known{$func->id()} if ( defined $known{$func->id()});
    
    $known{$func->id()} = -1;	# marker for recursion.
    
    my @calls = $func->refs("call ~inactive, use ptr ~inactive", $entKinds, 1);
    foreach my $call (@calls) {
      my $depth = getDepth ($call->ent());
      return "recursive" if ($depth eq "recursive");
      $known{$func->id()} = $depth if ($depth > $known{$func->id()});
    }
    return ($known{$func->id()} += 1);
}
