# The ID for the check
def ids():
    return ('HIS_12', 'AC_HIS_12')


# The short name of the check
def name(id):
    return {
        'HIS_12': 'Published Standards/Hersteller Initiative Software (HIS) Metrics/12. Recursion (AP_CG_CYCLE)',
        'AC_HIS_12': 'All Checks/Recursion (AP_CG_CYCLE)',
    }[id]



def tags(id):
    return {
        'HIS_12': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Jovial',
            'Language: Pascal',
            'Language: VHDL',
            'Standard: Hersteller Initiative Software (HIS) Metrics',
            'Control Flow',
        ],
        'AC_HIS_12': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Jovial',
            'Language: Pascal',
            'Language: VHDL',
            'Control Flow',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Call graph recursions'


# The long description of the check
def detailed_description():
    return """
<p>Recursions over one or more functions.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file, ada file, java file, csharp file, vhdl file, fortran file')


def test_global():
    return False


def check_recursion(check, ent, base_func_id, called_funcs, depth):
    if ent.id() in called_funcs:
        return

    called_funcs.append(ent.id())
    depth += 1

    for call_ref in ent.refs("Call", "Function"):
        if call_ref.ent().id() == base_func_id and depth == 1:
            check_violation(check, call_ref)
        elif call_ref.ent().id() == base_func_id:
            check_violation(check, call_ref, False)
        else:
            check_recursion(check, call_ref.ent(),
                            base_func_id, called_funcs, depth)


def check_violation(check, call_ref, direct=True):
    if direct:
        ERR = f'The function "{call_ref.ent().name()}" is directly recursive, which is unsafe.'
    else:
        ERR = f'The function "{call_ref.ent().name()}" is indirectly recursive through "{call_ref.scope().name()}", which is unsafe.'

    check.violation(call_ref.ent(), call_ref.file(),
                    call_ref.line(), call_ref.column(), ERR)


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        called_funcs = []
        depth = 0

        check_recursion(check, func_ref.ent(),
                        func_ref.ent().id(), called_funcs, depth)
