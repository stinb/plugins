ERR1 = "Comment Density Too Low (%1%)"
OPT1 = "Minimum Comment Percentage"


# The ID for the check
def ids():
    return ('HIS_01','METRIC_02')


# The short name of the check
def name(id):
    return {
        'HIS_01': 'Published Standards\\Hersteller Initiative Software (HIS) Metrics\\1. Comment Density (COMF)',
        'METRIC_02': 'All Checks\\Metrics\\Program Unit Comment to Code Ratio'
    }[id]


def tags(id):
    return {
        'HIS_01': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Jovial',
            'Language: Pascal',
            'Language: VHDL',
            'Standard: Hersteller Initiative Software (HIS) Metrics',
            'Comments',
        ],
        'METRIC_02': [
            'Language: Ada',
            'Language: C',
            'Language: C++',
            'Language: C#',
            'Language: Fortran',
            'Language: Java',
            'Language: Jovial',
            'Language: Python',
            'Language: Pascal',
            'Language: VHDL',
            'Language: Web',
            'Metrics',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'HIS_01': """
<p><b>Rationale</b></p>
<p>Relationship of the number of comments (outside of and within functions) to the number of statements. Purpose: 
Comprehensibility, clarity in the code. With violation documentation to decide on the acceptance or rejection. 
According to HIS definition the value cannot be &gt; 1. However Understand takes into account that some lines 
are both code and comments so values can be &gt; 1.  
<br><br>
Acceptable Range &gt; 0.2 (20%)
<br></p>

<p>Developer's Note: This check cannot pick up PHP/Javascript functions that are embedded in an html file. They must be placed in a separate .php or .js file.</p>

<p><b>Examples</b></p>
<p>The below compliant example has a comment density of 50%</p>
<pre>
// Function to calculate the area of a rectangle
int calculateArea(int length, int width) {
    // Multiply length and width to get the area
    return length * width; 
}
</pre>
<p>The below noncompliant example has a comment density of 11%</p>
<pre>
int calculateArea(int length, int width) {
    // Calculate the area of a rectangle
    int area = length * width;
    int result = area;
    result += 0;
    result -= 0;
    result *= 1;
    result /= 1;
    return result;
}
</pre>
""",
        'METRIC_02': """
<p><b>Rationale</b></p>
<p>Relationship of the number of comments (outside of and within functions) to the number of statements. 
Understand takes into account that some lines are both code and comments so values can be &gt; 1.  
<br></p>

<p>Developer's Note: This check cannot pick up PHP/Javascript functions that are embedded in an html file. They must be placed in a separate .php or .js file.</p>

<p><b>Examples</b></p>
<p>The below compliant example has a comment density of 50%</p>
<pre>
// Function to calculate the area of a rectangle
int calculateArea(int length, int width) {
    // Multiply length and width to get the area
    return length * width; 
}
</pre>
<p>The below noncompliant example has a comment density of 11%</p>
<pre>
int calculateArea(int length, int width) {
    // Calculate the area of a rectangle
    int area = length * width;
    int result = area;
    result += 0;
    result -= 0;
    result *= 1;
    result /= 1;
    return result;
}
</pre>
""",
    }[id]



def test_entity(file):
    return file.kind().check('file')


def test_global():
    return False


def test_language(language):
    return True


def define_options(check):
    check.options().integer('minimumPercentComments', OPT1, 20)
    check.options().checkbox('fileLevel', 'File Level test ( Default tests each function )', False)


def check(check, file):
    define_refs = file.filerefs("define, ada declare body, vhdl declare","ada entry, ada function, ada procedure, ada protected, ada task,"
"c function, csharp method, basic method, fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,\
java method, jovial subroutine, pascal compunit, pascal function, pascal procedure, vhdl procedure, vhdl function, vhdl process, vhdl architecture,\
web function, web method", True)

    minPercent = check.options().lookup("minimumPercentComments")
    fileLevel = check.options().lookup("fileLevel")

    if fileLevel == True:
        rctc = file.metric("RatioCommentToCode")
        if rctc is not None:
            newrctc = int(float(rctc) * 100)

            if newrctc < minPercent:
                check.violation(file, file, 0, 0, ERR1, newrctc)

    else:
        for ref in define_refs:
            ent = ref.ent()
            if ent.metric("RatioCommentsWithBeforeToCode") is not None:
                rctc = ent.metric("RatioCommentsWithBeforeToCode")
            elif ent.metric("RatioCommentToCode") is not None:
                rctc = ent.metric("RatioCommentToCode")
            else:
                continue
            newrctc = int(float(rctc) * 100)

            if newrctc < minPercent:
                check.violation(ent, file, ref.line(), ref.column(), ERR1, newrctc)



                
