# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 7/7/25

import re

ERR1 = 'Potential code injection found'


# The ID for the check
def ids():
    return ('CWE-94')

# The short name of the check
def name(id):
    return {
        'CWE-94': 'Published Standards/MITRE-CWE/' + """\
Improper Control of Generation of Code ('Code Injection')""",
    }[id]




def tags(id):
    return {
        'CWE-94': [
            'Language: Python',
            'Standard: MITRE CWE Top 25',
            'Exceptional Behavior',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    desc = """\
<p><b>Amplification</b></p>
<p>The product constructs all or part of a code segment using
externally-influenced input from an upstream component, but it does not
neutralize or incorrectly neutralizes special elements that could modify the
syntax or behavior of the intended code segment.</p>
<p><b>Non-Compliant Example</b></p>
<pre><code language="C++">def main():
  sum = 0
  numbers = eval(input("Enter a space-separated list of numbers: ")) # Violation
  for num in numbers:
    sum = sum + num
  print(f"Sum of {numbers} = {sum}")
main()</code></pre>
<p><b>Partial Check</b></p>
<p>This check will only check for basic uses of eval() on input() like in the
example.</p>
"""
    return {
        'CWE-94': desc,

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language in ['Python']

def check(check, file):
    if not re.search(r'eval\s*\(\s*input\s*\(', file.contents()):
        return
    if not file.lexer():
        return
    lexer = file.lexer()
    lexemes = lexer.lexemes()
    for lexeme in lexemes:
        # Look for input() in an eval()
        if lexeme.text() == 'eval':
            lexeme = lexeme.next(True, True)
            if lexeme and lexeme.text() == '(':
                lexeme = lexeme.next(True, True)
                if lexeme and lexeme.text() == 'input':
                    lexeme = lexeme.next(True, True)
                    if lexeme and lexeme.text() == '(':
                        check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

