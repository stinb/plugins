# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 7/7/25

import re

ERR1 = 'Potential race condition found'


# The ID for the check
def ids():
    return ('CWE-362')

# The short name of the check
def name(id):
    return {
        'CWE-362': 'Published Standards/MITRE-CWE/' + """\
Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')(Partial)""",
    }[id]




def tags(id):
    return {
        'CWE-362': [
            'Language: Python',
            'Standard: MITRE CWE Top 25',
            'Exceptional Behavior',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    desc = """\
<p><b>Amplification</b></p>
<p>The product contains a concurrent code sequence that requires temporary,
exclusive access to a shared resource, but a timing window exists in which the
shared resource can be modified by another code sequence operating concurrently.
</p>
<p><b>Non-Compliant Example</b></p>
<pre><code language="C++">void f(pthread_mutex_t *mutex) {
    pthread_mutex_lock(mutex); // Violation

    /* access shared resource */


    pthread_mutex_unlock(mutex);
}</code></pre>
<p><b>Partial Check</b></p>
<p>Will check if pthread_mutex_lock() is set to a variable or used in an if
statement.</p>
"""
    return {
        'CWE-362': desc,

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language in ['C++']

def check(check, file):
    if not re.search(r'pthread_mutex_lock', file.contents()):
        return
    if not file.lexer():
        return
    lexer = file.lexer()
    lexemes = lexer.lexemes()

    for lexeme in lexemes:
        if lexeme.text() == 'pthread_mutex_lock':
            lexeme = lexeme.previous(True, True)
            if lexeme and lexeme.text() not in ['=', '(']:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

