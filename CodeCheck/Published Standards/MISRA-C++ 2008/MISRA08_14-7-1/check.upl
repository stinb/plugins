#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Template, template member function or template member not instantiated: %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_14-7-1";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description { return "14-7-1 (Required) All class templates, function templates, class template member functions and class template static members shall be instantiated at least once.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
Similar to uncalled functions, un-instantiated class and function templates are a potential source
of noise and they may be symptomatic of a more serious problem such as missing paths.</p>
<p>
Note: Even though a given class template may be instantiated many times, it is possible that some
of its member functions are never instantiated.</p>
<p>
See Section 3.5 for associated library issues.</p>
<br>
<p><b>Example</b></p><pre><code language="C++">  template &lt; typename T &gt;
  class Sample
  {
  public:
    void inst_mem ( )
    {
      ...
    }
    void uninst_mem ( ) // Non-compliant
    {
      ...
    }
  };

  Sample&lt;int64_t&gt; s;
  s.inst_mem ( ); // Call to s.inst_mem instantiates the member.
                  // s.uninst_mem is not called within the program
                  // and is not instantiated.

</code></pre>
END_DESC

}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");

  # Create a list of all templates that are declared or defined
  my @templatesDefined = $file->filerefs("Define, Declare", "Template", 0);
  return unless @templatesDefined;
  
  # Loop through each template
  my $previous;
  foreach my $template(@templatesDefined) {

    #check to make sure this template is instantiated at least once
    throwError($check, $template->ent, $file, $template->line, $template->column, ERR1,$template->ent->name) unless $template->ent->ref('Typedby, Useby, Callby, Setby');

    #Pull everything defined by this template
    my @allMethods = $template->ent->refs('Define');

    # Check that all methods are actually used
    MTD: foreach my $method(@allMethods) {

      next MTD if $method->ent->longname eq $method->ent->name . "::" . $method->ent->name;
      next MTD if $method->ent->longname eq $method->ent->parent->name . "::~" . $method->ent->parent->name;
      throwError($check, $method->ent, $file, $method->line, $method->column, ERR1,$method->ent->name) unless $method->ent->ref('Typedby, Useby, Callby, Setby');

    }

  }

  # error if function name matches template
}
