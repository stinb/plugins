#This script is designed to run with Understand - CodeCheck
#Robert Gempeler - 7/19/2010
use base ("Understand::Codecheck");
use strict;

use constant ERR1 => 'Invalid use of "offsetof" macro.';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_18-2-1";}


sub name { return "Published Standards\\MISRA-C++ 2008\\18-2-1 The macro offsetof shall not be used.";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Preprocessor',
  );
}

sub description { return "18-2-1 (Required) The macro \"offsetof\" shall not be used.";}

sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
Use of the <b>offsetof</b> macro can lead to undefned behaviour when the types of the operands are incompatible 
or when bit felds are used.</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

sub define_options{}


sub check {
  my $check = shift; 
  my $file = shift; 
  return unless $file->kind->check("c file"); 
  
	  my @refs = $file->filerefs("call,use","function, macro",0);
	  foreach my $ref (@refs){
		  if ($ref->ent->name =~ /^offsetof$/){ 
			  $check->violation($ref->ent(),$file,$ref->line(),$ref->column(),ERR1);
		  }
	  }
  
}
