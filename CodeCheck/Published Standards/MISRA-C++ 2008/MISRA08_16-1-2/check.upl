#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => '#else, #elif or #endif not in the same file as their corresponding #if or #ifdef in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_16-1-2";}


# This is the short error the Understand will use
sub name { return "Published Standards/MISRA-C++ 2008/16-1-2 All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Preprocessor',
  );
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
Confusion can arise when blocks of code are included or excluded by the use of conditional compilation
directives which are spread over multiple files. Requiring that a #if directive be terminated within the
same file reduces the visual complexity of the code and the chance that errors will be made during
maintenance.
</p>

<p>
Note: #if directives may be used within included files provided they are terminated within the same
file. 
</p>

<p><b>Example</b></p><pre><code language="C++">/* file1.c */
#ifdef A /* Compliant */
#include "file1.h"
#endif
/* End of file1.c */

/* file2.c */
#if 1 /* Non-compliant */
#include "file2.h"
/* End of file2.c*/

/* file1.h */
#if 1 /* Compliant */
#endif
/* End of file1.h */

/* file2.h */
#endif
/* End of file1.h */
</code></pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");

  # $ifCounter and $ifDefCounter will count the macros to ensure we have no #else #elif #endif that don't belong in this file
  my $ifCounter = 0;
  my $violation = 0;
 
  # This check requires use of the Understand lexer. Initialize and check for failure 
  my $lexer = $file->lexer(0,,0,0);
  return unless $lexer;
  
  # $lexeme is intialized as the first element returned from the lexer
  my $lexeme = $lexer->first();
  
  # While the lexer has lexemes ...
  while ($lexeme) {
    #Yield to GUI interupts
    $check->yield();
    return if $check->is_abort();
    
    # Check if we increment $ifCounter
    if ($lexeme->token eq "Preprocessor" && $lexeme->text eq "if" || $lexeme->text eq "ifdef" || $lexeme->text eq "ifndef") {
      $ifCounter++;
	}
	# Check if we decrement
	elsif ($lexeme->token eq "Preprocessor" && $lexeme->text eq "endif") {
	  $ifCounter--;
	  $violation = 1 if $ifCounter < 0;
	}
	# Check if we have a positive $ifCounter for elif
	elsif ($lexeme->token eq "Preprocessor" && $lexeme->text eq "elif") {
	  $violation = 1 if $ifCounter < 1;
	}
	# Check if we have a positive $ifCounter for else
	elsif ($lexeme->token eq "Preprocessor" && $lexeme->text eq "else") {
	  $violation = 1 if $ifCounter < 1;
	}
	$check->violation($lexeme->ent,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1,$file->name) if $violation;
	$violation = 0;
  }
  # Set $lexeme to the next value from $lexer
  continue {
    $lexeme = $lexeme->next;
  }
}
