#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'A throw statement will cause an exception in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_15-1-1";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown";}

sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Exception Handling',
  );
}

# This is the full description of the rule being tested
sub description { return "15-1-1 (Required) The assignment-expression of a throw statement shall not itself cause an exception to be thrown.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
If an exception is thrown when constructing the exception object, or when evaluating the assignment
expression that initializes the exception object, it is that exception that propagates in preference to
the one that was about to be thrown. This may be inconsistent with developer expectations.</p>
<p><b>Developer Note:</b></p>
This check walks the call tree of the constuctor ensuring that no throw commands as issued. This check
does not recognize if those throws are in turn caught. If a throw command is susequently caught before
completion of the constructor, then that throw command is not a violation. This false positive will be
corrected in future builds of Understand.
<br>
<p><b>Example</b></p><pre><code language="C++">  class E
  { 
  public:
    E ( ){ } // Assume constructor cannot cause an exception
  };

  void a() {
    try
    {
      if ( ... )
      {
        throw E ( ); // Compliant – no exception thrown
      }              // when constructing the object
    }
  }

  // construction of E2 causes an exception to be thrown
  class E2
  {
  public:
    E2 ( )
    {
      throw 10;
    }
  };
  void b() {
    try
    {
      if ( ... )
      {
        throw E2 ( ); // Non-compliant – int exception thrown
                      // when constructing the E2 object
      }
    }
  }
</code></pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Create a list of all functions that Are thrown by Exception
  my @functionsDefined = $file->filerefs("Throw Exception");
  return unless @functionsDefined;
  
  # Loop through each object
  foreach my $function(@functionsDefined) {
	
	# Pull the definition of the object
    my $entity = $function->ent->ref("Define");
	next unless $entity;
	
	# Check the base class to ensure it does not throw exceptions
    if ( $entity->ent->freetext("ThrowExceptions") ) {
	  throwError($check, $entity->ent,$file,$entity->line,$entity->column,ERR1,$file->name);
	}
    # Pull all references that this function calls
	my @callList = walkCallPath($entity);
	foreach my $call(@callList) {
	  #my $callDefined = $call->ent->ref("Define");
	  if ( $call->ent->freetext("ThrowExceptions") ) {
	    throwError($check, $entity->ent,$file,$entity->line,$entity->column,ERR1,$file->name);
	  }
	}
  }
}

# This subroutine takes and define reference and returns all the calls made by that function and it's children
sub walkCallPath {
  my $ref = shift;
  my %children;
  my @fullList;
  my @currentLevel = $ref->ent->refs("Call");

  foreach my $elt(@currentLevel) {
    my $id = $elt->ent->id;
    next if exists($children{$id});
    $children{$id} = 1;
    push (@fullList, $elt);
    my @nextLevel = $elt->ent->refs("Call");
    push (@currentLevel, @nextLevel);
  }
  return @fullList;
}
