#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Pure virtual function %1 overrides non pure virtual function.';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_10-3-3";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual";}



sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Virtual Functions',
  );
}

# This is the full description of the rule being tested
sub description { return "10-3-3 ( Required ) A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual.";}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b></p>
Re-declaring a function as pure may not meet developer expectations.</p>
<br>

<p><b>Example</b></p><pre><code language="C++">class A
{
public:
  virtual void foo ( ) = 0; // foo declared pure
};

class B : public A
{
public:
  virtual void foo ( ) // foo defined
  {
  }
};

class C: public B
{
public:
  virtual void foo ( ) = 0; // Non-compliant â€“ foo re-declared pure
};

</code></pre>

<p>
The function foo is introduced as pure (making class A abstract), defined in class B (making class
B concrete), then re-declared as pure (making class C abstract). As this may not meet developer
expectations, the re-declaration as pure is not allowed.
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity { return 1;}


# This determines if this script is per project or per file
sub test_global { return 0;}


# Any defined options go here
sub define_options{
}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}



# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( "c file");
  
  # Pull a list all pure virtual functions, return if none in this file
  my @pureVirtualFunctionsDefined = $file->filerefs( 'Declare', 'Pure Virtual', 1 );
  return unless @pureVirtualFunctionsDefined;

  # Loop through all pure virtual functions that are declared
  foreach my $pureVirtualFunction ( @pureVirtualFunctionsDefined ) {

    # Pull all functions that this pure virtual funciton overrides, return if none in this file
    my @overriddingFunctions = $pureVirtualFunction->ent->refs( 'Overrides', '', 1 );
    next unless @overriddingFunctions;

    # Loop through each overriding function
    foreach my $override ( @overriddingFunctions ) {

      # Throw error if this function is not also a pure virtual function
      if ( $override->ent->kindname !~ /\bPure\b/ ) {
        $check->violation( $pureVirtualFunction->ent, $file, $pureVirtualFunction->line, $pureVirtualFunction->column, ERR1, $pureVirtualFunction->ent->name );
      }
    }
  }
}
