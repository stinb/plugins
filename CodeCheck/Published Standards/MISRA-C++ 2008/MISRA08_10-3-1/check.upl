#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Virtual function %1 is defined more than once.';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_10-3-1";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\10-3-1 There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy";}



sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Virtual Functions',
  );
}

# This is the full description of the rule being tested
sub description { return "10-3-1 ( Required ) There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy.";}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b></p>
The main aim of this rule is clarity for maintainers and reviewers, by ensuring that the version of
a function that can be executed from any point in a class hierarchy is unambiguous.</p>
<p>
Additionally, where classes form a diamond hierarchy, <i>call by dominance</i> ([1] ยง10.3(11)) may
occur resulting in a call to a function that is inconsistent with developer expectations. This rule
also prevents <i>call by dominance</i>.</p>
<br>

<p><b>Exception</b></p>
Destructors may be declared virtual in multiple members of a class hierarchy.</p>
<p>
If a function is declared pure and defined in the same class, then that definition is ignored for this
rule.</p>
<br>

<p><b>Example</b></p><pre><code language="C++">class A
{
public:
  virtual void f1 ( ) = 0;        // f1 is pure
  virtual void f2 ( ) = 0;        // f2 is pure
  virtual void f3 ( ) { }         // f3 is not pure
  virtual void f4 ( ) = 0;        // f4 is pure
  virtual ~A();                   // destructor
};

                                  // A::f1 is both pure and has a definition
void A::f1 ( )
{
}

                                  // A::f4 is both pure and has a definition
void A::f4 ( )
{
}


class B : public A
{
public:
  virtual void f2 ( ) { }         // Compliant: f2 pure in A and
                                  // defined in B
  virtual void f3 ( ) { }         // Non-compliant: f3 defined in A and B
  virtual void f4 ( ) = 0;        // Compliant: f4 is pure in A and in B
  virtual ~B();                   // Compliant: destructor
  };
                                  // Compliant by Exception - f4 defined in A but also declared pure in A

void B::f4 ( )
{
}


class C : public B
{
public:
  virtual void f1 ( ) { }         // Compliant: f1 defined in A and C
                                  // but was pure in A
  virtual void f2 ( ) { }         // Non-compliant f2: defined in B and C
                                  // and not declared pure in B
  virtual void f4 ( ) { }         // Compliant by Exception: f4 defined in A
                                  // and B but also declared pure in A and B
};


class D : public C
{
public:
  virtual void f1 ( ) { }         // Non-compliant f1: defined in C and D
                                  // as well as A
  virtual ~D();                   // Compliant: destructor
};



// Call by dominance example
class V
{
public:
  virtual void foo ( )
  {
  }
};


class B1 : public virtual V
{
public:
  virtual void foo ( )            // Non-compliant
  {
  }
};


class B2 : public virtual V
{
public:
  void f1 ( )
  {
    foo();                        // V::foo would appear to be the only
                                  // candidate to be called here
  }
};


class D : public B1, public B2
{
public:
  void f2 ( )
  {
    f1();
  }
};


B2 b2;
b2.f1();                          // calls V::foo by normal inheritance rules
D d;
d.f2();                           // calls B2::f1 which now calls B1::foo
                                  // "by dominance"
d.f1();                           // also calls B1::foo "by dominance"

</code></pre>

<p>
In the above example, in a member function of D, the use of count or foo is ambiguous and must
be disambiguated by B1::count, B2::foo, etc.
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity { return 1;}


# This determines if this script is per project or per file
sub test_global { return 0;}


# Any defined options go here
sub define_options{
}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}



# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( "c file");
  
  # Pull a list all virtual methods, return if none in this file
  my @virtualMethodsDefined = $file->filerefs( 'Define', 'Member Function Virtual' );
  return unless @virtualMethodsDefined;

  # Loop through each virtual method
  foreach my $virtualMethod ( @virtualMethodsDefined ) {

    # Move on if we are looking at a destructor
    next if $virtualMethod->ent->name =~ /\~/;

    # Check to see if this virtual function overrrides anything, return otherwise
    my @overrides = $virtualMethod->ent->refs( 'Overrides', '', 1 );
    next unless @overrides;

    # Loop through each override reference that we found
    foreach my $override ( @overrides ) {

      # If what we are overriding isn't a pure virtual method, we know we have more than one definition. Throw error
      if ( $override->ent->kindname =~ /\bVirtual\b/ and $override->ent->kindname !~ /\bPure\b/ ) {

        $check->violation( $virtualMethod->ent, $file, $virtualMethod->line, $virtualMethod->column, ERR1, $virtualMethod->ent->name );

      }
    }
  }
}
