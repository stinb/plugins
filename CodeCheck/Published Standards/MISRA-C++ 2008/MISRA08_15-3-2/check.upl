#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Main does not have an exception handle to catch unhandled exceptions in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_15-3-2";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\15-3-2 There should be at least one exception handler to catch all otherwise unhandled exceptions";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Advisory',
    'Exception Handling',
  );
}

# This is the full description of the rule being tested
sub description { return "15-3-2 (Advisory) There should be at least one exception handler to catch all otherwise unhandled exceptions.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
If a program throws an unhandled exception it terminates in an <i>implementation-defined</i> manner. In
particular, it is <i>implementation-defined</i> whether the call stack is unwound, before termination, so the
destructors of any automatic objects may or may not be executed. By enforcing the provision of a
"last-ditch catch-all", the developer can ensure that the program terminates in a consistent manner.</p>
<br>
<p>
The objective of Rule 15–3–4 is that a program should catch all exceptions that it is expected to
throw. This rule's objective is to ensure that exceptions that were not expected are also caught.</p>
<br>
<p><b>Example</b></p><pre style="margin-top:0;padding-top:0;">
For the majority of programs this will mean main should look like:
  int32_t main( )
  {
    try
    {
      // program code
    }
    catch ( ... ) // Catch-all handler
    {
      // Handle unexpected exceptions
    }
    return 0;
  }
</pre>
<p><b>See also</b><br>
Rule 15–3–4, Rule 15–5–3</p>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("c file");

  # Create a list of all functions that are defined
  my @functionsDefined = $file->filerefs("define", "function");
  return unless @functionsDefined;

  # Loop through each function and object looking for the main
  foreach my $function(@functionsDefined) {
    # Check the text of each function for the throw keyword.
	if ($function->ent->name eq "main" || $function->ent->name eq "_tmain" || $function->ent->name eq "wmain" || $function->ent->name eq "WinMain")  {
	  next if $function->ent->contents =~ /catch\s*\(\s*\.\.\.\s*\)/;
	  throwError($check, $function->ent,$file,$function->line,$function->column,ERR1,$function->file->name);
	}
  }
}

























