#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Member function %1 returning non-const handle to class-data';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_9-3-2";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\9-3-2 Member functions shall not return non-const handles to class-data";}



sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Functions',
  );
}

# This is the full description of the rule being tested
sub description { return "9-3-2 (Required) Member functions shall not return non-const handles to class-data.";}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b></p>
By implementing class interfaces with member functions the implementation retains more control
over how the object state can be modified and helps to allow a class to be maintained without
affecting clients. Returning a <i>handle</i> to <i>class-data</i> allows for clients to modify the state of the
object without using any interfaces.</p>
<br>

<p><b>Example</b></p><pre><code language="C++">  class C
  {
  public:
    int32_t & getA ()   // Non-compliant
    {
      return a;
    }
  private:
    int32_t a;
  };

  void b ( C & c )
  {
    int32_t & a_ref = c.getA ();
    a_ref = 10;         // External modification of private C::a
  }

</code></pre>

<p>
c.getA() returns a reference to the member, which is then stored and modified by a_ref. The
class, therefore, has no control over changes to its state.</p>
<p>
Where a resource is used by the class, but is not <i>class-data</i>, non-const <i>handles</i> to this data may
be returned.</p>
<br>

<p><b>Developer's Notes</b></p>
It is not always possible to statically check to see if a classes data member is shared or owned by the class.
A heurisitic is used to determine whether a variable has external storage or not, but indeterminate data members,
such as those set by a function or complex expression, are flagged as violations if those data members are
returned as non-const value.</p>
<br>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity { return 1;}


# This determines if this script is per project or per file
sub test_global { return 0;}


# Any defined options go here
sub define_options{
}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( "c file");

  # Pull a list of all Classes that are defined within this file
  my @classesDefined = $file->filerefs( 'Define', 'Class' );
  return unless @classesDefined;

  # Loop through each class
  CLS : foreach my $class ( @classesDefined ) {

    # Pull all the data members defined by this class, move onto the next class if none
    my @membersDefined =  $class->ent->refs( 'Define', 'Member Object' );
    next CLS unless @membersDefined;

    # Pull all the methods defined by this class, move onto the next class if none
    my @methodsDefined = $class->ent->refs( 'Define', 'Member Function' );
    next CLS unless @methodsDefined;

    # Loop through each method checking
    METH : foreach my $method ( @methodsDefined ) {

      # Test if the method returns a pointer or a reference
      next METH if $method->ent->type !~ /\*|\&/;
      next METH if $method->ent->type =~ /^[^\*]*?\bconst\b/;

      # Pull the return reference for this method, move onto the next if return is not used
      my $returnValue = $method->ent->ref( 'Return' );
      next METH unless $returnValue;

      foreach my $member ( @membersDefined ) {

        if ( $returnValue->ent->longname eq $member->ent->longname ) {

          throwError ( $check, $method->ent, $method->file, $method->line, $method->column, ERR1, $method->ent->name ) if testDataMember ( $member, $check );

        }
      }
    }
  }
}


sub testDataMember {

  my $dataMember = shift;
  my $check = shift;
  my $isData = 1;

  my $setRef = $dataMember->ent->ref( 'Setby Init' );

  #return $isData unless $setRef;
  #$check->violation( $setRef->ent, 0, $setRef->line, $setRef->column, $setRef->ent->name );

  if ( $setRef and $setRef->ent->kindname =~ /\bObject\b|\bFunction\b|\bParameter\b/ ) {

    $isData = testDataMember ( $setRef );

  } elsif ( $setRef and $setRef->ent->kindname =~ /\bParameter\b/ ) {

    $isData = 0;

  } elsif ( $dataMember->ent->kind->longname =~ /Member\sFunction/ ) {

    $isData = 0;

  }

  return $isData;

}
