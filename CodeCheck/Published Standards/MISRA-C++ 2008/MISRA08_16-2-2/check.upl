#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_16-2-2";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Preprocessor',
  );
}

# This is the full description of the rule being tested
sub description { return "16-2-2 (Required) C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
These are the only permitted uses of macros. C++ offers const variable and function templates,
which provide a type-safe alternative to the preprocessor.</p>
<p>Note that the use of macros for type qualifiers and storage class specifiers will break
Rule 16–2–1.</p>

<p><b>Example</b></p><pre><code language="C++">  // The following are compliant
  #define STOR extern // storage class specifier
  // Breaks Rule 16–2–1
  // The following are non-compliant
  #define CLOCK (xtal/16) // Constant expression
  #define PLUS2(X) ((X) + 2) // Macro expanding to expression
  #define PI 3.14159F // use const object instead
  #define int32_t long // use typedef instead
  #define STARTIF if( // language redefinition
  #define INIT(value) {(value), 0, 0} // braced initializer
  #define HEADER "filename.h" // string literal
</code></pre>

<b>See also</b><br>
Rule 16-2-1
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");

  # $building is flag to determine string completion and $builtString is the actual string
  my $building = "0";
  my $builtString = "";
 
  # This check requires use of the Understand lexer. Initialize and check for failure 
  my $lexer = $file->lexer(0,,0,0);
  return unless $lexer;
  
  # $lexeme is initialized as the first element returned from the lexer
  my $lexeme = $lexer->first();
  
  # While the lexer has lexemes 
  while ($lexeme) {
    #Yield to GUI interupts
    $check->yield();
    return if $check->is_abort();
    
    # Check if we are still building the string
    if ($building eq "1" && $lexeme->token ne "Newline") {
	  $builtString .= $lexeme->text unless $lexeme->token eq "Comment";
	}
	# Check if we have reached the end of the line, thus ending our string
	elsif ($building eq "1" && $lexeme->token eq "Newline") { 
	  $building = "0";
	  # These series of checks test for all acceptable macros
	  if ($builtString =~ /^define\s+\w{1,}.*$/) {
		next if $builtString =~ /^define\s+\w{1,}\s*const\s*$/;
		next if $builtString =~ /^define\s+\w{1,}\s*volatile\s*$/;
		next if $builtString =~ /^define\s+\w{1,}\s*static\s*$/;
		next if $builtString =~ /^define\s+\w{1,}\s*extern\s*$/;
		next if $builtString =~ /^define\s+\w{1,}\s*register\s*$/;
		next if $builtString =~ /^define\s+\w{1,}\s*$/;
	  }
	  $check->violation($lexeme->ent,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1,$file->name);
	}
	# Check if we start building string
	elsif ($lexeme->token eq "Preprocessor" && $building eq "0" && $lexeme->text eq "define") {
	  $building = "1";
	  $builtString = "define";
	}
  }
  # Set $lexeme to the next value from $lexer
  continue {
    $lexeme = $lexeme->next;
  }
}
