#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Class %1 derived fromvirtual base';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_10-1-1";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\10-1-1 Classes should not be derived from virtual bases";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Advisory',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description { return "10-1-1 ( Advisory ) Classes should not be derived from virtual bases.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b></p>
The use of virtual base classes can introduce a number of undefined and potentially confusing
behaviours. The use of virtual bases is not recommended.</p>
<br>

<p><b>Example</b></p><pre><code language="C++">  class B {};
  class D: public virtual B {}; // Non-compliant - B is a virtual base

</code></pre>

<br>
<p><b>See also</b></p><p>
Rule 5–2–2, Rule 10–1–2, Rule 12–1–2</p>
<br>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( "c file");
  
  # Pull a list of all objects that are defined within this file
  my @classesDefined = $file->filerefs( 'Virtual Base' );
  return unless @classesDefined;

  foreach my $class ( @classesDefined ) {

    throwError($check, $class->ent, $file, $class->line, $class->column, ERR1, $class->ent->name);

  }

  
}
