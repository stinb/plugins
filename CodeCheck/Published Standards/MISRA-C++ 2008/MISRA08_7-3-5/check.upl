#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson 

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Multiple declarations for an identifier straddle using-declaration: %1.';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_7-3-5";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\7-3-5 Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Identifiers',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description { return "7-3-5 (Required) Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
The set of identifiers introduced by a <i>using-declaration</i> does not include any declarations that may
be added by a subsequent declaration in the namespace. Any subsequent declarations will not be
found through the <i>using-declaration</i>, which may not be consistent with developer expectations.</p>

<br>
<p><b>Example</b></p><pre><code language="C++">  namespace NS1
  {
    void f( uint16_t ); // Example 1
  }
  using NS1::f;
  namespace NS1
  {
    void f( uint32_t ); // Example 2 – Non-compliant
  }
  void bar()
  {
    f( 0U );
  }
  </code></pre>

<BR />

<p>
In the above example, moving the using-declaration below the second namespace would result in
Example 2 being called, as it is a better match than Example 1.</p>
<p><b>See also</b><br>
ISO/IEC 14882:2003 [1] §7.3.3</p>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  
  # Check that we are looking at file
  return unless $file->kind->check("c file");
  
  # Pull all using reference and all other references for comparison
  my @allDeclares = $file->filerefs("Using", "~file");
  my @everything = $file->filerefs("Declare, Define");

  # Loop through each using reference
  foreach my $declares ( @allDeclares) {
    # Compare to each other reference
    foreach my $item ( @everything ) {
      # Check name and line number
      next unless $declares->ent->name eq $item->ent->name;
      next unless $declares->line < $item->line;
      # At this point we know we have an error
      throwError($check, $declares->ent, $file, $declares->line, $declares->column, ERR1, $declares->scope->name);
    }
  }
}
