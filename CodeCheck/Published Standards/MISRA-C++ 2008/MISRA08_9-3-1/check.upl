#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Const member function %1 returning non-const pointer or reference to class-data';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_9-3-1";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C++ 2008\\9-3-1 Const member functions shall not return non-const pointers or references to class-data";}


sub tags {
  return (
    'Language: C',
    'Language: C++',
    'Standard: MISRA C++ 2008',
    'Category: Required',
    'Functions',
  );
}

# This is the full description of the rule being tested
sub description { return "9-3-1 (Required) Const member functions shall not return non-const pointers or references to class-data.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b></p>
When an object is declared with <i>const</i> class type, only const member functions can be invoked on
that object. The common expectation of const member functions is that the state of the object may
not be modified when invoking the functions. However, returning a non-const pointer or reference
to <i>class-data</i> from a const function allows a modification to the conceptual state of an object.</p>
<br>

<p><b>Example</b></p><pre><code language="C++">  class C
  {
  public:

    C ( int32_t & b_ ) : a ( new int32_t [ 10 ] ), b ( b_ )
    {
    }

    int32_t * getA () const       // Non-compliant
                                  // Returns non const pointer to data
    {
      return a;
    }

    int32_t * getB () const       // Non-compliant
                                  // Returns non const pointer to data
    {
      return &b;
    }

    const int32_t * getC () const // Compliant
                                  // Returns const pointer to data
    {
    return &b;
    }

  private:
    int32_t * a;
    int32_t & b;
  };

  void fn ( C const & c )
  {
    c.getA()[ 0 ] = 0; // Modification to conceptual state of C
    *c.getB() = 0; // Modification to conceptual state of C
    fn2 ( c.getC() ); // Value can be used,
    *c.getC() = 0; // but compiler will report an error here
  }

</code></pre>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( "c file");

  # Pull a list of all Methods that are defined within this file
  my @classesDefined = $file->filerefs( 'Define', 'Class' );
  return unless @classesDefined;

  # Loop through each class
  CLS : foreach my $class ( @classesDefined ) {

    # Pull all the data members defined by this class, move onto the next class if none
    my @membersDefined =  $class->ent->refs( 'Define', 'Member Object' );
    next CLS unless @membersDefined;

    # Pull all the constant methods defined by this class, move onto the next class if none
    my @methodsDefined = $class->ent->refs( 'Define', 'Member Const Function' );
    next CLS unless @methodsDefined;

    # Loop through each constant member function
    METH : foreach my $method ( @methodsDefined ) {
      # No sense checking if this method already returns a const
      next METH if $method->ent->type =~ /\bconst\b/;
      next METH unless $method->ent->type =~ /\*|\&/;

      # Pull return value and check against data members
      my $returnValue = $method->ent->ref( 'Return' );
      next METH unless $returnValue;
      foreach my $member ( @membersDefined ) {

        # Throw error if we are looking at the same entity
        throwError ( $check, $method->ent, $file, $method->line, $method->column, ERR1, $method->ent->name ) if ( $returnValue->ent->longname eq $member->ent->longname );

      }
    }
  }
}
