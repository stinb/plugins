#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;


use constant ERR1 => 'Function %1 declared at block scope';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA04_8.6";}


sub name { return "Published Standards\\MISRA-C 2004\\8.6 Functions shall be declared at file scope";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2004',
    'Category: Required',
    'Functions',
  );
}

sub description { return "8.6 (Required) Functions shall be declared at file scope";}

sub detailed_description { return <<"END_DESC"
Declaring functions at block scope may be confusing, and can lead to undefined behaviour.
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

sub define_options{}

sub check {

  my $check = shift; 
  my $file = shift;

  return unless $file->kind->check("c file ~unknown ~unresolved");
  
  my @refs = $file->filerefs("C declare","function ~member");
  foreach my $ref ( @refs ){

    next unless( $ref->scope != $file );
    next unless( $ref->ent->parent && $ref->ent->parent->kind eq "Namespace" );
    $check->violation( $ref->ent, $file, $ref->line, $ref->column, ERR1, $ref->ent->name); 

  }

  my @defineRefs = $file->filerefs("C define","function ~member");
  foreach my $defined ( @defineRefs ){

    my @declareIn = $defined->ent->refs("C declare","function ~member");
    foreach my $declare ( @declareIn ) {
      $check->violation( $declare->ent, $file, $declare->line, $declare->column, ERR1, $declare->ent->name);
    }
  }
}
