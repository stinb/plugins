#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Reserved Identifier, Macro, or Function defined, redefined or undefined in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA04_20.1";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C 2004\\20.1 Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2004',
    'Category: required',
    'Libraries',
  );
}

# This is the full description of the rule being tested
sub description { return "20.1 (Required) Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
It is generally bad practice to <i>#undef</i> a macro that is defined in the standard library. It is also bad
practice to <i>#define</i> a macro name that is a C++ reserved identifier, or C++ keyword or the name
of any macro, object or function in the standard library. For example, there are some specific
reserved words and function names that are known to give rise to <i>undefined behaviour</i> if they are
redefined or undefined, including <i>defined</i>, <i>_ _LINE_ _</i>, <i>_ _FILE_ _</i>, <i>_ _DATE_ _</i>, <i>_ _TIME_ _</i>,
<i>_ _STDC_ _</i>, <i>errno</i> and <i>assert</i>.
</p>

<p>
Reserved identifiers are defined by ISO/IEC 9899:1990 [2] Sections 7.1.3 "Reserved identifiers"
and 6.8.8 "Predefined macro names". Macros in the standard library are examples of reserved
identifiers. Functions in the standard library are examples of reserved identifiers. Any identifier in
the standard library is considered a reserved identifier in any context i.e. at any scope or regardless
of header files.
</p>

<p>
The defining, redefining or undefining of the reserved identifiers defined in 7.13 "Future library
directions" is advisory.<BR>
Rule 20.1 applies regardless of which, if any, header files are included.
</p>

<p><b>Additional Information</b></p>
In the C++ 11 standard, under the section 'Reserved Identifiers' is statement, "All identifiers that begin with an 
underscore and either an uppercase letter or another underscore are always reserved for any use." This Code Check
enforces this rule when determining if an identifier is acceptable.
</p>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  #define my array of reserved keywords
  my @reservedNames = ("abort", "abs", "acos", "asctime", "asin", "atan", "atan2", "atexit", 
                       "atof", "atoi", "atol", "bsearch", "btowc", "calloc", "ceil", "clearerr", 
					   "clock", "cos", "cosh", "ctime", "difftime", "div", "exit", "exp", "fabs", 
					   "fclose", "feof", "ferror", "fflush", "fgetc", "fgetpos", "fgets", 
					   "fgetwc", "fgetws", "floor", "fmod", "fopen", "fprintf", "fputc", "fputs", 
					   "fputwc", "fputws", "fread", "free", "freopen", "frexp", "fscanf", "fseek", 
					   "fsetpos", "ftell", "fwide", "fwprintf", "fwrite", "fwscanf", "getc", 
					   "getchar", "getenv", "gets", "getwc", "getwchar", "gmtime", "isalnum", 
					   "isalpha", "iscntrl", "isdigit", "isgraph", "islower", "isprint", 
					   "ispunct", "isspace", "isupper", "iswalnum", "iswalpha", "iswcntrl", 
					   "iswctype", "iswdigit", "iswgraph", "iswlower", "iswprint", "iswpunct", 
					   "iswspace", "iswupper", "iswxdigit", "isxdigit", "labs", "ldexp", "ldiv", 
					   "localeconv", "localtime", "log", "log10", "longjmp", "malloc", "mblen", 
					   "mbrlen", "mbrtowc", "mbsinit", "mbsrtowcs", "mbstowcs", "mbtowc", "memchr", 
					   "memcmp", "memcpy", "memmove", "memset", "mktime", "modf", "perror", "pow", 
					   "printf", "putc", "putchar", "puts", "putwc", "putwchar", "qsort", "raise", 
					   "rand", "realloc", "remove", "rename", "rewind", "scanf", "setbuf", 
					   "setlocale", "setvbuf", "signal", "sin", "sinh", "sprintf", "sqrt", "srand", 
					   "sscanf", "strcat", "strchr", "strcmp", "strcoll", "strcpy", "strcspn", 
					   "strerror", "strftime", "strlen", "strncat", "strncmp", "strncpy", "strpbrk", 
					   "strrchr", "strspn", "strstr", "strtod", "strtok", "strtol", "strtoul", 
					   "strxfrm", "swprintf", "swscanf", "system", "tan", "tanh", "time", "tmpfile", 
					   "tmpnam", "tolower", "toupper", "towctrans", "towlower", "towupper", "ungetc", 
					   "ungetwc", "vfprintf", "vfwprintf", "vprintf", "vsprintf", "vswprintf", 
					   "vwprintf", "wcrtomb", "wcscat", "wcschr", "wcscmp", "wcscoll", "wcscpy", 
					   "wcscspn", "wcsftime", "wcslen", "wcsncat", "wcsncmp", "wcsncpy", "wcspbrk", 
					   "wcsrchr", "wcsrtombs", "wcsspn", "wcsstr", "wcstod", "wcstok", "wcstol", 
					   "wcstombs", "wcstoul", "wcsxfrm", "wctob", "wctomb", "wctrans", "wctype", 
					   "wmemchr", "wmemcmp", "wmemcpy", "wmemmove", "wmemset", "wprintf", "wscanf", 
					   "assert", "BUFSIZ", "CLOCKS_PER_SEC", "EDOM", "EOF", "ERANGE", "errno", 
					   "EXIT_FAILURE", "EXIT_SUCCESS", "FILENAME_MAX", "HUGE_VAL", "LC_ALL", 
					   "LC_COLLATE", "LC_CTYPE", "LC_MONETARY", "LC_NUMERIC", "LC_TIME", "L_tmpnam", 
					   "MB_CUR_MAX", "NULL", "FOPEN_MAX", "offsetof", "RAND_MAX", "SEEK_CUR", 
					   "SEEK_END", "SEEK_SET", "setjmp", "SIGTERM", "SIG_DFL", "SIG_ERR", "SIG_IGN", 
					   "stderr", "stdin", "SIGABRT", "SIGILL", "SIGINT", "SIGSEGV", "WCHAR_MAX", 
					   "WCHAR_MIN", "WEOF", "WEOF", "_IOFBF", "_IOLBF", "stdout", "SIGFPE", "va_arg", 
					   "va_end", "va_start", "_IONBF", "TMP_MAX", "alignas", "alignof", "and", 
					   "and_eq", "asm", "auto", "bitand", "bitor", "bool", "break", "case", "catch", 
					   "char", "char16_t", "char32_t", "class", "compl", "const", "constexpr", 
					   "const_cast", "continue", "decltype", "default", "delete", "do", "double", 
					   "dynamic_cast", "else", "enum", "explicit", "export", "extern", "false", 
					   "float", "for", "friend", "goto", "if", "inline", "int", "long", "mutable", 
					   "namespace", "new", "noexcept", "not", "not_eq", "nullptr", "operator", "or", 
					   "or_eq", "private", "protected", "public", "register", "reinterpret_cast", 
					   "return", "short", "signed", "sizeof", "static", "static_assert", "static_cast", 
					   "struct", "switch", "template", "this", "thread_local", "throw", "true", "try", 
					   "typedef", "typeid", "typename", "union", "unsigned", "using", "virtual", "void", 
					   "volatile", "wchar_t", "while", "xor", "xor_eq");
  
  # Loop through all macros and check the defines and undefs against the black list
  my @funcrefs = $file->filerefs("Set ~inactive, Define ~inactive","macro");
  foreach my $ref(@funcrefs) {
	throwError($check, $ref->ent,$file,$ref->line,$ref->column,ERR1,$file->name) if $ref->ent->name =~ /^_[A-Z]{1}.*$/;
	throwError($check, $ref->ent,$file,$ref->line,$ref->column,ERR1,$file->name) if $ref->ent->name =~ /^__.*$/;
	my $name = $ref->ent->name;
	throwError($check, $ref->ent, $file, $ref->line,$ref->column,ERR1,$file->name) if grep {/^\Q$name\E$/} @reservedNames;
  }
}
