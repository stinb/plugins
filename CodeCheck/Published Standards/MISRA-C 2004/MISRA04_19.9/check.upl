#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Function like Macro has an argument that looks like a preprocessing directive in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA04_19.9";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C 2004\\19.9 Arguments to a function-like macro shall not contain tokens that look like preprocessing directives";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2004',
    'Category: Required',
    'Preprocessor',
  );
}

# This is the full description of the rule being tested
sub description { return "19.9 (Required) Arguments to a function-like macro shall not contain tokens that look like preprocessing directives.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
If any of the arguments act like preprocessor directives, the behaviour when macro substitution is
made can be unpredictable.
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Loop through all macros and check and check if they are functional
  my @macroFuncs = $file->filerefs("Use","macro functional");

  # Start loop of functional macros found
  MAC: foreach my $macro(@macroFuncs) {

    # Set flag for beginning of macro and initialize the lexer
    my $lexeme = $macro->lexeme;

    # Look around to determine if we are calling the marco or using it in another way
    next MAC if $lexeme->prevUseful and $lexeme->prevUseful->token eq 'Preprocessor' and $lexeme->prevUseful->line_begin == $lexeme->line_begin;
    next MAC if $lexeme->nextUseful->text ne '(';

    # Move lexeme into the paramters of the calling macro and create a counter to track position
    $lexeme = $lexeme->nextUseful;
    my $counter = 0;

    # Start pulling lexemes one at a time to test if arguments look like preprocessing directives
    while ( $lexeme ){

      if ( $lexeme->token eq "Preprocessor" ) {
        throwError($check, $macro->ent, $file, $macro->line, $macro->column, ERR1, $file->name);
        next MAC;
      }

      # This counter control counts opening ( and closing ) to test if we are at the end of a Macro function call.
      $counter++ if $lexeme->text eq "(";
      $counter-- if $lexeme->text eq ")";
      next MAC if $counter == 0;

      $lexeme = $lexeme->next;

    }
  }
}
