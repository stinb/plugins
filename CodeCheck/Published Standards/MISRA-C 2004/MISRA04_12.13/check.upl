#This script is designed to run with Understand - CodeCheck
#Kacy Stocks - Aug 23, 2018
use base ("Understand::Codecheck");
use strict;

use CodeCheck::Libraries::FileStatements qw(statements);

sub register_tr_text() {
  my $check = shift;
}

sub checkID { return "MISRA04_12.13";} # RECOMMEND ___

sub name { return "Published Standards\\MISRA-C 2004\\12.13 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2004',
    'Category: Advisory',
    'Expressions',
  );
}

sub description { return "12.13 (Advisory) The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.";}

sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
<p>When the increment or decrement operator is used, it should be the only side effect in the statement.</p>
<p>The use of increment and decrement operators in combination with other arithmetic operators is not recommended because:</p>
<ul>
<li>It can significantly impair the readability of the code.</li>
<li>It introduces additional side effects into a statement with the potential for undefined behaviour.</li>
</ul>
<p>It is safer to use these operations in isolation from any other arithmetic operators.</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

sub define_options{}


# This subroutine will check the statements in your file indevidually to see if any have any
# increments or decrements that are used in the same statement. When this check finds one
# it then returns the statement, line number, and column number of the offending syntax.
sub check {
  my $check = shift; 
  my $file = shift;
  my $obj;
  my $plusplus = 0;
  my $minusminus = 0;
  my $op = 0;

  return unless $file->kind->check("c file");
  return unless ($file->contents =~ /\+\+/ || $file->contents =~ /--/);
  return unless my @statementlist = statements($file);

  STATEMENT:foreach my $statement (@statementlist){       # for each statement in my file
    my $plusplus = 0;
    my $minusminus = 0;
    my $op = 0;

    OBJ:foreach my $obj (@$statement){                    # for each object in my statement
      return if $check->is_abort();                       # allow user to cancel this check

      if ($plusplus != 1 && $obj->text() eq "++"){        # if there is a '++' set plusplus boolean true
        $plusplus = 1;
        next OBJ;
      }
      if ($minusminus != 1 && $obj->text() eq "--"){      # if there is a '--' set minusminus boolean true
        $minusminus = 1;
        next OBJ;
      }
      if ($obj->token() eq "Operator" and $obj->text() ne '[' and $obj->text() ne ']' and $obj->text() ne '.' and $obj->text() ne '->'){                    # if there is any other operator, set op boolean true
        $op = 1;
      }

      if ($plusplus == 1 && $op == 1){
        $check->violation($obj->text(),$file,$obj->line_begin(),$obj->column_begin(),"Improper '++' declaration.");
        next STATEMENT;
      }
      if ($minusminus == 1 && $op == 1){
        $check->violation($obj->text(),$file,$obj->line_begin(),$obj->column_begin(),"Improper '--' declaration.");
        next STATEMENT;
      }
    }#object
  }#statement
}
