#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Function identifier %1 used incorrectly';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA04_16.9";}


# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA-C 2004\\16.9 A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2004',
    'Category: Required',
    'Functions',
  );
}

# This is the full description of the rule being tested
sub description { return "16.9 (Required) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b></p>
If the programmer writes:</p>
<br>

<p><b>Example</b></p><pre><code language="C++">  if (f) /* not compliant - gives a constant non-zero value which is
            the address of f - use either f() or &f */
  {
    /* ... */
  }

</code></pre>

<br>
<p>
then it is not clear if the intent is to test if the address of the function is not <i>NULL</i> or that a call to
the function f() should be made.</p>
<br>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Pull a list of all functions that are defined within this file
  my @functionsDefined = $file->filerefs("Define", "Function");
  return unless @functionsDefined;

  # Loop through each function that is defined
  foreach my $function ( @functionsDefined ) {

    # Loop through each use reference of that function
    my @useBys = $function->ent->refs( 'Use ~Inactive', 'Function' );
    foreach my $use ( @useBys ) {

      # Spin up a lexer and check if the address of the function is used correctly
      my $lexeme = $use->lexeme;

      # This was added to properly test member functions and functions within namespaces
      while ( $lexeme->prevUseful->token eq 'Operator' and $lexeme->prevUseful->text eq '::' ) {
        $lexeme = $lexeme->prevUseful;
        $lexeme = $lexeme->prevUseful;
      }
      
      throwError($check, $use->ent, $file, $use->line, $use->column, ERR1, $use->ent->name ) if $lexeme->prevUseful->text ne '&';

    }
  }
}
