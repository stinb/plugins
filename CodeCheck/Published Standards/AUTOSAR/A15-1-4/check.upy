# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-6-2021
import re
import Modules

ERR1 = """\
%1 was not deleted before this throw"""

def ids():
    return ('A15-1-4', 'CPP_E060')

def name(id):
    return {
        'A15-1-4': 'Published Standards/AUTOSAR/If a function exits with an exception, then before a throw, the function shall place all objects&#47;resources that the function constructed in valid states or it shall delete them',
        'CPP_E060': 'All Checks/Language Specific/C and C++/Exception Handling/If a function exits with an exception, then before a throw, the function shall place all objects&#47;resources that the function constructed in valid states or it shall delete them',
    }[id]


def tags(id):
    return {
        'A15-1-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Partially Automated',
            'Exception Handling'
        ],
        'CPP_E060': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>If the only handler to dynamically allocated memory or system resource (e.g. file, lock,
network connection or thread) goes out of scope due to throwing an exception, memory
leak occurs. Memory leaks lead to performance degradation, security violations and
software crashes.</p>
<p>Allocated memory or system resource can be released by explicit call to resource
deinitialization or memory deallocation function (such as operator delete), before each
return/try/break/continue statement. However, this solution is error prone and difficult
to maintain.</p>
<p>The recommended way of releasing dynamically allocated objects and resources is
to follow RAII ("'Resource Acquisition Is Initialization"') design pattern, also known as
Scope-Bound Resource Management or “Constructor Acquires, Destructor Releases”
(CADRe). It allows to bind the life cycle of the resource to the lifetime of a scope-bound
object. It guarantees that resources are properly deinitialized and released when data
flow reaches the end of the scope.</p>
<p>Examples of RAII design pattern that significantly simplifies releasing
objects/resources on throwing an exception are C++ smart pointers: std::unique_ptr
and std::shared_ptr.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A15-1-4.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;memory&gt;
#include &lt;stdexcept&gt;
extern std::uint32_t F1();
void FVeryBad() noexcept(false)
{
  std::logic_error* e = new std::logic_error("Logic Error 1");
  // ...
  std::uint32_t i = F1();

  if (i &lt; 10)
  {
    throw(*e); // Non-compliant - fVeryBad() is not able to clean-up
    // allocated memory
  }

  // ...
  delete e;
}
void FBad() noexcept(false)
{
  std::int32_t* x = new std::int32_t(0);
  // ...
  std::uint32_t i = F1();

  if (i &lt; 10)
  {
    throw std::logic_error("Logic Error 2"); // Non-compliant - exits from
    // fBad() without cleaning-up
    // allocated resources and
    // causes a memory leak
  }

  else if (i &lt; 20)
  {
    throw std::runtime_error("Runtime Error 3"); // Non-compliant - exits
    // from fBad() without
    // cleaning-up allocated
    // resources and causes a
    // memory leak
  }

  // ...
  delete x; // Deallocates claimed resource only in the end of fBad() scope
}
void FGood() noexcept(false)
{
  std::int32_t* y = new std::int32_t(0);
  // ...
  std::uint32_t i = F1();

  if (i &lt; 10)
  {
    delete y; // Deletes allocated resource before throwing an exception
    throw std::logic_error("Logic Error 4"); // Compliant - deleting y
    // variable before exception
    // leaves the fGood() scope
  }

  else if (i &lt; 20)
  {
    delete y; // Deletes allocated resource before throwing an exception
    throw std::runtime_error("Runtime Error 5"); // Compliant - deleting y
    // variable before
    // exception leaves the
    // fGood() scope
  }

  else if (i &lt; 30)
  {
    delete y; // Deletes allocated resource before throwing an exception
    // again, difficult to maintain
    throw std::invalid_argument(
    "Invalid Argument 1"); // Compliant - deleting
    // y variable before
    // exception leaves the
    // fGood() scope
  }

  // ...
  delete y; // Deallocates claimed resource also in the end of fGood() scope
}
void FBest() noexcept(false)
{
  std::unique_ptr&lt;std::int32_t&gt; z = std::make_unique&lt;std::int32_t&gt;(0);
  // ...
  std::uint32_t i = F1();

  if (i &lt; 10)
  {
    throw std::logic_error("Logic Error 6"); // Compliant - leaving the
    // fBest() scope causes
    // deallocation of all
    // automatic variables, unique_ptrs, too
  }

  else if (i &lt; 20)
  {
    throw std::runtime_error("Runtime Error 3"); // Compliant - leaving the
    // fBest() scope causes
    // deallocation of all
    // automatic variables,
    // unique_ptrs, too
  }

  else if (i &lt; 30)
  {
    throw std::invalid_argument(
    "Invalid Argument 2"); // Compliant - leaving the fBest() scope
    // causes deallocation of all automatic
    // variables, unique_ptrs,
    // too
  }

  // ...
  // z is deallocated automatically here, too
}
class CRaii // Simple class that follows RAII pattern
{
public:
  CRaii(std::int32_t* pointer) noexcept : x(pointer) {}
  ~CRaii()
  {
    delete x;
    x = nullptr;
  }

private:
  std::int32_t* x;
};
void FBest2() noexcept(false)
{
  CRaii a1(new std::int32_t(10));
  // ...
  std::uint32_t i = F1();

  if (i &lt; 10)
  {
    throw std::logic_error("Logic Error 7"); // Compliant - leaving the
    // fBest2() scope causes a1
    // variable deallocation
    // automatically
  }
  else if (i &lt; 20)
  {
    throw std::runtime_error("Runtime Error 4"); // Compliant - leaving the
    // fBest2() scope causes
    // a1 variable
    // deallocation
    // automatically
  }
  else if (i &lt; 30)
  {
    throw std::invalid_argument(
    "Invalid Argument 3"); // Compliant - leaving the fBest2() scope
    // causes a1 variable deallocation
    // automatically
  }

  // ...
  // a1 is deallocated automatically here, too
}
</code></pre>
"""


def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'throw', file.contents()):
        return
    lexer = None
    funcRefs = file.filerefs('Define', 'Function')
    needToDelete = []

    for funcRef in funcRefs:
        needToDelete.clear()
        defRefs = funcRef.ent().refs('Define')
        for defRef in defRefs:
            # Skip classes since they might have their own destructor
            if defRef.ent().ref('Typed') and defRef.ent().ref('Typed').ent().kind().longname() == 'C Class Type':
                continue
            # Populate the needToDelete list
            if re.search(r'new', str(defRef.ent().value())):
                needToDelete.append(defRef.ent().name())

        if not lexer:
            lexer = file.lexer()
        lexeme = lexer.lexeme(funcRef.line(), funcRef.column())
        # Find bounds of function
        while lexeme and lexeme.text() != '{':
            lexeme = lexeme.next(True, True)
        close = Modules.findClose(lexeme)
        if not close:
            continue

        while lexeme and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.line_begin()) and not lexeme.line_begin() > close.line_begin():
            # For every throw keyword go back and find a delete keyword
            if lexeme.text() == 'throw':
                throwLex = lexeme
                prevLex = lexeme
                prevLex = prevLex.previous(True, True)
                if prevLex.text() == ';':
                    prevLex = prevLex.previous(True, True)
                    while prevLex and not re.search(r'delete|;|}|{', prevLex.text()):
                        prevLex = prevLex.previous(True, True)

                    if prevLex.text() == 'delete':
                        while prevLex and prevLex.text() != ';':
                            # Remove deleted ents from the needToDelete list
                            if prevLex.ent() and prevLex.ent().name() in needToDelete:
                                needToDelete.remove(prevLex.ent().name())
                            prevLex = prevLex.next(True, True)



                for item in needToDelete:
                    check.violation(funcRef.ent(), file, throwLex.line_begin(), throwLex.column_begin(), ERR1, item)

            lexeme = lexeme.next(True, True)
