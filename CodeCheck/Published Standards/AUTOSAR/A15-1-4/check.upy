# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-6-2021
import re
import Modules

ERR1 = """\
%1 was not deleted before this throw"""

def ids():
    return ('A15-1-4', 'CPP_E060')

def name(id):
    return {
        'A15-1-4': 'Published Standards/AUTOSAR/If a function exits with an exception, then before a throw, the function shall place all objects&#47;resources that the function constructed in valid states or it shall delete them',
        'CPP_E060': 'All Checks/Language Specific/C and C++/Exception Handling/If a function exits with an exception, then before a throw, the function shall place all objects&#47;resources that the function constructed in valid states or it shall delete them',
    }[id]


def tags(id):
    return {
        'A15-1-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Partially Automated',
            'Exception Handling'
        ],
        'CPP_E060': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>If the only handler to dynamically allocated memory or system resource (e.g. file, lock,
network connection or thread) goes out of scope due to throwing an exception, memory
leak occurs. Memory leaks lead to performance degradation, security violations and
software crashes.</p>
<p>Allocated memory or system resource can be released by explicit call to resource
deinitialization or memory deallocation function (such as operator delete), before each
return/try/break/continue statement. However, this solution is error prone and difficult
to maintain.</p>
<p>The recommended way of releasing dynamically allocated objects and resources is
to follow RAII ("'Resource Acquisition Is Initialization"') design pattern, also known as
Scope-Bound Resource Management or “Constructor Acquires, Destructor Releases”
(CADRe). It allows to bind the life cycle of the resource to the lifetime of a scope-bound
object. It guarantees that resources are properly deinitialized and released when data
flow reaches the end of the scope.</p>
<p>Examples of RAII design pattern that significantly simplifies releasing
objects/resources on throwing an exception are C++ smart pointers: std::unique_ptr
and std::shared_ptr.</p>
<p><b>Example</b></p>
<pre><code language="C++">1   //% $Id: A15-1-4.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2   #include &lt;cstdint&gt;
3   #include &lt;memory&gt;
4   #include &lt;stdexcept&gt;
5   extern std::uint32_t F1();
6   void FVeryBad() noexcept(false)
7   {
8     std::logic_error* e = new std::logic_error("Logic Error 1");
9     // ...
10    std::uint32_t i = F1();
11
12    if (i &lt; 10)
13    {
14      throw(*e); // Non-compliant - fVeryBad() is not able to clean-up
15      // allocated memory
16    }
17
18    // ...
19    delete e;
20  }
21  void FBad() noexcept(false)
22  {
23    std::int32_t* x = new std::int32_t(0);
24    // ...
25    std::uint32_t i = F1();
26
27    if (i &lt; 10)
28    {
29      throw std::logic_error("Logic Error 2"); // Non-compliant - exits from
30      // fBad() without cleaning-up
31      // allocated resources and
32      // causes a memory leak
33    }
34
35    else if (i &lt; 20)
36    {
37      throw std::runtime_error("Runtime Error 3"); // Non-compliant - exits
38      // from fBad() without
39      // cleaning-up allocated
40      // resources and causes a
41      // memory leak
42    }
43
44    // ...
45    delete x; // Deallocates claimed resource only in the end of fBad() scope
46  }
47  void FGood() noexcept(false)
48  {
49    std::int32_t* y = new std::int32_t(0);
50    // ...
51    std::uint32_t i = F1();
52
53    if (i &lt; 10)
54    {
55      delete y; // Deletes allocated resource before throwing an exception
56      throw std::logic_error("Logic Error 4"); // Compliant - deleting y
57      // variable before exception
58      // leaves the fGood() scope
59    }
60
61    else if (i &lt; 20)
62    {
63      delete y; // Deletes allocated resource before throwing an exception
64      throw std::runtime_error("Runtime Error 5"); // Compliant - deleting y
65      // variable before
66      // exception leaves the
67      // fGood() scope
68    }
69
70    else if (i &lt; 30)
71    {
72      delete y; // Deletes allocated resource before throwing an exception
73      // again, difficult to maintain
74      throw std::invalid_argument(
75      "Invalid Argument 1"); // Compliant - deleting
76      // y variable before
77      // exception leaves the
78      // fGood() scope
79    }
80
81    // ...
82    delete y; // Deallocates claimed resource also in the end of fGood() scope
83  }
84  void FBest() noexcept(false)
85  {
86    std::unique_ptr&lt;std::int32_t&gt; z = std::make_unique&lt;std::int32_t&gt;(0);
87    // ...
88    std::uint32_t i = F1();
89
90    if (i &lt; 10)
91    {
92      throw std::logic_error("Logic Error 6"); // Compliant - leaving the
93      // fBest() scope causes
94      // deallocation of all
95      // automatic variables, unique_ptrs, too
96    }
97
98    else if (i &lt; 20)
99    {
100     throw std::runtime_error("Runtime Error 3"); // Compliant - leaving the
101     // fBest() scope causes
102     // deallocation of all
103     // automatic variables,
104     // unique_ptrs, too
105   }
106
107   else if (i &lt; 30)
108   {
109     throw std::invalid_argument(
110     "Invalid Argument 2"); // Compliant - leaving the fBest() scope
111     // causes deallocation of all automatic
112     // variables, unique_ptrs,
113     // too
114   }
115
116   // ...
117   // z is deallocated automatically here, too
118 }
119 class CRaii // Simple class that follows RAII pattern
120 {
121 public:
122   CRaii(std::int32_t* pointer) noexcept : x(pointer) {}
123   ~CRaii()
124   {
125     delete x;
126     x = nullptr;
127   }
128
129 private:
130   std::int32_t* x;
131 };
132 void FBest2() noexcept(false)
133 {
134   CRaii a1(new std::int32_t(10));
135   // ...
136   std::uint32_t i = F1();
137
138   if (i &lt; 10)
139   {
140     throw std::logic_error("Logic Error 7"); // Compliant - leaving the
141     // fBest2() scope causes a1
142     // variable deallocation
143     // automatically
144   }
145   else if (i &lt; 20)
146   {
147     throw std::runtime_error("Runtime Error 4"); // Compliant - leaving the
148     // fBest2() scope causes
149     // a1 variable
150     // deallocation
151     // automatically
152   }
153   else if (i &lt; 30)
154   {
155     throw std::invalid_argument(
156     "Invalid Argument 3"); // Compliant - leaving the fBest2() scope
157     // causes a1 variable deallocation
158     // automatically
159   }
160
161   // ...
162   // a1 is deallocated automatically here, too
163 }
</code></pre>
"""


def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'throw', file.contents()):
        return
    lexer = None
    funcRefs = file.filerefs('Define', 'Function')
    needToDelete = []

    for funcRef in funcRefs:
        needToDelete.clear()
        defRefs = funcRef.ent().refs('Define')
        for defRef in defRefs:
            # Skip classes since they might have their own destructor
            if defRef.ent().ref('Typed') and defRef.ent().ref('Typed').ent().kind().longname() == 'C Class Type':
                continue
            # Populate the needToDelete list
            if re.search(r'new', str(defRef.ent().value())):
                needToDelete.append(defRef.ent().name())

        if not lexer:
            lexer = file.lexer()
        lexeme = lexer.lexeme(funcRef.line(), funcRef.column())
        # Find bounds of function
        while lexeme and lexeme.text() != '{':
            lexeme = lexeme.next(True, True)
        close = Modules.findClose(lexeme)
        if not close:
            continue

        while lexeme and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.line_begin()) and not lexeme.line_begin() > close.line_begin():
            # For every throw keyword go back and find a delete keyword
            if lexeme.text() == 'throw':
                throwLex = lexeme
                prevLex = lexeme
                prevLex = prevLex.previous(True, True)
                if prevLex.text() == ';':
                    prevLex = prevLex.previous(True, True)
                    while prevLex and not re.search(r'delete|;|}|{', prevLex.text()):
                        prevLex = prevLex.previous(True, True)

                    if prevLex.text() == 'delete':
                        while prevLex and prevLex.text() != ';':
                            # Remove deleted ents from the needToDelete list
                            if prevLex.ent() and prevLex.ent().name() in needToDelete:
                                needToDelete.remove(prevLex.ent().name())
                            prevLex = prevLex.next(True, True)



                for item in needToDelete:
                    check.violation(funcRef.ent(), file, throwLex.line_begin(), throwLex.column_begin(), ERR1, item)

            lexeme = lexeme.next(True, True)
