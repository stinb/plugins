import re

# The ID for the check
def ids():
    return ('A5-1-8', 'CPP_E037')

# The short name of the check
def name(id):
    return {
        'A5-1-8': 'Published Standards/AUTOSAR/Lambda expressions should not be defined inside another lambda expression',
        'CPP_E037': 'All Checks/Language Specific/C and C++/Expressions/Lambda expressions should not be defined inside another lambda expression',
    }[id]


def tags(id):
    return {
        'A5-1-8': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E037': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Lambda expressions should not be defined inside another lambda expression.'

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Defining lambda expressions inside other lambda expressions reduces readability of the code.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A5-1-8.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;cstdint&gt;
3 void Fn1()
4 {
5 std::int16_t x = 0;
6 auto f1 = [&x]() {
7
8 auto f2 = []() {}; // Non-compliant
9 f2();
10
11 auto f4 = []() {}; // Non-compliant
12 f4();
13
14 }; // Non-compliant
15
16 f1();
17 }
18 void Fn2()
19 {
20 auto f5 = []() {
21 // Implementation
22 }; // Compliant
23 f5();
24 }
</code></pre>
<p><b>See also</b></p>
<p>none
</p>"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for 
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'
	
def check(check, file):
	
	for ref in file.filerefs("Define", "Lambda Function", True) :
		for inref in ref.ent().refs("Define,Call","Function,Object", True):
			if inref.ent() and (inref.ent().type() == "(lambda)" or inref.ent().kindname() == "Lambda Function"):
				check.violation(inref.ent(), file, inref.line(), inref.column(), "Lambda expressions should not be defined inside another lambda expression")
