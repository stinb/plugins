# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-21-2021
import re

ERR1 = """\
The value given to std::move was not an rvalue reference"""

ERR2 = """\
The value given to std::forward was not a forwarding reference"""

def ids():
    return ('A18-9-2', 'CPP_L024')

def name(id):
    return {
        'A18-9-2': """\
Published Standards/AUTOSAR/Forwarding values to other functions shall be done \
via: (1) std::move if the value is an rvalue reference, (2) std::forward if the \
value is forwarding reference""",
        'CPP_L024': """\
All Checks/Language Specific/C and C++/Libraries/Forwarding values to other \
functions shall be done via: (1) std::move if the value is an rvalue reference, \
(2) std::forward if the value is forwarding reference"""
    }[id]



def tags(id):
    return {
        'A18-9-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Libraries',
        ],
        'CPP_L024': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>The std::move function unconditionally casts an rvalue reference to rvalue,
while the std::forward function does the same if and only if the argument was
initialized with an rvalue. Both functions should be used as follows:</p>
<ul><li>std::move should be used for forwarding rvalue references to other
functions, as rvalue reference always bounds to rvalue</li>
<li>std::forward should be used for forwarding forwarding references to other
functions, as forwarding reference might be bound to lvalue or rvalue</li></ul>
<p>Note that parameter of type “auto&&” is also considered as a forwarding
reference for the purpose of this rule.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A18-9-2.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;string&gt;
#include &lt;utility&gt;
class A
{
public:
  explicit A(std::string&& s)
  : str(std::move(s)) // Compliant - forwarding rvalue reference
  {
  }

private:
  std::string str;
};
class B
{
};
void Fn1(const B& lval)
{
}
void Fn1(B&& rval)
{
}
template &lt;typename T&gt;
void Fn2(T&& param)
{
  Fn1(std::forward&lt;T&gt;(param)); // Compliant - forwarding forwarding reference
}
template &lt;typename T&gt;
void Fn3(T&& param)
{
  Fn1(std::move(param)); // Non-compliant - forwarding forwarding reference
  // via std::move
}
void Fn4() noexcept
{
  B b1;
  B& b2 = b1;
  Fn2(b2); // fn1(const B&) is called
  Fn2(std::move(b1)); // fn1(B&&) is called
  Fn3(b2); // fn1(B&&) is called
  Fn3(std::move(b1)); // fn1(B&&) is called
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer()

    if not lexer:
        return

    lexemes = lexer.lexemes()

    for lexeme in lexemes:
        if lexeme.text() == 'move' and lexeme.ent() and re.search(r'std::(__1::)?move', lexeme.ent().longname()):
            if lexeme.next(True, True).text() == '(':
                lexeme = lexeme.next(True, True).next(True, True)

                if lexeme.ent() and re.search(r'\&\&', str(lexeme.ent().type())):
                        if findKind(lexeme.ent(), lexer) == 'forward':
                            check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR1)




        if lexeme.text() == 'forward' and lexeme.ent() and re.search(r'std::(__1::)?forward', lexeme.ent().longname()):
            if lexeme.next(True, True).text() == '(':
                lexeme = lexeme.next(True, True).next(True, True)

                if lexeme.ent() and re.search(r'\&\&', str(lexeme.ent().type())):
                        if findKind(lexeme.ent(), lexer) == 'move':
                            check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR2)



# Check wheter the kind matches the std::forward or std::move
def findKind(ent, lexer):
    defRef = ent.ref('Definein')
    if not defRef:
        return None

    lexeme = lexer.lexeme(defRef.line(), defRef.column())

    lexeme = lexeme.previous(True, True)

    if lexeme.text() == '&&':
        lexeme = lexeme.previous(True, True)
        if lexeme.ent() and re.search(r'template', lexeme.ent().kindname().lower()):
            return 'forward'
    return 'move'
