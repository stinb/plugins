# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett


import re


ERR1 = '"defined" preprocessor operator not used in one of the two standard forms'
ERR2 = 'MACRO used as the "defined" preprocessor operator'


def ids():
	return ('M16-1-1', 'MISRA04_19.14', 'MISRA08_16-1-1', 'CPP_PR007', 'MISRA23_19.1.1')


def name(id):
	return {
		'M16-1-1': 'Published Standards/AUTOSAR/The defined preprocessor operator shall only be used in one of the two standard forms',
		'MISRA04_19.14': 'Published Standards/MISRA-C 2004/19.14 The defined preprocessor operator shall only be used in one of the two standard forms',
		'MISRA08_16-1-1': 'Published Standards/MISRA-C++ 2008/16-1-1 The defined preprocessor operator shall only be used in one of the two standard forms',
		'CPP_PR007': 'All Checks/Language Specific/C and C++/Preprocessor/The defined preprocessor operator shall only be used in one of the two standard forms',
		'MISRA23_19.1.1': 'Published Standards/MISRA C++ 2023/19.1.1 The defined preprocessor operator shall be used appropriately',
	}[id]





def tags(id):
    return {
        'MISRA08_16-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Preprocessor',
        ],
        'MISRA04_19.14': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Preprocessor',
        ],
        'M16-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR007': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
		'MISRA23_19.1.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Preprocessor',
        ],
    }.get(id)

def description():
	return 'The defined preprocessor operator shall only be used in one of the two standard forms.'


def detailed_description(id):
	if id == 'MISRA23_19.1.1':
		return '''
<p><b>Amplification</b></p>
<p>The only two forms for the defined preprocessor operator that are permitted by the C++ Standard
are: </p>

<p>
<i>defined</i> <i>(</i> identifier <i>)</i>
</p>

<p>
<i>defined</i> identifier
</p>

<p>Generation of the token defined during expansion of a macro within a #if or #elif preprocessing
directive is not permitted.</p>

<p><b>Rationale</b></p>
<p>Violation of this rule results in undefined behaviour.</p>

<p><b>Example</b></p>
<pre><code language="C++">#if defined 1 // Non-compliant - 1 is not an
 // identifier
#define FEATURE(x) defined(x) && ( x != 0 )
#if FEATURE(X) // Non-compliant - defined resulting
 // from expansion
#if defined(x) && ( x != 0 ) // Compliant
</code></pre>
		'''

	return '''\

<p>
<p><b>Rationale</b></p>
</p>

<p>
The only two permissible forms for the defined preprocessor operator are:
</p>

<p>
<i>defined</i> <i>(</i> identifier <i>)</i>
</p>

<p>
<i>defined</i> identifier
</p>

<p>
Any other form leads to undefined behaviour, for example:
</p>

<p>
<p><b>Example</b></p>
</p>

<pre><code language="C++">#if defined ( X &gt; Y ) // Non-compliant â€“ constraint violation
</code></pre>

<p>
Generation of the token defined during expansion of a #if or #elif preprocessing directive also
leads to undefined behaviour and shall be avoided, for example:
</p>

<pre><code language="C++">#define DEFINED defined
#if DEFINED(X) // Non-compliant - undefined behaviour
</code></pre>
'''


def test_language(language):
	return language == 'C++'


def test_entity(file):
	return file.kind().check('header file, code file')


def test_global():
	return False


# This function takes a MACRO reference and returns that entities base MACRO type
def getBaseMacroType(macro):

	# Pull parameter and make temporary copy
	baseMacro = macro
	seen = {}
	seen[baseMacro.ent().id()] = True

	# Keep pulling parent MACRO definition until we find the base MACRO
	while baseMacro.ent().ref('C Use Macrodefine'):
		baseMacro = baseMacro.ent().ref('C Use Macrodefine')
		if baseMacro.ent().id() in seen:
			return baseMacro
		seen[baseMacro.ent().id()] = True

	# Return the base MACRO back
	return baseMacro


# This function examines the usage of defined for compliance
def checkDefined(file, check, lexeme):

	# Pull argument and move foreward one
	lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
	if lexeme.text() == '(':
		lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

	prevUseful = lexeme.previous(ignore_whitespace=True, ignore_comments=True).text()
	nextUseful = lexeme.next(ignore_whitespace=True, ignore_comments=True).text()
	if (prevUseful == '(' and nextUseful == ')') or (prevUseful == 'defined' and lexeme.token() == 'Identifier'):
		return
	
	check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)


def check(check, file):
	macros_with_def = []

	# Pull all MACROs defined in this file and check to see if they're use improperly
	macrosDefined = file.filerefs('Define', 'Macro', True)
	for macro in macrosDefined:
		baseMacro = getBaseMacroType(macro)
		if baseMacro.ent().type() and "defined" in baseMacro.ent().type():
			macros_with_def.append(macro.ent().id())			

	# This check requires use of the Understand lexer. Initialize and check for failure
	lexer = file.lexer()
	if not lexer:
		return
	
	# $lexeme is intialized as the first element returned from the lexer
	lexeme = lexer.first()

	# While the lexer has lexemes ...
	while lexeme:

		if lexeme.token() == 'Preprocessor' and lexeme.text() == 'defined':
			checkDefined(file, check, lexeme)
		elif lexeme.token() == 'Preprocessor' and lexeme.text() in ["if", "elif"]:
			next_lex = lexeme.next(True, True)

			if next_lex.ent() and next_lex.ent().id() in macros_with_def:
				check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
		
		lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
