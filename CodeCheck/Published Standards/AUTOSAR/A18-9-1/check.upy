import re

BIND_FUNC = "bind"
DEF_NAME = "The std::bind shall not be used"

# The ID for the check
def ids():
    return ('A18-9-1', 'CPP_L025')

# The short name of the check
def name(id):
    return {
        'A18-9-1': """\
Published Standards/AUTOSAR/""" + DEF_NAME,
        'CPP_L025': """\
All Checks/Language Specific/C and C++/Libraries/""" + DEF_NAME
    }[id]



def tags(id):
    return {
        'A18-9-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Libraries',
        ],
        'CPP_L025': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Using the std::bind function makes the function call less readable and may lead to the developer confusing one function parameter with another. Also, compilers are less likely to inline the functions that are created using std::bind.</p>
<p>It is recommended to use lambda expressions instead.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A18-9-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;functional&gt;
class A
{
// Implementation
};
void Fn(A const& a, double y) noexcept
{
// Implementation
}
void F1() noexcept
{
double y = 0.0;
auto function = std::bind(&Fn, std::placeholders::_1, y); // Non-compliant
// ...
A const a{};
function(a);
}
void F2() noexcept
{
auto lambda = [](A const& a) -&gt; void {
double y = 0.0;
Fn(a, y);
}; // Compliant
// ...
A const a{};
lambda(a);
}
</code></pre>
<p><b>See also</b></p>
<p>Effective Modern C++ [13]: Item 34: Prefer lambdas to std::bind
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    for ref in file.filerefs("Call","Function", True):
        if ref.ent().name() == BIND_FUNC:
            check.violation(None, file, ref.line(), ref.column(), DEF_NAME)
