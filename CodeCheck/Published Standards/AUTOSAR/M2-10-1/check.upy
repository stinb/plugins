# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

import re

ERR1 = 'Identifier is typographically ambiguous to '

def ids():
    return ('M2-10-1', 'MISRA08_2-10-1', 'MISRA12_DIR_4.5', 'CPP_I001', 'MISRA23_DIR_4.5')

def name(id):
    return {
        'M2-10-1': 'Published Standards/AUTOSAR/Different identifiers shall be typographically unambiguous',
        'MISRA08_2-10-1': 'Published Standards/MISRA-C++ 2008/2-10-1 Different identifiers shall be typographically unambiguous',
        'MISRA12_DIR_4.5': 'Published Standards/MISRA C 2012/Directive 4.5 Identifiers in the same name space with overlapping visibility should be typographically unambiguous',
        'CPP_I001': 'All Checks/Language Specific/C and C++/Identifiers/Different identifiers shall be typographically unambiguous',
        'MISRA23_DIR_4.5': 'Published Standards/MISRA C 2023/Directive 4.5 Identifiers in the same name space with overlapping visibility should be typographically unambiguous',
    }[id]



def tags(id):
    return {
        'MISRA08_2-10-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Identifiers',
        ],
        'M2-10-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Identifiers',
        ],
        'MISRA12_DIR_4.5': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Identifiers',
        ],
        'CPP_I001': [
            'Language: C',
            'Language: C++',
            'Identifiers',
        ],
        'MISRA23_DIR_4.5': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Identifiers',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'M2-10-1': '''\
<p><b>Rationale</b></p>
Depending on the font used to display the character set, it is possible for certain glyphs to appear
the same, even though the characters are different. This may lead to the developer confusing an
identifier with another one.
</p>

<p>To help reduce the chance of this, identifiers shall not differ by any combination of:<br>
• Only a mixture of case;<br>
• The presence or absence of the underscore character;<br>
• The interchange of the letter "O", and the number "0";<br>
• The interchange of the letter "I", and the number "1";<br>
• The interchange of the letter "I", and the letter "l" (el);<br>
• The interchange of the letter "l" (el), and the number "1";<br>
• The interchange of the letter "S" and the number "5";<br>
• The interchange of the letter "Z" and the number "2";<br>
• The interchange of the letter "n" and the letter "h";<br>
• The interchange of the letter "B" and the number "8";<br>
• The interchange of the letter sequence "rn" ("r" followed by "n") with the letter "m".
</p>

<p><b>Example</b></p>
<pre><code language="C++">int32_t id1_a_b_c;
int32_t id1_abc;  // Non-compliant
int32_t id2_abc;  // Non-compliant
int32_t id2_ABC;  // Non-compliant
int32_t id3_a_bc;
int32_t id3_ab_c; // Non-compliant
int32_t id4_a_bc;
int32_t id4_ab_c; // Non-compliant
int32_t id5_ii;
int32_t id5_11;   // Non-compliant
int32_t id6_i0;
int32_t id6_1O;   // Non-compliant
int32_t id7_in;
int32_t id7_1h;   // Non-compliant
int32_t id8_Z5;
int32_t id8_2S;   // Non-compliant
int32_t id9_ZS;
int32_t id9_25;   // Non-compliant
</code></pre>
''',
        'MISRA08_2-10-1': '''\
<p><b>Rationale</b></p>
Depending on the font used to display the character set, it is possible for certain glyphs to appear
the same, even though the characters are different. This may lead to the developer confusing an
identifier with another one.
</p>

<p>To help reduce the chance of this, identifiers shall not differ by any combination of:<br>
• Only a mixture of case;<br>
• The presence or absence of the underscore character;<br>
• The interchange of the letter "O", and the number "0";<br>
• The interchange of the letter "I", and the number "1";<br>
• The interchange of the letter "I", and the letter "l" (el);<br>
• The interchange of the letter "l" (el), and the number "1";<br>
• The interchange of the letter "S" and the number "5";<br>
• The interchange of the letter "Z" and the number "2";<br>
• The interchange of the letter "n" and the letter "h";<br>
• The interchange of the letter "B" and the number "8";<br>
• The interchange of the letter sequence "rn" ("r" followed by "n") with the letter "m".
</p>

<p><b>Example</b></p>
<pre><code language="C++">int32_t id1_a_b_c;
int32_t id1_abc;  // Non-compliant
int32_t id2_abc;  // Non-compliant
int32_t id2_ABC;  // Non-compliant
int32_t id3_a_bc;
int32_t id3_ab_c; // Non-compliant
int32_t id4_a_bc;
int32_t id4_ab_c; // Non-compliant
int32_t id5_ii;
int32_t id5_11;   // Non-compliant
int32_t id6_i0;
int32_t id6_1O;   // Non-compliant
int32_t id7_in;
int32_t id7_1h;   // Non-compliant
int32_t id8_Z5;
int32_t id8_2S;   // Non-compliant
int32_t id9_ZS;
int32_t id9_25;   // Non-compliant
</code></pre>
''',
        'MISRA12_DIR_4.5': '''\
<p><b>Amplification</b></p>
The definition of the term "unambiguous" should be determined for a project taking into account the alphabet and language in which the source code is being written.
</p>

<p>
For the Latin alphabet as used in English words, it is advised as a minimum that identifiers should not differ by any combination of:<br>
 • The interchange of a lowercase character with its uppercase equivalent;<br>
 • The presence or absence of the underscore character;<br>
 • The interchange of the letter "O", and the digit "0";<br>
 • The interchange of the letter "I", and the digit "1";<br>
 • The interchange of the letter "I", and the letter "l" (el);
 • The interchange of the letter "l" (el), and the digit "1";<br>
 • The interchange of the letter "S", and the digit "5";<br>
 • The interchange of the letter "Z", and the digit "2";<br>
 • The interchange of the letter "n", and the letter "h";<br>
 • The interchange of the letter "B", and the digit "8";<br>
 • The interchange of the letter sequence "rn" ("r" followed by "n"), and the letter "m";
</p>

<p><b>Rationale</b></p>
Depending upon the font used to display the character set, it is possible for certain glyphs to appear the same, even though the characters are different. This may lead to the developer confusing an identifier with another one.
</p>

<p><b>Example</b></p>
The following examples assume the interpretation suggested in the Amplification for the Latin alphabet and English language.
</p>

<pre><code language="C++">int32_t id1_a_b_c;
int32_t id1_abc;  /* Non-compliant */
int32_t id2_abc;
int32_t id2_ABC;  /* Non- compliant */
int32_t id3_a_bc;
int32_t id3_ab_c; /* Non-compliant */
int32_t id4_I;
int32_t id4_1;    /* Non-compliant */
int32_t id5_Z;
int32_t id5_2;    /* Non-compliant */
int32_t id6_O;
int32_t id6_0;    /* Non-compliant */
int32_t id7_B;
int32_t id7_8;    /* Non-compliant */
int32_t id8_rn;
int32_t id8_m;    /* Non-compliant */
int32_t id9_rn;
struct
{
  int32_t id9_m;  /* Compliant */
};
</code></pre>
''',
        'CPP_I001': '''\
<p><b>Rationale</b></p>
Depending on the font used to display the character set, it is possible for certain glyphs to appear
the same, even though the characters are different. This may lead to the developer confusing an
identifier with another one.
</p>

<p>To help reduce the chance of this, identifiers shall not differ by any combination of:<br>
• Only a mixture of case;<br>
• The presence or absence of the underscore character;<br>
• The interchange of the letter "O", and the number "0";<br>
• The interchange of the letter "I", and the number "1";<br>
• The interchange of the letter "I", and the letter "l" (el);<br>
• The interchange of the letter "l" (el), and the number "1";<br>
• The interchange of the letter "S" and the number "5";<br>
• The interchange of the letter "Z" and the number "2";<br>
• The interchange of the letter "n" and the letter "h";<br>
• The interchange of the letter "B" and the number "8";<br>
• The interchange of the letter sequence "rn" ("r" followed by "n") with the letter "m".
</p>

<p><b>Example</b></p>
<pre><code language="C++">int32_t id1_a_b_c;
int32_t id1_abc;  // Non-compliant
int32_t id2_abc;  // Non-compliant
int32_t id2_ABC;  // Non-compliant
int32_t id3_a_bc;
int32_t id3_ab_c; // Non-compliant
int32_t id4_a_bc;
int32_t id4_ab_c; // Non-compliant
int32_t id5_ii;
int32_t id5_11;   // Non-compliant
int32_t id6_i0;
int32_t id6_1O;   // Non-compliant
int32_t id7_in;
int32_t id7_1h;   // Non-compliant
int32_t id8_Z5;
int32_t id8_2S;   // Non-compliant
int32_t id9_ZS;
int32_t id9_25;   // Non-compliant
</code></pre>
''',
        'MISRA23_DIR_4.5': '''\
<p><b>Amplification</b></p>
The definition of the term "unambiguous" should be determined for a project taking into account the alphabet and language in which the source code is being written.
</p>

<p>
For the Latin alphabet as used in English words, it is advised as a minimum that identifiers should not differ by any combination of:<br>
 • The interchange of a lowercase character with its uppercase equivalent;<br>
 • The presence or absence of the underscore character;<br>
 • The interchange of the letter "O", and the digit "0";<br>
 • The interchange of the letter "I", and the digit "1";<br>
 • The interchange of the letter "I", and the letter "l" (el);
 • The interchange of the letter "l" (el), and the digit "1";<br>
 • The interchange of the letter "S", and the digit "5";<br>
 • The interchange of the letter "Z", and the digit "2";<br>
 • The interchange of the letter "n", and the letter "h";<br>
 • The interchange of the letter "B", and the digit "8";<br>
 • The interchange of the letter sequence "rn" ("r" followed by "n"), and the letter "m";
</p>

<p><b>Rationale</b></p>
Depending upon the font used to display the character set, it is possible for certain glyphs to appear the same, even though the characters are different. This may lead to the developer confusing an identifier with another one.
</p>

<p><b>Example</b></p>
The following examples assume the interpretation suggested in the Amplification for the Latin alphabet and English language.
</p>

<pre><code language="C++">int32_t id1_a_b_c;
int32_t id1_abc;  /* Non-compliant */
int32_t id2_abc;
int32_t id2_ABC;  /* Non- compliant */
int32_t id3_a_bc;
int32_t id3_ab_c; /* Non-compliant */
int32_t id4_I;
int32_t id4_1;    /* Non-compliant */
int32_t id5_Z;
int32_t id5_2;    /* Non-compliant */
int32_t id6_O;
int32_t id6_0;    /* Non-compliant */
int32_t id7_B;
int32_t id7_8;    /* Non-compliant */
int32_t id8_rn;
int32_t id8_m;    /* Non-compliant */
int32_t id9_rn;
struct
{
  int32_t id9_m;  /* Compliant */
};
</code></pre>
''',
    }[id]

def test_language(language):
    return language == 'C++'

def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return True

def check(check):
    # Create our list of entities to be tested
    entities = check.db().ents('c')
    selectedFiles = []
    for f in check.files():
        selectedFiles.append(f.longname())

    # Initialize hash for data tracking
    amb = {}

    # Loop through each object
    for ent in entities:
        name = ent.name()
        if re.match(r'^__.*$', name):
            continue
        if re.match(r'^_[A-Z]{1}.*$', name):
            continue
        # Replace l (el) with 1
        name = name.replace('l', '1')
        # Replace rn with m
        name = name.replace('rn', 'm')
        # Replace n with h
        name = name.replace('n', 'h')
        # Replace any lower case with upper case
        name = name.upper()
        # Remove any _ from the name
        name = name.replace('_', '')
        # Replace O with 0
        name = name.replace('O', '0')
        # Replace I with 1
        name = name.replace('I', '1')
        # Replace S with 5
        name = name.replace('S', '5')
        # Replace Z with 2
        name = name.replace('Z', '2')
        # Replace 8 with B
        name = name.replace('8', 'B')

        if name in amb:
            trueName = ent.name()
            checkedNameEnt = amb[name]  # Get the entity, not just the name
            ref = ent.ref()
            if trueName != checkedNameEnt.name():
                # Check if parents are the same
                if ent.parent() == checkedNameEnt.parent():
                    if ref.file().longname() in selectedFiles:
                        check.violation(ent, ref.file(), ref.line(), ref.column(), ERR1 + checkedNameEnt.name())

        else:
            amb[name] = ent  # Store the entity, not just the name