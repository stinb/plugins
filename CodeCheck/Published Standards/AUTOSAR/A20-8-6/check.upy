# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 8-24-2021
import re

ERR1 = 'std::make_shared was not used to construct std::shared_ptr %1'

def ids():
    return ('A20-8-6', 'CPP_P035')

def name(id):
    return {
        'A20-8-6': """\
Published Standards/AUTOSAR/std::make_shared shall be used to construct objects \
owned by std::shared_ptr""",
        'CPP_P035': """\
All Checks/Language Specific/C and C++/Pointers/std::make_shared shall be used \
to construct objects owned by std::shared_ptr"""
    }[id]



def tags(id):
    return {
        'A20-8-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Pointers',
        ],
        'CPP_P035': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>std::shared_ptr manages two entities: a control block (for meta data such as
reference counter or type-erased deleter) and an allocated object. Using
std::make_shared typically performs a single heap allocation (as it is
recommended by the Standard) for both control block and allocated object.
std::make_shared function also provides object allocation without explicit call
of new function, see A18-5-2. It also ensures exception safety and prevents from
memory leaks caused by unspecified-evaluationorder expressions.</p>
<p><b>Exception</b></p>
<p>It is allowed to use explicit new function call to create an instance of
std::shared_ptr, if it requires a custom deleter. It is also allowed to
construct objects owned by std::shared_ptr using std::allocate_shared.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A20-8-6.cpp 308507 2018-02-21 13:23:57Z michal.szczepankiewicz $
#include &lt;memory&gt;
#include &lt;cstdint&gt;
#include &lt;functional&gt;

struct A
{
A() { throw std::runtime_error("example"); }
A(std::uint8_t xx, std::uint8_t yy) : x(xx), y(yy) {}
std::uint8_t x;
std::uint8_t y;
};

void Foo(std::shared_ptr&lt;A&gt; a, std::shared_ptr&lt;A&gt; b) { }

int main(void)
{
//compliant
std::shared_ptr&lt;A&gt; upA = std::make_shared&lt;A&gt;(4,6);
//non-compliant
std::shared_ptr&lt;A&gt; upA2 = std::shared_ptr&lt;A&gt;(new A(5,7));

//non-compliant, potential memory leak, as A class constructor throws
Foo(std::shared_ptr&lt;A&gt;(new A()), std::shared_ptr&lt;A&gt;(new A()));
//non-compliant, potential memory leak, as A class constructor throws
Foo(std::make_shared&lt;A&gt;(4,6), std::shared_ptr&lt;A&gt;(new A()));
//compliant, no memory leaks
Foo(std::make_shared&lt;A&gt;(4,6), std::make_shared&lt;A&gt;(4,6));

//compliant by exception
std::shared_ptr&lt;A&gt; ptr(new A(4,5), [](A* b) { delete b; } );

return 0;
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    refs = file.filerefs('Define', 'Object')
    lexer = None

    for ref in refs:
        if re.match('__', ref.ent().name()):
            continue
        # Skip if not a shared_ptr
        if not re.search(r'shared_ptr', str(ref.ent().freetext('UnderlyingType'))):
            continue

        # Skip if the value isn't' known
        if not ref.ent().value():
            continue

        # Skip if reference
        if re.search(r'&', ref.ent().freetext('UnderlyingType')):
            continue

        # Skip if the exception is found
        if re.search(r'^new', ref.ent().value()) and re.search(r'delete', ref.ent().value()):
            continue

        # Check for vector declaration
        if re.match(r'std::vector', str(ref.ent().type())):
            if not lexer:
                lexer = file.lexer()
            lexeme = lexer.lexeme(ref.line(), ref.column())
            equals = False
            new = False
            delete = False
            makeShared = False
            # Go through whole statement
            while lexeme and lexeme.text() not in [';', '{', '}']:
                if lexeme.text() == '=':
                    equals = True
                if lexeme.text() == 'new':
                    new = True
                    break
                if lexeme.text() == 'delete':
                    delete = True
                    break
                if lexeme.text() == 'make_shared':
                    makeShared = True
                    break
                lexeme = lexeme.next(True, True)
                # Flag if no make_shared and  no new or delete
            if not makeShared and equals and not (new or delete):
                check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())
                

            # Check for sets (vector[x] = ...)
            setRefs = ref.ent().refs('Set')
            for setRef in setRefs:
                lexeme = lexer.lexeme(setRef.line(), setRef.column())
                bracket = False
                equals = False
                new = False
                delete = False
                makeShared = False
                # Go through whole statement
                while lexeme and lexeme.text() not in [';', '{', '}']:
                    if lexeme.text() == '[':
                        bracket = True
                    if lexeme.text() == '=' and not bracket:
                        break
                    elif lexeme.text() == '=':
                        equals = True
                    if lexeme.text() == 'new':
                        new = True
                        break
                    if lexeme.text() == 'delete':
                        delete = True
                        break
                    if lexeme.text() == 'make_shared':
                        makeShared = True
                        break
                    lexeme = lexeme.next(True, True)
                # Flag if no make_shared, no new or delete, and no equals
                if not makeShared and equals and not (new or delete):
                    check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())


                
        # Throw violation if it isn't created with the make_shared keyword
        elif not re.search(r'make_shared', ref.ent().value()):
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, ref.ent().name())
