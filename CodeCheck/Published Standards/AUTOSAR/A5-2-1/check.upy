import re

ERR1 = 'dynamic_cast is used'


# The ID for the check
def ids():
    return ('A5-2-1', 'CPP_E040')


# The short name of the check
def name(id):
    return {
        'A5-2-1': 'Published Standards/AUTOSAR/dynamic_cast should not be used',
        'CPP_E040': 'All Checks/Language Specific/C and C++/Expressions/dynamic_cast should not be used',
    }[id]



def tags(id):
    return {
        'A5-2-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E040': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Implementations of dynamic_cast mechanism are unsuitable for use with real-time
systems where low memory usage and determined performance are essential.</p>
<p>If dynamic casting is essential for your program, usage of its custom implementation
should be considered. Also, usage of the dynamic_cast can be replaced with
polymorphism, i.e. virtual functions.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A5-2-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 class A
3 {
4 public:
5 virtual void F() noexcept;
6 };
7 class B : public A
8 {
9 public:
10 void F() noexcept override {}
11 };
12 void Fn(A* aptr) noexcept
13 {
14 // ...
15 B* bptr = dynamic_cast&lt;B*&gt;(aptr); // Non-compliant
16
17 if (bptr != nullptr)
18 {
19 // Use B class interface
20 }
21 else
22 {
23 // Use A class interface
24 }
25 }
</code></pre>
<p><b>See also</b></p>
<p>• JSF December 2005 [8]: AV Rule 178: Down casting (casting from base to
derived class) shall only be allowed through one of the following mechanism:
Virtual functions that act like dynamic casts (most likely useful in relatively simple
cases); Use of the visitor (or similar) pattern (most likely useful in complicated
cases).</p>
<p>• C++ Core Guidelines [11]: C.146: Use dynamic_cast where class hierarchy
navigation is unavoidable.</p>
<p>• Journal of Computing Science and Engineering, Damian Dechev, Rabi
Mahapatra, Bjarne Stroustrup: Practical and Verifiable C++ Dynamic Cast for
Hard Real-Time Systems.</p>
<p>• Software-Practice and Experience, Michael Gibbs and Bjarne Stroustrup: Fast
dynamic casting.</p>
"""



# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"dynamic_cast", file.contents()):
        return

    for lex in file.lexer():
        if lex.text() == "dynamic_cast" and lex.token() == "Keyword":
            check.violation(lex.ent(), file, lex.line_begin(),
                            lex.column_begin(), ERR1)
