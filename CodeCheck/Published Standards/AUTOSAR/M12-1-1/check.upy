# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 10-13-21


import re


ERR1 = '%1\'s dynamic type used in the call to typeid'
ERR2 = '%1 makes a call to a virtual function using its dynamic type'
ERR3 = '%1\'s dynamic type used in the call to dynamic_cast'
ERR4 = '%1 makes a call to a pure virtual function'


def ids():
    return ('M12-1-1', 'MISRA08_12-1-1', 'CPP_C011', 'MISRA23_15.1.1')


def name(id):
    return {
        'M12-1-1': 'Published Standards/AUTOSAR/An object\'s dynamic type shall not be used from the body of its constructor or destructor', \
        'MISRA08_12-1-1': 'Published Standards/MISRA-C++ 2008/12-1-1 An object\'s dynamic type shall not be used from the body of its constructor or destructor',
        'CPP_C011': 'All Checks/Language Specific/C and C++/Constructors/An object\'s dynamic type shall not be used from the body of its constructor or destructor', \
        'MISRA23_15.1.1': 'Published Standards/MISRA C++ 2023/15.1.1 An object\'s dynamic type shall not be used from within its constructor or destructor',
    }[id] \





def tags(id):
    return {
        'MISRA08_12-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Constructors',
        ],
        'M12-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Constructors',
        ],
        'CPP_C011': [
            'Language: C',
            'Language: C++',
            'Constructors',
        ],
        'MISRA23_15.1.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Constructors',
        ],
    }.get(id)

def description():
    return 'An object\'s dynamic type shall not be used from the body of its constructor or destructor.'


def detailed_description(id):
    if id == 'MISRA23_15.1.1':
        return '''
<p><b>Amplification</b></p>
<p>For the purposes of this rule, the initialization of a non-static data member (including via a default
member initializer) is considered as being part of the constructor.</p>
<p>The dynamic type of an object is used when:</p>
<p>
● A virtual call is made to a virtual function;
</p>

<p>
● typeid is applied to an object with polymorphic class type;
</p>

<p>
● Using dynamic_cast.
</p>

<p><b>Rationale</b></p>
<p>During construction and destruction of an object, its final type may be different to that of the
completely constructed object. The result of using an object's dynamic type in a constructor or
destructor may not be consistent with developer expectations.<p>

<p>This rule also prohibits a virtual call being made to a pure virtual function from within a constructor
or destructor. Such calls result in undefined behaviour.</p>

<p>Additionally, using the dynamic type of the current object through a pointer or reference to a child
class of the current class results in undefined behaviour, and is therefore also prohibited by this rule.</p>

<p><b>Example</b></p>
<pre><code language="C++">class B1
{
public:
 B1()
 {
 typeid( *this ); // Compliant - B1 not polymorphic
 }
};
class B2
{
public:
 virtual ~B2();
 virtual void foo();
 virtual void goo() = 0;
 void bar()
 {
 foo();
 typeid( *this );
 }
 B2()
 {
 typeid( *this ); // Non-compliant
 typeid( B2 ); // Compliant - current object type not used
 B2::foo(); // Compliant - not a virtual call
 foo(); // Non-compliant
 goo(); // Non-compliant - undefined behaviour
 dynamic_cast< B2 * &gt;( this ); // Non-compliant
 bar(); // Non-compliant - indirect call to foo and
 // use of typeid on current object
 }
};
</code></pre>

<p>The following example is non-compliant and has undefined behaviour when a virtual call is made on
the object under construction through an indirect pointer.</p>

<pre><code language="C++">class B4;
class B3
{
public:
 explicit B3( B4 * b );
 virtual ~B3();
 virtual void foo();
};
class B4 : public B3
{
public:
 B4() : B3( this ) { }
};
B3::B3( B4 * b )
{
 foo(); // Non-compliant - calls B3::foo
 this-&gt;foo(); // Non-compliant - calls B3::foo
 b-&gt;foo(); // Non-compliant - undefined behaviour
}
</code></pre>

        '''

    return '''\

<p><b>Rationale</b></p>
During construction and destruction of an object, its final type may be different to that of the
completely constructed object. The result of using an object's dynamic type in a constructor or
destructor may not be consistent with developer expectations.
<p>

<p>
The dynamic type of an object is used in the following constructs:
</p>

<p>
• <i>typeid</i> on a class with a virtual function or a virtual function in a base class.
</p>

<p>
• <i>dynamic_cast</i>
</p>

<p>
• A virtual call to a virtual function.
</p>

<p>
This rule also prohibits a call being made to a <i>pure virtual</i> function from within a constructor or
destructor. Such calls lead to <i>undefined behaviour</i>.
</p>

<p><b>Example</b></p>
<pre><code language="C++">class B1
{

public:
    B1 ( )
    {
        typeid ( B1 );                // Compliant, B1 not polymorphic
    }

};

class B2
{

public:
    virtual ~B2 ( );
    virtual void foo ( );
    B2 ( )
    {
        typeid ( B2 );                // Non-compliant
        B2::foo ( );                  // Compliant – not a virtual call
        foo ( );                      // Non-compliant
        dynamic_cast&lt; B2* &gt; ( this ); // Non-compliant
    }

};

};

</code></pre>

'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    # Pull all the classes that are defined in this file, return if non
    classesDefined = file.filerefs('Define', 'Class', False)
    if not classesDefined:
        return

    # Loop through all defined classes
    for classRef in classesDefined:

        # Pull all the methods defined in the class, move on if none
        methodsDefined = classRef.ent().refs('Define', 'Member Function')
        if not methodsDefined:
            continue

        # Check to see if this class has virtual methods
        hasVirtual = findVirtual(classRef)

        # Loop through each mothod
        for method in methodsDefined:

            # Check to see if we are looking at the constructor or destructor
            if (method.ent().longname() == classRef.ent().name() + '::' + classRef.ent().name() or method.ent().longname() == classRef.ent().name() + '::~' + classRef.ent().name()):

                # Pull any call to virtual functions and any name references
                virtualCalls = method.ent().refs('Call Virtual')
                nameCalls = method.ent().refs('Name')

                # Loop through each virtual calls, if they have a corresponding name reference than that call is ok, throw an error otherwise
                for virtual in virtualCalls:

                    # Check the text arount the virtual call to ensure we are not using another object
                    tempLexeme = file.lexer().lexeme(virtual.line(), virtual.column())
                    # Calling a virtual function via a pointer or object
                    if not tempLexeme:
                        continue
                    prevUseful = tempLexeme.previous(ignore_whitespace=True, ignore_comments=True)
                    if not prevUseful:
                        continue
                    if prevUseful.text() == '->' or prevUseful.text() == '.':
                        prev = prevUseful.previous(True, True)
                        dynamic_obj = False
                            
                        if prev.text() == "this" and prev.token() == "Keyword":
                            dynamic_obj = True
                        elif prev and prev.ent():
                            prev_ent, _ = get_ent_type(prev.ent())
                            
                            if prev_ent.kind().check("Class"):
                                dynamic_obj = True
                        
                        if not dynamic_obj:
                            continue
                    if tempLexeme.token() == 'Keyword':
                        continue

                    # Test if this is a call to a pure virtual function, if so, throw error and move on
                    if re.search('\\bPure\\b', virtual.ent().kindname()):
                        check.violation(virtual.ent(), virtual.file(), virtual.line(), virtual.column(), ERR4, classRef.ent().name())
                        continue

                    # If we see a corresponding name reference for this virtual call reference, we can move on
                    nextMethod = False
                    for name in nameCalls:
                        if name.line() == virtual.line():
                            nextMethod = True
                            break

                    # If we reach this point, then we must have an error
                    if not nextMethod:
                        check.violation(virtual.ent(), virtual.file(), virtual.line(), virtual.column(), ERR2, classRef.ent().name())

                for call_ref in method.ent().refs("Call ~Virtual", "Function"):
                    if call_ref.line() == method.line():
                        continue
                    elif call_ref.ent().ref("Call Virtual"):
                        check.violation(call_ref.ent(), file, call_ref.line(), call_ref.column(), ERR4, call_ref.ent().name())
                        break

                # Pull the end line number and spin up a lexeme
                end = method.ent().ref('End').line()
                lexeme = file.lexer().lexeme(method.line(), method.column())
                typeid_obj = False

                # While we are still inside the constructor or destructor
                while lexeme and lexeme.line_begin() < end:

                    # If we see a call to typeid, throw an error if the class is the arguement and this class has a virtual method
                    if lexeme.text() == 'typeid':

                        if hasVirtual:
                            on_param = 0

                            while lexeme:
                                if lexeme.text() == "(":
                                    on_param += 1
                                elif lexeme.text() == ")":
                                    on_param -= 1

                                    if not on_param:
                                        break
                                elif on_param and lexeme.text() == "this" and lexeme.token() == "Keyword":
                                    check.violation(classRef.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR1, classRef.ent().name())
                                    typeid_obj = True
                                elif on_param and lexeme.text() == classRef.ent().name() and not typeid_obj:
                                    check.violation(classRef.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR1, classRef.ent().name())
                                    typeid_obj = True

                                lexeme = lexeme.next(True, True)

                    # If we see a call to dynamic_cast, throw and error if the class is the arguement
                    elif lexeme.text() == 'dynamic_cast':

                        nextNext =  lexeme.next(ignore_whitespace=True, ignore_comments=True).next(ignore_whitespace=True, ignore_comments=True)
                        if nextNext.text() == classRef.ent().name():
                            check.violation(classRef.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR3, classRef.ent().name())

                    lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)

# This function is used to find a virtual method, or to see if any ancestor has a virtual method
def findVirtual(classRef):
    # Test if this class has a virtual method
    if classRef.ent().refs('Define, Declare', 'Member Function Virtual'):
        return True

    # Find parent classes if they exist, test them
    parentsDefined = classRef.ent().refs('Base')
    for parent in parentsDefined:

        # Recursively test each parent and set the flag if the parent has virtual, ignore otherwise
        if findVirtual(parent):
            return True

    return False


def get_ent_type(entity):
    typed_ref = entity.ref("Typed")

    while typed_ref:
        obj_ent = typed_ref.ent()
        obj_ref_type = obj_ent.type()
        typed_ref = typed_ref.ent().ref("Typed")

        if not typed_ref:
            return obj_ent, obj_ref_type

    return entity, entity.type()