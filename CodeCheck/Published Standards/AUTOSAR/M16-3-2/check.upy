# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12-16-2021
import re

ERR1 = 'The # and ## operators should not be used'

def ids():
    return ('M16-3-2', 'CPP_PR032', 'MISRA04_19.13', 'MISRA08_16-3-2', 'MISRA12_20.10', 'MISRA23_19.3.1', 'MISRA23_20.10')

def name(id):
    return {
        'M16-3-2': """\
Published Standards/AUTOSAR/The # and ## operators should not be used""",
        'CPP_PR032': """\
All Checks/Language Specific/C and C++/Preprocessor/The # and ## operators \
should not be used""",
        'MISRA04_19.13': """\
Published Standards/MISRA-C 2004/19.12 The # and ## operators should not be \
used""",
        'MISRA08_16-3-2': """\
Published Standards/MISRA-C++ 2008/16-3-2 The # and ## operators should not be \
used""",
        'MISRA12_20.10': """\
Published Standards/MISRA C 2012/20.10 The # and ## operators should not be \
used""",
        'MISRA23_19.3.1': """\
Published Standards/MISRA C++ 2023/19.3.1 The # and ## operators should not be \
used""",
        'MISRA23_20.10': """\
Published Standards/MISRA C 2023/20.10 The # and ## operators should not be \
used""",
    }[id]




def tags(id):
    return {
        'MISRA08_16-3-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Advisory',
            'Preprocessor',
        ],
        'MISRA12_20.10': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Preprocessor',
        ],
        'MISRA04_19.13': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Advisory',
            'Preprocessor',
        ],
        'M16-3-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR032': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
        'MISRA23_19.3.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Preprocessor',
        ],
        'MISRA23_20.10': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Preprocessor',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'M16-3-2': """\
<p><b>Rationale</b></p>
<p>The order of evaluation associated with both the # and ## preprocessor
operators is unspecified. Compilers have been known to implement these operators
inconsistently, therefore, to avoid these problems, do not use them.</p>
<p><b>Example</b></p>
<pre><code language="C++">#define A(Y) #Y // Non-compliant
#define A(X,Y) X##Y // Non-compliant
</code></pre>
""",
        'CPP_PR032': """\
<p><b>Rationale</b></p>
<p>The order of evaluation associated with both the # and ## preprocessor
operators is unspecified. Compilers have been known to implement these operators
inconsistently, therefore, to avoid these problems, do not use them.</p>
<p><b>Example</b></p>
<pre><code language="C++">#define A(Y) #Y // Non-compliant
#define A(X,Y) X##Y // Non-compliant
</code></pre>
""",
        'MISRA04_19.13': """\
<p><b>Rationale</b></p>
<p>There is an issue of unspecified order of evaluation associated with the #
and ## preprocessor operators. Compilers have been inconsistent in the
implementation of these operators. To avoid these problems do not use them.</p>
""",
        'MISRA08_16-3-2': """\
<p><b>Rationale</b></p>
<p>The order of evaluation associated with both the # and ## preprocessor
operators is unspecified. Compilers have been known to implement these operators
inconsistently, therefore, to avoid these problems, do not use them.</p>
<p><b>Example</b></p>
<pre><code language="C++">#define A(Y) #Y // Non-compliant
#define A(X,Y) X##Y // Non-compliant
</code></pre>
""",
        'MISRA12_20.10': """\
<p><b>Rationale</b></p>
<p>The order of evaluation associated with multiple #, multiple ## or a mix of #
and ## preprocessor operators is unspecified. In some cases it is therefore not
possible to predict the result of macro expansion.</p>

<p>
The use of the ## operator can result in code that is obscure
</p>

<p>
Note: Rule 1.3 covers the undefined behaviour that arises if either:
</p>

<ul>
<li>
The result of a # operator is not a valid string literal; or
</li>
<li>
The result of a ## operator is not a valid preprocessing token.
</li>
</ul>
""",
        'MISRA23_19.3.1': """\
<p><b>Rationale</b></p>
<p>The order of evaluation associated with multiple #, multiple ## or a mix of #
and ## preprocessor operators is unspecified. In some cases it is therefore not
possible to predict the result of macro expansion.</p>

<p>
The use of the ## operator can result in code that is obscure
</p>

<p>
Note: Rule 4.1.3 covers the undefined behaviour that arises if either:
</p>

<ul>
<li>
The result of a # operator is not a valid string literal; or
</li>
<li>
The result of a ## operator is not a valid preprocessing token.
</li>
</ul>
<p><b>See also</b></p>
<p>Rule 4.1.3, Rule 19.3.2, Rule 19.3.3</p>
""",
        'MISRA23_20.10': """\
<p><b>Rationale</b></p>
<p>The order of evaluation associated with multiple #, multiple ## or a mix of #
and ## preprocessor operators is unspecified. In some cases it is therefore not
possible to predict the result of macro expansion.</p>

<p>
The use of the ## operator can result in code that is obscure
</p>

<p>
Note: Rule 1.3 covers the undefined behaviour that arises if either:
</p>

<ul>
<li>
The result of a # operator is not a valid string literal; or
</li>
<li>
The result of a ## operator is not a valid preprocessing token.
</li>
</ul>
<p><b>See also</b></p>
<p>Rule 20.11</p>
""",
}[id]

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    refs = file.filerefs("Define", "Macro", True)

    for ref in refs:
        if ref.ent() and ref.ent().value():
            if re.search(r'[^#]+#[^#]+', str(ref.ent().value())) or re.search(r'[^#]+##[^#]+', str(ref.ent().value())) or re.search(r'#[^#]+', str(ref.ent().value())) or re.search(r'[^#]+#', str(ref.ent().value())):
                    check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
