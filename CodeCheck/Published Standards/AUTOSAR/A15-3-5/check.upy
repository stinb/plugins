ERR1 = 'Class type exception object is caught by value'


# The ID for the check
def ids():
    return ('A15-3-5', 'CPP_E062', 'MISRA23_18.3.2')

def name(id):
    return {
        'A15-3-5': """\
Published Standards/AUTOSAR/A class type exception shall be caught by reference \
or const reference""",
        'CPP_E062': """\
All Checks/Language Specific/C and C++/Exception Handling/A class type exception \
shall be caught by reference or const reference""",
        'MISRA23_18.3.2': """\
Published Standards/MISRA C++ 2023/18.3.2 An exception of class type shall be caught by const reference or reference""",
    }[id]



def tags(id):
    return {
        'A15-3-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Exception Handling',
        ],
        'CPP_E062': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
        'MISRA23_18.3.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Exception Handling',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'A15-3-5': """\
<p><b>Rule</b></p>
<p>A class type exception shall be caught by reference or const reference.</p>
<p><b>Rationale</b></p>
<p>If a class type exception object is caught by value, slicing occurs. That is, if the
exception object is of a derived class and is caught as the base, only the base class’s
functions (including virtual functions) can be called. Also, any additional member data
in the derived class cannot be accessed. If the exception is caught by reference or
const reference, slicing does not occur.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A15-3-5.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;iostream&gt;
3 #include &lt;stdexcept&gt;
4 class Exception : public std::runtime_error
5 {
6 public:
7 using std::runtime_error::runtime_error;
8 const char* what() const noexcept(true) override
9 {
10 return "Exception error message";
11 }
12 };
13 void Fn()
14 {
15 try
16 {
17 // ...
18 throw std::runtime_error("Error");
19 // ...
20 throw Exception("Error");
21 }
22
23 catch (const std::logic_error& e) // Compliant - caught by const reference
24 {
25 // Handle exception
26 }
27 catch (std::runtime_error& e) // Compliant - caught by reference
28 {
29 std::cout &lt;&lt; e.what() &lt;&lt; "\n"; // "Error" or "Exception error message"
30 // will be printed, depending upon the
31 // actual type of thrown object
32 throw e; // The exception re-thrown is of its original type
33 }
34
35 catch (
36 std::runtime_error
37 e) // Non-compliant - derived types will be caught as the base type
38 {
39 std::cout
40 &lt;&lt; e.what()
41 &lt;&lt; "\n"; // Will always call what() method from std::runtime_error
42 throw e; // The exception re-thrown is of the std::runtime_error type,
43 // not the original exception type
44 }
45 }
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: 15-3-5 A class type exception shall always be caught by
reference.</p>
<p>• SEI CERT C++ [10]: ERR61-CPP. Catch exceptions by lvalue reference</p>""",
        'CPP_E062': """\
<p><b>Rule</b></p>
<p>A class type exception shall be caught by reference or const reference.</p>
<p><b>Rationale</b></p>
<p>If a class type exception object is caught by value, slicing occurs. That is, if the
exception object is of a derived class and is caught as the base, only the base class’s
functions (including virtual functions) can be called. Also, any additional member data
in the derived class cannot be accessed. If the exception is caught by reference or
const reference, slicing does not occur.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A15-3-5.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;iostream&gt;
3 #include &lt;stdexcept&gt;
4 class Exception : public std::runtime_error
5 {
6 public:
7 using std::runtime_error::runtime_error;
8 const char* what() const noexcept(true) override
9 {
10 return "Exception error message";
11 }
12 };
13 void Fn()
14 {
15 try
16 {
17 // ...
18 throw std::runtime_error("Error");
19 // ...
20 throw Exception("Error");
21 }
22
23 catch (const std::logic_error& e) // Compliant - caught by const reference
24 {
25 // Handle exception
26 }
27 catch (std::runtime_error& e) // Compliant - caught by reference
28 {
29 std::cout &lt;&lt; e.what() &lt;&lt; "\n"; // "Error" or "Exception error message"
30 // will be printed, depending upon the
31 // actual type of thrown object
32 throw e; // The exception re-thrown is of its original type
33 }
34
35 catch (
36 std::runtime_error
37 e) // Non-compliant - derived types will be caught as the base type
38 {
39 std::cout
40 &lt;&lt; e.what()
41 &lt;&lt; "\n"; // Will always call what() method from std::runtime_error
42 throw e; // The exception re-thrown is of the std::runtime_error type,
43 // not the original exception type
44 }
45 }
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: 15-3-5 A class type exception shall always be caught by
reference.</p>
<p>• SEI CERT C++ [10]: ERR61-CPP. Catch exceptions by lvalue reference</p>""",
        'MISRA23_18.3.2': """\
<p><b>Rationale</b></p>
<p>Slicing occurs if the exception object is of a derived class and it is caught by value as the base class,
which means that information unique to the derived class’s members is lost. Slicing does not occur
when the exception is caught by reference.</p>
<p>Exception objects may be shared between threads, such as when an exception is thrown from
std::shared_future. In this case, catching by const reference reduces the chance of data races.</p>
<p><b>Example</b></p>
<pre><code language="C++">try
{
 mayThrow();
}
catch ( std::runtime_error e ) // Non-compliant - slicing occurs
{
}
catch ( std::exception const & e ) // Compliant - exception object is complete
{
}
</code></pre>""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(False, 8, False, False)

    if not lexer:
        return

    lex = lexer.first()

    while lex:
        if lex.text() == "catch" and lex.token() == "Keyword":
            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
            in_catch = 1
            compliant = False
            has_identifier = False

            while in_catch:
                lex = lex.next(ignore_whitespace=True,
                               ignore_comments=True)

                if lex.text() == "(":
                    in_catch += 1
                elif in_catch and lex.token() == "Identifier":
                    has_identifier = True
                elif lex.text() == "&" and in_catch == 1:
                    compliant = True
                    break
                elif lex.text() == ")":
                    in_catch -= 1

                    if not in_catch:
                        if has_identifier and not compliant:
                            check.violation(
                                None, file, lex.line_begin(), lex.column_begin(), ERR1)
                        break

        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
