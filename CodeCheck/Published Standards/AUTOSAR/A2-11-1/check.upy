import re

ERR1 = 'Volatile keyword is found'

# The ID for the check
def ids():
    return ('A2-11-1', 'CPP_D036')

# The short name of the check
def name(id):
    return {
        'A2-11-1': 'Published Standards/AUTOSAR/Volatile keyword shall not be used',
        'CPP_D036': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Volatile keyword shall not be used',
    }[id]



def tags(id):
    return {
        'A2-11-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D036': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
The volatile keyword disables compiler optimizations for a particular variable or object's value in case those values may change in ways not specified by the language (e.g. object representing a hardware register). It is error prone and often misused by developers, as they expect this is equal to variable or object's value being atomic.
</p>

<p>
Note: The main intention of this rule is to eliminate incorrect usages of volatile keyword and force developers to precisely document each usage of volatile keyword.
</p>

<p><b>See also</b></p><p>
• JSF December 2005 [8]: AV Rule 205: The volatile keyword shall not be used unless directly interfacing with hardware.<br>
• HIC++ v4.0 [9]: 18.2.3: Do not share volatile data between threads.<br>
• C++ Core Guidelines [11]: CP.8: Don't try to use volatile for synchronization.<br>
• C++ Core Guidelines [11]: CP.200: Use volatile only to talk to non-C++ memory.
</p>
"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    if not re.search(r'volatile', file.contents().lower()):
        return

    lexer = file.lexer(lookup_ents=False)
    if not lexer:
        return

    # check if lexeme text is equal to "volatile" report error if match is found

    lexemes = lexer.lexemes()
    for lexeme in lexemes:
        if lexeme.text() == "volatile" and lexeme.token() == "Keyword":
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
