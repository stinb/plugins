ERR1 = 'Object is assigned to an overlapping object'


# The ID for the check
def ids():
    return ('M0-2-1', 'CPP_T046')

def name(id):
    return {
        'M0-2-1': """\
Published Standards/AUTOSAR/Assigning Object to an Overlapping Object""",
        'CPP_T046': """\
All Checks/Language Specific/C and C++/Types/Assigning Object to an Overlapping Object"""

    }[id]






def tags(id):
    return {
        'M0-2-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T046': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>An object shall not be assigned to an overlapping
object.</p>
<p><b>Rationale</b></p>
<p>Assigning between objects that have an overlap in their physical storage leads to undefined
behaviour.</p>
<p><b>Note</b></p>
<p>This check can only evalute simple assignment expressions.</p>
<p><b>Example</b></p>
<pre><code language="C++">struct s
{
 int16_t m1 [ 32 ];
};
struct t
{
 int32_t m2;
 struct s m3;
};
void fn ( )
{
 union // Breaks Rule 9-5-1
 {
 struct s u1;
 struct t u2;
 } a;
 a.u2.m3 = a.u1; // Non-compliant
}
</code></pre>
<p><b>See also</b></p>
<p>Rule 9-5-1</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    lex = lexer.first()

    for obj_ref in file.filerefs("Assign Value", "Object"):
        if ((obj_ref.ent().type() is not None) and ("struct" in obj_ref.ent().type())):
            lex = lexer.lexeme(obj_ref.line(), obj_ref.column())
            set_struct = 0
            assign_struct = 0
            to_evaluate = True
            on_assign = True

            while lex and lex.line_begin() == obj_ref.line():
                if lex.token() == "Operator":
                    if lex.text() == "." and on_assign:
                        assign_struct += 1
                    elif lex.text() == "." and not on_assign:
                        set_struct += 1
                    elif lex.text() == "=":
                        on_assign = False
                    else:
                        to_evaluate = False
                        break

                lex = lex.previous(ignore_comments=True)

            if to_evaluate and set_struct != assign_struct:
                check.violation(obj_ref.ent(), file,
                                obj_ref.line(), obj_ref.column(), ERR1)
