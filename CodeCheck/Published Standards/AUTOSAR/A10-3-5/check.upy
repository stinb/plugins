import re

ERR1 = 'Assignment operator shall not be virtual'
OPERATOR_NAME = r'operator[\+\-\*/%<=>!&\|~\^]{1,2}'


# The ID for the check
def ids():
    return ('A10-3-5', 'CPP_D056')


# The short name of the check
def name(id):
    return {
        'A10-3-5': 'Published Standards/AUTOSAR/User-defined assignment operator shall not be virtual',
        'CPP_D056': 'All Checks/Language Specific/C and C++/Declarations and Definitions/User-defined assignment operator shall not be virtual',
    }[id]





def tags(id):
    return {
        'A10-3-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_D056': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>If an overloaded operator is declared virtual in a base class A, then in its subclasses
B and C identical arguments list needs to be provided for the overriders. This allows
to call an assignment operator of class B that takes an argument of type C which may
lead to undefined behavior.</p>
<p>Note that this rule applies to all assignment operators, as well to copy and move
assignment operators.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A10-3-4.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
class A
{
public:
virtual A& operator=(A const& oth) = 0; // Non-compliant
virtual A& operator+=(A const& rhs) = 0; // Non-compliant
};
class B : public A
{
public:
B& operator=(A const& oth) override // It needs to take an argument of type
// A& in order to override
{
return *this;
}
B& operator+=(A const& oth) override // It needs to take an argument of
// type A& in order to override
{
return *this;
}
B& operator-=(B const& oth) // Compliant
{
return *this;
}
};
class C : public A
{
public:
C& operator=(A const& oth) override // It needs to take an argument of type
// A& in order to override
{
return *this;
}
C& operator+=(A const& oth) override // It needs to take an argument of
// type A& in order to override
{
return *this;
}
C& operator-=(C const& oth) // Compliant
{
return *this;
}
};
// class D : public A
//{
// public:
// D& operator=(D const& oth) override // Compile time error - this method
// does not override because of different
// signature
// {
// return *this;
// }
// D& operator+=(D const& oth) override // Compile time error - this method
// does not override because of different
// signature
// {
// return *this;
// }
//};
void Fn() noexcept
{
B b;
C c;
b = c; // Calls B::operator= and accepts an argument of type C
b += c; // Calls B::operator+= and accepts an argument of type C
c = b; // Calls C::operator= and accepts an argument of type B
c += b; // Calls C::operator+= and accepts an argument of type B
// b -= c; // Compilation error, because of types mismatch. Expected
// behavior
// c -= b; // Compilation error, because of types mismatch. Expected
// behavior

B b2;
C c2;
b -= b2;
c -= c2;
}
</code></pre>
"""


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(OPERATOR_NAME, file.contents()):
        return

    for ref in file.filerefs("Declare", "Virtual Function"):
        if re.match(OPERATOR_NAME, str(ref.ent())):
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
