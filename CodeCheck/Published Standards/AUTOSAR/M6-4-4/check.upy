# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 1-19-22


import re


ERR1 = 'Switch label not the same scope as other labels'


def ids():
    return ('M6-4-4', 'MISRA08_6-4-4', 'CPP_C030', 'MISRA04_15.1', 'MISRA12_16.2', 'MISRA23_16.2')


def name(id):
    return {
        'M6-4-4': 'Published Standards/AUTOSAR/A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement',
        'MISRA08_6-4-4': 'Published Standards/MISRA-C++ 2008/6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement',
        'CPP_C030': 'All Checks/Language Specific/C and C++/Control Flow/A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement',
        'MISRA04_15.1': 'Published Standards/MISRA-C 2004/15.1 A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement',
        'MISRA12_16.2': 'Published Standards/MISRA C 2012/16.2 A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement',
        'MISRA23_16.2': 'Published Standards/MISRA C 2023/16.2 A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement',
    }[id]





def tags(id):
    return {
        'MISRA08_6-4-4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA12_16.2': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA04_15.1': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: required',
            'Control Flow',
        ],
        'M6-4-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'CPP_C030': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
        'MISRA23_16.2': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Control Flow',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'M6-4-4': '''
<p><b>Rationale</b></p>

<p>
A <i>switch-label</i> can be placed anywhere within the statements that form the body of a <i>switch</i> statement, potentially leading to unstructured code. To prevent this from happening, the scope of a <i>case-label</i> or <i>default-label</i> shall be the compound statement forming the body of a <i>switch</i> statement. All <i>case-clauses</i> and the <i>default-clause</i> shall be at the same scope.
</p>

<p><b>Example</b></p>

<pre><code language="C++">switch ( x )
{
case 1:           // Compliant
    if ( ... )
    {
    case 2:       // Non-compliant
        DoIt ( );
    }
    break;
default:
    break;
}
</code></pre>
''',

        'MISRA08_6-4-4': '''
<p><b>Rationale</b></p>

<p>
A <i>switch-label</i> can be placed anywhere within the statements that form the body of a <i>switch</i> statement, potentially leading to unstructured code. To prevent this from happening, the scope of a <i>case-label</i> or <i>default-label</i> shall be the compound statement forming the body of a <i>switch</i> statement. All <i>case-clauses</i> and the <i>default-clause</i> shall be at the same scope.
</p>

<p><b>Example</b></p>

<pre><code language="C++">switch ( x )
{
case 1:        // Compliant
    if ( ... )
    {
    case 2:    // Non-compliant
        DoIt ( );
    }
    break;
default:
    break;
}
</code></pre>
''',

        'CPP_C030': '''
<p><b>Rationale</b></p>

<p>
A <i>switch-label</i> can be placed anywhere within the statements that form the body of a <i>switch</i> statement, potentially leading to unstructured code. To prevent this from happening, the scope of a <i>case-label</i> or <i>default-label</i> shall be the compound statement forming the body of a <i>switch</i> statement. All <i>case-clauses</i> and the <i>default-clause</i> shall be at the same scope.
</p>

<p><b>Example</b></p>

<pre><code language="C++">switch ( x )
{
case 1:        // Compliant
    if ( ... )
    {
    case 2:    // Non-compliant
        DoIt ( );
    }
    break;
default:
    break;
}
</code></pre>
''',

        'MISRA04_15.1': '''
<p><b>Rationale</b></p>

<p>
The scope of a <i>case</i> or <i>default</i> label shall be the compound statement, which is the body of a switch statement. All case clauses and the default clause shall be at the same scope.
</p>

<p><b>Example</b></p>

<pre><code language="C++">switch ( x )
{
case 1:        // Compliant
    if ( ... )
    {
    case 2:    // Non-compliant
        DoIt ( );
    }
    break;
default:
    break;
}
</code></pre>
''',

        'MISRA12_16.2': '''
<p><b>Rationale</b></p>

<p>
The Standard permits a <i>switch label</i>, i.e. a case label or <i>default</i> label, to be placed before any statement contained in the body of a <i>switch</i> statement, potentially leading to unstructured code. In order to prevent this, a <i>switch label</i> shall only appear at the outermost level of the compound statement forming the body of a <i>switch</i> statement.
</p>

<p><b>Example</b></p>

<pre><code language="C++">switch ( x )
{
    case 1:         /* Compliant */
        if ( flag )
        {
            case 2: /* Non-compliant */
            x = 1;
        }
        break;
    default:
        break;
}
</code></pre>

<p><b>See also</b></p>

<p>Rule 16.1</p>

''',
        'MISRA23_16.2': '''
<p><b>Rationale</b></p>

<p>
The C Standard permits a <i>switch label</i>, i.e. a case label or <i>default</i> label, to be placed before any statement contained in the body of a <i>switch</i> statement, potentially leading to unstructured code. In order to prevent this, a <i>switch label</i> shall only appear at the outermost level of the compound statement forming the body of a <i>switch</i> statement.
</p>

<p><b>Example</b></p>

<pre><code language="C++">switch ( x )
{
    case 1:         /* Compliant */
        if ( flag )
        {
            case 2: /* Non-compliant */
            x = 1;
        }
        break;
    default:
        break;
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 16.1</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('header file, code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def checkSwitch(check, file, ref, lexeme):
    while lexeme.text() != '{':
        lexeme = lexeme.next(True, True)
    count = 1
    lexeme = lexeme.next(True, True)

    while lexeme and count > 0:
        if lexeme.text() == 'switch':
            lexeme = checkSwitch(check, file, ref, lexeme)
        elif lexeme.text() == '{':
            count += 1
        elif lexeme.text() == '}':
            count -=  1
            if count == 0:
                return
        elif lexeme.text() in {'case', 'default'}:
            if count != 1:
                check.violation(ref.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

        if not lexeme:
            continue

        lexeme = lexeme.next(True, True)

    return lexeme


def check(check, file):
    # Pull a list of all functions that are defined within this file
    functionsDefined = file.filerefs('Define', 'Function')

    # Spin up a lexer
    lexer = file.lexer()

    # Loop through all defined functions
    for function in functionsDefined:
        # Pull text of function
        text = function.ent().contents()
        # Remove any // style comments
        text = re.sub(r'\/\/.*?\n','\n', text)
        # Remove any /* */ style comments
        text = re.sub(r'\/\*[\s\S]*?\*\/','\n', text)
        # Get the lexeme
        lexeme = lexer.lexeme(function.line(), function.column())
        # Skip unless we have a switch statement
        if not re.search(r'\s+switch(\s+|\()', text):
            lexeme = lexeme.next(True, True)
            continue
        # Get end point
        end = function.ent().ref('End')

        # While I am still within the function
        while lexeme.line_begin() < end.line():
            if lexeme.text() == 'switch':
                lexeme = checkSwitch(check, file, function, lexeme)
            if not lexeme:
                break
            lexeme = lexeme.next(True, True)

        if not lexeme:
            break
        lexeme = lexeme.next(True, True)
