# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 11-01-2021
import re

ERR1 = 'No additional check for overflows'

def ids():
    return ('A27-0-1', 'CPP_L017')

def name(id):
    return {
        'A27-0-1': """\
Published Standards/AUTOSAR/Inputs from independent components shall be \
validated""",
        'CPP_L017': """\
All Checks/Language Specific/C and C++/Libraries/Inputs from independent \
components shall be validated"""
    }[id]


def tags(id):
    return {
        'A27-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Non-automated',
            'Libraries',
        ],
        'CPP_L017': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>An “attacker” who fully or partially controls the content of an application’s buffer can
crash the process, view the content of the stack, view memory content, write to random
memory locations or execute code with permissions of the process.
This rule concerns network inputs, as well as inputs that are received from other
processes or other software components over IPC or through component APIs.
Note: If more advanced style formatting is required, this can be done using C++
dedicated libraries (e.g. boost::format or libfmt).</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A27-0-1.cpp 311495 2018-03-13 13:02:54Z michal.szczepankiewicz $
#include &lt;cstring&gt;
#include &lt;cstdint&gt;
#include &lt;cstdio&gt;
void F1(const char* name) // name restricted to 256 or fewer characters
{
  static const char format[] = "Name: %s .";
  size_t len = strlen(name) + sizeof(format);
  char* msg = new char[len];

  if (msg == nullptr)
  {
    // Handle an error
  }

  std::int32_t ret =
  snprintf(msg,
  len,
  format,
  name); // Non-compliant - no additional check for overflows

  if (ret &lt; 0)
  {
    // Handle an error
  }
  else if (ret &gt;= len)
  {
    // Handle truncated output
  }

  fprintf(stderr, msg);
  delete[] msg;
}
void F2(const char* name)
{
  static const char format[] = "Name: %s .";
  fprintf(stderr, format, name); // Compliant - untrusted input passed as one
  // of the variadic arguments, not as part of
  // vulnerable format string
}
void F3(const std::string& name)
{
  //compliant, untrusted input not passed
  //as a part of vulnerable format string
  std::cerr &lt;&lt; "Name: " &lt;&lt; name;
}
</code></pre>
"""


def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer()

    for lexeme in lexer.lexemes():
        if lexeme.text() == 'snprintf':
            lexeme = lexeme.next(True, True)
            close = findClose(lexeme)

            while lexeme and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.column_begin()):
                if lexeme.ent() and re.search(r'Parameter', str(lexeme.ent().kind())):
                    check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

                lexeme = lexeme.next(True, True)

                



# Find closing parenthesis
def findClose(lexeme):
    count = 0

    while lexeme and not (lexeme.text() == ')' and count == 0):
        if lexeme.text() == '(':
            count += 1

        lexeme = lexeme.next(True, True)

        if lexeme and lexeme.text() == ')':
            count -= 1

    return lexeme
