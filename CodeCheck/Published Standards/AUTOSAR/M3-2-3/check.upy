# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 1-6-22


import re


ERR1 = 'A type, object or function used in multiple translation units declared more than once: %1'


def ids():
    return ('M3-2-3', 'MISRA08_3-2-3', 'CPP_D045')


def name(id):
    return {
        'M3-2-3': 'Published Standards/AUTOSAR/A type, object or function that is used in multiple translation units shall be declared in one and only one file',
        'MISRA08_3-2-3': 'Published Standards/MISRA-C++ 2008/3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file',
        'CPP_D045': 'All Checks/Language Specific/C and C++/Declarations and Definitions/A type, object or function that is used in multiple translation units shall be declared in one and only one file',
    }[id]





def tags(id):
    return {
        'MISRA08_3-2-3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'M3-2-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D045': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

def description():
    return 'A type, object or function that is used in multiple translation units shall be declared in one and only one file.'


def detailed_description():
    return '''
<p><b>Rationale</b></p>

<p>
Having a single declaration of a type, object or function allows the compiler to detect incompatible types for the same entity.
</p>

<p>
Normally, this will mean declaring an external identifier in a header file that will be included in any file where the identifier is defined or used.
</p>

<p><b>Example</b></p>

<pre><code language="C++">  // header.hpp
  extern int16_t a;
  // file1.cpp
  #include "header.hpp"
  extern int16_t b;
  // file2.cpp
  #include "header.hpp"
  extern int32_t b; // Non-compliant - compiler may not detect the error
  int32_t a;        // Compliant - compiler will detect the error
</code></pre>

<p><b>Developer's Notes</b></p>

<p>This check will likely have incorrect results the project is analyzed with
the fuzzy parser.</p>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):

    # Pull any type, object or function reference from file
    checks = file.filerefs('Declare ~Implicit', 'Type, Typedef, Object, Function')

    # Loop through each declare reference that we need to check
    for checked in checks:
        # Pull all declarein reference for each initial reference
        declareRefs = checked.ent().refs('Declarein')
        if len(declareRefs) > 1:
            # Throw and error if more than one declarein reference exists.
            check.violation(checked.ent(), file, checked.line(), checked.column(), ERR1, checked.ent().name())
