
ERR1 = 'Destructor not public virtual, public override nor protected non-virtual'

# The ID for the check


def ids():
    return ('A12-4-1', 'CPP_D035')

# The short name of the check


def name(id):
    return {
        'A12-4-1': 'Published Standards/AUTOSAR/Destructor of a base class shall be public virtual, public override or protected non-virtual',
        'CPP_D035': 'All Checks/Language Specific/C and C++/Destructors/Destructor of a base class shall be public virtual, public override or protected non-virtual',
    }[id]





def tags(id):
    return {
        'A12-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_D035': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>If an object is supposed to be destroyed through a pointer or reference to its base
class, the destructor in the base class needs to be virtual. Otherwise, destructors for
derived types will not be invoked.</p>
<p>Note that if it is prohibited to destroy an object through a pointer or reference to its base
class, the destructor in the base class is supposed to be protected.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A12-4-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
class A
{
public:
~A() // Non-compliant
{
}
};
class B : public A
{
};
class C
{
public:
virtual ~C() // Compliant
{
}
};
class D : public C
{
};
class E
{
protected:
~E(); // Compliant
};
class F : public E
{
};
void F1(A* obj1, C* obj2)
{
// ...
delete obj1; // Only destructor of class A will be invoked
delete obj2; // Both destructors of D and C will be invoked
}
void F2()
{
A* a = new B;
C* c = new D;
F1(a, c);
}
</code></pre>
<p><b>See also</b></p>
<p>• JSF December 2005 [8]: AV Rule 78 All base classes with a virtual function shall
define a virtual destructor.</p>
<p>• HIC++ v4.0 [9]: 12.2.1 Declare virtual, private or protected the destructor of a
type used as a base class.</p>
<p>• SEI CERT C++ Coding Standard [10]: OOP52-CPP: Do not delete a polymorphic
object without a virtual destructor.</p>
<p>• C++ Core Guidelines [11]: C.35: A base class destructor should be either public
and virtual, or protected and nonvirtual.</p>
<p>• C++ Core Guidelines [11]: Discussion: Make base class destructors public and
virtual, or protected and nonvirtual.</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs("Define", "Public Member Function ~Virtual, Protected Member Function Virtual"):
        if "~" in ref.ent().name():
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
