import re

ERR1 = 'Auto type variable shall not be initialized using {} or ={}'

# The ID for the check


def ids():
    return ('A8-5-3', 'CPP_V018')

def name(id):
    return {
        'A8-5-3': """\
Published Standards/AUTOSAR/Auto Variable""",
        'CPP_V018': """\
All Checks/Language Specific/C and C++/Variables/Auto Variable"""

    }[id]



def tags(id):
    return {
        'A8-5-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Variables',
        ],
        'CPP_V018': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],
    }.get(id)

def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>If an initializer of a variable of type auto is enclosed in braces, then the result of type
deduction may lead to developer confusion, as the variable initialized using {} or ={} will
always be of std::initializer_list type.</p>
<p>Note that some compilers, e.g. GCC or Clang, can implement this differently -
initializing a variable of type auto using {} will deduce an integer type, and initializing
using ={} will deduce a std::initializer_list type. This is desirable type deduction which
will be introduced into the C++ Language Standard with C++17.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A8-5-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;initializer_list&gt;
void Fn() noexcept
{
auto x1(10); // Compliant - the auto-declared variable is of type int, but
// not compliant with A8-5-2.
auto x2{10}; // Non-compliant - according to C++14 standard the
// auto-declared variable is of type std::initializer_list.
// However, it can behave differently on different compilers.
auto x3 = 10; // Compliant - the auto-declared variable is of type int, but
// non-compliant with A8-5-2.
auto x4 = {10}; // Non-compliant - the auto-declared variable is of type
// std::initializer_list, non-compliant with A8-5-2.
std::int8_t x5{10}; // Compliant
}
</code></pre>
<p><b>See also</b></p>
<p>• Effective Modern C++ [13]: Item 2. Understand auto type deduction.</p>
<p>• Effective Modern C++ [13]: Item 7. Distinguish between () and {} when creating objects.</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"auto", file.contents()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    for lex in lexer.lexemes():
        if lex.text() == "auto" and lex.token() == "Keyword":
            next_lexeme = lex.next(ignore_whitespace = True)
            next_value = ""
            if next_lexeme.ent():
                next_value = str(next_lexeme.ent().value())

            if next_lexeme.token() == "Identifier" and next_value and next_value[0] == "{" and next_value[-1] == "}":
                check.violation(lex.ent(), file, lex.line_begin(),
                                lex.column_begin(), ERR1)
