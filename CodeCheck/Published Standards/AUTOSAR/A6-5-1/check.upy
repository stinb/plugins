import re

DEF_NAME = "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used"

# The ID for the check


def ids():
    return ('A6-5-1', 'CPP_C050')

def name(id):
    return {
        'A6-5-1': """\
Published Standards/AUTOSAR/A for-loop that loops through all elements of the \
container and does not use its loop-counter shall not be used""",
        'CPP_C050': """\
All Checks/Language Specific/C and C++/Control Flow/A for-loop that loops \
through all elements of the container and does not use its loop-counter shall \
not be used"""
    }[id]





def tags(id):
    return {
        'A6-5-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'CPP_C050': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>A for-loop that simply loops through all elements of the container and does not use its loop-counter is equivalent to a range-based for statement that reduces the amount of code to maintain correct loop semantics.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A6-5-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;iterator&gt;
void Fn() noexcept
{
constexpr std::int8_t arraySize = 7;
std::uint32_t array[arraySize] = {0, 1, 2, 3, 4, 5, 6};

for (std::int8_t idx = 0; idx &lt; arraySize; ++idx) // Compliant
{
array[idx] = idx;
}

for (std::int8_t idx = 0; idx &lt; arraySize / 2;
++idx) // Compliant - for does not loop though all elements
{
// ...
}

for (std::uint32_t* iter = std::begin(array); iter != std::end(array);
++iter) // Non-compliant
{
// ...
}

for (std::int8_t idx = 0; idx &lt; arraySize; ++idx) // Non-compliant
{
// ...
}

for (std::uint32_t value :
array) // Compliant - equivalent to non-compliant loops above
{
// ...
}

for (std::int8_t idx = 0; idx &lt; arraySize; ++idx) // Compliant
{
if ((idx % 2) == 0)
{
// ...
}
}
}
</code></pre>
<p><b>See also</b></p>
<p>HIC++ v4.0 [9]: 6.2.1 Implement a loop that only uses element values as a rangebased loop.</p>
<p>C++ Core Guidelines [11]: ES.55: Avoid the need for range checking.</p>
<p>C++ Core Guidelines [11]: ES.71: Prefer a range-for-statement to a for-statement when there is a choice.</p>"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks


def test_global():
    return False


def test_language(language):
    return language == 'C++'

# function that loops thru the loop definition


def get_loop_definition(lex, ent, limit_lex):
    while lex:
        if lex.token() == "Punctuation" and lex.text() == ")":
            return lex, limit_lex
        elif lex.token() == "Punctuation" and lex.text() == "(":
            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
            lex, limit_lex = get_loop_definition(lex, ent, limit_lex)
        elif lex.ent() and lex.ent().kind().check("Object") and lex.ent() != ent:
            if not re.search(r"\[(\d*)\]", str(lex.ent().freetext("UnderlyingType"))) and limit_lex == None:
                limit_lex = lex
        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
    return lex, limit_lex

# function that loops thru the loop body


def get_loop_contents(lex, ent, found, not_one_line, line):
    while lex:
        if ((lex.token() == "Punctuation" and lex.text() == "}")
                or (not not_one_line and lex.line_begin() > line)):
            return lex, found
        elif lex.token() == "Punctuation" and lex.text() == "{":
            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
            lex, found = get_loop_contents(lex, ent, found, not_one_line, line)
            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
        elif lex.ent() == ent and not found:
            # flag that locates id the counter is begin used
            found = True
            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
        else:
            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
    return lex, found


def check(check, file):
    lexer = file.lexer(True, 8, False, False)
    # get all objects defined
    for ref in file.filerefs("Define", "~Unresolved ~Unknown Object", True):
        ent = ref.ent()
        limit_lex = None
        if ent.refs("Setby"):
            # check all setby ref
            for setby in ent.refs("Setby"):
                lex_list = lexer.lexemes(setby.line(), setby.line())
                for_loop = [True for lex in lex_list if lex.text() == "for"]
                # checks if ent is being used in a for loop statement
                if for_loop and not re.search(r"begin1|range1", str(ent.value())):
                    lex = lexer.lexeme(setby.line(), setby.column())
                    lex, limit_lex = get_loop_definition(lex, ent, limit_lex)
                    if not lex:
                        continue
                    # one-liner loop indicator
                    not_one_line = lex.next(
                        ignore_whitespace=True, ignore_comments=True).text() == "{"
                    line = -1
                    if not not_one_line:
                        line = lex.line_begin() + 1
                    lex, found = get_loop_contents(
                        lex, ent, False, not_one_line, line)
                    if not found:
                        if limit_lex:
                            if limit_lex.next(ignore_whitespace=True, ignore_comments=True).token() != "Operator":
                                check.violation(
                                    None, file, setby.line(), 0, DEF_NAME)
                        else:
                            check.violation(
                                None, file, setby.line(), 0, DEF_NAME)
