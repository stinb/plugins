import re


ERR1 = 'Hexadecimal constants should be upper case'


# The ID for the check
def ids():
    return ('A2-13-5', 'CPP_E028')


# The short name of the check
def name(id):
    return {
        'A2-13-5': 'Published Standards/AUTOSAR/Hexadecimal constants should be upper case',
        'CPP_E028': 'All Checks/Language Specific/C and C++/Expressions/Hexadecimal constants should be upper case',
    }[id]



def tags(id):
    return {
        'A2-13-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E028': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)

# The short description of the check
def description():
    return "Hexadecimal constants should be upper case."


# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
Using upper case literals for hexadecimal constants makes the source code consistent in this matter and removes a potential developer confusion.
</p>

<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-13-5.cpp 305629 2018-01-29 13:29:25Z piotr.serwa $

#include &lt;cstdint&gt;

int main(void)
{
    std::int16_t a = 0x0f0f; //non-compliant
    std::int16_t b = 0x0f0F; //non-compliant
    std::int16_t c = 0x0F0F; //compliant

    return 0;
}
</code></pre>

<p><b>See also</b><br>
â€¢ JSF December 2005 [8]: AV Rule 150: Hexadecimal constants will be represented using all uppercase letters.
</p>


"""





# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'0x[\da-fA-F]+', file.contents().lower()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    # check if lexeme text is a hex and report error if match is found

    for lexeme in lexer:
        match = re.search(r'0x[\da-fA-F]+', lexeme.text())
        if match and lexeme.token() == "Literal":
            for ch in lexeme.text()[2:]:
                if ch.islower():
                    check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
                    break   
