import re


ERR1 = 'A switch statement shall be a well-formed switch statement'


# The ID for the check
def ids():
    return ('M6-4-3', 'MISRA12_16.1', 'MISRA23_16.1', 'CPP_C046')


# The short name of the check
def name(id):
    return {
        'M6-4-3': 'Published Standards/AUTOSAR/A switch statement shall be a well-formed switch statement',
        'MISRA12_16.1': 'Published Standards/MISRA C 2012/16.1 All switch statements shall be well-formed',
        'MISRA23_16.1': 'Published Standards/MISRA C 2023/16.1 All switch statements shall be well-formed',
        'CPP_C046': 'All Checks/Language Specific/C and C++/Control Flow/All switch statements shall be well-formed',
    }[id]


def tags(id):
    return {
        'M6-4-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'MISRA12_16.1': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Control Flow',
            ],
        'MISRA23_16.1': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Control Flow',
            ],
        'CPP_C046': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
    }.get(id)


# The short description of the check
def description():
    return 'A switch statement shall be a well-formed switch statement.'


# The long description of the check
def detailed_description(id):
    if id in ["MISRA12_16.1", "MISRA23_16.1"]:
        return """
<p><b>Amplification</b></p>
<p>A switch statement shall be considered to be well-formed if it conforms to the subset of C switch
statements that is specified by the following syntax rules. If a syntax rule given here has the same
name as one defined in the C Standard then it replaces the standard version for the scope of the
switch statement; otherwise, all syntax rules given in the C Standard are unchanged.</p>
<pre><code language="C++">switch-statement:
    switch ( switch-expression ) { case-label-clause-list   final-default-clause-list }
    switch ( switch-expression ) { initial-default-clause-list   case-label-clause-list }

case-label-clause-list:
    case-clause-list
    case-label-clause-list   case-clause-list

case-clause-list:
    case-label   switch-clause
    case-label   case-clause-list

case-label:
    case constant-expression:
    
final-default-clause-list:
    default:       switch-clause
    case-label   final-default-clause-list

initial-default-clause-list:
    default:       switch-clause
    default:       case-clause-list

switch-clause:
    statement-listopt   break;
    C90:                { declaration-listopt   statement-listopt   break; }
    C99 and later: { block-item-listopt   break; }</code></pre>

<p>Except where explicitly permitted by this syntax, the case and default keywords may not appear
anywhere within a switch statement body.</p>
<p>Note: some of the restrictions imposed on switch statements by this rule are expounded in the rules
referenced in the “See also” section. It is therefore possible for code to violate both this rule and one
of the more specific rules.</p>
<p>Note: the term switch label is used within the text of the specific switch statement rules to denote
either a case label or a default label.</p>

<p><b>Rationale</b></p>
<p>The syntax for the switch statement in C is not particularly rigorous and can allow complex,
unstructured behaviour. This and other rules impose a simple and consistent structure on the switch
statement.</p>

<p><b>See also</b></p>
<p>Rule 15.3, Rule 16.2, Rule 16.3, Rule 16.4, Rule 16.5, Rule 16.6</p>
"""

    return """
<p><b>Rule</b></p>
<p>A switch statement shall be a well-formed switch statement.</p>
<p>A well-formed switch statement conforms to the following syntax rules, which are additional
to the C++ standard syntax rules. All syntax rules not defined below are as defined in
ISO/IEC 14882:2003 [1].</p>
<pre><code language="C++">switch-statement:
switch ( condition ) { case-label-clause-list default-label-clauseopt }
case-label-clause-list:
case-label case-clauseopt
case-label-clause-list case-label case-clauseopt
case-label:
case constant-expression :
case-clause:
case-block-seqopt break ;
case-block-seqopt throw assignment-expressionopt ;
{ statement-seqopt break ; }
{ statement-seqopt throw assignment-expressionopt ; }
default-label-clause:
default-label default-clause
default-label:
default :
default-clause:
case-clause
case-block:
expression_statement
compound_statement
selection_statement
iteration_statement
try_block
case-block-seq:
case-block
case-block-seq case-block
</code></pre>
<p>The following statements, which are permitted by C++, are explicitly not included within the
MISRA C++ switch syntax rules. Note, however, that they are permitted within the compound
statements forming the body of a switch-clause.</p>
<pre><code language="C++">labelled_statement
jump_statement
declaration_statement
</code></pre>
<p>The following terms are also used within the text of the rules:</p>
<pre><code language="C++">switch-label Either a case-label or default-label.
case-clause The code between any two switch-labels.
default-clause The code between the default-label and the end of the switch statement.
switch-clause Either a case-clause or a default-clause.
</code></pre>
<p><b>Rationale</b></p>
<p>The syntax for the switch statement in C++ is weak, allowing complex, unstructured behaviour.
The previous text describes the syntax for switch statements as defined by MISRA C++. This, and
the associated rules, imposes a simple and consistent structure on to the switch statement.</p>
<p><b>Example</b></p>
<pre><code language="C++">switch ( x )
{
case 0:
 ...
 break; // break is required here
case 1: // empty clause, break not required
case 2:
 break; // break is required here
default: // default clause is required
 break; // break is required here, in case a future
 // modification turns this into a case clause
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(lookup_ents=False)

    for func_ref in file.filerefs("Define", "Function"):
        func_cfg = func_ref.ent().control_flow_graph()

        for node in func_cfg.nodes():
            if node.kind() != "switch":
                continue

            end_switch = node.end_node()

            for node_child in node.children():
                if not str(node_child.kind()).startswith("switch-"):
                    continue

                lex = lexer.lexeme(node_child.line_begin(), node_child.column_begin())
                has_exit = False

                while lex and (lex.line_begin() <= node_child.line_end()):
                    if (lex.line_begin() == node_child.line_end()) and (lex.text() == ":") and lex.next(True, True).text() not in ["case", "default"]:
                        break

                    lex = lex.next(True, True)
                
                on_switch = False
                out_of_scope = 0

                while lex and (lex.line_begin() <= end_switch.line_end()):
                    if (lex.text() == "switch") and (lex.token() == "Keyword"):
                        on_switch = True
                    if on_switch and (lex.text() == "{"):
                        out_of_scope += 1
                    elif on_switch and (lex.text() == "}"):
                        out_of_scope -= 1

                        if not out_of_scope:
                            on_switch = False
                    elif not out_of_scope and lex.text() in ["return", "break", "throw", "goto", "exit", "abort", "continue"] and (lex.token() in ["Keyword", "Identifier"]):
                        has_exit = True
                        break                    
                    elif not out_of_scope and lex.text() in ["case", "default"]:
                        break

                    lex = lex.next(True, True)

                if not has_exit:
                    check.violation(None, file, node.line_begin(), node.column_begin(), ERR1)
                    break