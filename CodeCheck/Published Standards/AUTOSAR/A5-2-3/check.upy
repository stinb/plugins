# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2021-11-05


import re


ERR1 = 'Cast removed const qualification from %1'
ERR2 = 'Cast removed volatile qualification from %1'
ERR3 = 'Cast removed _Atomic qualification from %1'


def ids():
    return ('MISRA08_5-2-5', 'MISRA12_11.8', 'A5-2-3', 'CPP_T021', 'MISRA23_8.2.3', 'MISRA23_11.8')


def name(id):
    return {
        'MISRA08_5-2-5': 'Published Standards/MISRA-C++ 2008/\
5-2-5 A cast shall not remove any const or volatile qualification from the type of a pointer or reference',
        'MISRA12_11.8': 'Published Standards/MISRA C 2012/\
11.8 A cast shall not remove any const or volatile qualification from the type pointed to by a pointer',
        'A5-2-3': 'Published Standards/AUTOSAR/\
A cast shall not remove any const or volatile qualification from the type of a pointer or reference',
        'CPP_T021': 'All Checks/Language Specific/C and C++/Types/\
A cast shall not remove any const or volatile qualification from the type of a pointer or reference',
        'MISRA23_8.2.3': 'Published Standards/MISRA C++ 2023/\
8.2.3 A cast shall not remove any const or volatile qualification from the type accessed via a pointer or by reference',
        'MISRA23_11.8': 'Published Standards/MISRA C 2023/\
11.8 A conversion shall not remove any const, volatile or _Atomic qualification from the type pointed to by a pointer',
    }[id]


def tags(id):
    return {
        'MISRA08_5-2-5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'MISRA12_11.8': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Types',
        ],
        'A5-2-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T021': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
        'MISRA23_8.2.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Types',
        ],
        'MISRA23_11.8': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Types',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA08_5-2-5': '''\
<p><b>Title</b></p>
<p>A cast shall not remove any <i>const</i> or <i>volatile</i> qualification
from the type of a pointer or reference</p>

<p><b>Rationale</b></p>

<p>Removal of the <i>const</i> or <i>volatile</i> qualification may not meet
developer expectations as it may lead
to <i>undefined behaviour</i>.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( const char_t * p )
{
   *const_cast< char_t * >( p ) = '\\0';   // Non-compliant
}
int main ( )
{
   f ( "Hello World!" );
}
</code></pre>
''',

        'MISRA12_11.8': '''\
<p><b>Title</b></p>
<p>A cast shall not remove any <i>const</i> or <i>volatile</i> qualification
from the type pointed to by a pointer.</p>

<p><b>Rationale</b></p>

<p>Any attempt to remove the qualification associated with the addressed type by
using casting is a violation of the principle of type qualification.</p>

<p><i>Note</i>: the qualification referred to here is not the same as any
qualification that may be applied to the pointer itself.</p>

<p>Some of the problems that might arise if a qualifier is removed from the addressed object are:</p>

<ul>
<li>Removing a <i>const</i> qualifier might circumvent the read-only status of an object and result in it being modified;</li>
<li>Removing a <i>const</i> qualifier might result in an exception when the object is accessed;</li>
<li>Removing a <i>volatile</i> qualifier might result in accesses to the object being optimized away.</li>
</ul>

<p><i>Note</i>: removal of the C99 <i>restrict</i> type qualifier is benign.</p>

<p><b>Example</b></p>
<pre><code language="C++">         uint16_t          x;
         uint16_t * const  cpi = &x;   /* const pointer               */
         uint16_t * const *pcpi;       /* pointer to const pointer    */
         uint16_t *       *ppi;
   const uint16_t         *pci;        /* pointer to const            */
volatile uint16_t         *pvi;        /* pointer to volatile         */
         uint16_t         *pi;

pi = cpi;                              /* Compliant - no conversion
                                                   no cast required   */

pi  = (uint16_t *)pci;                 /* Non-compliant               */
pi  = (uint16_t *)pvi;                 /* Non-compliant               */
ppi = (uint16_t * *)pcpi;              /* Non-compliant               */
</code></pre>

<p><b>See also</b></p>
<p>Rule 11.3</p>''',

        'A5-2-3': '''\
<p><b>Title</b></p>
<p>A cast shall not remove any const or volatile qualification from the type of
a pointer or reference.</p>

<p><b>Rationale</b></p>
<p>Removal of the const or volatile qualification may not meet developer
expectations as it may lead to undefined behavior.</p>

<p>Note that either const_cast and traditional C-style casts that remove const
or volatile qualification shall not be used.</p>

<p><b>Example</b></p>
<pre><code language="C++">// $Id: A5-2-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
void F1(const char* str) noexcept(false)
{
    *(const_cast&lt;char*&gt;(str)) =
    '\\0'; // Non-compliant - const qualification removed
}
class C
{
public:
    explicit C(std::int32_t) {}
};
void F2() noexcept(false)
{
    C const a1 = C(10);
    C* a2 = const_cast&lt;C*&gt;(&a1); // Non-compliant - const qualification removed
    C* a3 = (C*)&a1;             // Non-compliant - const qualification removed
}
extern volatile std::int32_t* F3() noexcept;
void F4() noexcept
{
    volatile std::int32_t* ptr1 = F3();
    // ...
    std::int32_t* ptr2 = const_cast&lt;std::int32_t*&gt;(
    ptr1); // Non-compliant - volatile qualification removed
    // ...
    std::int32_t* ptr3 =
    (std::int32_t*)ptr1; // Non-compliant - volatile qualification removed
}
</code></pre>

<p><b>See also</b></p>
<ul>
<li>MISRA C++ 2008 [7]: 5-2-5 A cast shall not remove any const or volatile
qualification from the type of a pointer or reference.</li>
<ul>
''',

        'CPP_T021': '''\
<p><b>Title</b></p>
<p>A cast shall not remove any const or volatile qualification from the type of
a pointer or reference.</p>

<p><b>Rationale</b></p>
<p>Removal of the const or volatile qualification may not meet developer
expectations as it may lead to undefined behavior.</p>

<p>Note that either const_cast and traditional C-style casts that remove const
or volatile qualification shall not be used.</p>

<p><b>Example</b></p>
<pre><code language="C++">// $Id: A5-2-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
void F1(const char* str) noexcept(false)
{
    *(const_cast&lt;char*&gt;(str)) =
        '\\0';  // Non-compliant - const qualification removed
}
class C
{
public:
    explicit C(std::int32_t) {}
};
void F2() noexcept(false)
{
    C const a1 = C(10);
    C* a2 = const_cast&lt;C*&gt;(&a1);  // Non-compliant - const qualification removed
    C* a3 = (C*)&a1;                    // Non-compliant - const qualification removed
}
extern volatile std::int32_t* F3() noexcept;
void F4() noexcept
{
    volatile std::int32_t* ptr1 = F3();
    // ...
    std::int32_t* ptr2 = const_cast&lt;std::int32_t*&gt;(
        ptr1);  // Non-compliant - volatile qualification removed
    // ...
    std::int32_t* ptr3 =
        (std::int32_t*)ptr1;  // Non-compliant - volatile qualification removed
}
</code></pre>

<p><b>See also</b></p>
<ul>
<li>MISRA C++ 2008 [7]: 5-2-5 A cast shall not remove any const or volatile
qualification from the type of a pointer or reference.</li>
<ul>
''',
        'MISRA23_8.2.3': '''\
<p><b>Rationale</b></p>
<p>Using a cast to remove the qualification associated with the addressed type is a violation of the
principle of type qualification.</p>

<p>Some of the problems that might arise if a qualifier is removed from the addressed object are:</p>

<ul>
<li>Removing a <i>const</i> qualifier might circumvent the read-only status of an object and result in it being modified;</li>
<li>Removing a <i>const</i> qualifier might result in an exception when the object is accessed;</li>
<li>Removing a <i>volatile</i> qualifier might result in accesses to the object being optimized away.</li>
</ul>

<p><b>Example</b></p>
<pre><code language="C++">uint16_t x;
uint16_t * const cpi = &x; // const pointer
uint16_t * const * pcpi; // pointer to const pointer
uint16_t * * ppi;
const uint16_t * pci; // pointer to const
volatile uint16_t * pvi; // pointer to volatile
uint16_t * pi;
pi = cpi; // Rule does not apply - no cast
pi = const_cast&lt; uint16_t * &gt;( pci ); // Non-compliant
pi = const_cast&lt; uint16_t * &gt;( pvi ); // Non-compliant
ppi = const_cast&lt; uint16_t ** &gt;( pcpi ); // Non-compliant
pi = ( uint16_t * )pci; // Non-compliant
pi = ( uint16_t * )pvi; // Non-compliant
ppi = ( uint16_t ** )pcpi; // Non-compliant
</code></pre>

<p><b>See also</b></p>
<p>Rule 8.2.2</p>
''',

        'MISRA23_11.8': '''\
<p><b>Rationale</b></p>

<p>Any attempt to remove the qualification associated with the addressed type by
using casting is a violation of the principle of type qualification.</p>

<p><i>Note</i>: the qualification referred to here is not the same as any
qualification that may be applied to the pointer itself.</p>

<p>Some of the problems that might arise if a qualifier is removed from the addressed object are:</p>

<ul>
<li>Removing a <i>const</i> qualifier might circumvent the read-only status of an object and result in it being modified;</li>
<li>Removing a <i>const</i> qualifier might result in an exception when the object is accessed;</li>
<li>Removing a <i>volatile</i> qualifier might result in accesses to the object being optimized away.</li>
<li>Removing an <i>_Atomic</i> qualifier might circumvent the lock status of an object and potentially result in memory corruption.</li>
</ul>

<p><i>Note</i>: removal of the restrict type qualifier (C99 and later) is benign.</p>

<p><b>Example</b></p>
<pre><code language="C++">         uint16_t          x;
         uint16_t * const  cpi = &x;   /* const pointer               */
         uint16_t * const *pcpi;       /* pointer to const pointer    */
         uint16_t *       *ppi;
   const uint16_t         *pci;        /* pointer to const            */
volatile uint16_t         *pvi;        /* pointer to volatile         */
         uint16_t         *pi;

pi = cpi;                              /* Compliant - no conversion
                                                   no cast required   */

pi  = (uint16_t *)pci;                 /* Non-compliant               */
pi  = (uint16_t *)pvi;                 /* Non-compliant               */
ppi = (uint16_t * *)pcpi;              /* Non-compliant               */

typedef struct s {
 uint8_t a;
 uint8_t b;
} s_t;
int main( void )
{
 _Atomic s_t astr;
 s_t lstr = { 7U, 42U };
 s_t *sptr = &astr; /* Non-compliant - removes _Atomic qualifier */
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 11.3, Rule 11.10</p>''',
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False

def define_options(check):
    atomic = False
    if check.id() == 'MISRA23_11.8':
        atomic = True
    check.option().checkbox('atomic', 'Check if _Atomic was removed.', atomic)


def check(check, file):
    lexer = None

    # Cast on the right side of =
    for toRef in file.filerefs('Assignby Ptr'):
        fromEnt = toRef.scope()
        toEnt = toRef.ent()

        if not fromEnt or not toEnt:
            continue

        # Ensure that ent.type isn't None
        fromType = str(fromEnt.type())
        toType = str(toEnt.type())

        # Ignore any types that start with typeof (
        if re.search(r'^typeof \(.*', fromType) or re.search(r'^typeof \(.*', toType):
            continue

        # See if const is removed
        removedConst = False
        # const is removed from the beginning of the type
        if re.search(r'^const.*', fromType) and not re.search(r'^const.*', toType):
            removedConst = True
        # *const is removed from the type
        elif re.search(r'^.*\*const\b', fromType) and not re.search(r'^.*\*const\b', toType):
            removedConst = True

        # See if volatile is removed from the beginning or end
        removedVolatile = False
        if re.search(r'^volatile .*', fromType) or re.search(r'^const volatile .*', fromType):
            if not re.search(r'^volatile .*', toType) and not re.search(r'^const volatile .*', toType):
                removedVolatile = True

        # See if _Atomic is removed
        if check.option().lookup('atomic') and re.search(r'_Atomic', fromType) and not re.search(r'_Atomic', toType):
            check.violation(toEnt, file, toRef.line(), toRef.column(), ERR3, fromEnt.name())

        # Get the lexeme
        if not lexer:
            lexer = file.lexer(lookup_ents=False)
        lexeme = lexer.lexeme(toRef.line(), toRef.column())

        # See if there was a cast
        cast = False
        while lexeme and lexeme.text() not in {';', '=', '{', ','}:
            if lexeme.text() in {'const_cast', ')'}:
                cast = True
                break
            lexeme = lexeme.previous(True, True)

        if cast:
            if removedConst:
                check.violation(toEnt, file, toRef.line(), toRef.column(), ERR1, fromEnt.name())
            if removedVolatile:
                check.violation(toEnt, file, toRef.line(), toRef.column(), ERR2, fromEnt.name())

    # Cast on the left side of =
    for ref in file.filerefs('Deref Set'):
        ent = ref.ent()
        if not ent:
            continue

        # Starts with const
        if re.search(r'^const\b', str(ent.type())):

            # Get the lexeme
            if not lexer:
                lexer = file.lexer()
            lexeme = lexer.lexeme(ref.line(), ref.column())

            # See if there was a cast
            while lexeme and lexeme.text() != ';':
                if lexeme.text() == 'const_cast':
                    check.violation(ent, file, ref.line(), ref.column(), ERR1, ent.name())
                    break
                lexeme = lexeme.previous(ignore_whitespace=True, ignore_comments=True)
