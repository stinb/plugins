# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

import re

ERR1 = 'Member function %1 can be made static, but is not static'
ERR2 = 'Member function %1 can be made const, but is not const'

def ids():
	return ('M9-3-3', 'MISRA08_9-3-3', 'CPP_F014')

def name(id):
	return {
		'M9-3-3': 'Published Standards/AUTOSAR/If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const',
		'MISRA08_9-3-3': 'Published Standards/MISRA-C++ 2008/9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const',
		'CPP_F014': 'All Checks/Language Specific/C and C++/Functions/If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const',
	}[id]




def tags(id):
    return {
        'MISRA08_9-3-3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Functions',
        ],
        'M9-3-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F014': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

def description():
	return 'If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const.'

def detailed_description(id):
	return {
		'M9-3-3': """\
			<p><b>Rationale</b></p>
			<p>Declaring a member function static or const limits its access to the non-static data members. This helps to prevent unintentional modification of the data, and facilitates compliance with Rule 7–1–1.</p>
			<p><b>Example</b></p>
			<pre><code language="C++">class A
{
public:
	int16_t f1 ( )    // Non-compliant - can be const
	{
		return m_i;
	}
	int16_t f2 ( )    // Non-compliant - can be static
	{
		return m_s;
	}
	int16_t f3 ( )    // Compliant - cannot be const or static
	{
		return ++m_i;
	}
private:
	int16_t m_i;
	static int16_t m_s;
};
			</code></pre>""",
		'MISRA08_9-3-3': """\
			<p><b>Rationale</b></p>
			<p>Declaring a member function static or const limits its access to the non-static data members. This helps to prevent unintentional modification of the data, and facilitates compliance with Rule 7–1–1.</p>
			<p><b>Example</b></p>
			<pre><code language="C++">class A
{
public:
	int16_t f1 ( )    // Non-compliant - can be const
	{
		return m_i;
	}
	int16_t f2 ( )    // Non-compliant - can be static
	{
		return m_s;
	}
	int16_t f3 ( )    // Compliant - cannot be const or static
	{
		return ++m_i;
	}
private:
	int16_t m_i;
	static int16_t m_s;
};
			</code></pre>""",
		'CPP_F014': """\
			<p><b>Rationale</b></p>
			<p>Declaring a member function static or const limits its access to the non-static data members.</p>
			<p><b>Example</b></p>
			<pre><code language="C++">class A
{
public:
	int16_t f1 ( )    // Non-compliant - can be const
	{
		return m_i;
	}
	int16_t f2 ( )    // Non-compliant - can be static
	{
		return m_s;
	}
	int16_t f3 ( )    // Compliant - cannot be const or static
	{
		return ++m_i;
	}
private:
	int16_t m_i;
	static int16_t m_s;
};
			</code></pre>""",
	}[id]

def test_language(language):
	return language == 'C++'

def test_entity(file):
	return file.kind().check('header file, code file')

def test_global():
	return False

def define_options(check):
	check.option().checkbox('exception', 'Ignore function overrides', False)
	check.option().checkbox('ignoreVirtual', 'Ignore virtual functions', True)
	check.option().checkbox('scope', 'Treat member objects passed to another function as modified', False)

def check(check, file):
	if check.option().lookup('exception'):
		methodsDefined = file.filerefs('Define', 'Member Function ~Static ~Const ~Virtual')
	else:
		methodsDefined = file.filerefs('Define', 'Member Function ~Static ~Const')

	if not methodsDefined:
		return

	for method in methodsDefined:
		# Skip constructors and destructors
		if method.ent().longname() == method.ent().name() + '::' + method.ent().name():
			continue
		if re.search(r'\~', method.ent().longname()):
			continue

		# Skip operator overloads
		overloader = 'operator(\\+|\\-|\\*|\\/|\\%|\\^|\\&|\\||\\~|\\!|\\=|\\<|\\>|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\&\\=|\\|\\=|\\<\\<|\\>\\>|\\<\\<\\=|\\>\\>\\=|\\=\\=|\\!\\=|\\<\\=|\\>\\=|\\&\\&|\\|\\||\\+\\+|\\-\\-|\\,|\\-\\>\\*|\\-\\>|\\(\\)|\\[\\])'
		if re.search(overloader, method.ent().name()):
			continue

		# If option is checked, ignore methods that override other methods
		if check.option().lookup('exception'):
			if method.ent().ref('Overrides'):
				continue

		# Test if method can be static, throw error if so
		if canBeStatic(method):
			check.violation(method.ent(), method.file(), method.line(), method.column(), ERR1, method.ent().name())
			continue

		# Test if method can be const, throww error if so
		elif canBeConst(method, check):
			check.violation(method.ent(), method.file(), method.line(), method.column(), ERR2, method.ent().name())
			continue

def canBeStatic(ref):
	# Pull the contents of the function
	text = ref.ent().contents()
	# Remove any // style comments
	text = re.sub(r'\/\/.*?\n', '\n', text)
	# Remove any /* */ style comments
	text = re.sub(r'\/\*[\s\S]*?\*\/', '\n', text)

	if re.search('this\\-\\>', text):
		return False
	if re.search('\\bVirtual\\b', ref.ent().kindname()):
		return False

	useRefs = ref.ent().refs('Use')
	for use in useRefs:
		if not re.search('\\bStatic\\b', ref.ent().kindname()):
			return False

	setRefs = ref.ent().refs('Set')
	for use in setRefs:
		if not re.search('\\bStatic\\b', ref.ent().kindname()):
			return False

	callRefs = ref.ent().refs('Call')
	for use in callRefs:
		if not re.search('\\bStatic\\b', ref.ent().kindname()):
			return False

	return True

def canBeConst(ref, check):
	passed = True

	modifies = ref.ent().refs('Modify')
	sets = ref.ent().refs('Set')
	modifies += sets

	for mods in modifies:
		if re.search('\\bMember\\b', mods.ent().kind().longname()):
			passed = False

	callRefs = ref.ent().refs('Call')
	for call in callRefs:
		if not re.search('\\bConst\\b', call.ent().kindname()):
			passed = False

	if passed and check.option().lookup('scope'):
		passed = checkUses(ref)

	return passed

# This subroutine takes a parameter and checks use references to see if they are passed out of scope ( Trivial Cases only )
def checkUses(method):
	allUseBy = method.ent().refs('C Useby')

	for useBy in allUseBy:
		if re.search('\\bMember\\b', useBy.ent().kind().longname()):
			continue

		# Loop through each useBy reference and move backwards to detect form a = b
		lexeme = useBy.lexeme(1, 8, 1, 1)

		while not (lexeme.text() == '=' or lexeme.text() == '('):
			lexeme = lexeme.prevUseful()

		lexeme = lexeme.prevUseful()
		if not lexeme.ref():
			continue

		# Return success of we are setting a non const data member or non const global object
		if lexeme.ref().scope().kind().check('C Function'):
			return True

	return False
