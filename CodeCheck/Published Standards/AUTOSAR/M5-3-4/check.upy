# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12-01-2021
import re

ERR1 = 'Potential side effects inside of sizeof operator'

def ids():
    return ('M5-3-4', 'MISRA08_5-3-4', 'MISRA12_13.6', 'CPP_E045', 'MISRA23_13.6')

def name(id):
    return {
        'M5-3-4': 'Published Standards/AUTOSAR/Evaluation of the operand to the sizeof operator shall not contain side effects',
        'MISRA08_5-3-4': 'Published Standards/MISRA-C++ 2008/5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects',
        'MISRA12_13.6': 'Published Standards/MISRA C 2012/13.6 The operand of the sizeof operator shall not contain any expression which has potential side effects',
        'CPP_E045': 'All Checks/Language Specific/C and C++/Expressions/Evaluation of the operand to the sizeof operator shall not contain side effects',
        'MISRA23_13.6': 'Published Standards/MISRA C 2023/13.6 The operand of the sizeof operator shall not contain any expression which has potential side effects',
    }[id]




def tags(id):
    return {
        'MISRA08_5-3-4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Expressions',
        ],
        'MISRA12_13.6': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Mandatory',
            'Expressions',
        ],
        'M5-3-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E045': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_13.6': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Mandatory',
            'Expressions',
        ],
    }.get(id)

def detailed_description(id):
    return {
        "M5-3-4": """\
<p><b>Rationale</b></p>
<p>A possible programming error in C++ is to apply the sizeof operator to an
expression and expect the expression to be evaluated. However, the expression is
not evaluated as sizeof only acts on the type of the expression. To avoid this
error, sizeof shall not be used on expressions that would contain side effects
if they were used elsewhere, as the side effects will not occur.</p>
<p><b>Exception</b></p>
<p>An operand of the form sizeof ( i ) where i is volatile is permitted.</p>
<p><b>Example</b></p>
<pre><code language="C++">         int32_t i;
         int32_t j;
volatile int32_t k;
j = sizeof( i = 1234 );     // Non-compliant - j is set to the sizeof the
                            // type of i which is an int32_t.
                            // i is not set to 1234.
j = sizeof ( k );           // Compliant by exception.
</code></pre>
<p><b>See also</b></p>
<p>ISO/IEC 14882:2003 [1] ยง3.2(2)</p>
""",
        "MISRA08_5-3-4": """\
<p><b>Rationale</b></p>
<p>A possible programming error in C++ is to apply the sizeof operator to an
expression and expect the expression to be evaluated. However, the expression is
not evaluated as sizeof only acts on the type of the expression. To avoid this
error, sizeof shall not be used on expressions that would contain side effects
if they were used elsewhere, as the side effects will not occur.</p>
<p><b>Exception</b></p>
<p>An operand of the form sizeof ( i ) where i is volatile is permitted.</p>
<p><b>Example</b></p>
<pre><code language="C++">         int32_t i;
         int32_t j;
volatile int32_t k;
j = sizeof( i = 1234 );     // Non-compliant - j is set to the sizeof the
                            // type of i which is an int32_t.
                            // i is not set to 1234.
j = sizeof ( k );           // Compliant by exception.
</code></pre>
<p><b>See also</b></p>
<p>ISO/IEC 14882:2003 [1] ยง3.2(2)</p>
""",
        "MISRA12_13.6": """\
<p><b>Amplification</b></p>

<p>Any expressions appearing in the operand of a <i>sizeof</i> operator are not
normally evaluated. This rule mandates that the evaluation of any such
expression shall not contain side effects, whether or not it is actually
evaluated.</p>

<p>A function call is considered to be a side effect for the purposes of this
rule.</p>

<p><b>Rationale</b></p>

<p>The operand of a <i>sizeof</i> operator may be either an expression or may
specify a type. If the operand contains an expression, a possible programming
error is to expect that expression to be evaluated when it is actually not
evaluated in most circumstances.</p>

<p>The C90 standard states that expressions appearing in the operand are not
evaluated at run-time.</p>

<p>In C99, expressions appearing in the operand are usually not evaluated at
run-time. However, if the operand contains a variable-length array type then the
array size expression will be evaluated if necessary. If the result can be
determined without evaluating the array size expression then it is unspecified
whether it is evaluated or not.</p>

<p><b>Exception</b></p>

<p>An expression of the form <code>sizeof ( V )</code>, where <code>V</code> is
an <i>lvalue</i> with a <i>volatile</i> qualified type that is not a
variable-length array, is permitted.</p>

<p><b>Example</b></p>

<pre><code language="C++">volatile int32_t i;
         int32_t j;
         size_t s;

s = sizeof ( j );          /* Compliant */
s = sizeof ( j++ );        /* Non-compliant */
s = sizeof ( i );          /* Compliant - exception */
s = sizeof ( int32_t );    /* Compliant */
</code></pre>

<p>In this example the final <i>sizeof</i> expression illustrates how it is
possible for a variable-length array size expression to have no effect on the
size of the type. The operand is the type "array of <code>n</code> pointers to
function with parameter type array of <code>v int32_t</code>". Because the
operand has variable-length array type, it is evaluated. However, the size of
the array of <code>n</code> function pointers is unaffected by the parameter
list for those function pointer types. Therefore, the <i>volatile</i>-qualified
object <code>v</code> may or may not be evaluated and its <i>side effects</i>
may or may not occur.</p>

<pre><code language="C++">volatile uint32_t v;

void f ( int32_t n )
{
  size_t s;

  s = sizeof ( int32_t[ n ] );                          /* Compliant */
  s = sizeof ( int32_t[ n++ ] );                        /* Non-compliant */
  s = sizeof ( void ( *[ n ] ) ( int32_t a[ v ] ) );    /* Non-compliant */
}
</code></pre>

<p><b>See also</b></p>

<p>Rule 18.8</p>
""",
        "CPP_E045": """\
<p><b>Rationale</b></p>
<p>A possible programming error in C++ is to apply the sizeof operator to an
expression and expect the expression to be evaluated. However, the expression is
not evaluated as sizeof only acts on the type of the expression. To avoid this
error, sizeof shall not be used on expressions that would contain side effects
if they were used elsewhere, as the side effects will not occur.</p>
<p><b>Exception</b></p>
<p>An operand of the form sizeof ( i ) where i is volatile is permitted.</p>
<p><b>Example</b></p>
<pre><code language="C++">         int32_t i;
         int32_t j;
volatile int32_t k;
j = sizeof( i = 1234 );     // Non-compliant - j is set to the sizeof the
                            // type of i which is an int32_t.
                            // i is not set to 1234.
j = sizeof ( k );           // Compliant by exception.
</code></pre>
<p><b>See also</b></p>
<p>ISO/IEC 14882:2003 [1] ยง3.2(2)</p>
""",
        "MISRA23_13.6": """\
<p><b>Amplification</b></p>

<p>Any expressions appearing in the operand of a <i>sizeof</i> operator are not
normally evaluated. This rule mandates that the evaluation of any such
expression shall not contain side effects, whether or not it is actually
evaluated.</p>

<p>A function call is considered to be a side effect for the purposes of this
rule.</p>

<p><b>Rationale</b></p>

<p>The operand of a <i>sizeof</i> operator may be either an expression or may
specify a type. If the operand contains an expression, a possible programming
error is to expect that expression to be evaluated when it is actually not
evaluated in most circumstances.</p>

<p>The C90 standard states that expressions appearing in the operand are not
evaluated at run-time.</p>

<p>In C99, expressions appearing in the operand are usually not evaluated at
run-time. However, if the operand contains a variable-length array type then the
array size expression will be evaluated if necessary. If the result can be
determined without evaluating the array size expression then it is unspecified
whether it is evaluated or not.</p>

<p><b>Exception</b></p>

<p>An expression of the form <code>sizeof ( V )</code>, where <code>V</code> is
an <i>lvalue</i> with a <i>volatile</i> qualified type that is not a
variable-length array, is permitted.</p>

<p><b>Example</b></p>

<pre><code language="C++">volatile int32_t i;
         int32_t j;
         size_t s;

s = sizeof ( j );          /* Compliant */
s = sizeof ( j++ );        /* Non-compliant */
s = sizeof ( i );          /* Compliant - exception */
s = sizeof ( int32_t );    /* Compliant */
</code></pre>

<p>In this example the final <i>sizeof</i> expression illustrates how it is
possible for a variable-length array size expression to have no effect on the
size of the type. The operand is the type "array of <code>n</code> pointers to
function with parameter type array of <code>v int32_t</code>". Because the
operand has variable-length array type, it is evaluated. However, the size of
the array of <code>n</code> function pointers is unaffected by the parameter
list for those function pointer types. Therefore, the <i>volatile</i>-qualified
object <code>v</code> may or may not be evaluated and its <i>side effects</i>
may or may not occur.</p>

<pre><code language="C++">volatile uint32_t v;

void f ( int32_t n )
{
  size_t s;

  s = sizeof ( int32_t[ n ] );                          /* Compliant */
  s = sizeof ( int32_t[ n++ ] );                        /* Non-compliant */
  s = sizeof ( void ( *[ n ] ) ( int32_t a[ v ] ) );    /* Non-compliant */
}
</code></pre>

<p><b>See also</b></p>

<p>Rule 18.8</p>
""",
    }[id]

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    if not re.search(r'sizeof', file.contents()):
        return

    lexer = file.lexer()

    lexemes = lexer.lexemes()

    for lexeme in lexemes:
        if not lexeme.text() == 'sizeof':
            continue

        lexeme = lexeme.next(True, True)

        if lexeme and lexeme.text() == '(':
            close = findClose(lexeme)
            if not close:
                continue

            while lexeme and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.column_begin()):
                if re.search(r'=|\+\+|--|\+=|-=', lexeme.text()) or (lexeme.ent() and lexeme.ent().kindname() == 'Function'):

                    check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

                lexeme = lexeme.next(True, True)

def findClose(lexeme):
    count = 0

    while lexeme and not (lexeme.text() == ')' and count == 0):
        if lexeme.text() == '(':
            count += 1

        lexeme = lexeme.next(True, True)

        if lexeme and lexeme.text() == ')':
            count -= 1


    return lexeme
