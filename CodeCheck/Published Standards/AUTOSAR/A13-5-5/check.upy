import re

ERR1 = 'Comparison operator shall be a non-member function with identical parameter types and noexcept'
COMPARISON_OPERATORS = {"operator==", "operator!=", "operator<", "operator<=", "operator>", "operator>="}


# The ID for the check
def ids():
    return ('A13-5-5', 'CPP_F043')


# The short name of the check
def name(id):
    return {
        'A13-5-5': 'Published Standards/AUTOSAR/Comparison operators shall be non-member functions with identical parameter types and noexcept',
        'CPP_F043': 'All Checks/Language Specific/C and C++/Functions/Comparison operators shall be non-member functions with identical parameter types and noexcept',
    }[id]





def tags(id):
    return {
        'A13-5-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions'
        ],
        'CPP_F043': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Comparison operators shall be non-member functions with identical parameter types and noexcept.</p>
<p><b>Rationale</b></p>
<p>Any asymmetric behavior for comparison functions can be confusing. In order to
achieve fully symmetric treatment, comparison functions need to be defined as nonmember functions, as the implicit object parameter of a member function does not
allow user-defined conversions to be applied (but the right hand side would).</p>
<p>Since comparison is a fundamental operation, it should never throw an exception.</p>
<p>Note: This rule applies to ==, !=, &lt;, &lt;=, &gt;, and >=</p>
<p>Note: Declaring a comparison operator as a friend allows it to access internal data
similar to a member function and is allowed by exception in rule A11-3-1.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A13-5-5.cpp 325916 2018-07-13 12:26:22Z christof.meerwald $
#include &lt;cstdint&gt;

class A
{
public:
explicit A(std::uint32_t d)
: m_d(d)
{ }

bool operator ==(A const & rhs) const // Non-compliant: member, not noexcept
{
return m_d == rhs.m_d;
}

private:
std::uint32_t m_d;
};

class C
{
public:
operator A() const;
};

void Foo(A const & a, C const & c)
{
a == c; // asymmetric as "a ==c" compiles, but "c == a" doesn’t compile
}


class B
{
public:
explicit B(std::uint32_t d)
: m_d(d)
{ }

// Compliant: non-member, identical parameter types, noexcept
friend bool operator ==(B const & lhs, B const & rhs) noexcept
{
return lhs.m_d == rhs.m_d;
}

private:
std::uint32_t m_d;
};

class D
{
public:
operator B() const;
};

void Bar(B const & b, D const & d)
{
b == d;
d == b;
}
</code></pre>
<p><b>See also</b></p>
<p>• C++ Core Guidelines [11]: C.86: Make == symmetric with respect to operand
types and noexcept</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"operator", file.contents()):
        return

    lexer = file.lexer(lookup_ents=False)

    if not lexer:
        return

    for ref in file.filerefs("Define", "Function"):
        if ref.ent().name() in COMPARISON_OPERATORS:
            a_friend = False
            no_except = False
            unidentical_params = False

            if "Member" in ref.ent().kind().longname():
                check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
                continue

            for lex in lexer.lexemes(ref.line(), ref.line()):
                next_lex = lex.next(ignore_whitespace=True, ignore_comments=True)

                if lex.text() == "operator" and lex.token() == "Keyword" and next_lex.text() in {"==", "!=", "<", "<=", ">", ">="} and next_lex.token() == "Operator":
                    prev_lex = lex.previous(ignore_whitespace=True, ignore_comments=True)

                    # check if friend
                    while prev_lex.line_begin() == lex.line_begin():
                        if prev_lex.text() == "friend" and prev_lex.token() == "Keyword":
                            a_friend = True
                            break
                        prev_lex = prev_lex.previous(ignore_whitespace=True, ignore_comments=True)

                    # check if noexcept
                    while next_lex.line_begin() == lex.line_begin():
                        if next_lex.text() == "noexcept" and next_lex.token() == "Identifier":
                            no_except = True
                            break
                        next_lex = next_lex.next(ignore_whitespace=True, ignore_comments=True)

                    # see if parameters are identical
                    params = ref.ent().parameters()
                    if params:
                        params = ref.ent().parameters().split(",")

                        if len(params) == 2:
                            param1 = params[0].split(" ")
                            param2 = params[1].split(" ")

                            for ind, par in enumerate(param1[:-1]):
                                if par != param2[ind]:
                                    unidentical_params = True
                                    break

                    if not a_friend or not no_except or unidentical_params:
                        check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)

                    break
