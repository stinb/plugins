# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2021-10-27


import re


ERR1 = 'Type %1 does not provide all members used by template %2'
ERR2 = 'Type %1 does not provide all members used by template %2 (%3)'

ANY = 1


def ids():
    return ('A14-7-1', 'CPP_T053')


def name(id):
    return {
        'A14-7-1': 'Published Standards/AUTOSAR/A type used as a template argument shall provide all members that are used by the template',
        'CPP_T053': 'All Checks/Language Specific/C and C++/Types/A type used as a template argument shall provide all members that are used by the template',
    }[id]


def tags(id):
    return {
        'A14-7-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types'
        ],
        'CPP_T053': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)


def detailed_description(id):
    return '''
<p><b>Rationale</b></p>

<p>
If a type used as a template argument does not provide all the members used by
the template, the instantiation of the template will result in an ill-formed
program. It is not clear for developer whether the template should be used with
the type.
</p>

<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstdint&gt;
class A
{
public:
    void SetProperty(std::int32_t x) noexcept { property = x; }
    void DoSomething() noexcept {}

private:
    std::int32_t property;
};
struct B
{
};
class C
{
public:
    void DoSomething() noexcept {}
};
template &lt;typename T&gt;
class D
{
public:
    void F1() {}
    void F2()
    {
        T t;
        t.SetProperty(0);
    }
    void F3()
    {
        T t;
        t.DoSomething();
    }
};

void Fn() noexcept
{
    D&lt;A&gt; d1; // Compliant - struct A provides all needed members
    d1.F1();
    d1.F2();
    d1.F3();

    D&lt;B&gt; d2; // Non-compliant - struct B does not provide needed members
    d2.F1();
    // d2.f2(); // Compilation error - no 'property' in struct B
    // d2.f3(); // Compilation error - no member named 'doSomething' in struct
    // B

    D&lt;C&gt; d3; // Non-compliant - struct C does not provide property
    d3.F1();
    // d3.F2(); // Compilation error - no property in struct C
    d3.F3();
}
</code></pre>

<p><b>See also</b></p>
<p>
â€¢ MISRA C++ 2008 [7]: Rule 14-7-2 (Required) For any given template
specialization, an explicit instantiation of the template with the template
arguments used in the specialization shall not render the program ill-formed.
</p>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def define_options(check):
    check.options().checkbox('eachUsage', 'Violation for each usage', False)


def entOfFirst(array):
    return array[0].ent() if array else None


def matchText(lex, textArray):
    for text in textArray:
        if not lex or (text != ANY and lex.text() != text):
            return None
        lex = lex.next(True, True)
    return lex


def check(check, file):
    eachUsage = check.options().lookup('eachUsage')

    # For every type argument, get the template class
    for argRef in file.filerefs('Typed TemplateArgument'):
        argEnt = argRef.ent()

        # Get the template type
        templateClass = entOfFirst(argRef.scope().refs('Typed', 'Class Type Template'))
        if not templateClass:
            continue
        templateType = entOfFirst(templateClass.refs('Define', 'TemplateParameter Type'))
        if not templateType:
            continue

        # Get the member names
        argMemberNames = set()
        argMembers = argEnt.ents('Define', 'Member')
        for member in argMembers:
            argMemberNames.add(member.name())

        # For every object of the template type, find the usage of each member
        violation = False
        for templateObj in templateType.ents('Typedby', 'Object Local'):
            for use in templateObj.refs('Useby'):

                # Skip if lexemes aren't object.member
                lexer = use.file().lexer(False)
                lex = lexer.lexeme(use.line(), use.column())
                lex = matchText(lex, [ANY, '.'])
                if not lex:
                    continue

                # Violation if member used is not provided
                memberName = lex.text()
                if memberName not in argMemberNames:
                    violation = True
                    if eachUsage:
                        check.violation(argEnt, use.file(), use.line(), use.column(), ERR2, argEnt.name(), templateClass.name(), memberName)
                    else:
                        break

            if violation and not eachUsage:
                break

        if violation:
            check.violation(argEnt, file, argRef.line(), argRef.column(), ERR1, argEnt.name(), templateClass.name())
