import re

# The ID for the check
def ids():
    return ('A0-4-2', 'CPP_T004')

# The short name of the check
def name(id):
    return {
        'A0-4-2': 'Published Standards/AUTOSAR/Type long double shall not be used',
        'CPP_T004': 'All Checks/Language Specific/C and C++/Types/Type long double shall not be used',
    }[id]



def tags(id):
    return {
        'A0-4-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types'
        ],
        'CPP_T004': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>The width of long double type, and therefore width of the significand, is implementationdefined.</p>
<p>The width of long double type can be either:</p>
<ul>
<li>
64 bits, as the C++14 Language Standard allows long double to provide at least
as much precision as type double does, or
</li>
<li>
80 bits, as the IEEE 754 standard allows extended precision formats (see:
Extended-Precision-Format), or
</li>
<li>
128 bits, as the IEEE 754 standard defines quadruple precision format
</li>
</ul>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A0-4-2.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
void Fn() noexcept
{
  float f1{0.1F};        // Compliant
  double f2{0.1};        // Compliant
  long double f3{0.1L};  // Non-compliant
}
</code></pre>
"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):

    for ref in file.filerefs("Define, Declare", "", True) :
        # check on entity
        if ref.ent().type() == "long double":
            check.violation(ref.ent(), file, ref.line(), ref.column(), "Long double data type is not allowed")
