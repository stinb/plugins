ERR1 = 'Const version of "operator[]" has not been implemented'


# The ID for the check
def ids():
    return ('A13-5-1', 'CPP_T043')


# The short name of the check
def name(id):
    return {
        'A13-5-1': 'Published Standards/AUTOSAR/If "operator[]" is to be overloaded with a non-const version, const version shall also be implemented',
        'CPP_T043': 'All Checks/Language Specific/C and C++/Types/If "operator[]" is to be overloaded with a non-const version, const version shall also be implemented',
    }[id]





def tags(id):
    return {
        'A13-5-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types'
        ],
        'CPP_T043': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>If "operator[]" is to be overloaded with a non-const version, const version
shall also be implemented.</p>
<p><b>Rationale</b></p>
<p>A non-const overload of the subscript operator allows an object to be modified, by
returning a reference to member data, but it does not allow reading from const objects.
The const version of "operator[]" needs to be implemented to ensure that the operator
can be invoked on a const object.</p>
<p>Note that one can provide a const version of operator[] (to support read-only access to
elements), but without a non-const version.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A13-5-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;cstdint&gt;
3 class Container1
4 {
5 public:
6 std::int32_t& operator[](
7 std::int32_t index) // Compliant - non-const version
8 {
9 return container[index];
10 }
11 std::int32_t operator[](
12 std::int32_t index) const // Compliant - const version
13 {
14 return container[index];
15 }
16
17 private:
18 static constexpr std::int32_t maxSize = 10;
19 std::int32_t container[maxSize];
20 };
21 void Fn() noexcept
22 {
23 Container1 c1;
24 std::int32_t e = c1[0]; // Non-const version called
25 c1[0] = 20; // Non-const version called
26 Container1 const c2{};
27 e = c2[0]; // Const version called
28 // c2[0] = 20; // Compilation error
29 }
30 class Container2 // Non-compliant - only non-const version of operator[]
31 // implemented
32 {
33 public:
34 std::int32_t& operator[](std::int32_t index) { return container[index]; }
35
36 private:
37 static constexpr std::int32_t maxSize = 10;
38 std::int32_t container[maxSize];
39 };
</code></pre>
<p><b>See Also</b></p>
<p>â€¢ HIC++ v4.0 [9]: 13.2.4 When overloading the subscript operator (operator[])
implement both const and non-const versions.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class"):
        const_ver = 0
        non_const_ver = 0

        for func_ref in class_ref.ent().refs("Define", "Function ~Template"):
            if func_ref.ent().name() == "operator[]" and func_ref.ent().kind().check("Const"):
                const_ver += 1
            elif func_ref.ent().name() == "operator[]":
                non_const_ver += 1

        if non_const_ver > const_ver:
            check.violation(class_ref.ent(), file,
                            class_ref.line(), class_ref.column(), ERR1)
