# This script is designed to run with Understand - CodeCheck
# 12-9-21


ERR1 = 'Enum value does not correspond to the enumerators of the enumeration'


# The ID for the check
def ids():
    return ('A7-2-1', 'MISRA08_7-2-1', 'CPP_T027')


# The short name of the check
def name(id):
    return {
        'A7-2-1': 'Published Standards/AUTOSAR/An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration',
        'MISRA08_7-2-1': 'Published Standards/MISRA-C++ 2008/7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration',
        'CPP_T027': 'All Checks/Language Specific/C and C++/Types/An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration',
    }[id]





def tags(id):
    return {
        'MISRA08_7-2-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'A7-2-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T027': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    return {
        'A7-2-1': '''
<p><b>Rule</b></p>

<p>
An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration.
</p>

<p><b>Rationale</b></p>

<p>
It is unspecified behavior if the evaluation of an expression with enum underlying type yields a value which does not correspond to one of the enumerators of the enumeration.
</p>

<p>
Additionally, other rules in this standard assume that objects of enum type only contain values corresponding to the enumerators. This rule ensures the validity of these assumptions.
</p>

<p>
One way of ensuring compliance when converting to an enumeration is to use a switch statement.
</p>

<p>
Note: The check is only limited to enum type objects that are assigned with a static value. Assigned values that can only be determined on runtime such as user inputs will not be flagged.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A7-2-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
enum class E : std::uint8_t
{
    Ok = 0,
    Repeat,
    Error
};
E Convert1(std::uint8_t number) noexcept
{
    E result = E::Ok; // Compliant
    switch (number)
    {
    case 0:
    {
        result = E::Ok; // Compliant
        break;
    }
    case 1:
    {
        result = E::Repeat; // Compliant
        break;
    }
    case 2:
    {
        result = E::Error; // Compliant
        break;
    }
    case 3:
    {
        constexpr std::int8_t val = 3;
        result = static_cast&lt;E&gt;(val); // Non-compliant - value 3 does not
                                      // correspond to any of E's
                                      // enumerators
        break;
    }
    default:
    {
        result =
            static_cast&lt;E&gt;(0); // Compliant - value 0 corresponds to E::Ok
        break;
    }
    }
    return result;
}
E Convert2(std::uint8_t userInput) noexcept
{
    E result = static_cast&lt;E&gt;(userInput); // Non-compliant - the range of
                                          // userInput may not correspond to
                                          // any of E's enumerators
    return result;
}
E Convert3(std::uint8_t userInput) noexcept
{
    E result = E::Error;
    if (userInput &lt;= 2)
    {
        result = static_cast&lt;E&gt;(userInput); // Compliant - the range of
                                            // userInput checked before casting
                                            // it to E enumerator
    }
    return result;
}
</code></pre>

<p><b>See also</b></p>

<p>
â€¢ MISRA C++ 2008 [7]: Rule 7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration.
</p>
''',

        'MISRA08_7-2-1': '''
<p><b>Rationale</b></p>

<p>
It is <i>unspecified behaviour</i> if the evaluation of an expression with <i>enum underlying type</i> yields a value which does not correspond to one of the enumerators of the enumeration.
</p>

<p>
Additionally, other rules in this standard assume that objects of <i>enum</i> type only contain values corresponding to the enumerators. This rule ensures the validity of these assumptions.
</p>

<p>
One way of ensuring compliance when converting to an enumeration is to use a <i>switch</i> statement.
</p>

<p><b>Example</b></p>

<pre><code language="C++">enum1 convert ( int16_t v )
{
    enum1 result = enum1_ERROR;
    switch ( v )
    {
        case 0:  { result = enum1_E1;    break; }
        case 1:  { result = enum1_E2;    break; }
        default: { throw ( ENUM_ERROR ); break; }
    }
    return result;
}
</code></pre>
''',

        'CPP_T027': '''
<p><b>Rationale</b></p>

<p>
It is <i>unspecified behaviour</i> if the evaluation of an expression with <i>enum underlying type</i> yields a value which does not correspond to one of the enumerators of the enumeration.
</p>

<p>
Additionally, other rules in this standard assume that objects of <i>enum</i> type only contain values corresponding to the enumerators. This rule ensures the validity of these assumptions.
</p>

<p>
One way of ensuring compliance when converting to an enumeration is to use a <i>switch</i> statement.
</p>

<p><b>Example</b></p>

<pre><code language="C++">enum1 convert ( int16_t v )
{
    enum1 result = enum1_ERROR;
    switch ( v )
    {
        case 0:  { result = enum1_E1;    break; }
        case 1:  { result = enum1_E2;    break; }
        default: { throw ( ENUM_ERROR ); break; }
    }
    return result;
}
</code></pre>
''',
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for obj_ref in file.filerefs("Define ~inactive", "Object ~unknown ~unresolved"):
        obj_type, _ = get_ent_type(obj_ref.ent())
        if obj_type == None:
            return

        if obj_type and obj_type.kind().check("Enum"):
            enumerators = []

            for enum in obj_type.refs("Define ~inactive", "Enumerator ~unknown ~unresolved"):
                enumerators.append(enum.ent().value())

            for assign_ref in obj_ref.ent().refs("Assign Value ~inactive"):
                val = assign_ref.ent().value()

                if val and val.isdigit() and val not in enumerators:
                    check.violation(assign_ref.scope(), assign_ref.file(),
                                    assign_ref.line(), assign_ref.column(), ERR1)


def get_ent_type(entity):
    typed_ref = entity.ref("Typed ~inactive")

    if not typed_ref:
        return None, None

    seen = set()
    while typed_ref and typed_ref not in seen:
        obj_ent = typed_ref.ent()
        obj_ref_type = obj_ent.type()
        typed_ref = typed_ref.ent().ref("Typed ~inactive")
        seen.add(typed_ref)

        if not typed_ref:
            return obj_ent, obj_ref_type

    return entity, entity.type()
