# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 1-6-22


import re


ERR1 = 'Violation: %1 "%2" (which has external linkage) defined multiple times'


def ids():
    return ('M3-2-4', 'MISRA08_3-2-4', 'CPP_D013', 'MISRA12_8.6', 'MISRA04_8.9', 'MISRA23_8.6')


def name(id):
    return {
        'M3-2-4': 'Published Standards/AUTOSAR/An identifier with external linkage shall have exactly one definition',
        'MISRA08_3-2-4': 'Published Standards/MISRA-C++ 2008/3-2-4 An identifier with external linkage shall have exactly one definition',
        'CPP_D013': 'All Checks/Language Specific/C and C++/Declarations and Definitions/An identifier with external linkage shall have exactly one definition',
        'MISRA12_8.6': 'Published Standards/MISRA C 2012/8.6 An identifier with external linkage shall have exactly one external definition',
        'MISRA04_8.9': 'Published Standards/MISRA-C 2004/8.9 An identifier with external linkage shall have exactly one external definition',
        'MISRA23_8.6': 'Published Standards/MISRA C 2023/8.6 An identifier with external linkage shall have exactly one external definition',
    }[id]



def tags(id):
    return {
        'MISRA08_3-2-4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'MISRA12_8.6': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'MISRA04_8.9': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'M3-2-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D013': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
        'MISRA23_8.6': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
    }.get(id)

def description():
    return 'An identifier with external linkage shall have exactly one definition.'




def detailed_description(id):
    return {
        'M3-2-4': '''
<p><b>Rationale</b></p>

<p>
It is <i>undefined behaviour</i> if an identifier is used for which multiple definitions exist (in different  translation units) or no definition exists at all. With the exception of templates and inline functions,  multiple definitions in different translation units are not permitted, even if the definitions are the same.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// file1.cpp
int32_t i = 0;
// file2.cpp
int32_t i = 1; // Non-compliant
</code></pre>

<p><b>Developer's Notes</b></p>

<p>
This check will throw an error if an object or function with external linkage has more than one definition; however, it is not possible to ensure that a definition exists without forcing the user to include all external libraries into the Understand project.
</p>
''',
        'MISRA08_3-2-4': '''
<p><b>Rationale</b></p>

<p>
It is <i>undefined behaviour</i> if an identifier is used for which multiple definitions exist (in different  translation units) or no definition exists at all. With the exception of templates and inline functions,  multiple definitions in different translation units are not permitted, even if the definitions are the same.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// file1.cpp
int32_t i = 0;
// file2.cpp
int32_t i = 1; // Non-compliant
</code></pre>

<p><b>Developer's Notes</b></p>

<p>
This check will throw an error if an object or function with external linkage has more than one definition; however, it is not possible to ensure that a definition exists without forcing the user to include all external libraries into the Understand project.
</p>
''',
        'CPP_D013': '''
<p><b>Rationale</b></p>

<p>
It is <i>undefined behaviour</i> if an identifier is used for which multiple definitions exist (in different  translation units) or no definition exists at all. With the exception of templates and inline functions,  multiple definitions in different translation units are not permitted, even if the definitions are the same.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// file1.cpp
int32_t i = 0;
// file2.cpp
int32_t i = 1; // Non-compliant
</code></pre>

<p><b>Developer's Notes</b></p>

<p>
This check will throw an error if an object or function with external linkage has more than one definition; however, it is not possible to ensure that a definition exists without forcing the user to include all external libraries into the Understand project.
</p>
''',
        'MISRA12_8.6': '''
<p><b>Developer's Notes</b></p>
The Code Check option to ignore identifiers defined in standard library files requires system files and standard
library files to be included into the project to work correctly. Under Project-&gt;Configure Project, expand the
tree next to C++ by clicking the arrow then select 'Includes' ( Click the word 'Includes' ). Make sure
both "Add found include files to source list" and "Add found system include files to source list" are selected.
</p>

<p><b>Rationale</b></p>
The behaviour is undefined if an identifier is used for which multiple definitions exist ( in different files )
or no definition exists at all. Multiple definitions in different files are not permitted by this rule even
if the definitions are the same. It is undefined behaviour if the declarations are different, or initialize
the identifier to different values.
</p>

<p><b>Example</b></p>
In this example the object i is defined twice.
</p>

<pre><code language="C++">  /* file1.c                                                  */
  int16_t i = 10;

  /* file2.c                                                  */
  int16_t i = 20; /* Non-compliant - two definitions of i     */

</code></pre>

<p>
In this example the object j has one tentative definition and one external definition.
</p>

<pre><code language="C++">  /* file3.c                                                  */
  int16_t j;      /* Tentative definition                     */
  int16_t j = 1;  /* Compliant - external definition          */

</code></pre>

<p>
The following example is non-compliant because the object k has two external definitions. The
tentative definition in file4.c becomes an external definition at the end of the translation unit.
</p>

<pre><code language="C++">  /* file4.c                                                  */
  int16_t k;      /* Tentative definition - becomes external  */

  /* file5.c                                                  */
  int16_t k = 0;  /* External definition                      */

</code></pre>
''',
        'MISRA04_8.9': '''
Behaviour is undefined if an identifier is used for which multiple definitions exist (in different files) or no definition exists at all. Multiple definitions in different files are not permitted even if the definitions are the same, and it is obviously serious if they are different, or initialise the identifier to different values.
To ignore all overloads select the option below.<BR />
<BR />
<p><b>Developer's Notes</b></p>
This check will throw an error if an object or function with external linkage has more than one definition; however, it is not possible to ensure that a definition exists
without forcing the user to include all external libraries into the Understand project.
''',
        'MISRA23_8.6': '''
<p><b>Developer's Notes</b></p>
The Code Check option to ignore identifiers defined in standard library files requires system files and standard
library files to be included into the project to work correctly. Under Project-&gt;Configure Project, expand the
tree next to C++ by clicking the arrow then select 'Includes' ( Click the word 'Includes' ). Make sure
both "Add found include files to source list" and "Add found system include files to source list" are selected.
</p>

<p><b>Rationale</b></p>
The behaviour is undefined if an identifier is used for which multiple definitions exist ( in different files )
or no definition exists at all. Multiple definitions in different files are not permitted by this rule even
if the definitions are the same. It is undefined behaviour if the declarations are different, or initialize
the identifier to different values.
</p>

<p><b>Example</b></p>
In this example the object i is defined twice.
</p>

<pre><code language="C++">  /* file1.c                                                  */
  int16_t i = 10;

  /* file2.c                                                  */
  int16_t i = 20; /* Non-compliant - two definitions of i     */

</code></pre>

<p>
In this example the object j has one tentative definition and one external definition.
</p>

<pre><code language="C++">  /* file3.c                                                  */
  int16_t j;      /* Tentative definition                     */
  int16_t j = 1;  /* Compliant - external definition          */

</code></pre>

<p>
The following example is non-compliant because the object k has two external definitions. The
tentative definition in file4.c becomes an external definition at the end of the translation unit.
</p>

<pre><code language="C++">  /* file4.c                                                  */
  int16_t k;      /* Tentative definition - becomes external  */

  /* file5.c                                                  */
  int16_t k = 0;  /* External definition                      */
</code></pre>

<p><b>See also</b></p>
<p>Rule 8.15</p>
''',
    }[id]

def test_entity():
    return False


def test_global():
    return True


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.option().checkbox('overloads', 'Ignore Overloads', True)


def check(check):

    seen = {}
    selectedFiles = []
    for f in check.files():
        selectedFiles.append(f.longname())

    # Each longname gets an array of definition refs
    for file in check.db().ents('c ~unknown ~unresolved file'):
        for ref in file.filerefs('~implicit', 'c global object ~static ~unknown, c function ~static ~unknown ~lambda', False):
            if ref.kind().check('define'):
                if ref.ent().longname() not in seen:
                    seen[ref.ent().longname()] = []
                seen[ref.ent().longname()].append(ref)

    # For each longname
    for array in seen.values():
        violations = []
        if len(array) <= 1:
            continue

        # Ignore overloads
        if check.option().lookup('overloads'):
            for i in array:
                count = 0
                for j in array:
                    if i.ent().parent() and j.ent().parent() and i.ent().parent().id() == j.ent().parent().id():
                        count += 1
                if count <= 1:
                    violations.append(i)
        # Don't ignore overloads
        else:
            violations = array

        for ref in violations:
            ent = ref.ent()
            if ref.file().longname() in selectedFiles:
                check.violation(ent, ref.file(), ref.line(), ref.column(), ERR1, ent.kindname(), ent.longname())
