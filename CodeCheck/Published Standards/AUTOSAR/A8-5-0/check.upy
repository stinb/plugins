import re


ERR1 = 'Uninitialized memory is read'
FUNDAMENTAL_TYPES = {"short", "int", "signed", "long",
                     "unsigned", "bool", "char", "float", "double"}


# The ID for the check
def ids():
    return ('A8-5-0', 'MISRA12_9.1', 'CPP_M005', 'MISRA23_9.1')

def name(id):
    return {
        'A8-5-0': """\
Published Standards/AUTOSAR/Uninitialized Memory Read""",
        'CPP_M005': """\
All Checks/Language Specific/C and C++/Memory Allocation/Uninitialized Memory \
Read""",
        'MISRA12_9.1': """\
Published Standards/MISRA C 2012/9.1 The value of an object with automatic storage \
duration shall not be read before it has been set""",
        'MISRA23_9.1': """\
Published Standards/MISRA C 2023/9.1 The value of an object with automatic storage \
duration shall not be read before it has been set"""
    }[id]



def tags(id):
    return {
        'A8-5-0': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Memory Allocation',
        ],
        'MISRA12_9.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Mandatory',
            'Memory Allocation',
        ],
        'CPP_M005': [
            'Language: C',
            'Language: C++',
            'Memory Allocation',
        ],
        'MISRA23_9.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Mandatory',
            'Memory Allocation',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    if id == 'MISRA23_9.1':
        return """
<p><b>Amplification</b></p>
<p>For the purposes of this rule, an array element or structure member shall be
considered as a discrete object.</p>
<p>This rule does not apply to _Atomic qualified objects, which are covered by Rule 9.7.</p>
<p><b>Rationale</b></p>
<p>According to the C Standard, objects with static storage duration are
automatically initialized to zero unless initialized explicitly. Objects with
automatic storage duration are not automatically initialized and can therefore
have indeterminate values.</p>
<p>Note: it is sometimes possible for the explicit initialization of an
automatic object to be ignored. This will happen when a jump to a label using a
goto or switch statement “bypasses” the declaration of the object; the object
will be declared as expected but any explicit initialization will be ignored.
</p>
<p><b>Example</b></p>
<pre><code language="C++">void f ( bool_t b, uint16_t *p )
{
  if ( b )
  {
    *p = 3U;
  }
}
void g ( void )
{
  uint16_t u;
  f ( false, &u );
  if ( u == 3U )
  {
    /* Non-compliant - u has not been assigned a value */
  }
}</code></pre>
<p>In the following non-compliant C99 example, the goto statement jumps past the
initialization of x.</p>
<p>Note: This example is also non-compliant with Rule 15.1.</p>
<pre><code language="C++">{
  goto L1;
  uint16_t x = 10u;
L1:
  x = x + 1u; /* Non-compliant - x has not been assigned a value */
}</code></pre>"""
    elif id == 'MISRA12_9.1':
        return """
<p><b>Rule</b></p>
<p>The valueof an object with automatic storage duration shall not be read
before it has been set</p>
<p><b>Amplification</b></p>
<p>For the purposes of this rule, an array element or structure member shall be
considered as a discrete object.</p>
<p><b>Rationale</b></p>
<p>According to The Standard, objects with static storage duration are
automatically initialized to zero unless initialized explicitly. Objects with
automatic storage duration are not automatically initialized and can therefore
have indeterminate values.</p>
<p>Note: it is sometimes possible for the explicit initialization of an
automatic object to be ignored. This will happen when a jump to a label using a
goto or switch statement “bypasses” the declaration of the object; the object
will be declared as expected but any explicit initialization will be ignored.
</p>
<p><b>Example</b></p>
<pre><code language="C++">void f ( bool_t b, uint16_t *p )
{
  if ( b )
  {
    *p = 3U;
  }
}
void g ( void )
{
  uint16_t u;
  f ( false, &u );
  if ( u == 3U )
  {
    /* Non-compliant - u has not been assigned a value */
  }
}</code></pre>
<p>In the following non-compliant C99 example, the goto statement jumps past the
initialization of x.</p>
<p>Note: This example is also non-compliant with Rule 15.1.</p>
<pre><code language="C++">{
  goto L1;
  uint16_t x = 10u;
L1:
  x = x + 1u; /* Non-compliant - x has not been assigned a value */
}</code></pre>"""
    else:
        return """
<p><b>Rule</b></p>
<p>All memory shall be initialized before it is read.</p>
<p><b>Rationale</b></p>
<p>Objects with automatic or dynamic storage duration are default-initialized if no initializer
is specified. Default initialization produces indeterminate values for objects of neither
class nor array types. Default initialization of array types leads to default initialization
of each array element. Reading from indeterminate values may produce undefined
behavior.</p>
<p>Thus, all local variables, member variables, or objects allocated dynamically must
be explicitly initialized before their values are read, unless they are of class type or
array of non-fundamental type. It is recommended practice to initialize all such objects
immediately when they are defined.</p>
<p><b>Notes</b></p>
<p>Zero-initialization will happen before any other initialization for any objects with
static or thread-local storage duration. Thus, such objects need not be explicitly
initialized.</p>
<p>Members of classes and structs are not included in this checking due to their broad scope of usage.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A8-5-0.cpp 307536 2018-02-14 12:35:11Z jan.babst $
#include &lt;cstdint&gt;
#include &lt;string&gt;

static std::int32_t zero; // Compliant - Variable with static storage duration
// is zero-initialized.

void local()
{
std::int32_t a; // No initialization
std::int32_t b{}; // Compliant - zero initialization

b = a; // Non-compliant - uninitialized memory read
a = zero; // Compliant - a is zero now
b = a; // Compliant - read from initialized memory

std::string s; // Compliant - default constructor is a called
// read from s
}

void dynamic()
{
// Note: These examples violate A18-5-2

auto const a = new std::int32_t; // No initialization
auto const b = new std::int32_t{}; // Compliant - zero initialization

*b = *a; // Non-compliant - uninitialized memory read
*a = zero; // Compliant - a is zero now
*b = *a; // Compliant - read from initialized memory

delete b;
delete a;

auto const s =
new std::string; // Compliant - default constructor is a called
// read from *s
delete s;
}

// Members of Bad are default-initialized by the (implicitly generated) default
// constructor. Note that this violates A12-1-1.
struct Bad
{
std::int32_t a;
std::int32_t b;
};

// Compliant - Members of Good are explicitly initialized.
// This also complies to A12-1-1.
struct Good
{
std::int32_t a{0};
std::int32_t b{0};
};

void members()
{
Bad bad; // Default constructor is called, but members a not initialized

bad.b = bad.a; // Non-compliant - uninitialized memory read
bad.a = zero; // Compliant - bad.a is zero now
bad.b = bad.a; // Compliant - read from initialized memory

Good good; // Default constructor is called and initializes members

std::int32_t x = good.a; // Compliant
std::int32_t y = good.b; // Compliant
}
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: 8-5-1: All variables shall have a defined value before they
are used.</p>
<p>• HIC++ v4.0 [9]: 8.4.1: Do not access an invalid object or an object with
indeterminate value</p>
<p>• JSF December 2005 [8]: AV Rule 142: All variables shall be initialized before
use.</p>
<p>• SEI CERT C++ Coding Standard [10]: EXP53-CPP: Do not read uninitialized
memory</p>
<p>• C++ Core Guidelines [11]: ES.20: Always initialize an object</p>
<p>• ISO/IEC 14882:2014 [3]: 8.5: [dcl.init]</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = None
    for func_ref in file.filerefs("Define", "Function"):
        for obj_ref in func_ref.ent().refs("Define", "Object ~Global ~Static ~TemplateParameter"):
            if re.search("^(std::)?vector", str(obj_ref.ent().type())):
                continue
            
            ent, ent_type = get_ent_type(obj_ref.ent())

            if ent_type and any(_type in ent_type for _type in FUNDAMENTAL_TYPES) and ent.kindname() not in {"Struct", "Class"}:
                is_init = is_initialized(obj_ref)
                assign_ptr = []

                for _ref in obj_ref.ent().refs("Assignby Ptr, Addr Useby"):
                    assign_ptr.append(_ref.line())

                first_use, first_set = get_used_set(
                    obj_ref, is_init, assign_ptr)

                if not is_init and first_use and first_set and first_use.line() < first_set.line():
                    if not lexer:
                        lexer = file.lexer()
                    lexeme = lexer.lexeme(first_use.line(), first_use.column())
                    if lexeme:
                        lexeme = lexeme.previous(True, True)
                        if lexeme and lexeme.text() == '(':
                            lexeme = lexeme.previous(True, True)
                            if lexeme and lexeme.text() == 'sizeof':
                                continue

                    check.violation(obj_ref.ent(), file, first_use.line(),
                                    first_use.column(), ERR1)
                elif not is_init and first_use and not first_set:
                    if not lexer:
                        lexer = file.lexer()
                    lexeme = lexer.lexeme(first_use.line(), first_use.column())
                    if lexeme:
                        lexeme = lexeme.previous(True, True)
                        if lexeme and lexeme.text() == '(':
                            lexeme = lexeme.previous(True, True)
                            if lexeme and lexeme.text() == 'sizeof':
                                continue
                    check.violation(obj_ref.ent(), file, first_use.line(),
                                    first_use.column(), ERR1)


def get_used_set(obj_ref, is_init, assign_ptr, func_ref=None):
    first_use, first_set = None, None

    for _ref in sorted(obj_ref.ent().refs("Useby ~Inactive, Setby"), key=lambda x: x.line()):
        if func_ref and func_ref.ent().id() != _ref.ent().id():
            continue

        if not first_use and _ref.kind().check("Useby") and _ref.line() in assign_ptr:
            first_set = _ref
        elif not first_set and _ref.kind().check("Setby"):
            if _ref.kind().check("Init") and not is_init:
                continue
            first_set = _ref
        elif not first_use and _ref.kind().check("Useby"):
            first_use = _ref
        elif first_use and first_set:
            break

    return first_use, first_set


def is_initialized(_ref):
    init_value = _ref.ent().freetext("InitText")

    if "string" in _ref.ent().type():
        return True
    elif init_value and "new" in init_value and "{" not in init_value and "}" not in init_value:
        lexer = _ref.file().lexer(lookup_ents=False)
        lex = lexer.lexeme(_ref.line(), _ref.column())
        new_keyword = False

        while lex and lex.text() != ";":
            if lex.text() == "new" and lex.token() == "Keyword":
                new_keyword = True

            lex = lex.next(ignore_whitespace=True, ignore_comments=True)

        if not new_keyword:
            return True
    elif init_value:
        return True
    elif "std::tuple_element" in _ref.ent().type():
        lexer = _ref.file().lexer(lookup_ents=False)
        lex = lexer.lexeme(_ref.line(), _ref.column())

        while lex.text() != ";":
            if lex.text() == "=" and lex.token() == "Operator":
                return True
            
            lex = lex.next(True, True)
    else:
        lexer = _ref.file().lexer(lookup_ents=False)
        lex = lexer.lexeme(_ref.line(), _ref.column())
        lex = lex.next(ignore_whitespace=True, ignore_comments=True)

        if lex.text() in {"=", "{"} and lex.token() in {"Operator", "Punctuation"}:
            return True

    return False


def get_ent_type(entity):
    typed_ref = entity.ref("Typed")

    if not typed_ref:
        return entity, entity.type()

    seen = set()
    while typed_ref and typed_ref not in seen:
        obj_ent = typed_ref.ent()
        obj_ref_type = obj_ent.type()
        typed_ref = typed_ref.ent().ref("Typed")
        seen.add(typed_ref)

    return obj_ent, obj_ref_type
