import re

ERR1 = 'Time handling functions of library <ctime> shall not be used'

TIME_HANDLING_FUNCTIONS_LIST = {"clock", "difftime", "mktime",
                                "time", "asctime", "ctime", "gmtime", "localtime", "strftime"}
TIME_HANDLING_FUNCTIONS_STR = "clock|difftime|mktime|time|asctime|ctime|gmtime|localtime|strftime"
# The ID for the check


def ids():
    return ('M18-0-4', 'CPP_F037')

def name(id):
    return {
        'M18-0-4': """\
Published Standards/AUTOSAR/Time Handling Functions of <ctime>""",
        'CPP_F037': """\
All Checks/Language Specific/C and C++/Functions/Time Handling Functions of <ctime>"""

    }[id]




# The long description of the check



def tags(id):
    return {
        'M18-0-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F037': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>Various aspects are <i>implementation-defined</i> or <i>unspecified</i>, such as the formats of times.</p>
<p><b>Example</b></p>
<pre><code language="C++">#include &lt;ctime&gt;
void f ( )
{
 clock ( ); // Non-compliant
}
</code></pre>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(TIME_HANDLING_FUNCTIONS_STR, file.contents()):
        return

    for ref in file.filerefs("Call", "~Virtual Function"):
        if ref.ent().longname() in TIME_HANDLING_FUNCTIONS_LIST:
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
