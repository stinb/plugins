# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 1-13-22


import re


ERR1 = '%1 operator used on enumerator'


def ids():
    return ('A4-5-1', 'CPP_E018', 'MISRA08_4-5-2')


def name(id):
    return {
        'A4-5-1': 'Published Standards/AUTOSAR/Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and ! =, the unary & operator, and the relational operators <, <=, >, >=',
        'CPP_E018': 'All Checks/Language Specific/C and C++/Expressions/Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and ! =, the unary & operator, and the relational operators <, <=, >, >=',
        'MISRA08_4-5-2': 'Published Standards/MISRA-C++ 2008/4-5-2 Expressions with type enum shall not be used as operands to built-in operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary & operator, and the relational operators <, <=, >, >=',
    }[id]





def tags(id):
    return {
        'MISRA08_4-5-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Expressions',
        ],
        'A4-5-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E018': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'A4-5-1': '''
<p><b>Rationale</b></p>

<p>
Enumerations, i.e. enums or enum classes, have implementation-defined representations and they are not supposed to be used in arithmetic contexts.
</p>

<p>
Note that only enums can be implicitly used as operands to other built-in operators, like operators +, -, *, etc. Enum class needs to provide definitions of mentioned operators in order to be used as operand.
</p>

<p><b>Exception</b></p>

<p>
It is allowed to use the enumeration as operand to all built-in and overloaded operators if the enumeration satisfies the "BitmaskType" concept [16].
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A4-5-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
enum Colour : std::uint8_t
{
    Red,
    Green,
    Blue,
    ColoursCount
};
void F1() noexcept(false)
{
    Colour colour = Red;
    if (colour == Green) // Compliant
    {
    }

    if (colour == (Red + Blue)) // Non-compliant
    {
    }

    if (colour &lt; ColoursCount) // Compliant
    {
    }
}
enum class Car : std::uint8_t
{
    Model1,
    Model2,
    Model3,
    ModelsCount
};
void F2() noexcept(false)
{
    Car car = Car::Model1;
    if (car != Car::Model2) // Compliant
    {
    }

    if (car == Car::Model3) // Compliant
    {
    }

    // if (car == (Car::Model1 + Car::Model2)) // Non-compliant -
    // operator+ not provided for Car enum class, compilation error
    //{
    //}
    if (car &lt; Car::ModelsCount) // Compliant
    {
    }
}
Car operator+(Car lhs, Car rhs)
{
    return Car::Model3;
}
void F3() noexcept(false)
{
    Car car = Car::Model3;
    if (car == (Car::Model1 + Car::Model2)) // Non-compliant - overloaded
                                            // operator+ provided, no
                                            // compilation error
    {
    }
}
enum Team : std::uint8_t
{
    TeamMember1 = 0,
    TeamMember2 = 1,
    TeamMember3 = 2,
    TeamMember4 = 3,
    TeamMembersStart = TeamMember1,
    TeamMembersEnd = TeamMember2,
    TeamMembersCount = 4
};
void F4(const char* teamMember)
{
    // Implementation
}
void F5()
{
    const char* team[TeamMembersCount]; // Compliant
    // ...
    F4(team[TeamMember2]); // Compliant
}
</code></pre>

<p><b>See also</b></p>
• MISRA C++ 2008 [7]: Rule 4-5-2 Expressions with type enum shall not be used as operands to built-in operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary & operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=.
<p>

</p>
''',

        'CPP_E018': '''
<p><b>Rationale</b></p>

<p>
Enumerations, i.e. enums or enum classes, have implementation-defined representations and they are not supposed to be used in arithmetic contexts.
</p>

<p>
Note that only enums can be implicitly used as operands to other built-in operators, like operators +, -, *, etc. Enum class needs to provide definitions of mentioned operators in order to be used as operand.
</p>

<p><b>Exception</b></p>

<p>
It is allowed to use the enumeration as operand to all built-in and overloaded operators if the enumeration satisfies the "BitmaskType" concept [16].
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A4-5-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
enum Colour : std::uint8_t
{
    Red,
    Green,
    Blue,
    ColoursCount
};
void F1() noexcept(false)
{
    Colour colour = Red;
    if (colour == Green) // Compliant
    {
    }

    if (colour == (Red + Blue)) // Non-compliant
    {
    }

    if (colour &lt; ColoursCount) // Compliant
    {
    }
}
enum class Car : std::uint8_t
{
    Model1,
    Model2,
    Model3,
    ModelsCount
};
void F2() noexcept(false)
{
    Car car = Car::Model1;
    if (car != Car::Model2) // Compliant
    {
    }

    if (car == Car::Model3) // Compliant
    {
    }

    // if (car == (Car::Model1 + Car::Model2)) // Non-compliant -
    // operator+ not provided for Car enum class, compilation error
    //{
    //}
    if (car &lt; Car::ModelsCount) // Compliant
    {
    }
}
Car operator+(Car lhs, Car rhs)
{
    return Car::Model3;
}
void F3() noexcept(false)
{
    Car car = Car::Model3;
    if (car == (Car::Model1 + Car::Model2)) // Non-compliant - overloaded
                                            // operator+ provided, no
                                            // compilation error
    {
    }
}
enum Team : std::uint8_t
{
    TeamMember1 = 0,
    TeamMember2 = 1,
    TeamMember3 = 2,
    TeamMember4 = 3,
    TeamMembersStart = TeamMember1,
    TeamMembersEnd = TeamMember2,
    TeamMembersCount = 4
};
void F4(const char* teamMember)
{
    // Implementation
}
void F5()
{
    const char* team[TeamMembersCount]; // Compliant
    // ...
    F4(team[TeamMember2]); // Compliant
}
</code></pre>

<p><b>See also</b></p>
• MISRA C++ 2008 [7]: Rule 4-5-2 Expressions with type enum shall not be used as operands to built-in operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary & operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=.
<p>

</p>
''',

        'MISRA08_4-5-2': '''
<p><b>Rationale</b></p>

<p>
Enumerations have <i>implementation-defined</i> representation and so should not be used in arithmetic contexts.
</p>

<p><b>Example</b></p>

<pre><code language="C++">enum { COLOUR_0, COLOUR_1, COLOUR_2, COLOUR_COUNT } colour;
if ( COLOUR_0 == colour )                  // Compliant
if ( ( COLOUR_0 + COLOUR_1 ) == colour )   // Non-compliant
if ( colour &lt; COLOUR_COUNT )               // Compliant
</code></pre>

</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('header file, code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.option().checkbox('ignoreBitmasks', 'Ignore enums with all non-zero bitmasks', True)


def check(check, file):

    lexer = None

    validOperators = {'[', ']', '=', '==', '!=', '&', '<', '<=', '>', '>=', ',', '::', ':', '&&', '||', '?'}

    bitmasks = {}

    # Inside of each function
    for ref in file.filerefs('Use', 'Enumerator'):
        ent = ref.ent()

        # Find out if all the enumerators in the enum are nonzero bitmasks
        bitmask = False
        if check.option().lookup('ignoreBitmasks') and not ent.kind().check('Unresolved'):
            enum = ent.parent()
            if enum.id() not in bitmasks:
                nonZero = True
                for enumerator in enum.refs('Define', 'Enumerator'):
                    if enumerator.ent().value() == '0':
                        nonZero = False
                        break
                bitmasks[enum.id()] = nonZero

            # Ignore the bitmask enumerator
            if bitmasks[enum.id()]:
                continue

        # Get the lexeme
        if not lexer:
            lexer = file.lexer(lookup_ents=False)
        lexeme = lexer.lexeme(ref.line(), ref.column())

        # Get the previous operator
        prevLexeme = lexeme.previous(True, True)

        # Get the next operator
        nextLexeme = lexeme.next(True, True)

        # Previous operator is an invalid operator
        if prevLexeme.token() == 'Operator' and prevLexeme.text() not in validOperators:
            check.violation(ent, file, ref.line(), ref.column(), ERR1, prevLexeme.text())

        # Next operator is an invalid operator
        if nextLexeme.token() == 'Operator' and nextLexeme.text() not in validOperators:
            check.violation(ent, file, ref.line(), ref.column(), ERR1, nextLexeme.text())
