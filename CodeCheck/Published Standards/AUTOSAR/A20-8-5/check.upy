# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 8-24-2021
import re

ERR1 = 'std::make_unique was not used to construct std::unique_ptr'

def ids():
    return ('A20-8-5', 'CPP_P006')

def name(id):
    return {
        'A20-8-5': """\
Published Standards/AUTOSAR/std::make_unique shall be used to construct objects \
owned by std::unique_ptr""",
        'CPP_P006': """\
All Checks/Language Specific/C and C++/Pointers/std::make_unique shall be used \
to construct objects owned by std::unique_ptr"""
    }[id]



def tags(id):
    return {
        'A20-8-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Pointers',
        ],
        'CPP_P006': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Using std::make_unique to create instances of std::unique_ptr&lt;T&gt; provides
object allocation without explicit call of new function, see A18-5-2. It also
ensures exception safety in complex expressions and prevents from memory leaks
caused by unspecifiedevaluation order-expressions.</p>
<p><b>Exception</b></p>
<p>It is allowed to use explicit new function call to create an instance of std::unique_ptr&lt;T&gt;,
if it requires a custom deleter.</p>
<p><b>Example</p></b>
<pre><code language="C++">1 // $Id: A20-8-5.cpp 308507 2018-02-21 13:23:57Z michal.szczepankiewicz $
2 #include &lt;memory&gt;
3 #include &lt;cstdint&gt;
4 #include &lt;functional&gt;
5
6 struct A
7 {
8 A() { throw std::runtime_error("example"); }
9 A(std::uint8_t xx, std::uint8_t yy) : x(xx), y(yy) {}
10 std::uint8_t x;
11 std::uint8_t y;
12 };
13
14 void Foo(std::unique_ptr&lt;A&gt; a, std::unique_ptr&lt;A&gt; b) { }
15
16 int main(void)
17 {
18 //compliant
19 std::unique_ptr&lt;A&gt; upA = std::make_unique&lt;A&gt;(4,6);
20 //non-compliant
21 std::unique_ptr&lt;A&gt; upA2 = std::unique_ptr&lt;A&gt;(new A(5,7));
22
23 //non-compliant, potential memory leak, as A class constructor throws
24 Foo(std::unique_ptr&lt;A&gt;(new A()), std::unique_ptr&lt;A&gt;(new A()));
25 //non-compliant, potential memory leak, as A class constructor throws
26 Foo(std::make_unique&lt;A&gt;(4,6), std::unique_ptr&lt;A&gt;(new A()));
27 //compliant, no memory leaks
28 Foo(std::make_unique&lt;A&gt;(4,6), std::make_unique&lt;A&gt;(4,6));
29
30 //compliant by exception
31 std::unique_ptr&lt;A, std::function&lt;void(A*)&gt;&gt; ptr(new A(4,5), [](A* b) { delete
b; } );
32
33 return 0;
34 }
</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    refs = file.filerefs('Cast Use', 'Unresolved Class Type Template')

    for ref in refs:
        # Skip if not a unique_ptr
        if not re.search(r'unique_ptr', ref.ent().name()):
            continue

        check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
