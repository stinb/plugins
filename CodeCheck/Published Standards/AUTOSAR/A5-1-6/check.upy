# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2024-06-26


import re


ERR1 = 'Specify lambda return type'


def ids():
    return ('A5-1-6', 'CPP_E036')


def name(id):
    return {
        'A5-1-6': 'Published Standards/AUTOSAR/Specify Lambda Return Type',
        'CPP_E036': 'All Checks/Language Specific/C and C++/Expressions/Specify Lambda Return Type',
    }[id]


def tags(id):
    return {
        'A5-1-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E036': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)


def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>Return type of a non-void return type lambda expression should be explicitly
specified.</p>

<p><b>Rationale</b></p>
<p>If a non-void return type lambda expression does not specify its return type,
then it may be confusing which type it returns. It leads to developers
confusion.</p>
<p>Note that, while the return type is specified, implicit conversion between
type of returned value and return type specified in the lambda expression may
occur. This problem should not be ignored.</p>

<p><b>Example</b></p>
<pre><code language="C++">\
#include &lt;cstdint&gt;
void Fn() noexcept
{
    auto lambda1 = []() -&gt; std::uint8_t {
        std::uint8_t ret = 0U;
        // ...
        return ret;
    };  // Compliant
    auto lambda2 = []() {
        // ...
        return 0U;
    };                   // Non-compliant - returned type is not specified
    auto x = lambda1();  // Type of x is std::uint8_t
    auto y = lambda2();  // What is the type of y?
}
</code></pre>
'''


def test_entity(file):
    return file.kind().check('Header File, Code File')

def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs('Define', 'Lambda Function', True):
        ent = ref.ent()

        content = ent.contents()

        # Remove comments
        content = re.sub(r'\/\/.*?\n', '', re.sub(r'\/\*[\s\S]*?\*\/', '', content))

        # Skip if the return type is specified
        if re.search(r'\)\s*(->).*\{', content):
            continue

        # Skip if it doesn't return a value
        if not re.search(r'\breturn\b[^;]*[^;\s][^;]*;', content):
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1)
