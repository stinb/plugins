import re


ERR1 = 'Header files should only be .h, .hpp or .hxx'

CPP_STANDARD_HEADERS = [
    # C++ Standard Library headers
    "algorithm", "any", "array", "atomic", "barrier", "bit", "bitset", "charconv",
    "chrono", "codecvt", "complex", "concepts", "condition_variable", "coroutine",
    "deque", "exception", "execution", "filesystem", "format", "forward_list",
    "fstream", "functional", "future", "initializer_list", "iomanip", "ios",
    "iosfwd", "iostream", "istream", "iterator", "latch", "limits", "list",
    "locale", "map", "memory", "memory_resource", "mutex", "new", "numbers",
    "numeric", "optional", "ostream", "queue", "random", "ranges", "ratio",
    "regex", "scoped_allocator", "semaphore", "set", "shared_mutex", "source_location",
    "span", "sstream", "stack", "stdexcept", "stop_token", "streambuf", "string",
    "string_view", "syncstream", "system_error", "thread", "tuple", "type_traits",
    "typeindex", "typeinfo", "unordered_map", "unordered_set", "utility",
    "valarray", "variant", "vector", "version",

    # C++23 additions
    "expected", "flat_map", "flat_set", "generator", "mdspan", "print",

    # C headers wrapped in C++ standard library
    "cassert", "cctype", "cerrno", "cfenv", "cfloat", "cinttypes", "ciso646",
    "climits", "clocale", "cmath", "csetjmp", "csignal", "cstdarg", "cstddef",
    "cstdint", "cstdio", "cstdlib", "cstring", "ctgmath", "ctime", "cuchar",
    "cwchar", "cwctype"
]

C_STANDARD_HEADERS = [
    # Standard headers (C90, C99, C11, C17)
    "assert.h", "ctype.h", "errno.h", "fenv.h", "float.h", "inttypes.h", "iso646.h",
    "limits.h", "locale.h", "math.h", "setjmp.h", "signal.h", "stdarg.h", "stddef.h",
    "stdint.h", "stdio.h", "stdlib.h", "string.h", "tgmath.h", "time.h", "uchar.h",
    "wchar.h", "wctype.h",

    # C23 additions
    "stdckdint.h"
]


# The ID for the check
def ids():
    return ('A3-1-2', 'CPP_H009')

# The short name of the check
def name(id):
    return {
        'A3-1-2': 'Published Standards/AUTOSAR/Header files, that are defined locally in the project, shall have a file name extension of one of: ".h", ".hpp" or ".hxx"',
        'CPP_H009': 'All Checks/Language Specific/C and C++/Headers/Header files, that are defined locally in the project, shall have a file name extension of one of: ".h", ".hpp" or ".hxx"',
    }[id]


def tags(id):
    return {
        'A3-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Headers',
        ],
        'CPP_H009': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],
    }.get(id)


# The long description of the check
def detailed_description():
    return '''
<p><b>Rationale</b></p>
This is consistent with developer expectations to provide header files with one of the standard file name extensions.
</p>

<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A3-1-2.cpp 266557 2017-02-07 13:08:19Z piotr.tanski $
//#include &lt;h3.h&gt;   // Compliant
//#include &lt;h1.hpp&gt; // Compliant
//#include &lt;h2.hxx&gt; // Compliant
//#include &lt;h4.cpp&gt; // Non-compliant
//#include &lt;h5.c&gt;   // Non-compliant
//#include &lt;h6.hdr&gt; // Non-compliant
//#include &lt;h7.inc&gt; // Non-compliant
</code></pre>

<p><b>See also</b></p><p>
â€¢ JSF December 2005 [8]: 4.9.2 AV Rule 53 Header files will always have a file name extension of ".h".
</p>
'''


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.refs('Include', 'File'):
        ent_name = ref.ent().name()

        # Skip file extensions that are allowed
        if re.search(r'\.(h|hpp|hxx)$', ent_name) or ent_name in CPP_STANDARD_HEADERS or ent_name in C_STANDARD_HEADERS:
            continue

        check.violation(ref.ent(), ref.scope(), ref.line(), ref.column(), ERR1)
