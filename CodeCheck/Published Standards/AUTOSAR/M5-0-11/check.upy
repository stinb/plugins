
ERR1 = 'Char type assigned with numeric value'


# The ID for the check
def ids():
    return ('M5-0-11', 'MISRA08_5-0-11', 'MISRA04_6.1', 'CPP_T015')


# The short name of the check
def name(id):
    return {
        'M5-0-11': 'Published Standards/AUTOSAR/The plain char type shall only be used for the storage and use of character values',
        'MISRA08_5-0-11': 'Published Standards/MISRA-C++ 2008/5-0-11 The plain char type shall only be used for the storage and use of character values',
        'MISRA04_6.1': 'Published Standards/MISRA-C 2004/6.1 The plain char type shall only be used for the storage and use of character values',
        'CPP_T015': 'All Checks/Language Specific/C and C++/Types/The plain char type shall only be used for the storage and use of character values',
    }[id]





def tags(id):
    return {
        'MISRA08_5-0-11': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'MISRA04_6.1': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Types',
        ],
        'M5-0-11': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T015': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'The plain char type shall only be used for the storage and use of character values.'


# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>The <i>char</i> type within C++ is defined for use with the implementation character set. It is
<i>implementation-defined</i> if <i>char</i> is signed or unsigned, and it is therefore unsuitable for use with
numeric data.</p>
<p>Character values consist of character literals or strings. A character set maps text characters onto
numeric values; the character value is the text itself.</p>
<p><b>Example</b></p>
<pre><code language="C++">wchar_t a = 'a';  // Compliant
wchar_t b = '\\r'; // Compliant
wchar_t c = 10;   // Non-compliant
char d = 'd';     // Compliant with this rule

typedef int foo;
foo number = 10;
wchar_t e = number; // Non-compliant
</code></pre>
<p>See MISRA C++ 2008</p>"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for ref in file.filerefs("Define", "Object"):
        char_types = {"char", "wchar_t", "char16_t", "char32_t"}
        ent = ref.ent()
        type = ent.type()
        value = ent.value()

        if value:
            if type in char_types and value.isdigit():
                check.violation(ent, file, ref.line(),
                                ref.column(), ERR1)
            elif type in char_types:
                for ref_ent in ent.ents("Assign Value"):
                    try:
                        if ref_ent.name() == ent.value() and ref_ent.value().isdigit() and "Object" in ref_ent.kindname():
                            check.violation(ent, file, ref.line(),
                                            ref.column(), ERR1)
                    except AttributeError:
                        pass
