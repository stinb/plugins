# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-4-2021
import re

ERR1 = """\
Catch-all handler was used outside of a main, task main, and when calling third-party code"""

def ids():
    return ('A15-3-4', 'CPP_E063')

def name(id):
    return {
        'A15-3-4': """\
Published Standards/AUTOSAR/Catch-all (ellipsis and std::exception) handlers \
shall be used only in (a) main, (b) task main functions, (c) in functions that \
are supposed to isolate independent components and (d) when calling third-party \
code that uses exceptions not according to AUTOSAR C++14 guidelines \
""",
        'CPP_E063': """\
All Checks/Language Specific/C and C++/Exception Handling/Catch-all (ellipsis \
and std::exception) handlers shall be used only in (a) main, (b) task main \
functions, (c) in functions that are supposed to isolate independent components \
and (d) when calling third-party code that uses exceptions not according to \
AUTOSAR C++14 guidelines"""

    }[id]


def tags(id):
    return {
        'A15-3-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Non-automated',
            'Exception Handling',
        ],
        'CPP_E063': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Catching an exception through catch-all handlers does not provide any
detailed information about caught exception. This does not allow to take
meaningful actions to recover from an exception other than to re-throw it. This
is inefficient and results in code that is difficult to maintain.</p>
<p><b>Example</b></p>
<pre><code language="C++">1   //% $Id: A15-3-4.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2   #include &lt;stdexcept&gt;
3   #include &lt;thread&gt;
4   extern std::int32_t Fn(); // Prototype of external third-party library function
5   void F1() noexcept(false)
6   {
7     try
8     {
9       std::int32_t ret = Fn();
10      // ...
11    }
12 
13    // ...
14    catch (...) // Compliant
15    {
16      // Handle all unexpected exceptions from fn() function
17    }
18  }
19  void F2() noexcept(false)
20  {
21    std::int32_t ret =
22    Fn(); // Non-compliant - can not be sure whether fn() throws or not
23 
24    if (ret &lt; 10)
25    {
26      throw std::underflow_error("Error");
27    }
28 
29    else if (ret &lt; 20)
30    {
31      // ...
32    }
33    else if (ret &lt; 30)
34    {
35      throw std::overflow_error("Error");
36    }
37 
38    else
39    {
40      throw std::range_error("Error");
41    }
42  }
43  void F3() noexcept(false)
44  {
45    try
46    {
47      F2();
48    }
49 
50    catch (std::exception& e) // Non-compliant - caught exception is too
51    // general, no information which error occured
52    {
53      // Nothing to do
54      throw;
55    }
56  }
57  void F4() noexcept(false)
58  {
59    try
60    {
61      F3();
62    }
63 
64    catch (...) // Non-compliant - no information about the exception
65    {
66      // Nothing to do
67      throw;
68    }
69  }
70  class ExecutionManager
71  {
72  public:
73    ExecutionManager() = default;
74    void Execute() noexcept(false)
75    {
76      try
77      {
78        F3();
79      }
80 
81      // ...
82      catch (std::exception& e) // Compliant
83      {
84        // Handle all expected exceptions
85      }
86      catch (...) // Compliant
87      {
88        // Handle all unexpected exceptions
89      }
90    }
91  };
92  void ThreadMain() noexcept
93  {
94    try
95    {
96      F3();
97    }
98 
99    // ...
100   catch (std::exception& e) // Compliant
101   {
102     // Handle all expected exceptions
103   }
104   catch (...) // Compliant
105   {
106     // Handle all unexpected exceptions
107   }
108 }
109 int main(int, char**)
110 {
111   try
112   {
113     ExecutionManager execManager;
114     execManager.Execute();
115     // ...
116     std::thread t(&ThreadMain);
117     // ...
118     F4();
119   }
120
121   // ...
122   catch (std::exception& e) // Compliant
123   {
124     // Handle all expected exceptions
125   }
126   catch (...) // Compliant
127   {
128     // Handle all unexpected exceptions
129   }
130
131   return 0;
132 }
</code></pre>
<p><b>Developer's Notes</b></p>
<p>This check does not check for the non-compliant example on line 22 since it
isn't plausible to check for every function call that could potentially throw
an exception.</p>"""



def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'catch', file.contents()):
        return
    lexer = file.lexer()

    lexemes = lexer.lexemes()

    tryLex = None

    unresolvedOk = []

    for lexeme in lexemes:
        # Save two lexemes where there is a try
        if lexeme.text() == 'try':
            tryLex = lexeme
            funcLex = lexeme

        # Check if it is a catch all
        if lexeme.text() == 'catch':
            lexeme = lexeme.next(True, True).next(True, True)
            if lexeme.text() == '...' or (lexeme.text() == 'std' and lexeme.next(True, True).text() == '::' and lexeme.next(True, True).next(True, True).text() == 'exception'):

                # Save the line and column for the violation
                line = lexeme.line_begin()
                column = lexeme.column_begin()
                ok = False
                
                if tryLex and tryLex.text() == 'try':
                    tryLex = tryLex.next(True, True)
                    if tryLex.text() == '{':
                        close = findClose(tryLex)

                        while tryLex and not (tryLex.line_begin() == close.line_begin() and tryLex.column_begin() == close.column_begin()):
                            if tryLex.ent() and re.search(r'unresolved function', tryLex.ent().kind().longname().lower()):
                                unresolvedOk.append(tryLex.ent().longname() + str(tryLex.line_begin()))
                                ok = True

                            tryLex = tryLex.next(True, True)


                    if not ok:
                        open = findClose(funcLex)
                        if open:
                            open = open.previous(True, True)
                            while open and not re.search(r';|}|{', open.text()):
                                if open.ent() and open.ent().kindname() == 'Function':
                                    if re.search(r'main', open.ent().name().lower()):
                                        ok = True

                                open = open.previous(True, True)


                    if not ok:
                        check.violation(file, file, line, column, ERR1)
                    tryLex = None
                    funcLex = None



# Finds corresponding curly brace
def findClose(lexeme):
    count = 0

    if lexeme.text() == '{':

        while lexeme and not (lexeme.text() == '}' and count == 0):
            if lexeme.text() == '{':
                count += 1

            lexeme = lexeme.next(True, True)
            
            if lexeme.text() == '}':
                count -= 1


    else:

        while lexeme and not (lexeme.text() == '{' and count == 0):
            
            if lexeme.text() == '}':
                count += 1
            if lexeme.text() == '{':
                count -= 1

            lexeme = lexeme.previous(True, True)



    return lexeme
