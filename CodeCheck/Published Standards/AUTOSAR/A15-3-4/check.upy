# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-4-2021
import re

ERR1 = """\
Catch-all handler was used outside of a main, task main, and when calling third-party code"""

def ids():
    return ('A15-3-4', 'CPP_E063')

def name(id):
    return {
        'A15-3-4': """\
Published Standards/AUTOSAR/Catch-all (ellipsis and std::exception) handlers \
shall be used only in (a) main, (b) task main functions, (c) in functions that \
are supposed to isolate independent components and (d) when calling third-party \
code that uses exceptions not according to AUTOSAR C++14 guidelines \
""",
        'CPP_E063': """\
All Checks/Language Specific/C and C++/Exception Handling/Catch-all (ellipsis \
and std::exception) handlers shall be used only in (a) main, (b) task main \
functions, (c) in functions that are supposed to isolate independent components \
and (d) when calling third-party code that uses exceptions not according to \
AUTOSAR C++14 guidelines"""

    }[id]


def tags(id):
    return {
        'A15-3-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Non-automated',
            'Exception Handling',
        ],
        'CPP_E063': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Catching an exception through catch-all handlers does not provide any
detailed information about caught exception. This does not allow to take
meaningful actions to recover from an exception other than to re-throw it. This
is inefficient and results in code that is difficult to maintain.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A15-3-4.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;stdexcept&gt;
#include &lt;thread&gt;
extern std::int32_t Fn(); // Prototype of external third-party library function
void F1() noexcept(false)
{
  try
  {
    std::int32_t ret = Fn();
    // ...
  }

  // ...
  catch (...) // Compliant
  {
    // Handle all unexpected exceptions from fn() function
  }
}
void F2() noexcept(false)
{
  std::int32_t ret =
  Fn(); // Non-compliant - can not be sure whether fn() throws or not

  if (ret &lt; 10)
  {
    throw std::underflow_error("Error");
  }

  else if (ret &lt; 20)
  {
    // ...
  }
  else if (ret &lt; 30)
  {
    throw std::overflow_error("Error");
  }

  else
  {
    throw std::range_error("Error");
  }
}
void F3() noexcept(false)
{
  try
  {
    F2();
  }

  catch (std::exception& e) // Non-compliant - caught exception is too
  // general, no information which error occured
  {
    // Nothing to do
    throw;
  }
}
void F4() noexcept(false)
{
  try
  {
    F3();
  }

  catch (...) // Non-compliant - no information about the exception
  {
    // Nothing to do
    throw;
  }
}
class ExecutionManager
{
public:
  ExecutionManager() = default;
  void Execute() noexcept(false)
  {
    try
    {
      F3();
    }

    // ...
    catch (std::exception& e) // Compliant
    {
      // Handle all expected exceptions
    }
    catch (...) // Compliant
    {
      // Handle all unexpected exceptions
    }
  }
};
void ThreadMain() noexcept
{
  try
  {
    F3();
  }

  // ...
  catch (std::exception& e) // Compliant
  {
    // Handle all expected exceptions
  }
  catch (...) // Compliant
  {
    // Handle all unexpected exceptions
  }
}
int main(int, char**)
{
  try
  {
    ExecutionManager execManager;
    execManager.Execute();
    // ...
    std::thread t(&ThreadMain);
    // ...
    F4();
  }

  // ...
  catch (std::exception& e) // Compliant
  {
    // Handle all expected exceptions
  }
  catch (...) // Compliant
  {
    // Handle all unexpected exceptions
  }

  return 0;
}
</code></pre>
<p><b>Developer's Notes</b></p>
<p>This check does not check for the non-compliant example on line 22 since it
isn't plausible to check for every function call that could potentially throw
an exception.</p>"""



def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'catch', file.contents()):
        return
    lexer = file.lexer()

    lexemes = lexer.lexemes()

    tryLex = None

    unresolvedOk = []

    for lexeme in lexemes:
        # Save two lexemes where there is a try
        if lexeme.text() == 'try':
            tryLex = lexeme
            funcLex = lexeme

        # Check if it is a catch all
        if lexeme.text() == 'catch':
            lexeme = lexeme.next(True, True).next(True, True)
            if lexeme.text() == '...' or (lexeme.text() == 'std' and lexeme.next(True, True).text() == '::' and lexeme.next(True, True).next(True, True).text() == 'exception'):

                # Save the line and column for the violation
                line = lexeme.line_begin()
                column = lexeme.column_begin()
                ok = False
                
                if tryLex and tryLex.text() == 'try':
                    tryLex = tryLex.next(True, True)
                    if tryLex.text() == '{':
                        close = findClose(tryLex)

                        while tryLex and not (tryLex.line_begin() == close.line_begin() and tryLex.column_begin() == close.column_begin()):
                            if tryLex.ent() and re.search(r'unresolved function', tryLex.ent().kind().longname().lower()):
                                unresolvedOk.append(tryLex.ent().longname() + str(tryLex.line_begin()))
                                ok = True

                            tryLex = tryLex.next(True, True)


                    if not ok:
                        open = findClose(funcLex)
                        if open:
                            open = open.previous(True, True)
                            while open and not re.search(r';|}|{', open.text()):
                                if open.ent() and open.ent().kindname() == 'Function':
                                    if re.search(r'main', open.ent().name().lower()):
                                        ok = True

                                open = open.previous(True, True)


                    if not ok:
                        check.violation(file, file, line, column, ERR1)
                    tryLex = None
                    funcLex = None



# Finds corresponding curly brace
def findClose(lexeme):
    count = 0

    if lexeme.text() == '{':

        while lexeme and not (lexeme.text() == '}' and count == 0):
            if lexeme.text() == '{':
                count += 1

            lexeme = lexeme.next(True, True)
            
            if lexeme.text() == '}':
                count -= 1


    else:

        while lexeme and not (lexeme.text() == '{' and count == 0):
            
            if lexeme.text() == '}':
                count += 1
            if lexeme.text() == '{':
                count -= 1

            lexeme = lexeme.previous(True, True)



    return lexeme
