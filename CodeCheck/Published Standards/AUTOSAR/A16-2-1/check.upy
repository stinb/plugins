ERR1 = 'The \', ", /*, //, \\\\ characters shall not occur in a header file name'
INVALID_CHARACTERS = {"'", '"', "/*", "//", "\\\\"}

# The ID for the check


def ids():
    return ('A16-2-1', 'CPP_H010')

# The short name of the check


def name(id):
    return {
        'A16-2-1': """\
Published Standards/AUTOSAR/Header File Name""",
        'CPP_H010': """\
All Checks/Language Specific/C and C++/Headers/Header File Name"""
    }[id]





def tags(id):
    return {
        'A16-2-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Headers',
        ],
        'CPP_H010': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],
    }.get(id)

def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>It is undefined behavior if the ', ", /*, //, \\\\ characters are used in #include
directive, between &lt; and &gt; or “ ” delimiters.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A16-2-1.cpp 271687 2017-03-23 08:57:35Z piotr.tanski $
2
3 // #include &lt;directory/headerfile.hpp&gt; // Compliant
4 // #include &lt;headerfile.hpp&gt; // Compliant
5 // #include "directory/headerfile.hpp" // Compliant
6 // #include "headerfile.hpp" // Compliant
7 // #include &lt;directory/*.hpp&gt; // Non-compliant
8 // #include &lt;header'file.hpp&gt; // Non-compliant
9 // #include &lt;"headerfile.hpp"&gt; // Non-compliant
10 // #include &lt;directory\\\\headerfile.hpp&gt; // Non-compliant
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: Rule 16-2-4 The ', ", /* or // characters shall not occur in a
header file name.</p>
<p>• MISRA C++ 2008 [7]: Rule 16-2-5 The \\ character shall not occur in a header file
name.</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file, header')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer()

    if not lexer:
        return

    for lex in lexer:
        if lex.text() == "include" and lex.token() == "Preprocessor":
            next_lex = lex.next(ignore_whitespace=True)
            directive = list(next_lex.text())
            directive.pop()
            directive.pop(0)
            directive = "".join(directive)

            if any(character in directive for character in INVALID_CHARACTERS):
                check.violation(next_lex.ent(), file, next_lex.line_begin(),
                                next_lex.column_begin(), ERR1)
