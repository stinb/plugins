import re

ERR1 = '#error directive shall not be used'

# The ID for the check


def ids():
    return ('A16-6-1', 'CPP_PR031')

# The short name of the check


def name(id):
    return {
        'A16-6-1': """\
Published Standards/AUTOSAR/#error directive shall not be used""",
        'CPP_PR031': """\
All Checks/Language Specific/C and C++/Preprocessor/#error directive shall not \
be used"""
    }[id]





def tags(id):
    return {
        'A16-6-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR031': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>Using the pre-processor #error directive may lead to code that is complicated and not
clear for developers. The #error directive can not be applied to templates as it will not
be evaluated as a per-instance template deduction.</p>
<p>Static assertion, similarly to #error directive, provides a compile-time error checking.
However, static_assert behaves correctly in all C++ concepts and makes the code
more readable and does not rely on pre-processor directives.</p>
<p>Note: “#error” is anyway not allowed, see A16-0-1. This rule is kept in case A16-0-1 is
disabled in a project.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A16-6-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;type_traits&gt;
constexpr std::int32_t value = 0;
#if value &gt; 10
#error "Incorrect value" // Non-compliant
#endif
void F1() noexcept
{
static_assert(value &lt;= 10, "Incorrect value"); // Compliant
// ...
}
template &lt;typename T&gt;
void F2(T& a)
{
static_assert(std::is_copy_constructible&lt;T&gt;::value,
"f2() function requires copying"); // Compliant
// ...
}
</code></pre>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"#error", file.contents()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    for lex in lexer.lexemes():
        if lex.text() == "error" and lex.token() == "Preprocessor":
            check.violation(lex.ent(), file, lex.line_begin(),
                            lex.column_begin(), ERR1)
