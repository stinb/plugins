# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12-08-2021
import re

ERR1 = 'std::vector<bool> was used'

def ids():
    return ('A18-1-2', 'CPP_T002')

def name(id):
    return {
        'A18-1-2': """\
Published Standards/AUTOSAR/The std::vector<bool> specialization shall not be \
used""",
        'CPP_T002': """\
All Checks/Language Specific/C and C++/Types/The std::vector<bool> \
specialization shall not be used"""
    }[id]



def tags(id):
    return {
        'A18-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T002': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>The std::vector&lt;bool&gt; specialization does not work with all STL algorithms as
expected. In particular, operator[]() does not return a contiguous sequence of
elements as it does for the primary template std::vector&lt;T&gt;.</p>
<p>The C++ Language Standard guarantees that distinct elements of an STL
container can be safely modified concurrently, except when the container is a
std::vector&lt;bool&gt;.</p>
<p>Note that std::bitset&lt;N&gt;, std::array&lt;bool, N&gt;, std::deque&lt;bool&gt;, or using
std::vector with a value type which wraps bool are possible alternatives.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A18-1-2.cpp 312108 2018-03-16 17:56:49Z jan.babst $
#include &lt;cstdint&gt;
#include &lt;vector&gt;

class BoolWrapper
{
public:
  BoolWrapper() = default;
  constexpr BoolWrapper(bool b) : b_(b) {} // implicit by design
  constexpr operator bool() const { return b_; } // implicit by design
  private:
  bool b_{};
};

void Fn() noexcept
{
  std::vector&lt;std::uint8_t&gt; v1; // Compliant
  std::vector&lt;bool&gt; v2; // Non-compliant
  std::vector&lt;BoolWrapper&gt; v3{true, false, true, false}; // Compliant
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'vector<bool>', file.contents()):
        return



    lexer = file.lexer(lookup_ents=False)

    lexemes = lexer.lexemes()

    for lexeme in lexemes:
        # Look for vector<bool>
        if lexeme.text() == 'vector':

            lexeme = lexeme.next(True, True)
            if lexeme and lexeme.text() == '<':
                lexeme = lexeme.next(True, True)
                if lexeme and lexeme.text() == 'bool':
                    check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)

