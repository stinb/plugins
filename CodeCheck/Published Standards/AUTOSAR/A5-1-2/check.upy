ERR1 = "Variables shall not be implicitly captured in a lambda expression"


# The ID for the check
def ids():
    return ('A5-1-2', 'CPP_V022', 'MISRA23_8.1.2')


# The short name of the check
def name(id):
    return {
        'A5-1-2': 'Published Standards/AUTOSAR/Variables shall not be implicitly captured in a lambda expression',
        'CPP_V022': 'All Checks/Language Specific/C and C++/Variables/Variables shall not be implicitly captured in a lambda expression',
        'MISRA23_8.1.2': 'Published Standards/MISRA C++ 2023/8.1.2 Variables should be captured explicitly in a non-transient lambda'
    }[id]


def tags(id):
    return {
        'A5-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Variables',
        ],
        'CPP_V022': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],
        'MISRA23_8.1.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Variables',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    if id == 'MISRA23_8.1.2':
        return '''
<p><b>Amplification</b></p>
<p>This rule applies to capture by value and capture by reference.</p>

<p><b>Rationale</b></p>
<p>Naming the variables captured by a lambda expression clarifies its dependencies. This allows variables
captured by reference and pointers captured by value to be more easily identified, helping to ensure
that they are not dangling when the lambda is called.</p>
<p>This issue cannot occur for a transient lambda, so there is no need to explicitly capture its variables.</p>

<p><b>Example</b></p>
<pre><code language="C++">void bar( double val, double min, double max )
{
 auto const easedVal = [&]()
 {
 if ( val &lt; min ) { return ( val + min ) / 2; }
 if ( val &gt; max ) { return ( val + max ) / 2; }
 return val;
 }(); // Compliant - called immediately
 auto const ease = [&]()
 {
 if ( val &lt; min ) { return ( val + min ) / 2; }
 if ( val &gt; max ) { return ( val + max ) / 2; }
 return val;
 }; // Non-compliant
 ease(); // - not an immediate call
}
template&lt; typename It, typename Func &gt;
bool f1( It b, It e, Func f ) // f1 does not store f
{
 for ( It it = b; it != e; ++it )
 {
 if ( f( *it ) ) // f is called
 {
 return true;
 }
 }
 return false;
}
template&lt; typename Cont, typename Func &gt;
bool f2( Cont const & c, Func f ) // f2 does not store f
{
 return f1( std::begin(c), std::end(c), f ); // f passed to non-storing function
}
void foo( std::vector&lt; size_t &gt; const & v, size_t i )
{
 bool b1 = f1( v.cbegin(), v.cend(),
 [&]( size_t elem ) { return elem == i; } ); // Compliant
 bool b2 = f2( v,
 [&]( size_t elem ) { return elem == i; } ); // Compliant
}
struct Speedometer
{
 std::vector&lt; std::function&lt; void ( double ) &gt; &gt; observers;
 template&lt; typename Func &gt;
 void addObserver( Func f ) // addObserver stores f
 {
 observers.push_back( f ); // Copying f to the std::function
 }
};
void process( std::function&lt; Speedometer() &gt; );
auto f3()
{
 Speedometer s;
 process( [&](){ return s; } ); // Non-compliant - conversion to
 // std::function stores the lambda
 return [=]() { return s; }; // Non-compliant - implicit capture
}
void addLoggers( Speedometer s, std::ostream & os )
{
 s.addObserver( [&]( double speed ) // Non-compliant - implicit capture
 { os &lt;&lt; speed; });
 s.addObserver( [&os]( double speed ) // Compliant - explicit capture
 { os &lt;&lt; speed; } );
 s.addObserver( []( double speed ) // Compliant - no capture
 { std::cout &lt;&lt; speed; } );
}
</code></pre>

<p><b>Developer's Note</b></p>
<p>Due to some limitations, this check can only identify that a lambda is transient when it is immediately invoked.</p>
'''

    return """\
<p><b>Rationale</b></p>
<p>Capturing variables explicitly helps document the intention of the author. It also allows for different variables to be explicitly captured by copy or by reference within the lambda definition.</p>
<p><b>Exception</b></p>
<p>It is allowed to implicitly capture variables with non-automatic storage duration.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A5-1-2.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;algorithm&gt;
3 #include &lt;cstdint&gt;
4 #include &lt;vector&gt;
5 void Fn1(const std::vector&lt;std::int32_t&gt;& v)
6 {
7 std::uint64_t sum = 0;
8 std::for_each(v.begin(), v.end(), [&](std::int32_t lhs) {
9 sum += lhs;
10 }); // Non-compliant
11
12 sum = 0;
13 std::for_each(v.begin(), v.end(), [&sum](std::int32_t lhs) {
14 sum += lhs;
15 }); // Compliant
16 }
17 void Fn2()
18 {
19 constexpr std::uint8_t n = 10;
20 static std::int32_t j = 0;
21 [n]() {
22 std::int32_t array[n]; // Compliant
23 j += 1; // Compliant by exception
24 };
25 }
</code></pre>
<p><b>See also</b></p>
<p>HIC++ v4.0 [9]: 5.1.4 Do not capture variables implicitly in a lambda.
</p>
<p>C++ Core Guidelines [11]: F.54: If you capture this, capture all variables explicitly (no default capture).
</p>"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')


# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for lambda_ref in file.filerefs("Define","Lambda"):
        end_ref = lambda_ref.ent().ref("End, Endby")
        lex = end_ref.file().lexer(lookup_ents=False).lexeme(end_ref.line(), end_ref.column())
        lex = lex.next(True, True)

        # invoked
        if lex.text() == "(":
            continue

        for cap_ref in lambda_ref.ent().refs("Capture, Use ~Capture", "~Static ~Macro"):
            lex = cap_ref.file().lexer().lexeme(cap_ref.line(), cap_ref.column())

            if lex.ent() and lex.ent().kind().check("Macro"):
                continue
            elif lex.text() != cap_ref.ent().name():
                check.violation(cap_ref.ent(), cap_ref.file(), cap_ref.line(), cap_ref.column(), ERR1)

