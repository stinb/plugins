import re


ERR1 = 'Suffix shall start with an underscore followed by one or more letters'


# The ID for the check
def ids():
    return ('A13-1-2', 'CPP_N016')


# The short name of the check
def name(id):
    return {
        'A13-1-2': 'Published Standards/AUTOSAR/User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters',
        'CPP_N016': 'All Checks/Language Specific/C and C++/Naming Conventions/User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters',
    }[id]





def tags(id):
    return {
        'A13-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Naming Conventions'
        ],
        'CPP_N016': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>User defined suffixes of the user defined literal operators shall start with
underscore followed by one or more letters.</p>
<p><b>Rationale</b></p>
<p>Suffixes that do not begin with the underscore character are reserved for operators
provided by the standard library.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A13-1-2.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
constexpr long double operator"" _m(long double meters) // Compliant
{
// Implementation
return meters;
}
constexpr long double operator"" _kg(long double kilograms) // Compliant
{
// Implementation
return kilograms;
}
constexpr long double operator"" m(long double meters) // Non-compliant
{
// Implementation
return meters;
}
constexpr long double operator"" kilograms(
long double kilograms) // Non-compliant
{
// Implementation
return kilograms;
}
void Fn()
{
long double weight = 20.0_kg;
long double distance = 204.8_m;
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'operator""', file.contents()):
        return

    for func_ref in file.filerefs("Define", "Function"):
        if re.search(r'^operator""', func_ref.ent().name()):
            stripped = func_ref.ent().name().strip('operator""')

            if not re.search(r"_\D+", stripped):
                check.violation(func_ref.ent(), file,
                                func_ref.line(), func_ref.column(), ERR1)
