# This script is designed to run with Understand - CodeCheck
# 1-10-22


ERR1 = 'Do statement should not be used'


# The ID for the check
def ids():
    return ('A6-5-3', 'CPP_C041')


# The short name of the check
def name(id):
    return {
        'A6-5-3': 'Published Standards/AUTOSAR/Do statements should not be used',
        'CPP_C041': 'All Checks/Language Specific/C and C++/Control Flow/Do statements should not be used',
    }[id]



def tags(id):
    return {
        'A6-5-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Control Flow',
        ],
        'CPP_C041': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>

<p>
Do-statements are bug-prone, as the termination condition is checked at the end and can be overlooked.
</p>

<p><b>Exception</b></p>

<p>
A do-statement may be used in a function-like macro to ensure that its invocation behaves like an expression statement consisting of a function call (see http://cfaq.com/cpp/multistmt.html).
</p>

<p>Note: Rule A16-0-1 forbids function-like macros. This exception is kept in case rule A16-0-1 is disabled in a project.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A6-5-3.cpp 291350 2017-10-17 14:31:34Z jan.babst $

#include &lt;cstdint&gt;

// Compliant by exception
#define SWAP(a, b)             \\
    do                         \\
    {                          \\
        decltype(a) tmp = (a); \\
        (a) = (b);             \\
        (b) = tmp;             \\
    } while (0)

// Non-compliant
#define SWAP2(a, b)        \\
    decltype(a) tmp = (a); \\
    (a) = (b);             \\
    (b) = tmp;

int main(void)
{
    uint8_t a = 24;
    uint8_t b = 12;

    if (a &gt; 12)
        SWAP(a, b);

    // if (a &gt; 12)
    //     SWAP2(a, b);
    // Does not compile, because only the first line is used in the body of the
    // if-statement. In other cases this may even cause a run-time error.
    // The expansion contain two semicolons in a row, which may be flagged by
    // compiler warnings.
    // Expands to:
    // if (a &gt; 12)
    //     decltype(a) tmp = (a);
    // (a) = (b);
    // (b) = tmp;;

    return 0;
}

</code></pre>

<p><b>See also</b></p>

<p>
â€¢ C++ Core Guidelines [11]: ES.75: Avoid do-statements.
</p>
"""



# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if lexer:
        lex = lexer.first()

        is_macro = False

        while lex:
            lex_kind = lex.ent().kind() if lex.ent() else None

            if lex_kind and lex_kind.check("Macro"):
                is_macro = True
            elif lex.text() == "do" and lex.token() in {"Identifier", "Keyword"}:
                if not is_macro:
                    check.violation(None, file, lex.line_begin(),
                                    lex.column_begin(), ERR1)
            elif is_macro and lex.token() == "Newline":
                is_macro = False

            lex = lex.next(ignore_comments=True)
