ERR1 = 'Function with a "forwarding reference" argument shall not be overloaded'


# The ID for the check
def ids():
    return ('A13-3-1', 'CPP_F039')


# The short name of the check
def name(id):
    return {
        'A13-3-1': 'Published Standards/AUTOSAR/A function that contains "forwarding reference" as its argument shall not be overloaded',
        'CPP_F039': 'All Checks/Language Specific/C and C++/Functions/A function that contains "forwarding reference" as its argument shall not be overloaded',
    }[id]





def tags(id):
    return {
        'A13-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions'
        ],
        'CPP_F039': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>A function that contains "forwarding reference" as its argument shall not be
overloaded.</p>
<p><b>Rationale</b></p>
<p>A template parameter that is declared "T&&" (Scott Meters called it a "universal
reference", while C++ Language Standard calls it a "forwarding reference") will deduce
for any type. Overloading functions with "forwarding reference" argument may lead to
developer's confusion on which function will be called.</p>
<p><b>Exception</b></p>
<p>Declaring an overloading function that takes a "forwarding reference" parameter to be
"=delete" does not violate this rule.</p>
<p>Declaring a "forwarding constructor" that is constrained (via SFINAE) to not match any
other overloads also does not violate this rule, see A14-5-1.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A13-3-1.cpp 309903 2018-03-02 12:54:18Z christof.meerwald $
#include &lt;cstdint&gt;
template &lt;typename T&gt;
void F1(T&& t) noexcept(false)
{
}
void F1(
std::int32_t&& t) noexcept // Non-compliant - overloading a function with
// forwarding reference
{
}
template &lt;typename T&gt;
void F2(T&& t) noexcept(false)
{
}
void F2(std::int32_t&) = delete; // Compliant by exception

class A
{
public:
// Compliant by exception, constrained to not match copy/move ctors
template&lt;typename T,
std::enable_if_t&lt;! std::is_same&lt;std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;, A&gt;::value&gt; * = nullptr&gt;
A(T &&value);
};

int main(int, char**)
{
std::int32_t x = 0;
F1(x); // Calls f1(T&&) with T = int&
F1(+x); // Calls f1(std::int32_t&&)
F1(0); // Calls f1(std::int32_t&&)
F1(0U); // Calls f1(T&&) with T = unsigned int
F2(0); // Calls f2(T&&) with T = int
// f2(x); // Compilation error, the overloading function is deleted
}
</code></pre>
<p><b>See Also</b></p>
<p>• HIC++ v4.0 [9]: 13.1.2 If a member of a set of callable functions includes a
universal reference parameter, ensure that one appears in the same position for
all other members.</p>
<p>• Effective Modern C++ [13]: Item 26. Avoid overloading on universal references.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for temp_func_ref in file.filerefs("Define", "Function Template"):
        template_type = []

        for temp_type in temp_func_ref.ent().refs("Define", "TemplateParameter"):
            template_type.append(temp_type.ent().name())

        for param_ref in temp_func_ref.ent().refs("Define", "Parameter"):
            param_type = param_ref.ent().type()

            if param_type and ("&&" in param_type) and any(_type in param_type for _type in template_type):
                for func_ref in file.filerefs("Define, Declare ~Delete", "Function ~Template"):
                    if func_ref.ent().name() == temp_func_ref.ent().name() and "&&" in func_ref.ent().parameters():
                        check.violation(func_ref.ent(), file,
                                        func_ref.line(), func_ref.column(), ERR1)
