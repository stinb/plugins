import re

ERR1 = "The signal handling facilities of <csignal> shall not be used"

# The ID for the check
def ids():
    return ('M18-7-1', 'MISRA08_18-7-1', 'MISRA04_20.8', 'CPP_L002', 'MISRA23_21.20.3')

# The short name of the check
def name(id):
    return {
        'M18-7-1': """\
Published Standards/AUTOSAR/The signal handling facilities of <csignal> \
shall not be used""",
        'MISRA08_18-7-1': """\
Published Standards/MISRA-C++ 2008/18-7-1 The signal handling facilities of \
<csignal> shall not be used""",
        'MISRA04_20.8': """\
Published Standards/MISRA-C 2004/20.8 The signal handling facilities of \
<signal.h> shall not be used""",
        'CPP_L002': """\
All Checks/Language Specific/C and C++/Libraries/The signal handling facilities \
of <csignal> shall not be used""",
        'MISRA23_21.20.3': """\
Published Standards/MISRA C++ 2023/21.20.3 The facilities provided by the standard header file <csignal> shall not be used""",
    }[id]




def tags(id):
    return {
        'MISRA08_18-7-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Libraries',
        ],
        'MISRA04_20.8': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Libraries',
        ],
        'M18-7-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Libraries',
        ],
        'CPP_L002': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
        'MISRA23_21.20.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    if id == 'MISRA23_21.20.3':
        return '''
<p><b>Amplification</b></p>
<p>None of the facilities that are specified as being provided by &lt;csignal&gt; shall be used.</p>
<p>Note: this rule also applies to the facilities provided by &lt;signal.h&gt;.</p>

<p><b>Rationale</b></p>
<p>The inappropriate use of signal handling can lead to undefined and implementation-defined behaviour.</p>
<p>Note: the C++ Standard states that signal handling behaviour is specified in the related version of
ISO 9899 [6].</p>

<p><b>Exception</b></p>
<p>Calls to signal with a value of SIG_IGN as the second (func) parameter may be used to disable one
or more signals. For example:</p>
<pre><code language="C++">
signal( SIGTERM, SIG_IGN );
</code></pre>

<p><b>Developer's Note:</b></p>
<p>This check automatically flags the use of the header files signal.h and csignal.</p>
        '''

    return """\
<p><b>Rationale</b></p>
<p>Signal handling contains implementation-defined and undefined behaviour.</p>
<p><b>Example</b></p>
<pre><code language="C++">#include &lt;csignal&gt;
void my_handler ( int32_t );
void f1 ( )
{
signal ( 1, my_handler ); // Non-compliant
}
</code></pre>
"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    for ref in file.filerefs('Include', 'Unresolved Header File'):
        if re.search(r'^(csignal|signal\.h)', ref.ent().name()):
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
