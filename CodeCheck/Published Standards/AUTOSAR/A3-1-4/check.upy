import re

ERR1 = 'External array size is not stated'

def ids():
    return ('A3-1-4', 'CPP_D038', 'MISRA12_8.11', 'MISRA23_6.0.2', 'MISRA23_8.11')

def name(id):
    return {
        'A3-1-4': 'Published Standards/AUTOSAR/When an array with external linkage is declared, its size shall be stated explicitly',
        'CPP_D038': 'All Checks/Language Specific/C and C++/Declarations and Definitions/When an array with external linkage is declared, its size shall be stated explicitly',
        'MISRA12_8.11': 'Published Standards/MISRA C 2012/8.11 When an array with external linkage is declared, its size should be explicitly specified',
        'MISRA23_6.0.2': 'Published Standards/MISRA C++ 2023/6.0.2 When an array with external linkage is declared, its size should be explicitly specified',
        'MISRA23_8.11': 'Published Standards/MISRA C 2023/8.11 When an array with external linkage is declared, its size should be explicitly specified',
    }[id]



def tags(id):
    return {
        'MISRA12_8.11': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Declarations and Definitions',
        ],
        'A3-1-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D038': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
        'MISRA23_6.0.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Declarations and Definitions',
        ],
        'MISRA23_8.11': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Declarations and Definitions',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'A3-1-4': '''\
<p><b>Rationale</b></p>

<p>Although it is possible to declare an array of incomplete type and access its elements, it is safer to do so when the size of the array can be explicitly determined.</p>

<p><b>Example</b></p>

<pre><code language="C++">//% $Id: A3-1-4.hpp 271687 2017-03-23 08:57:35Z piotr.tanski $
#include &lt;cstdint&gt;
extern std::int32_t array1[];   // Non-compliant
extern std::int32_t array2[42]; // Compliant
</code></pre>''',

        'CPP_D038': '''\
<p><b>Rationale</b></p>

<p>Although it is possible to declare an array of incomplete type and access its elements, it is safer to do so when the size of the array can be explicitly determined.</p>

<p><b>Example</b></p>

<pre><code language="C++">//% $Id: A3-1-4.hpp 271687 2017-03-23 08:57:35Z piotr.tanski $
#include &lt;cstdint&gt;
extern std::int32_t array1[];   // Non-compliant
extern std::int32_t array2[42]; // Compliant
</code></pre>''',
        'MISRA12_8.11': '''\

<p><b>Amplification</b></p>

<p>This rule applies to non-defining declarations only. It is possible to define an array and specify its size implicitly by means of initialization.</p>

<p><b>Rationale</b></p>

<p>Although it is possible to declare an array with incomplete type and access its elements, it is safer to do so when the size of the array may be explicitly determined. Providing size information for each declaration permits them to be checked for consistency. It may also permit a static checker to perform some array bounds analysis without needing to analyse more than one translation unit.</p>

<p><b>Example</b></p>

<pre><code language="C++">extern int32_t array1[ 10 ]; /* Compliant */
extern int32_t array2[ ];    /* Non-compliant */
</code></pre>''',
        'MISRA23_6.0.2': '''\

<p><b>Amplification</b></p>

<p>This rule applies to non-defining declarations only. It is possible to define an array and specify its size implicitly by means of initialization.</p>

<p><b>Rationale</b></p>

<p>Although it is possible to declare an array with incomplete type and access its elements, it is safer to do so when the size of the array may be explicitly determined. Providing size information for each declaration permits them to be checked for consistency. It may also permit a static checker to perform some array bounds analysis without needing to analyse more than one translation unit.</p>

<p><b>Example</b></p>

<pre><code language="C++">int32_t array1[ 10 ]; // Compliant
extern int32_t array2[ ]; // Non-compliant
int32_t array3[ ] = { 0, 10, 15 }; // Compliant
extern int32_t array4[ 42 ]; // Compliant
</code></pre>''',
        'MISRA23_8.11': '''\

<p><b>Amplification</b></p>

<p>This rule applies to non-defining declarations only. It is possible to define an array and specify its size implicitly by means of initialization.</p>

<p><b>Rationale</b></p>

<p>Although it is possible to declare an array with incomplete type and access its elements, it is safer to do so when the size of the array may be explicitly determined. Providing size information for each declaration permits them to be checked for consistency. It may also permit a static checker to perform some array bounds analysis without needing to analyse more than one translation unit.</p>

<p><b>Example</b></p>

<pre><code language="C++">extern int32_t array1[ 10 ]; /* Compliant */
extern int32_t array2[ ];    /* Non-compliant */
</code></pre>''',
    }[id]

def test_entity(file):
    return file.kind().check('header file, code file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    pattern = re.compile(r'.*\[\]')

    for ref in file.filerefs('Declare', ''):
        ent = ref.ent()
        if ent.type() and pattern.match(ent.type()):
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
