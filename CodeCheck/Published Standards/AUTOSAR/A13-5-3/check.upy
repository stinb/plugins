import re


ERR1 = 'User-defined conversion operators should not be used'


# The ID for the check
def ids():
    return ('A13-5-3', 'CPP_T049')


# The short name of the check
def name(id):
    return {
        'A13-5-3': 'Published Standards/AUTOSAR/User-defined conversion operators should not be used',
        'CPP_T049': 'All Checks/Language Specific/C and C++/Types/User-defined conversion operators should not be used',
    }[id]



def tags(id):
    return {
        'A13-5-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Types'
        ],
        'CPP_T049': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>User-defined conversion operators should not be used.</p>
<p><b>Rationale</b></p>
<p>Explicitly named conversions using dedicated member function eliminate any potential
errors that can arise if the type conversion operators have to be used.</p>
<p>If using conversion operators is fundamental in an application domain, see A13-5-2.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A13-5-3.cpp 305629 2018-01-29 13:29:25Z piotr.serwa $
2 #include &lt;iostream&gt;
3
4 class Complex
5 {
6 public:
7 Complex (double r, double i = 0.0) : re(r), im(i) {}
8 explicit operator double() const noexcept { return re; }
9 double AsDouble() const noexcept { return re; }
10 private:
11 double re;
12 double im;
13 };
14
15 int main(void)
16 {
17 Complex c(2.0f);
18
19 std::cout &lt;&lt; (double) c &lt;&lt; std::endl; //compliant with A13-5-2, noncompliant with A13-5-3
20 std::cout &lt;&lt; c.AsDouble() &lt;&lt; std::endl; //compliant
21
22 return 0;
23 }
</code></pre>
<p><b>See also</b></p>
<p>• JSF December 2005 [8]: AV Rule 177: User-defined conversion functions should
be avoided.</p>
<p>• C++ Core Guidelines [11]: C.164: Avoid conversion operators.</p>
"""



# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        if re.search(r"operator .", func_ref.ent().name()):
            for use_ref in func_ref.ent().refs("Callby"):
                check.violation(use_ref.scope(), use_ref.file(),
                                use_ref.line(), use_ref.column(), ERR1)
