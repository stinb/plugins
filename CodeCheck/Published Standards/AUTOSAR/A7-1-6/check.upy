# This script is designed to run with Understand - CodeCheck
# 6-16-21


import re


ERR1 = 'Typedef specifier is used'


def ids():
    return ('A7-1-6', 'CPP_T026')


def name(id):
    return {
        'A7-1-6': 'Published Standards/AUTOSAR/The typedef specifier shall not be used',
        'CPP_T026': 'All Checks/Language Specific/C and C++/Types/The typedef specifier shall not be used',
    }[id]





def tags(id):
    return {
        'A7-1-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T026': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Rationale</b></p>

<p>
The typedef specifier can not be easily used for defining alias templates. Also, the typedef syntax makes the code less readable.</p>

<p>
For defining aliases, as well as template aliases, it is recommended to use the using syntax instead of the typedef.
</p>

<p>
Note that active issues related to the using syntax are listed below, in the "See also" section.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A7-1-6.cpp 271687 2017-03-23 08:57:35Z piotr.tanski $
#include &lt;cstdint&gt;
#include &lt;type_traits&gt;

typedef std::int32_t (*fPointer1)(std::int32_t); // Non-compliant

using fPointer2 = std::int32_t (*)(std::int32_t); // Compliant

// template&lt;typename T&gt;
// typedef std::int32_t (*fPointer3)(T); // Non-compliant - compilation error

template &lt;typename T&gt;
using fPointer3 = std::int32_t (*)(T); // Compliant
</code></pre>

<p><b>See also</b></p>

<p>
• C++ Core Guidelines [11]: T.43: Prefer using over typedef for defining aliases
</p>

<p>
• C++ Standard Core Language Active Issues, Revision 96 [18]: 1554. Access and alias templates.
</p>

<p>
• C++ Standard Core Language Defect Reports and Accepted Issues, Revision 96 [18]: 1558. Unused arguments in alias template specializations.
</p>
'''


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'typedef', file.contents()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    for lex in lexer.lexemes():
        if lex.text() == 'typedef' and lex.token() == 'Keyword':
            check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
