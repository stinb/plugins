ERR1 = 'Function neither declared as "extern" nor "inline"'
ERR2 = 'Object not declared as "extern"'


# The ID for the check
def ids():
    return ('A3-1-1', 'MISRA08_3-1-1', 'CPP_H006')


# The short name of the check
def name(id):
    return {
        'A3-1-1': 'Published Standards/AUTOSAR/It shall be possible to include any header file in multiple translation units without violating the One Definition Rule',
        'MISRA08_3-1-1': 'Published Standards/MISRA-C++ 2008/3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule',
        'CPP_H006': 'All Checks/Language Specific/C and C++/Headers/It shall be possible to include any header file in multiple translation units without violating the One Definition Rule',
    }[id]





def tags(id):
    return {
        'MISRA08_3-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Headers',
        ],
        'A3-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Headers',
        ],
        'CPP_H006': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    return {
        'A3-1-1': '''\
<p><b>Rule</b></p>
<p>It shall be possible to include any header file in multiple translation units
without violating the One Definition Rule.</p>
<p><b>Rationale</b></p>
<p>A header file is a file that holds declarations used in more than one translation unit
and acts as an interface between separately compiled parts of a program. A header
file often contains classes, object declarations, enums, functions, inline functions,
templates, typedefs, type aliases and macros.</p>
<p>In particular, a header file is not supposed to contain or produce definitions of global
objects or functions that occupy storage, especially objects that are not declared
"extern" or definitions of functions that are not declared "inline".</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A3-1-1.hpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
void F1(); // Compliant
extern void F2(); // Compliant
void F3()
{
} // Non-compliant
static inline void F4()
{
} // Compliant
template &lt;typename T&gt;
void F5(T)
{
} // Compliant
std::int32_t a; // Non-compliant
extern std::int32_t b; // Compliant
constexpr static std::int32_t c = 10; // Compliant
namespace ns
{
constexpr static std::int32_t d = 100; // Compliant
const static std::int32_t e = 50; // Compliant
static std::int32_t f; // Non-compliant
static void F6() noexcept; // Non-compliant
}
</code></pre>
<p><b>See also</b></p>
<p>â€¢ MISRA C++ 2008 [7]: Rule 3-1-1 It shall be possible to include any header file in
multiple translation units without violating the One Definition Rule.</p>
''',
        'MISRA08_3-1-1': '''\
<p><b>Rationale</b></p>
Header files should be used to declare objects, functions, inline functions, function templates,
typedefs, macros, classes, and class templates and shall not contain or produce definitions of
objects or functions (or fragment of functions or objects) that occupy storage.
</p>

<p>
A header file is considered to be any file that is included via the #include directive, regardless of
name or suffix.
</p>

<p><b>Example</b></p><pre><code language="C++">  // a.h
  void f1 ( );            // Compliant
  void f2 ( ) { }         // Non-compliant
  inline void f3 ( ) { }  // Compliant
  template &lt;typename T&gt;
  void f4 ( T ) { }       // Compliant
  int a;                  // Non-compliant

  // a.cpp
  #include "a.h"

</code></pre>
''',
        'CPP_H006': '''\
<p><b>Rationale</b></p>
Header files should be used to declare objects, functions, inline functions, function templates,
typedefs, macros, classes, and class templates and shall not contain or produce definitions of
objects or functions (or fragment of functions or objects) that occupy storage.
</p>

<p>
A header file is considered to be any file that is included via the #include directive, regardless of
name or suffix.
</p>

<p><b>Example</b></p><pre><code language="C++">  // a.h
  void f1 ( );            // Compliant
  void f2 ( ) { }         // Non-compliant
  inline void f3 ( ) { }  // Compliant
  template &lt;typename T&gt;
  void f4 ( T ) { }       // Compliant
  int a;                  // Non-compliant

  // a.cpp
  #include "a.h"

</code></pre>
''',
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    def check_violation(ref, err):
        check.violation(ref.ent(), file, ref.line(), ref.column(), err)

    lexer = file.lexer(lookup_ents=False)

    if not lexer:
        return

    for func_ref in file.filerefs("Define, Declare", "Function ~Private ~Member ~Template"):
        lex = lexer.lexeme(func_ref.line(), func_ref.column())
        inline = True if func_ref.ent().freetext("Inline") else False
        compliant = True if func_ref.kindname() == "Declare" or inline else False

        if not inline:
            while lex and lex.line_begin() == func_ref.line():
                if lex.text() == "extern" and lex.token() == "Keyword":
                    compliant = True
                    break
                elif lex.text() == "static" and lex.token() == "Keyword":
                    compliant = False
                    break

                lex = lex.previous(ignore_whitespace=True)

        if not compliant:
            check_violation(func_ref, ERR1)

    for obj_ref in file.filerefs("Define, Declare", "Object ~Local ~Private ~Member ~TemplateParameter"):
        compliant = False
        lex = lexer.lexeme(obj_ref.line(), obj_ref.column())

        if "const" in str(obj_ref.ent().type()):
            compliant = True
            lex = None

        while lex and lex.line_begin() == obj_ref.line():
            if lex.text() == "extern" and lex.token() == "Keyword":
                compliant = True
                break

            lex = lex.previous(ignore_whitespace=True)

        if not compliant:
            check_violation(obj_ref, ERR2)
