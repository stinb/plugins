ERR1 = 'Member data in non-POD class types shall be private'


# The ID for the check
def ids():
    return ('M11-0-1', 'CPP_D069')

def name(id):
    return {
        'M11-0-1': """\
Published Standards/AUTOSAR/Member Data in Non-POD Class not Private""",
        'CPP_D069': """\
All Checks/Language Specific/C and C++/Declarations and Definitions/Member Data in Non-POD Class not Private"""

    }[id]







def tags(id):
    return {
        'M11-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D069': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p> Member data in non-POD class types shall be private.</p>
<p><b>Rationale</b></p>
<p>By implementing class interfaces with member functions, the implementation retains more control
over how the object state can be modified, and helps to allow a class to be maintained without
affecting clients.</p>
<p><b>Exception</b></p>
<p>It is not a violation of this rule if the declaration or re-declaration contains an unnamed parameter.</p>
<p><b>Example</b></p>
<pre><code language="C++">// File1
void CreateRectangle ( uint32_t Height, uint32_t Width );
// File2
// Non-compliant
void CreateRectangle ( uint32_t Width, uint32_t Height );
void fn1 ( int32_t a );
void fn2 ( int32_t );
void fn1 ( int32_t b ) // Non-compliant
{
}
void fn2 ( int32_t b ) // Compliant
{
}
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class"):
        for obj_ref in class_ref.ent().refs("Define", "Public Object, Protected Object"):
            check.violation(obj_ref.ent(), file, obj_ref.line(),
                            obj_ref.column(), ERR1)
