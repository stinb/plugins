# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 11-3-21


import re


ERR1 = 'Type is implicitly converted from "%1" to "%2"'


def ids():
    return ('M5-0-6', 'MISRA08_5-0-6', 'CPP_T010')


def name(id):
    return {
        'M5-0-6': 'Published Standards/AUTOSAR/An implicit integral or floating-point conversion shall not reduce the size of the underlying type',
        'MISRA08_5-0-6': 'Published Standards/MISRA-C++ 2008/5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type',
        'CPP_T010': 'All Checks/Language Specific/C and C++/Types/An implicit integral or floating-point conversion shall not reduce the size of the underlying type',
    }[id]





def tags(id):
    return {
        'MISRA08_5-0-6': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'M5-0-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T010': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

def description():
    return 'An implicit integral or floating-point conversion shall not reduce the size of the underlying type.'


def detailed_description():
    return '''\

<p><b>Rationale</b></p>

<p>
An implicit conversion that results in the size of a type being reduced may result in a loss of information.
</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( )
{
    int32_t s32;
    int16_t s16;
    s16 = s32;                            // Non-compliant
    s16 = static_cast&lt; int16_t &gt; ( s32 ); // Compliant
}
</code></pre>

'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    # Dictionary of all minimum size in bits, not always true for all compilers and target platforms
    size = {'char': 8, 'signed char': 8, 'unsigned char': 8, 'short': 16, 'short int': 16, 'signed short': 16, 'signed short int': 16, 'unsigned short int': 16, 'int': 16, 'signed': 16, 'signed int': 16, 'unsigned': 16, 'unsigned int': 16, 'long': 32, 'long int': 32, 'signed long': 32, 'signed long int': 32, 'unsigned long': 32, 'unsigned long int': 32, 'long long': 64, 'long long int': 64, 'signed long long': 64, 'signed long long int': 64, 'unsigned long long': 64, 'unsigned long long int': 64, 'int8_t': 8, 'int16_t': 16, 'int32_t': 32, 'int64_t': 64, 'int_fast8_t': 8, 'int_fast16_t': 16, 'int_fast32_t': 32, 'int_fast64_t': 64, 'int_least8_t': 8, 'int_least16_t': 16, 'int_least32_t': 32, 'int_least64_t': 64, 'uint8_t': 8, 'uint16_t': 16, 'uint32_t': 32, 'uint64_t': 64, 'uint_fast8_t': 8, 'uint_fast16_t': 16, 'uint_fast32_t': 32, 'uint_fast64_t': 64, 'uint_least8_t': 8, 'uint_least16_t': 8, 'uint_least32_t': 32, 'uint_least64_t': 64, 'float': 32, 'double': 64, 'long double': 80}

    lexer = None
    
    # Whenever a value is set
    for ref in file.filerefs('Set'):
        ent = ref.ent()

        if not lexer:
            lexer = file.lexer()

        # Get the lexeme after the =
        lexeme = lexer.lexeme(ref.line(), ref.column())
        for i in range(2):
            if lexeme:
                if i == 1 and lexeme.text() != '=':
                    lexeme = None
                    break
                lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
        
        # Both are different types
        if lexeme and lexeme.ent():
            fromType = lexeme.ent().type()
            toType = ent.type()
            if fromType in size and toType in size:
                if size[fromType] > size[toType]:
                    check.violation(ent, file, ref.line(), ref.column(), ERR1, fromType, toType)
