import re

ERR1 = 'String literal assigned to non-constant pointer'

# The ID for the check
def ids():
    return ('A2-13-4', 'CPP_P039')

# The short name of the check
def name(id):
    return {
        'A2-13-4': 'Published Standards/AUTOSAR/String literals shall not be assigned to non-constant pointers',
        'CPP_P039': 'All Checks/Language Specific/C and C++/Pointers/String literals shall not be assigned to non-constant pointers',
    }[id]



def tags(id):
    return {
        'A2-13-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Pointers',
        ],
        'CPP_P039': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return '''\
<p><b>Rationale</b></p>
<p>Since C++0x, there was a change in subclause 2.13.5 for string literals. To prevent
    from calling an inappropriate function that might modify its argument, the type of a
    string literal was changed from "array of char" to "array of const char".</p>
<p>Such a usage is deprecated by the Standard and reported by a compiler as a warning.
    This rule is deliberately redundant, in case rules A1-1-1 and A1-4-3 are disabled in a
    project.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A2-13-4.cpp 307578 2018-02-14 14:46:20Z michal.szczepankiewicz $
2
3 int main(void)
4 {
5 char* nc1 = "AUTOSAR"; //non-compliant
6 char nc2[] = "AUTOSAR"; //compliant with A2-13-4, non-compliant with A18
-1-1
7 char nc3[8] = "AUTOSAR"; //compliant with A2-13-4, non-compliant with A18
-1-1
8 nc1[3] = 'a'; // undefined behaviour
9 const char* c1 = "AUTOSAR"; //compliant
10 const char c2[] = "AUTOSAR"; //compliant with A2-13-4, non-compliant
with A18-1-1
11 const char c3[8] = "AUTOSAR"; //compliant with A2-13-4, non-compliant
with A18-1-1
12 //c1[3] = 'a'; //compilation error
13
14 return 0;
15 }
</code></pre>
<p><b>See also</b></p>
<p>JSF December 2005 [8]: AV Rule 151.1: A string literal shall not be modified.
</p>'''

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file, code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    for ref in file.filerefs('Deref Setby, Set', '', True):
        ent = ref.ent()
        if ent.type() == 'char *':
            value = ent.value()
            if value and value[0] == '"':
                check.violation(ent, file, ref.line(), ref.column(), ERR1)
