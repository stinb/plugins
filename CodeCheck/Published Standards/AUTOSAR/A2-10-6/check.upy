ERR1 = 'Variable, function or enumeration declaration hides a class or enumeration in the same scope'


# The ID for the check
def ids():
    return ('A2-10-6', 'CPP_I018')


# The short name of the check
def name(id):
    return {
        'A2-10-6': 'Published Standards/AUTOSAR/A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope',
        'CPP_I018': 'All Checks/Language Specific/C and C++/Identifiers/A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope',
    }[id]


def tags(id):
    return {
        'A2-10-6': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Identifiers',
        ],
        'CPP_I018': [
            'Language: C',
            'Language: C++',
            'Identifiers',
        ],
    }.get(id)


# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>A class or enumeration name shall not be hidden by a variable, function or
enumerator declaration in the same scope.</p>
<p><b>Rationale</b></p>
<p>C++ Language Standard [3] defines that a class or enumeration name can be hidden
by an explicit declaration (of the same name) of a variable, data member, function, or
enumerator in the same scope, regardless of the declaration order. Such declarations
can be misleading for a developer and can lead to compilation errors.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A2-10-6.cpp 313821 2018-03-27 11:16:14Z michal.szczepankiewicz $
2 #include &lt;cstdint&gt;
3
4 namespace NS1 {
5 class G {};
6 void G() {} //non-compliant, hides class G
7 }
8
9 namespace NS2 {
10 enum class H { VALUE=0, };
11 std::uint8_t H = 17; //non-compliant, hides
12 //scoped enum H
13 }
14
15 namespace NS3 {
16 class J {};
17 enum H //does not hide NS2::H, but non-compliant to A7-2-3
18 {
19 J=0, //non-compliant, hides class J
20 };
21 }
22
23 int main(void)
24 {
25 NS1::G();
26 //NS1::G a; //compilation error, NS1::G is a function
27 //after a name lookup procedure
28 class NS1::G a{}; //accessing hidden class type name
29
30 enum NS2::H b ; //accessing scoped enum NS2::H
31 NS2::H = 7;
32
33 class NS3::J c{}; //accessing hidden class type name
34 std::uint8_t z = NS3::J;
35 }
</code></pre>
<p><b>See also</b></p>
<p>• ISO/IEC 14882:2014 [3]: 3.3.10.2: [basic.scope.hiding]</p>
<p>• MISRA C++ 2008 [7]: 2-10-6: If an identifier refers to a type, it shall not also refer
to an object or a function in the same scope.</p>
<p>• HIC++ v4.0 [9]: 3.1.1: Do not hide declarations.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    def check_violation(ref):
        check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)

    for class_enum_ref in file.filerefs("Define, Declare", "Class ~Unnamed, Enum ~Unnamed"):
        for scope_ref in class_enum_ref.scope().refs("Define", "Object, Function, Enum"):
            if ((class_enum_ref.ent().id() != scope_ref.ent().id())
                    and (class_enum_ref.ent().name() == scope_ref.ent().name())):
                check_violation(scope_ref)

            for enumerator_ref in scope_ref.ent().refs("Define", "Enumerator"):
                if class_enum_ref.ent().name() == enumerator_ref.ent().name():
                    check_violation(enumerator_ref)
