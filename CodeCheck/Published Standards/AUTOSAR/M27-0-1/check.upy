# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12-02-2021
import re

ERR1 = '<cstdio> was used'

def id():
    return 'M27-0-1'

def name():
    return """\
Published Standards/AUTOSAR/The stream input/output library <cstdio> shall not be used"""




def tags(id):
    return {
        'M27-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>This includes file and I/O functions fgetpos, fopen, ftell, gets, perror,
remove, rename, etc.</p>
<p>Streams and file I/O have a large number of unspecified, undefined and
implementation-defined behaviours associated with them.</p>
<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstdio&gt; // Non-compliant
void fn ( )
{
  char_t array [ 10 ];
  gets ( array ); // Can lead to buffer over-run
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'<cstdio>', file.contents()):
        return

    lexer = file.lexer()

    lexemes = lexer.lexemes()

    for lexeme in lexemes:
        if lexeme.text() == '<cstdio>':
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
