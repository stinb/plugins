# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 11-3-21


import re


ERR1 = 'Type is implicitly converted from "%1" to "%2"'


def ids():
    return ('M5-0-5', 'MISRA08_5-0-5', 'CPP_T009')


def name(id):
    return {
        'M5-0-5': 'Published Standards/AUTOSAR/There shall be no implicit floating-integral conversions',
        'MISRA08_5-0-5': 'Published Standards/MISRA-C++ 2008/5-0-5 There shall be no implicit floating-integral conversions',
        'CPP_T009': 'All Checks/Language Specific/C and C++/Types/There shall be no implicit floating-integral conversions',
    }[id]





def tags(id):
    return {
        'MISRA08_5-0-5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'M5-0-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T009': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

def description():
    return 'There shall be no implicit floating-integral conversions.'


def detailed_description():
    return '''\

<p><b>Rationale</b></p>
Conversions from floating point to integral types discard information, and may lead to <i>undefined behaviour</i> if the floating-point value cannot be represented in the integral type.
</p>

<p>
Conversions from integral types to floating point types may not result in an exact representation, which may not be consistent with developer expectations.
</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( )
{
    float32_t f32;
    int32_t s32;
    s32 = f32;                              // Non-compliant
    f32 = s32;                              // Non-compliant
    f32 = static_cast&lt; float32_t &gt; ( s32 ); // Compliant
}
</code></pre>

'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    floatTypes = {'float', 'double', 'long double'}
    integralTypes = {'short', 'short int', 'signed short', 'signed short int', 'unsigned short int', 'int', 'signed', 'signed int', 'unsigned', 'unsigned int', 'long', 'long int', 'signed long', 'signed long int', 'unsigned long', 'unsigned long int', 'long  long', 'long long int', 'signed long long', 'signed long long int', 'unsigned long long', 'unsigned long long int', 'int8_t', 'int16_t', 'int32_t', 'int64_t', 'int_fast8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_least8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'intmax_t', 'intptr_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint64_t', 'uint_fast8_t', 'uint_fast16_t', 'uint_fast32_t', 'uint_fast64_t', 'uint_least8_t', 'uint_least16_t', 'uint_least32_t', 'uint_least64_t', 'uintmax_t', 'uintptr_t'}

    lexer = None
    
    # Whenever a value is set
    for ref in file.filerefs('Set'):
        ent = ref.ent()

        if not lexer:
            lexer = file.lexer()

        # Get the lexeme after the =
        lexeme = lexer.lexeme(ref.line(), ref.column())
        for i in range(2):
            if lexeme:
                if i == 1 and lexeme.text() != '=':
                    lexeme = None
                    break
                lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
        
        # Both are different types
        if lexeme and lexeme.ent():
            if (ent.type() in integralTypes and lexeme.ent().type() in floatTypes) or (ent.type() in floatTypes and lexeme.ent().type() in integralTypes):
                check.violation(ent, file, ref.line(), ref.column(), ERR1, lexeme.ent().type(), ent.type())
