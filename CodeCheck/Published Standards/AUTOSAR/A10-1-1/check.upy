ERR1 = 'Class is derived from more than one non-interface base class'


# The ID for the check
def ids():
    return ('A10-1-1', 'CPP_D053')


# The short name of the check
def name(id):
    return {
        'A10-1-1': 'Published Standards/AUTOSAR/Multiple Base Classes',
        'CPP_D053': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Multiple Base Classes',
    }[id]





def tags(id):
    return {
        'A10-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_D053': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Class shall not be derived from more than one base class which is not an
interface class.</p>
<p><b>Rationale</b></p>
<p>Multiple inheritance exposes derived class to multiple implementations. This makes
the code more difficult to maintain.</p>
<p>See: Diamond-Problem, Interface-Class</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A10-1-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
class A
{
public:
    void F1() noexcept(false) {}

private:
    std::int32_t x{0};
    std::int32_t y{0};
};
class B
{
public:
    void F2() noexcept(false) {}

private:
    std::int32_t x{0};
};
class C : public A,
          public B // Non-compliant - A and B are both not interface classes
{
};
class D
{
public:
    virtual ~D() = 0;
    virtual void F3() noexcept = 0;
    virtual void F4() noexcept = 0;
};
class E
{
public:
    static constexpr std::int32_t value{10};

    virtual ~E() = 0;
    virtual void F5() noexcept = 0;
};
class F : public A,
          public B,
          public D,
          public E // Non-compliant - A and B are both not interface classes
{
};
class G : public A,
          public D,
          public E // Compliant - D and E are interface classes
{
};
</code></pre>
<p><b>See also</b></p>
<p>• JSF December 2005 [8]: AV Rule 88 Multiple inheritance shall only be allowed in
the following restricted form: n interfaces plus m private implementations, plus at
most one protected implementation.</p>
<p>• HIC++ v4.0 [9]: 10.3.1 Ensure that a derived class has at most one base class
which is not an interface class.</p>
<p>• C++ Core Guidelines [11]: C.135: Use multiple inheritance to represent multiple
distinct interfaces.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class"):
        non_interface_base = 0

        for base_ref in class_ref.ent().refs("Base", "Class"):
            for member_ref in base_ref.ent().refs("Declare ~Implicit, Define", "Member"):
                ref_kind = member_ref.ent().kind()

                if ref_kind.check("Function") and not ref_kind.check("Public Virtual Pure"):
                    non_interface_base += 1
                    break
                elif ref_kind.check("Object"):
                    lexer = file.lexer(lookup_ents=False)
                    lex = lexer.lexeme(member_ref.line(), 0)
                    next_lex = lex
                    is_constexpr = False

                    if not ref_kind.check("Public Static"):
                        non_interface_base += 1
                        break

                    while next_lex and (next_lex.text() != member_ref.ent().name()):
                        if next_lex.text() == "constexpr" and next_lex.token() == "Identifier":
                            is_constexpr = True
                            break

                        next_lex = next_lex.next(ignore_whitespace=True)

                    if not is_constexpr:
                        non_interface_base += 1
                        break

            if non_interface_base > 1:
                check.violation(class_ref.ent(), file,
                                class_ref.line(), class_ref.column(), ERR1)
                break
