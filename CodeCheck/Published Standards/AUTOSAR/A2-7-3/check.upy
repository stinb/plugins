ERR1 = 'Declaration is not preceded by a documentation'


# The ID for the check
def ids():
    return ('A2-7-3', 'CPP_C037')


# The short name of the check
def name(id):
    return {
        'A2-7-3': 'Published Standards/AUTOSAR/All declarations of "user-defined" types, static and non-static data members, functions and methods shall be preceded by documentation',
        'CPP_C037': 'All Checks/Language Specific/C and C++/Comments/Documentation',
    }[id]





def tags(id):
    return {
        'A2-7-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Comments',
        ],
        'CPP_C037': [
            'Language: C',
            'Language: C++',
            'Comments',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>Every declaration needs to provide a proper documentation.</p>
<p>This is compatible with the C++ standard library documentation. This forces
a programmer to provide a clarification for defined types and its data members
responsibilities, methods and functions usage, their inputs and outputs specification
(e.g. memory management, ownership, valid boundaries), and exceptions that could
be thrown.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-7-3.hpp 305382 2018-01-26 06:32:15Z michal.szczepankiewicz $
#include &lt;cstdint&gt;

void F1(std::int32_t) noexcept; // Non-compliant documentation

std::int32_t F2(std::int16_t input1,
std::int32_t input2); // Non-compliant documentation

/// @brief Function description
///
/// @param input1 input1 parameter description
/// @param input2 input2 parameter description
/// @throw std::runtime_error conditions to runtime_error occur
///
/// @return return value description
std::int32_t F3(
std::int16_t input1,
std::int16_t input2) noexcept(false); // Compliant documentation

/// @brief Class responsibility
class C // Compliant documentation
{
public:
/// @brief Constructor description
///
/// @param input1 input1 parameter description
/// @param input2 input2 parameter description
C(std::int32_t input1, float input2) : x{input1}, y{input2} {}

/// @brief Method description
///
/// @return return value descrption
std::int32_t const* GetX() const noexcept { return &x; }

private:
/// @brief Data member descpription
std::int32_t x;
/// @brief Data member descpription
float y;
};
</code></pre>
<p><b>See also</b></p>
<p>â€¢ JSF December 2005 [8]: AV Rule 129: Comments in header files should describe
the externally visible behavior of the functions or classes being documented.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(lookup_ents=False)

    if not lexer:
        return

    for ref in file.filerefs("Define, Declare", "Function, Class, Struct, Union, Enum, Typedef, Member Object"):
        lex = lexer.lexeme(ref.line()-1, 0)
        if lex and (lex.token() == "Comment" or lex.next(ignore_whitespace=True).token() == "Comment"):
            continue
        else:
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
