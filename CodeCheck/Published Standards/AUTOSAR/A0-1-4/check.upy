
ERR1 = 'Unused parameter'

# The ID for the check


def ids():
    return ('A0-1-4', 'CPP_F027', 'MISRA23_0.2.2')

# The short name of the check


def name(id):
    return {
        'A0-1-4': 'Published Standards/AUTOSAR/There shall be no unused named parameters in non-virtual functions',
        'CPP_F027': 'All Checks/Language Specific/C and C++/Functions/There shall be no unused named parameters in non-virtual functions',
        'MISRA23_0.2.2': 'Published Standards/MISRA C++ 2023/0.2.2 A named function parameter shall be used at least once',
    }[id]


def tags(id):
    return {
        'A0-1-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F027': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
        'MISRA23_0.2.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Functions',
        ],
    }.get(id)


def detailed_description(id):
    if id == 'MISRA23_0.2.2':
        return '''
<p><b>Amplification</b></p>
<p>This rule does not apply to parameters that are declared [[maybe_unused]].</p>
<p>Note: this rule also applies to the parameters of a lambda.</p>

<p><b>Rationale</b></p>
<p>It is expected that most functions will use their parameters. If a function parameter is unused, it is
possible that the implementation of the function may not satisfy its requirements. This rule helps to
highlight such potential mismatches.</p>
<p>In cases where an unused parameter is required, for example when defining a virtual function or a
callback function, the parameter can be left unnamed. Where the use of a parameter depends on the
expansion of a macro or varies between different template instantiations, then the parameter can be
declared [[maybe_unused]].</p>

<p><b>Example</b></p>
<pre><code language="C++">class B
{
public:
 virtual int16_t f( int16_t a, int16_t b );
};
class D1 : public B
{
public:
 int16_t f( int16_t a, int16_t b ) override // Non-compliant - 'b' unused
 {
 return a;
 }
};
class D2 : public B
{
public:
 int16_t f( int16_t a, // Compliant - 'a' is used
 int16_t ) override // Rule does not apply - unnamed parameter
 {
 return a;
 }
};
class D3 : public B
{
public:
 int16_t f( int16_t a, int16_t b ) override // Compliant
 {
 return a + b;
 }
};
class D4 : public B
{
public:
 int16_t f( int16_t a, // Compliant
 int16_t b [[maybe_unused]] ) override // Rule does not apply -
 // declared [[maybe_unused]]
 {
 assert( b &gt; 0 ); // assert macro may expand to nothing,
 // leaving 'b' unused.
 return a;
 }
};
void f1(int32_t i, // Non-Compliant
 int32_t j ) // Compliant - explicitly cast to void
{
 ( void )j;
 auto l = []( int32_t m, // Compliant
 int32_t n ) // Non-compliant
 {
 return m;
 };
}
template&lt; bool b &gt;
int32_t f2( int32_t i, // Non-compliant for f2&lt; false &gt;
 int32_t j [[maybe_unused]] ) // Rule does not apply - [[maybe_unused]]
{
 if constexpr ( b )
 {
 return i + j;
 }
 return 0;
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 0.2.1</p>

<p><b>Developer's Notes</b></p>
<p>Parameters that are unused upon evaluating the function at compile time will not be flagged.</p>
        '''

    return """\
<p><b>Rationale</b></p>
<p>Unused named parameters are often a result of a design changes and can lead to
mismatched parameter lists.</p>
<p>Note: This rule does not apply to unnamed parameters, as they are widely used in
SFINAE and concept compliance.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A0-1-4.cpp 305588 2018-01-29 11:07:35Z michal.szczepankiewicz $

#include &lt;type_traits&gt;
#include &lt;string&gt;

//Logger.hpp
class Logger
{
public:
struct console_t {};
struct file_t {};

constexpr static console_t console = console_t();
constexpr static file_t file = file_t();

void init(console_t);
void init(file_t, const std::string& prefix);
};

//Logger.cpp
void Logger::init(console_t)
{
//initialization for a console logger
}
void Logger::init(file_t, const std::string& prefix)
{
//initialization for a file logger for a given prefix path
}

//Message.h
struct MessagePolicy {};
struct WriteMessagePolicy final : public MessagePolicy { };

template &lt;typename T&gt; struct is_mutable : std::false_type {};
template &lt;&gt; struct is_mutable&lt;WriteMessagePolicy&gt; : std::true_type {};

template &lt;typename T, typename Policy = MessagePolicy&gt;
class Message
{
public:
static_assert(std::is_base_of&lt;messagepolicy, Policy&gt;::value == true, "Given parameter is not derived from MessagePolicy");
using value_type = T;

template&lt;typename U = void&gt;
void set(T&& u, typename std::enable_if&lt;is_mutable&lt;Policy&gt;::value, U&gt;::type* = 0)
{
	v = u;
}

private:
value_type v;
};

int main(int, char**)
{
Logger log;
log.init(Logger::console);
log.init(Logger::file, std::string("/tmp/"));

Message&lt;uint8_t&gt; read;
message&lt;uint8_t, WriteMessagePolicy&gt; write;

//read.set(uint8_t(12)); Compilation error
write.set(uint8_t(12));

return 0;
}
</code></pre>
<p><b>See also</b></p>
<p>C++ Core Guidelines [11]: F.9: Unused parameters should be unnamed</p>"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    include_virtual_overrides = True if (check.id() == 'MISRA23_0.2.2') else False

    check.option().checkbox('include_virtual_overrides', 'Include overridden virtual functions', include_virtual_overrides)


def check(check, file):
    include_virtual_overrides = check.option().lookup('include_virtual_overrides')

    refkinds = "Define, Overrides" if include_virtual_overrides else "Define"
    entkinds = "Function" if include_virtual_overrides else "~Virtual Function"

    for func_ref in file.filerefs(refkinds, entkinds):
        lex = file.lexer().lexeme(func_ref.line(), func_ref.column())

        if (lex.ent() and lex.ent().kind().check("Macro") or
            (func_ref.kind().check("Define") and func_ref.ent().kind().check("Virtual")) or
            (func_ref.ent().kind().check("Member Function") and func_ref.ent().parent() and func_ref.ent().parent().kind().check("Template") and (func_ref.ent().parent().name() == func_ref.ent().name()))):
            continue

        func_ent = func_ref.ent() if func_ref.kind().check("Define") else func_ref.scope()

        for param_ref in func_ent.refs("Define", "~Unnamed Parameter"):
            if param_ref.ent().name() == "...":
                continue

            lex = param_ref.file().lexer().lexeme(param_ref.line(), param_ref.column())
            maybe_unused = False

            if lex and (lex.next(True, True).text() == "["):
                on_index = 0

                while lex:
                    if lex.text() == "[":
                        on_index += 1
                    elif lex.text() == "]":
                        on_index -= 1

                        if not on_index:
                            break
                    elif on_index and (lex.text() == "maybe_unused") and (lex.token() == "Identifier"):
                        maybe_unused = True
                        break

                    lex = lex.next(True, True)

            if maybe_unused:
                continue

            refs = param_ref.ent().refs("~Declarein ~Definein ~Typed ~Name")

            if not refs:
                check.violation(param_ref.ent(), file,
                                param_ref.line(), param_ref.column(), ERR1)
            else:
                ref_infunc = []
                func_begin = func_ent.ref("Begin, Beginby")
                func_end = func_ent.ref("End, Endby")

                for ref in refs:
                    if (ref.file().id() == func_ref.file().id()) and func_begin and func_end and (func_begin.line() <= ref.line() <= func_end.line()):
                        ref_infunc.append(True)
                    else:
                        ref_infunc.append(False)

                if not any(ref_infunc):
                    check.violation(param_ref.ent(), file, param_ref.line(), param_ref.column(), ERR1)
