ERR1 = 'C-style arrays shall not be used'

# The ID for the check


def ids():
    return ('A18-1-1', 'CPP_T019')

# The short name of the check


def name(id):
    return {
        'A18-1-1': """\
Published Standards/AUTOSAR/C-style Array""",
        'CPP_T019': """\
All Checks/Language Specific/C and C++/Types/C-style Array"""
    }[id]





def tags(id):
    return {
        'A18-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T019': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>A C-style array is implicitly convertible to a raw pointer and easily loses information
about its size. This construct is unsafe, unmaintainable, and a source of potential
errors.</p>
<p>IFor fixed-size, stack-allocated arrays, std::array is supposed to be used instead.
This type is designed to work with standard library algorithms.</p>
<p><b>Exception</b></p>
<p>It is allowed to declare a static constexpr data member of a C-style array type.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A18-1-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cstdint&gt;
void Fn() noexcept
{
const std::uint8_t size = 10;
std::int32_t a1[size]; // Non-compliant
std::array&lt;std::int32_t, size&gt; a2; // Compliant
// ...
std::sort(a1, a1 + size);
std::sort(a2.begin(), a2.end()); // More readable and maintainable way of
// working with STL algorithms
}
class A
{
public:
static constexpr std::uint8_t array[]{0, 1, 2}; // Compliant by exception
};
</code></pre>
<p><b>See also</b></p>
<p>• C++ Core Guidelines [11]: ES.27: Use std::array or stack_array for arrays on the
stack.</p>
<p>• C++ Core Guidelines [11]: SL.con.1: Prefer using STL array or vector instead of
a C array.</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(lookup_ents=False)

    if not lexer:
        return

    for ref in file.filerefs("Declare, Define", "Object"):
        ref_ent = ref.ent()
        is_const = False
        if str(ref_ent.type()).count("[") and str(ref_ent.type()).count("]"):
            for line_lex in lexer.lexemes(ref.line(), ref.line()):
                if line_lex.text() == "constexpr" and line_lex.token() == "Identifier":
                    prev = line_lex.previous(ignore_whitespace=True)
                    if prev.text() == "static" and prev.token() == "Keyword":
                        is_const = True
                        break

            if not is_const:
                check.violation(ref_ent, file, ref.line(), ref.column(), ERR1)
