# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 11-3-21


import re


ERR1 = 'Pointer arithmetic used with pointer to non-final class "%1"'


def ids():
    return ('A5-0-4', 'CPP_P042')


def name(id):
    return {
        'A5-0-4': 'Published Standards/AUTOSAR/Pointer arithmetic shall not be used with pointers to non-final classes',
        'CPP_P042': 'All Checks/Language Specific/C and C++/Pointers/Pointer arithmetic shall not be used with pointers to non-final classes',
    }[id]





def tags(id):
    return {
        'A5-0-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Pointers',
        ],
        'CPP_P042': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],
    }.get(id)

def detailed_description():
    return '''\

<p><b>Rationale</b></p>

<p>
Pointer arithmetic is only well defined if the pointed-to type of the pointer equals the element type of the array it points into, otherwise the behavior is undefined. This property can only be guaranteed if the pointer operand is a pointer to non-class type or a pointer to final class type.
</p>

<p>
Note: This also applies to the subscripting operator as <code>E1[E2]</code> is defined in terms of pointer arithmetic as <code>*((E1)+(E2)).</code>
</p>

<p><b>Example</b></p>
<pre><code language="C++">// $Id: A5-0-4.cpp 309849 2018-03-02 09:36:31Z christof.meerwald $
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cstdint&gt;
#include &lt;cstdlib&gt;
#include &lt;memory&gt;
#include &lt;vector&gt;

class Base
{
public:
    virtual ~Base() noexcept = 0;
    virtual void Do() = 0;
};

class Derived1 final : public Base
{
public:
    void Do() final
    {
        // ...
    }

private:
    std::int32_t m_value { 0 };
};

class Derived2 final : public Base
{
public:
    void Do() final
    {
        // ...
    }

private:
    std::string m_value { };
};

void Foo(Base *start, size_t len)
{
    // Non-Compliant: pointer arithmetic on non-final pointer type
    for (Base *iter = start; iter != start + len; ++iter)
    {
        iter-&gt;Do();
    }
}

void Foo(const std::vector&lt;std::unique_ptr&lt;Base&gt;&gt; &v)
{
    // Compliant: uses std::unique_ptr for polymorphic objects
    std::for_each(v.begin(), v.end(),
    [] (const std::unique_ptr&lt;Base&gt; &ptr) {
        ptr-&gt;Do();
    });
}

void DoOpt(Base *obj)
{
    if (obj != nullptr)
    {
        obj-&gt;Do();
    }
}

void Bar()
{
    std::array&lt;Derived1, 2&gt; arr1;
    Base *base1 { arr1.data() };
    Foo(base1, arr1.size());

    DoOpt(&arr1[1]); // Compliant: pointer arithmetic on final class
    DoOpt(&base1[1]); // Non-Compliant: pointer arithmetic on base class


    std::array&lt;Derived2, 2&gt; arr2;
    Base *base2 { arr2.data() };
    Foo(base2, arr2.size());

    DoOpt(arr2.data() + 1); // Compliant: pointer arithmetic on final class
    DoOpt(base2 + 1); // Non-Compliant: pointer arithmetic on base class


    std::vector&lt;std::unique_ptr&lt;Base&gt;&gt; v;
    v.push_back(std::make_unique&lt;Derived1&gt;());
    v.push_back(std::make_unique&lt;Derived2&gt;());

    Foo(v);
}
</code></pre>

<p><b>See also</b></p>

<p>
• SEI CERT C++ Coding Standard [10]: CTR56-CPP: Do not use pointer arithmetic
on polymorphic objects.<br>
• JSF December 2005 [8]: AV Rule 96: Arrays shall not be treated polymorphically.<br>
• C++ Core Guidelines [11]: T.82: Do not mix hierarchies and arrays.<br>
</p>

'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    operators = {'+', '-', '+=', '-=', '++', '--'}

    lexer = None

    # Whenever a value is used
    for ref in file.filerefs('Use'):
        ent = ref.ent()

        if not lexer:
            lexer = file.lexer(lookup_ents=False)

        # If it's a pointer
        if ent and ent.type() and re.match('.*\\*', ent.type()):

            # If there's pointer arithmetic
            lexeme = lexer.lexeme(ref.line(), ref.column())
            if lexeme and lexeme.previous(ignore_whitespace=True, ignore_comments=True) and lexeme.next(ignore_whitespace=True, ignore_comments=True):
                prevText = lexeme.previous(ignore_whitespace=True, ignore_comments=True).text()
                nextText = lexeme.next(ignore_whitespace=True, ignore_comments=True).text()
                if prevText in operators or nextText in operators or nextText == '[':

                    # If the pointer type is a class
                    for classEnt in ent.ents('Typed'):
                        if classEnt and 'Class' in classEnt.kindname():
                            check.violation(ent, file, ref.line(), ref.column(), ERR1, classEnt.name())
