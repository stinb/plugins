import re


ERR1 = 'Assignment operator does not return a reference to "this"'
ASSIGNMENT_OPERATORS = 'operator[+-/*%&|^]{0,1}=(?!=)|operator>>=|operator<<='


# The ID for the check
def ids():
    return ('A13-2-1', 'CPP_A015')


# The short name of the check
def name(id):
    return {
        'A13-2-1': 'Published Standards/AUTOSAR/An assignment operator shall return a reference to "this"',
        'CPP_A015': 'All Checks/Language Specific/C and C++/Assignment Operators/An assignment operator shall return a reference to "this"',
    }[id]





def tags(id):
    return {
        'A13-2-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Assignment Operators'
        ],
        'CPP_A015': [
            'Language: C',
            'Language: C++',
            'Assignment Operators',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>An assignment operator shall return a reference to “this”.</p>
<p><b>Rationale</b></p>
<p>Returning a type "T&" from an assignment operator is consistent with the C++ Standard
Library.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A13-2-1.cpp 271687 2017-03-23 08:57:35Z piotr.tanski $
class A
{
public:
// ...
A& operator=(const A&) & // Compliant
{
// ...
return *this;
}
};

class B
{
public:
// ...
const B& operator=(const B&) & // Non-compliant - violating consistency
// with standard types
{
// ...
return *this;
}
};

class C
{
public:
// ...
C operator=(const C&) & // Non-compliant
{
// ...
return *this;
}
};

class D
{
public:
// ...
D* operator=(const D&) & // Non-compliant
{
// ...
return this;
}
};
</code></pre>
<p><b>See also</b></p>
<p>• HIC++ v4.0 [9]: 13.2.2 Ensure that the return type of an overloaded binary
operator matches the built-in counterparts.</p>
<p>• C++ Core Guidelines [11]: F.47: Return T& from assignment operators.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(ASSIGNMENT_OPERATORS, file.contents()):
        return

    for func_ref in file.filerefs("Define", "Function"):
        if re.search(ASSIGNMENT_OPERATORS, func_ref.ent().name()):
            return_type = func_ref.ent().type()
            this = f"^{func_ref.ent().parent().longname()} &"

            if re.search(r"^\(anonymous namespace\)::", return_type):
                return_type = return_type.strip("(anonymous namespace)::")

            if not re.search(this, return_type):
                check.violation(func_ref.ent(), file,
                                func_ref.line(), func_ref.column(), ERR1)
