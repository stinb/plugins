# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2024-03-26


import re


ERR1 = 'Digraph used'

DESC_AUTOSAR = '''\
<p><b>Title</b></p>
<p>Digraphs shall not be used</p>

<p><b>Rationale</b></p>
<p>The digraphs are: &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:.</p>
<p>The use of digraphs may not meet developer expectations.</p>

<p><b>Example</b></p>
<pre><code language="C++">\
template &lt; typename T&gt;
class A
{
  public:
    template &lt; int32_t i &gt;
    void f2 ( );
};
void f ( A&lt;int32_t&gt; * a&lt;:10:&gt; )  // Non-compliant
&lt;% a&lt;:0:&gt;-&gt;f2&lt;20&gt; ( ); %&gt;        // Non-compliant
// The above is equivalent to:
void f ( A&lt;int32_t&gt; * a[ 10 ] )
{
  a[ 0 ]-&gt;f2&lt;20&gt; ( );            // Compliant
}
</code></pre>

<p><b>See also</b></p>
<p>
• MISRA C++ 2008 [7]: advisory 2-5-1 Digraphs should not be used.
</p>
<p>
• JSF December 2005 [8]: 4.4.1 AV Rule 12 The following digraphs will not be
used.
</p>
<p>
• HIC++ v4.0 [9]: 2.2.1 Do not use digraphs or trigraphs.
</p>
'''


def ids():
    return ('A2-5-2', 'MISRA08_2-5-1', 'CPP_U000')


def name(id):
    return {
        'A2-5-2': 'Published Standards/AUTOSAR/Digraphs shall not be used',
        'MISRA08_2-5-1': 'Published Standards/MISRA-C++ 2008/2-5-1 Digraphs shall not be used',
        'CPP_U000': 'All Checks/Language Specific/C and C++/Unnecessary Constructs/Digraphs shall not be used',
    }[id]


def tags(id):
    return {
        'MISRA08_2-5-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Advisory',
            'Unnecessary Constructs',
        ],
        'A2-5-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Unnecessary Constructs',
        ],
        'CPP_U000': [
            'Language: C',
            'Language: C++',
            'Unnecessary Constructs',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA08_2-5-1': '''\
<p><b>Title</b></p>
<p><i>Digraphs</i> should not be used</p>

<p><b>Rationale</b></p>
<p>The <i>digraphs</i> are:</p>
<code>&lt;% %&gt; &lt;: :&gt; %: %:%:</code>

<p><b>Example</b></p>
<pre><code language="C++">\
template &lt; typename T&gt;
class A
{
  public:
    template &lt; int32_t i &gt;
    void f2 ( );
};
void f ( A&lt;int32_t&gt; * a&lt;:10:&gt; )  // Non-compliant
&lt;% a&lt;:0:&gt;-&gt;f2&lt;20&gt; ( ); %&gt;        // Non-compliant
// The above is equivalent to:
void f ( A&lt;int32_t&gt; * a[ 10 ] )
{
  a[ 0 ]-&gt;f2&lt;20&gt; ( );            // Compliant
}
</code></pre>
''',
        'A2-5-2': DESC_AUTOSAR,
        'CPP_U000': DESC_AUTOSAR,
    }


def test_entity(file):
    return file.kind().check('header file, code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for lex in file.lexer(lookup_ents=False).lexemes():
        if lex.text() not in {'<%', '%>', '<:', ':>', '%:', '%:%:'}:
            continue
        check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1)
