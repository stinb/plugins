ERR1 = 'For-init-statement and expression should not perform actions other than loop-counter initialization and modification'


# The ID for the check
def ids():
    return ('A6-5-4', 'CPP_C042')


# The short name of the check
def name(id):
    return {
        'A6-5-4': 'Published Standards/AUTOSAR/For-init-statement and expression should not perform actions other than loop-counter initialization and modification',
        'CPP_C042': 'All Checks/Language Specific/C and C++/Control Flow/For-init-statement and expression should not perform actions other than loop-counter initialization and modification',
    }[id]


def tags(id):
    return {
        'A6-5-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Control Flow',
        ],
        'CPP_C042': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
    }.get(id)


# The long description of the check
def detailed_description():
    return '''
<p><b>Rationale</b></p>

<p>
If only a loop-counter is used in the for-init-statement and expression, it increases readability and it is easier to understand and maintain code.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A6-5-4.cpp 305629 2018-01-29 13:29:25Z piotr.serwa $
#include &lt;cstdint&gt;

void Fn() noexcept
{
    for (std::int32_t x = 0, MAX=10; x &lt; MAX; x++) // compliant with A6-5-2, but non-compliant with advisory A6-5-4
    {
        // ...
    }
}
</code></pre>

<p><b>See also</b></p>

<p>
• JSF December 2005 [8]: AV Rule 198: The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter.
</p>

<p>
• JSF December 2005 [8]: AV Rule 199: The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop.
</p>
'''


# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    for func_ref in file.filerefs("Define", "Function"):
        if "for" not in str(func_ref.ent().contents()):
            continue

        lex = lexer.lexeme(func_ref.line(), func_ref.column())
        end_ref = func_ref.ent().ref("End, Endby")

        while lex and (lex.line_begin() != end_ref.line()):
            if (lex.text() == "for") and (lex.token() == "Keyword") and (lex.next(True, True).text() == "("):
                on_for = 0
                iterator = None

                while lex:
                    if lex.text() == "(":
                        on_for += 1
                    elif lex.text() == ")":
                        on_for -= 1

                        if not on_for:
                            break
                    elif (on_for == 1) and lex.ent() and lex.ref() and lex.ref().kind().check("Definein, Setby, Modifyby"):
                        if not iterator:
                            iterator = lex.ent().id()
                        elif iterator != lex.ent().id():
                            check.violation(
                                lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                            break

                    lex = lex.next(True, True)

            lex = lex.next(True, True)
