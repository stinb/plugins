import re

RANDOM_GEN = "default_random_engine"
DEF_NAME = "Random number engines shall not be default-initialized"

# The ID for the check
def ids():
    return ('A26-5-2', 'CPP_L019')

# The short name of the check
def name(id):
    return {
        'A26-5-2': 'Published Standards/AUTOSAR/' + DEF_NAME,
        'CPP_L019': 'All Checks/Language Specific/C and C++/Libraries/' + DEF_NAME
    }[id]



def tags(id):
    return {
        'A26-5-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Libraries',
        ],
        'CPP_L019': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Using a pseudo-random number generator gives different results that depend on a used seed value. Initializing random number engines by default initializes pseudorandom generator with a default_seed constant value. However, this can be not obvious for a developer and can lead to unexpected program behaviour (generating the same random sequences among different program executions).</p>
<p><b>Exception</b></p>
<p>For consistent testing purposes it can be convenient to seed the random number engine with a fixed value to get a deterministic sequence, but never within production code where real randomness is required, e.g. for security reasons.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A26-5-2.cpp 311495 2018-03-13 13:02:54Z michal.szczepankiewicz $
2
3 #include &lt;iostream&gt;
4 #include &lt;random&gt;
5
6 int main()
7 {
8 std::random_device rd;
9 std::default_random_engine eng{rd()}; //compliant
10 std::uniform_int_distribution&lt;int&gt; ud{0, 100};
11 int r1 = ud(eng);
12 std::cout &lt;&lt; "Random value using std::random_device: " &lt;&lt; r1 &lt;&lt; std::endl;
13
14
15 std::default_random_engine eng2{}; //non-compliant
16 std::uniform_int_distribution&lt;int&gt; ud2{0, 100};
17 int r2 = ud2(eng);
18 std::cout &lt;&lt; "Random value using std::random_device: " &lt;&lt; r2 &lt;&lt; std::endl;
19
20 return 0;
21 }
</code></pre>
<p><b>See also</b></p>
<p>SEI CERT C++ Coding Standard [10]: MSC51-CPP: Ensure your random number generator is properly seeded.
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    for ref in file.filerefs("Init","Object", True):
        ent = ref.ent()

        # Skip if type isn't known to be default_random_engine
        entType = ent.type()
        if not entType or not re.search(RANDOM_GEN, entType):
            continue

        # Skip if not default initialized
        if not re.match(r"\{\W*\}", ent.freetext("InitText")):
            continue

        check.violation(ent, file, ref.line(), ref.column(), DEF_NAME)
