import re

ERR1 = 'Objects or functions with external linkage not declared in a header file'

# The ID for the check
def ids():
    return ('A3-3-1', 'MISRA08_3-3-1', 'CPP_H005', 'MISRA23_6.5.1')

# The short name of the check
def name(id):
    return {
        'A3-3-1': 'Published Standards/AUTOSAR/Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file',
        'MISRA08_3-3-1': 'Published Standards/MISRA-C++ 2008/3-3-1 Objects or functions with external linkage shall be declared in a header file',
        'CPP_H005': 'All Checks/Language Specific/C and C++/Headers/Objects or functions with external linkage shall be declared in a header file',
        'MISRA23_6.5.1': 'Published Standards/MISRA C++ 2023/6.5.1 A function or object with external linkage should be introduced in a header file',
    }[id]



def tags(id):
    return {
        'MISRA08_3-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Headers',
        ],
        'A3-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Headers',
        ],
        'CPP_H005': [
            'Language: C',
            'Language: C++',
            'Headers',
        ],
        'MISRA23_6.5.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Headers',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    return {
        'A3-3-1': '''
<p><b>Rationale</b></p>

<p>Placing the declarations of objects and functions with external linkage in a header file means that they are intended to be accessible from other translation units.</p>

<p>If external linkage is not needed, then the object or function is supposed to be either declared in an unnamed namespace or declared static in the implementation file. This reduces the visibility of objects and functions, which allows to reach a higher encapsulation and isolation.</p>

<p>Note that members of named namespace are by default external linkage objects.</p>

<p><b>Exception</b></p>

<p>This rule does not apply to main, or to members of unnamed namespaces.</p>

<p><b>Example</b></p>

<pre><code language="C++">//% $Id: A3-3-1.hpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
extern std::int32_t a1;
extern void F4();
namespace n
{
    void F2();
    std::int32_t a5; // Compliant, external linkage
}
//% $Id: A3-3-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include "A3-3-1.hpp"
std::int32_t a1 = 0;        // Compliant, external linkage
std::int32_t a2 = 0;        // Non-compliant, static keyword not used
static std::int32_t a3 = 0; // Compliant, internal linkage
namespace
{
    std::int32_t a4 = 0; // Compliant by exception
    void F1()            // Compliant by exception
    {
    }
}
namespace n
{
    void F2() // Compliant, external linkage
    {
    }
    std::int32_t a6 = 0; // Non-compliant, external linkage
}
extern std::int32_t a7; // Non-compliant, extern object declared in .cpp file
static void F3()        // Compliant, static keyword used
{
}
void F4() // Compliant, external linkage
{
    a1 = 1;
    a2 = 1;
    a3 = 1;
    a4 = 1;
    n::a5 = 1;
    n::a6 = 1;
    a7 = 1;
}
void F5() // Non-compliant, static keyword not used
{
    a1 = 2;
    a2 = 2;
    a3 = 2;
    a4 = 2;
    n::a5 = 2;
    n::a6 = 2;
    a7 = 2;
}
int main(int, char**) // Compliant by exception
{
    F1();
    n::F2();
    F3();
    F4();
    F5();
}
</code></pre>

<p><b>See also</b></p>

<p>â€¢ MISRA C++ 2008 [7]: Rule 3-3-1 Objects or functions with external linkage shall be declared in a header file.</p>
''',
        'MISRA08_3-3-1': '''
<p><b>Rationale</b></p>
Placing the declarations of objects and functions with external linkage in a <i>header file</i> documents that they are intended to be accessible from other translation units.
</p>

<p>
If external linkage is not required, then the object or function shall either be declared in an unnamed namespace or declared <i>static</i>.
</p>

<p>
This will reduce the visibility of objects and functions, which is considered to be good practice.
</p>

<p><b>Exception</b></p>
This rule does not apply to <i>main</i>, or to members of unnamed namespaces.
</p>

<p><b>Example</b></p>
<pre><code language="C++">  // header.hpp
  extern int a1;
  extern void f3 ( );

  // file1.cpp
  int a1 = 0; // Compliant
  int a2 = 0; // Non-compliant
  static int a3 = 0; // Compliant

  namespace
  {
    int a4 = 0; // Compliant
    void f1 () // Compliant
    {
    }
  }

  static void f2 ( ) // Compliant
  {
  }

  void f3 ( ) // Compliant
  {
    a1 = 1;
    a2 = 1;
    a3 = 1;
    a4 = 1;
  }

  void f4 ( ) // Non-compliant
  {
    a1 = 2;
    a2 = 2;
    a3 = 2;
    a4 = 2;
  }

  int main ( ) // Compliant by exception
  {
    f1 ( );
    f2 ( );
    f3 ( );
    f4 ( );
  return 0;
  }
</code></pre>
''',
        'CPP_H005': '''
<p><b>Rationale</b></p>
Placing the declarations of objects and functions with external linkage in a <i>header file</i> documents that they are intended to be accessible from other translation units.
</p>

<p>
If external linkage is not required, then the object or function shall either be declared in an unnamed namespace or declared <i>static</i>.
</p>

<p>
This will reduce the visibility of objects and functions, which is considered to be good practice.
</p>

<p><b>Exception</b></p>
This rule does not apply to <i>main</i>, or to members of unnamed namespaces.
</p>

<p><b>Example</b></p>
<pre><code language="C++">  // header.hpp
  extern int a1;
  extern void f3 ( );

  // file1.cpp
  int a1 = 0; // Compliant
  int a2 = 0; // Non-compliant
  static int a3 = 0; // Compliant

  namespace
  {
    int a4 = 0; // Compliant
    void f1 () // Compliant
    {
    }
  }

  static void f2 ( ) // Compliant
  {
  }

  void f3 ( ) // Compliant
  {
    a1 = 1;
    a2 = 1;
    a3 = 1;
    a4 = 1;
  }

  void f4 ( ) // Non-compliant
  {
    a1 = 2;
    a2 = 2;
    a3 = 2;
    a4 = 2;
  }

  int main ( ) // Compliant by exception
  {
    f1 ( );
    f2 ( );
    f3 ( );
    f4 ( );
  return 0;
  }
</code></pre>
''',
        'MISRA23_6.5.1': '''
<p><b>Amplification</b></p>

<p>This rule applies to functions and objects with namespace scope. The header file containing the
introduction should be included by every translation unit in which it is defined or used.</p>
<p>This rule does not apply to the function main.</p>

<p><b>Rationale</b></p>
<p>Placing the introductions of functions and objects with external linkage in a header file indicates that
they are intended to be accessed from multiple translation units. Requiring that this header file is
included by every translation unit that defines or uses the function or object ensures that the
declaration matches the definition.</p>

<p>If usage from multiple translation units is not required, then the visibility of the function or object
should be reduced by declaring it with internal linkage, for example, by declaring it within an unnamed
namespace of an implementation file (see Rule 6.5.2). This has the effect of increasing isolation and
encapsulation, which is considered to be good practice.</p>

<p>Compliance with this rule helps to prevent the issues identified in Rule 6.2.2.</p>

<p><b>Example</b></p>
<pre><code language="C++">// header.hpp
extern int32_t a1; // Compliant
extern void f3(); // Compliant
// file1.cpp
#include "header.hpp"
int32_t a1 = 0; // Redeclaration - rule does not apply
int32_t a2 = 0; // Non-compliant - no declaration in header
namespace
{
 int32_t const a3 = 0; // Internal linkage - rule does not apply
 void f1() // Internal linkage - rule does not apply
 {
 }
}
void f2() // Non-compliant - no declaration in header
{
}
void f3() // Redeclaration - rule does not apply
{
}
</code></pre>
<p><b>See also</b></p>
<p>Rule 6.2.2, Rule 6.5.2</p>
''',
    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check_header_declaration(ent):
    for ref in ent.refs("Declarein, Definein, Friendby"):
        if ref.file().kind().check("Header"):
            return True
        
    return False

def check_namespace_entities(ent, namespace_ent):
    is_valid_entity = False
    for inner_ent in namespace_ent.ents("Define","Object,Function"):
        if inner_ent.kind().check("Function"):
            for inner_ref in inner_ent.refs("Declarein"):
                if inner_ref.file().kind().check("Header File"):
                    if ent.id() == inner_ent.id():
                        is_valid_entity = True
        else:
            for inner_ref in inner_ent.refs("Definein"):
                if inner_ref.file().kind().check("Header File"):
                    if ent.id() == inner_ent.id():
                        is_valid_entity = True
    return is_valid_entity

def check(check, file):
    # get all functions and object
    for ref in file.filerefs("Define, Declare ~Implicit", "~Unknown Global Object, ~Unknown Function", True):
        ent = ref.ent()
        with_header_declaration = False
        is_valid_object = False
        if ent.parent() and ent.parent().kind().check("Class"):
            # skip class-related objects
            is_valid_object = True
        elif ent.kind().check("~Local ~Member Object, ~Lambda ~Member Function"):
            # should not be local object or lambda function
            # check if object/func has declaration in a header file
            with_header_declaration = check_header_declaration(ent)
            if not with_header_declaration:
                if ent.kind().check("Static"):
                    # check if static object/func
                    is_valid_object = True
                elif ent.parent() and ent.parent().kind().check("Namespace"):
                    # check if object/func belongs to a namespace
                    namespace_ent = ent.parent()
                    if check_header_declaration(namespace_ent):
                        # named namespace handler
                        is_valid_object = check_namespace_entities(ent, namespace_ent)
                    else:
                        is_valid_object = True
                elif ent.kind().check("Object Global"):
                    # extern object handler
                    is_valid_object = False
            else:
                is_valid_object = True

            if ent.kind().check("Function") and re.search(r"main", ent.name()):
                is_valid_object = True

            if not is_valid_object:
                check.violation(ent, file, ref.line(), ref.column(), ERR1)
