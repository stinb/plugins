# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 10-27-21


import re


ERR1 = "Member doesn't depend on template parameter"


def ids():
    return ('A14-5-2', 'CPP_V020')


def name(id):
    return {
        'A14-5-2': 'Published Standards/AUTOSAR/Class members that are not dependent on template class parameters should be defined in a separate base class',
        'CPP_V020': 'All Checks/Language Specific/C and C++/Variables/Class members that are not dependent on template class parameters should be defined in a separate base class',
    }[id]



def tags(id):
    return {
        'A14-5-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Partially Automated',
            'Variables'
        ],
        'CPP_V020': [
            'Language: C',
            'Language: C++',
            'Variables',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Rationale</b></p>
Having non-dependent members in a class template can lead to unnecessary template instantiations and potential code bloat. It is therefore preferred to move those members to a non-dependent base class so they can be used without any template instantiation.
</p>

<p><b>Example</b></p><p></p>
<pre><code language="C++">template&lt;typename T&gt;
class A
{
public:
    enum State // Non-Compliant: member doesn't depend on template parameter
    {
        State1,
        State2
    };

    State GetState();
};

class B_Base
{
public:
    enum State // Compliant: not a member of a class template
    {
        State1,
        State2
    };
};

template&lt;typename T&gt;
class B : B_Base
{
public:
    State GetState();
};

</code></pre>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    for ref in file.filerefs('Define', 'Member'):
        ent = ref.ent()
        if ent.parent().kindname() == 'Class Template':
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
