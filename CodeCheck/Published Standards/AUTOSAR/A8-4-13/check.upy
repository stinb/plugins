import re


ERR1 = 'Invalid use of passing a parameter using std::shared_ptr'


# The ID for the check
def ids():
    return ('A8-4-13', 'CPP_P030')

def name(id):
    return {
        'A8-4-13': """\
Published Standards/AUTOSAR/Invalid Use of std::shared_ptr""",
        'CPP_P030': """\
All Checks/Language Specific/C and C++/Pointers/Invalid Use of std::shared_ptr"""
    }[id]





def tags(id):
    return {
        'A8-4-13': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Pointers',
        ],
        'CPP_P030': [
            'Language: C',
            'Language: C++',
            'Pointers',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>A std::shared_ptr shall be passed to a function as: (1) a copy to express the
function shares ownership (2) an lvalue reference to express that the
function replaces the managed object (3) a const lvalue reference to
express that the function retains a reference count.</p>
<p><b>Rationale</b></p>
<p>Passing a std::shared_ptr by value (1) is clear and makes ownership sharing explicit.</p>
<p>Passing an lvalue reference (2) to std::shared_ptr is suggested to be used if a called
function replaces the managed object on at least one code path, e.g. call assignment
operator or reset method. Otherwise, it is recommended to pass an lvalue reference
to the underlying object instead, see A8-4-11, A8-4-10.</p>
<p>Functions that take a const lvalue reference (3) to std::shared_ptr as a parameter are
supposed to copy it to another std::shared_ptr on at least one code path, otherwise
the parameter should be passed by a const lvalue reference to the underlying object
instead, see A8-4-11, A8-4-10.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A8-4-13.cpp 308795 2018-02-23 09:27:03Z michal.szczepankiewicz $

#include &lt;memory&gt;
#include &lt;iostream&gt;

//compliant, explicit ownership sharing
void Value(std::shared_ptr&lt;int&gt; v) { }

//compliant, replaces the managed object
void Lv1(std::shared_ptr&lt;int&gt;& v)
{
v.reset();
}

//non-compliant, does not replace the managed object
//shall be passed by int& so that API that does not
//extend lifetime of an object is not polluted
//with smart pointers
void Lv2(std::shared_ptr&lt;int&gt;& v)
{
++(*v);
}

//compliant, shared_ptr copied in the called function
void Clv1(const std::shared_ptr&lt;int&gt;& v)
{
Value(v);
}

//non-compliant, const lvalue reference not copied
//to a shared_ptr object on any code path
//shall be passed by const int&
void Clv2(const std::shared_ptr&lt;int&gt;& v)
{
std::cout &lt;&lt; *v &lt;&lt; std::endl;
}

//non-compliant
void Rv1(std::shared_ptr&lt;int&gt;&& r) {}
</code></pre>
<p><b>See also</b></p>
<p>• C++ Core Guidelines [11]: R.34: Take a shared_ptr&lt;widget&gt; parameter to
express that a function is part owner.</p>
<p>• C++ Core Guidelines [11]: R.35: Take a shared_ptr&lt;widget&gt;& parameter to
express that a function might reseat the shared pointer.</p>
<p>• C++ Core Guidelines [11]: R.36: Take a const shared_ptr&lt;widget&gt;& parameter
to express that it might retain a reference count to the object.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(False, 8, False, False)

    if not (lexer and re.search(r"shared_ptr", file.contents())):
        return

    for func_ref in file.filerefs("Define", "Function ~Macro ~Lambda"):
        if not re.search(r"shared_ptr", func_ref.ent().parameters()):
            continue

        for param_ref in func_ref.ent().refs("Define", "Parameter"):
            param_type = param_ref.ent().type()
            if "&" not in param_type:
                continue

            for type_ref in param_ref.ent().refs("Typed"):
                if type_ref.ent().name() == "shared_ptr":
                    compliant = False

                    if "const" in param_type:
                        for assign_ref in param_ref.ent().refs("Assignby Value"):
                            parent = assign_ref.ent().parent()
                            parent_param = parent.parameters() if parent else None

                            if parent_param and "shared_ptr" in parent_param:
                                compliant = True

                    for use_ref in param_ref.ent().refs("Useby"):
                        lex = lexer.lexeme(
                            use_ref.line(), use_ref.column())

                        while lex and lex.text() != ";":
                            if lex.text() == "reset" and lex.token() == "Identifier":
                                compliant = True
                                break

                            lex = lex.next(
                                ignore_whitespace=True, ignore_comments=True)

                    if not compliant:
                        check.violation(func_ref.ent(), file,
                                        func_ref.line(), func_ref.column(), ERR1)
