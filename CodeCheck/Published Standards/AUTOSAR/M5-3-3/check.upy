# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 9-13-21

import re

ERR1 = 'Unary operator & overloaded'

def ids():
    return ('M5-3-3', 'MISRA08_5-3-3', 'CPP_D027')

def name(id):
    return {
        'M5-3-3': 'Published Standards/AUTOSAR/The unary & operator shall not be overloaded',
        'MISRA08_5-3-3': 'Published Standards/MISRA-C++ 2008/5-3-3 The unary & operator shall not be overloaded',
        'CPP_D027': 'All Checks/Language Specific/C and C++/Declarations and Definitions/The unary & operator shall not be overloaded',
    }[id]
    



def tags(id):
    return {
        'MISRA08_5-3-3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'M5-3-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D027': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

def detailed_description():
    return '''\
<p><b>Rationale</b></p>
<p>Taking the address of an object of incomplete type where the complete type contains a user
declared operator & leads to undefined behaviour.</p>
<p><b>Example</b></p>
<pre><code language="C++">// A.h
class A
{
public:
    A * operator & ( ); // Non-compliant
};
// f1.cc
class A;
void f ( A & a )
{
    &a; // uses built-in operator &
}
// f2.cc
#include "A.h"
void f2 ( A & a )
{
    &a; // use user-defined operator &
}
</code></pre>
<p><b>See also</b></p>
<p>ISO/IEC 14882:2003 [1] ยง5.3.1(4)
</p>'''

def test_entity(file):
    return file.kind().check('header file, code file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    for ref in file.filerefs('Declare', '', True):
        ent = ref.ent()
        if ent.simplename() == 'operator&':
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
