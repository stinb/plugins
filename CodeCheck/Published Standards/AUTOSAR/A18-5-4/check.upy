# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 9-06-2021
import re

ERR1 = 'Project is missing the sized version of the operator "delete"'
ERR2 = 'Project is missing the unsized version of the operator "delete"'

def ids():
    return ('A18-5-4', 'CPP_F030')

def name(id):
    return {
        'A18-5-4': """\
Published Standards/AUTOSAR/If a project has a sized or unsized version of \
operator \"delete\" globally defined, then both sized and unsized versions shall \
be defined""",
        'CPP_F030': """\
All Checks/Language Specific/C and C++/Functions/If a project has a sized or \
unsized version of operator \"delete\" globally defined, then both sized and \
unsized versions shall be defined"""
    }[id]



def tags(id):
    return {
        'A18-5-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F030': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Since C++14 Language Standard it is allowed to overload both sized and unsized
versions of the “delete” operator. Sized version provides more efficient way of memory
deallocation than the unsized one, especially when the allocator allocates in size
categories instead of storing the size nearby the object.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A18-5-4.cpp 289415 2017-10-04 09:10:20Z piotr.serwa $
#include &lt;cstdlib&gt;
void operator delete(
  void* ptr) noexcept // Compliant - sized version is defined
{
  std::free(ptr);
}
void operator delete(
  void* ptr,
std::size_t size) noexcept // Compliant - unsized version is defined
{
 std::free(ptr);
}</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    refs = file.filerefs('Define', 'Function')
    sized = False
    unsized = False
    sizedRef = None
    unsizedRef = None

    for ref in refs:
        # Skip if not operator delete
        if not re.search(r'operator delete', ref.ent().name()):
            continue

        # Check for a size in the parameters
        if re.search(r'size', ref.ent().parameters()):
            unsized = True
            unsizedRef = ref

        else:
            sized = True
            sizedRef = ref

    # Throw violation if missing the sized or unsized delete operator
    if not sized and unsized:
        check.violation(unsizedRef.ent(), file, unsizedRef.line(), unsizedRef.column(), ERR1)

    if not unsized and sized:
        check.violation(sizedRef.ent(), file, sizedRef.line(), sizedRef.column(), ERR2)
