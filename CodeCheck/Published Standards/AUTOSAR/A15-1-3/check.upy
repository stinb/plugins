import re

ERR1 = 'Exception thrown is not unique'


# The ID for the check
def ids():
    return ('A15-1-3', 'CPP_E059')


# The short name of the check
def name(id):
    return {
        'A15-1-3': 'Published Standards/AUTOSAR/All thrown exceptions should be unique',
        'CPP_E059': 'All Checks/Language Specific/C and C++/Exception Handling/All thrown exceptions should be unique',
    }[id]



def tags(id):
    return {
        'A15-1-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Exception Handling'
        ],
        'CPP_E059': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>Defining unique exceptions in the project significantly simplifies debug process.</p>
<p>An exception is considered to be unique if at least one of the following conditions is
fulfilled:</p>
<p>• The type of the exception does not occur in any other place in the project</p>
<p>• The error message (i.e. message itself, error code, etc.) of the exception does
not occur in any other place in the project</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A15-1-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
static std::string ComposeMessage(const char* file,
const char* func,
std::int32_t line,
const std::string& message) noexcept
{
std::stringstream s;
s &lt;&lt; "(" &lt;&lt; file &lt;&lt; ", " &lt;&lt; func &lt;&lt; ":" &lt;&lt; line &lt;&lt; "): " &lt;&lt; message;
return s.str();
}
void F1()
{
// ...
throw std::logic_error("Error");
}
void F2()
{
// ...
throw std::logic_error("Error"); // Non-compliant - both exception type and
// error message are not unique
}
void F3()
{
// ...
throw std::invalid_argument(
"Error"); // Compliant - exception type is unique
}
void F4() noexcept(false)
{
// ...
throw std::logic_error("f3(): preconditions were not met"); // Compliant -
// error
// message is
// unique
}
void F5() noexcept(false)
{
// ...
throw std::logic_error(ComposeMessage(
__FILE__,
__func__,
__LINE__,
"postconditions were not met")); // Compliant - error message is unique
}
void F6() noexcept
{
try
{
F1();
F2();
F3();
}

catch (std::invalid_argument& e)
{
std::cout &lt;&lt; e.what() &lt;&lt; '\n'; // Only f3() throws this type of
// exception, it is easy to deduce which
// function threw
}

catch (std::logic_error& e)
{
std::cout &lt;&lt; e.what() &lt;&lt; '\n'; // f1() and f2() throw exactly the same
// exceptions, unable to deduce which
// function threw
}

try
{
F4();
F5();
}

catch (std::logic_error& e)
{
std::cout &lt;&lt; e.what() &lt;&lt; '\n'; // Debugging process simplified, because
// of unique error message it is known
// which function threw
}
}
</code></pre>
<p><b>See also</b></p>
<p>• Effective Java 2nd Edition [15]: Item 63: Include failure-capture information in
detail messages</p>
"""




# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"throw", file.contents()):
        return

    lexer = file.lexer()
    throw_lines = []

    if not lexer:
        return

    for lex in lexer.lexemes():
        if lex.text() == "throw" and lex.token() == "Keyword":
            code_line = []
            for line_lex in lexer.lexemes(lex.line_begin(), lex.line_begin()):
                if line_lex.token() not in {"Whitespace", "Comment", "Newline"}:
                    code_line.append(line_lex.text())

            code_line = "".join(code_line)
            if not throw_lines.count(code_line):
                throw_lines.append(code_line)
            else:
                check.violation(lex.ent(), file, lex.line_begin(),
                                lex.column_begin(), ERR1)
