import re

ERR1 = 'Exception thrown is not unique'


# The ID for the check
def ids():
    return ('A15-1-3', 'CPP_E059')


# The short name of the check
def name(id):
    return {
        'A15-1-3': 'Published Standards/AUTOSAR/All thrown exceptions should be unique',
        'CPP_E059': 'All Checks/Language Specific/C and C++/Exception Handling/All thrown exceptions should be unique',
    }[id]



def tags(id):
    return {
        'A15-1-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Exception Handling'
        ],
        'CPP_E059': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>Defining unique exceptions in the project significantly simplifies debug process.</p>
<p>An exception is considered to be unique if at least one of the following conditions is
fulfilled:</p>
<p>• The type of the exception does not occur in any other place in the project</p>
<p>• The error message (i.e. message itself, error code, etc.) of the exception does
not occur in any other place in the project</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A15-1-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;iostream&gt;
3 #include &lt;sstream&gt;
4 #include &lt;stdexcept&gt;
5 #include &lt;string&gt;
6 static std::string ComposeMessage(const char* file,
7 const char* func,
8 std::int32_t line,
9 const std::string& message) noexcept
10 {
11 std::stringstream s;
12 s &lt;&lt; "(" &lt;&lt; file &lt;&lt; ", " &lt;&lt; func &lt;&lt; ":" &lt;&lt; line &lt;&lt; "): " &lt;&lt; message;
13 return s.str();
14 }
15 void F1()
16 {
17 // ...
18 throw std::logic_error("Error");
19 }
20 void F2()
21 {
22 // ...
23 throw std::logic_error("Error"); // Non-compliant - both exception type and
24 // error message are not unique
25 }
26 void F3()
27 {
28 // ...
29 throw std::invalid_argument(
30 "Error"); // Compliant - exception type is unique
31 }
32 void F4() noexcept(false)
33 {
34 // ...
35 throw std::logic_error("f3(): preconditions were not met"); // Compliant -
36 // error
37 // message is
38 // unique
39 }
40 void F5() noexcept(false)
41 {
42 // ...
43 throw std::logic_error(ComposeMessage(
44 __FILE__,
45 __func__,
46 __LINE__,
47 "postconditions were not met")); // Compliant - error message is unique
48 }
49 void F6() noexcept
50 {
51 try
52 {
53 F1();
54 F2();
55 F3();
56 }
57
58 catch (std::invalid_argument& e)
59 {
60 std::cout &lt;&lt; e.what() &lt;&lt; '\n'; // Only f3() throws this type of
61 // exception, it is easy to deduce which
62 // function threw
63 }
64
65 catch (std::logic_error& e)
66 {
67 std::cout &lt;&lt; e.what() &lt;&lt; '\n'; // f1() and f2() throw exactly the same
68 // exceptions, unable to deduce which
69 // function threw
70 }
71
72 try
73 {
74 F4();
75 F5();
76 }
77
78 catch (std::logic_error& e)
79 {
80 std::cout &lt;&lt; e.what() &lt;&lt; '\n'; // Debugging process simplified, because
81 // of unique error message it is known
82 // which function threw
83 }
84 }
</code></pre>
<p><b>See also</b></p>
<p>• Effective Java 2nd Edition [15]: Item 63: Include failure-capture information in
detail messages</p>
"""




# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"throw", file.contents()):
        return

    lexer = file.lexer()
    throw_lines = []

    if not lexer:
        return

    for lex in lexer.lexemes():
        if lex.text() == "throw" and lex.token() == "Keyword":
            code_line = []
            for line_lex in lexer.lexemes(lex.line_begin(), lex.line_begin()):
                if line_lex.token() not in {"Whitespace", "Comment", "Newline"}:
                    code_line.append(line_lex.text())

            code_line = "".join(code_line)
            if not throw_lines.count(code_line):
                throw_lines.append(code_line)
            else:
                check.violation(lex.ent(), file, lex.line_begin(),
                                lex.column_begin(), ERR1)
