# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 9-28-2021
import re

ERR1 = 'Implementation file name %1 does not reflect the logical entity for which it provides definitions'

def ids():
    return ('A2-8-2', 'CPP_N014')

def name(id):
    return {
        'A2-8-2': 'Published Standards/AUTOSAR/An implementation file name should reflect the logical entity for which it provides definitions',
        'CPP_N014': 'All Checks/Language Specific/C and C++/Naming Conventions/Naming Convention: Implementation File Names',
    }[id]


def tags(id):
    return {
        'A2-8-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Non-automated',
            'Naming Conventions',
        ],
        'CPP_N014': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
Naming an implementation file with a name of a declared type or accordingly to a collection of free functions makes a project structure more clear and readable.
</p>

<p><b>See also</b></p><p>
â€¢ JSF December 2005 [8]: AV Rule 56: The name of an implementation file should reflect the logical entity for which it provides definitions and have a ".cpp" extension (this name will normally be identical to the header file that provides the corresponding declarations.).
</p>
"""



def test_entity(file):
    return file.kind().check('code file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'(\.cpp$)|(\.c$)', file.name()):
        return
    filename = re.sub(r'(\.cpp$)|(\.c$)','', file.name())

    refs = file.filerefs('Define')
    ok = False

    for ref in refs:
        if re.search(filename, ref.ent().name()):
            ok = True
            break

    if not ok:
        check.violation(file, file, 1, 1, ERR1, filename)

