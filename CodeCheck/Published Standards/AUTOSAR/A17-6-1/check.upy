# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 4-21-2022
import re

ERR1 = 'Entity %1 was added to standard namespace'

def ids():
    return ('A17-6-1', 'CPP_D072')

def name(id):
    return {
        'A17-6-1': """\
Published Standards/AUTOSAR/Non-standard entities shall not be added to standard \
namespaces""",
        'CPP_D072': """\
All Checks/Language Specific/C and C++/Declarations and Definitions/Non-standard entities shall not be added to standard namespaces"""
    }[id]



def tags(id):
    return {
        'A17-6-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D072': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Adding declarations or definitions to namespace std or its sub-namespaces, or
to namespace posix or its sub-namespaces leads to undefined behavior.</p>
<p>Declaring an explicit specialization of a member function or member function template
of a standard library class or class template leads to undefined behavior.</p>
<p>Declaring an explicit or partial specialization of a member class template of
a standard library class or class template leads to undefined behavior.</p>
<p><b>Exception</b></p>
<p>It is allowed by the language standard to add a specialization to namespace
std if the declaration depends on a user-defined type, meets the requirements
for the original template and is not explicitly forbidden.</p>
<p>It is allowed by the language standard to explicitly instantiate a template
defined in the standard library if the declaration depends on a user defined
type and meets the requirements for the original template.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A17-6-1.cpp 305588 2018-01-29 11:07:35Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;limits&gt;
#include &lt;memory&gt;
#include &lt;type_traits&gt;
#include &lt;utility&gt;

namespace std
{

// Non-compliant - An alias definition is added to namespace std.
// This is a compile error in C++17, since std::byte is already defined.
using byte = std::uint8_t;

// Non-compliant - A function definition added to namespace std.
pair<int, int> operator+(pair<int, int> const& x, pair<int, int> const& y)
{
  return pair<int, int>(x.first + y.first, x.second + y.second);
}

} // namespace std

struct MyType
{
  int value;
};

namespace std
{

// Non-compliant - std::numeric_limits may not be specialized for
// non-arithmetic types [limits.numeric].
template &lt;&gt;
struct numeric_limits&lt;MyType&gt; : numeric_limits&lt;int&gt;
{
};

// Non-compliant - Structures in &lt;type_traits&gt;, except for std::common_type,
// may not be specialized [meta.type.synop].
template &lt;&gt;
struct is_arithmetic&lt;MyType&gt; : true_type
{
};

// Compliant (False Positive)- std::hash may be specialized for a user type if the
// specialization fulfills the requirements in [unord.hash].
template &lt;&gt;
struct hash&lt;MyType&gt;
{
  using result_type = size_t; // deprecated in C++17
  using argument_type = MyType; // deprecated in C++17

  size_t operator()(MyType const& x) const noexcept
  {
    return hash&lt;int&gt;()(x.value);
  }
};

} // namespace std</code></pre>
<p><b>Developer's Note</b></p>
<p>This check only looks for declarations and definitions added to the namespace
std. The check is unable to check for the exception."""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    refs = file.filerefs('Declare', 'Namespace', True)

    # Look for all user defined std namespaces
    for ref in refs:
        if ref.ent().name() != 'std':
            continue

        entRefs = ref.ent().refs('Define', '', True)

        # Throw a violation for each Define ref
        for entRef in entRefs:
            check.violation(entRef.ent(), file, entRef.line(), entRef.column(), ERR1, entRef.ent().name())
