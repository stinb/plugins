ERR1 = 'Identifier reused in the same namespace'


# The ID for the check
def ids():
    return ('A2-10-4', 'CPP_I019')


# The short name of the check
def name(id):
    return {
        'A2-10-4': 'Published Standards/AUTOSAR/The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace',
        'CPP_I019': 'All Checks/Language Specific/C and C++/Identifiers/The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace',
    }[id]




def tags(id):
    return {
        'A2-10-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Identifiers',
        ],
        'CPP_I019': [
            'Language: C',
            'Language: C++',
            'Identifiers',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>The identifier name of a non-member object with static storage duration or
static function shall not be reused within a namespace.</p>
<p><b>Rationale</b></p>
<p>No identifier with static storage duration should be re-used in the same namespace
across any source files in the project.</p>
<p>This may lead to the developer or development tool confusing the identifier with another
one.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-10-4.cpp 305382 2018-01-26 06:32:15Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
// f1.cpp
namespace ns1
{
static std::int32_t globalvariable = 0;
}

// f2.cpp
namespace ns1
{
// static std::int32_t globalvariable = 0; // Non-compliant - identifier reused
// in ns1 namespace in f1.cpp
}
namespace ns2
{
static std::int32_t globalvariable =
0; // Compliant - identifier reused, but in another namespace
}

// f3.cpp
static std::int32_t globalvariable =
0; // Compliant - identifier reused, but in another namespace
</code></pre>
<p><b>See also</b></p>
<p>â€¢ MISRA C++ 2008 [7]: advisory 2-10-5 The identifier name of a non-member
object or function with static storage duration should not be reused.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    def check_violation(ref):
        check.violation(ref.ent(), ref.file(), ref.line(), ref.column(), ERR1)

    for namespace_ref in file.filerefs("Declare", "Namespace"):
        var_list = {}

        for static_obj in namespace_ref.ent().refs("Define", "Static Object ~Member"):
            var_name = static_obj.ent().name()

            if var_name not in var_list:
                var_list[var_name] = static_obj
            elif static_obj.file().name() == file.name():
                check_violation(static_obj)
            else:
                check_violation(var_list[var_name])
