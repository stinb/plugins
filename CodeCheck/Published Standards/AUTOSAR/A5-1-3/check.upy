import re

# The ID for the check
def ids():
    return ('A5-1-3', 'CPP_E035')

# The short name of the check
def name(id):
    return {
        'A5-1-3': 'Published Standards/AUTOSAR/Parameter list (possibly empty) shall be included in every lambda expression',
        'CPP_E035': 'All Checks/Language Specific/C and C++/Expressions/Parameter list (possibly empty) shall be included in every lambda expression',
    }[id]



def tags(id):
    return {
        'A5-1-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E035': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>The lambda-declarator is optional in a lambda expression and results in a closure that
can be called without any parameters.</p>
<p>To avoid any visual ambiguity with other C++ constructs, it is recommended to explicitly
include (), even though it is not strictly required.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A5-1-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
void Fn()
{
std::int32_t i = 0;
std::int32_t j = 0;
auto lambda1 = [&i, &j] { ++i, ++j; }; // Non-compliant
auto lambda2 = [&i, &j]() {
++i;
++j;
}; // Compliant
}
</code></pre>
<p><b>See also</b></p>
<p>HIC++ v4.0 [9]: 5.1.5 Include a (possibly empty) parameter list in every lambda expression
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file,header file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def validate_type(ent, file, check) :
    if ent.kind().check('Lambda') :
        result = re.findall(r'\(.*?\)', str(ent.contents()))
        if not result:
            check.violation(file, file, ent.ref().line(), 1, "Missing parameter list")

def check(check, file):
    for ref in file.filerefs("Define","Lambda",True):
        validate_type(ref.ent(), file, check)
