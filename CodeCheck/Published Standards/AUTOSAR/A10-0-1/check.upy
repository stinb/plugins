ERR1 = 'Public inheritance shall be used to implement "is-a" relationship'


# The ID for the check
def ids():
    return ('A10-0-1','CPP_DD013')


# The short name of the check
def name(id):
    return {
        'A10-0-1': 'Published Standards/AUTOSAR/Public Inheritance not Used in a "is-a" Relationship',
        'CPP_DD013': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Public Inheritance not Used in a "is-a" Relationship',
    }[id]



def tags(id):
    return {
        'A10-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Non-automated',
            'Declarations and Definitions'
        ],
        'CPP_DD013': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Public inheritance shall be used to implement "is-a" relationship.'


# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Public inheritance shall be used to implement "is-a" relationship.</p>
<p><b>Rationale</b></p>
<p>Public and non-public inheritance have a very different application and it shall be used
accordingly.</p>
<p>See: Is-a-relationship, Has-a-relationship</p>
<p><b>See also</b></p>
<p>â€¢ JSF December 2005 [8]: AV Rule 91: Public inheritance will be used to implement
"is-a" relationships.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class"):
        if class_ref.ent().ref("Protected Base, Private Base", "Class"):
            check.violation(class_ref.ent(), file,
                            class_ref.line(), class_ref.column(), ERR1)
