# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2021-10-15


import re


ERR1 = 'Standard library function name overridden'

STD_LIB_FUNCTIONS = {
    '_Exit', 'abort', 'abort_handler_s', 'abs', 'acos', 'acosf', 'acosh', 'acoshf', 'acoshl', 'acosl', 'aligned_alloc', 'asctime', 'asctime_s', 'asin', 'asinf', 'asinh', 'asinhf', 'asinhl', 'asinl', 'at_quick_exit', 'atan', 'atan2', 'atan2f', 'atan2l', 'atanf', 'atanh', 'atanhf', 'atanhl', 'atanl', 'atexit', 'atof', 'atoi', 'atol', 'atoll', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong_explicit', 'atomic_compare_exchange_weak', 'atomic_compare_exchange_weak_explicit', 'atomic_exchange', 'atomic_exchange_explicit', 'atomic_fetch_add', 'atomic_fetch_add_explicit', 'atomic_fetch_and', 'atomic_fetch_and_explicit', 'atomic_fetch_or', 'atomic_fetch_or_explicit', 'atomic_fetch_sub', 'atomic_fetch_sub_explicit', 'atomic_fetch_xor', 'atomic_fetch_xor_explicit', 'atomic_flag_clear', 'atomic_flag_clear_explicit', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set_explicit', 'atomic_init', 'atomic_is_lock_free', 'atomic_load', 'atomic_load_explicit', 'atomic_signal_fence', 'atomic_store', 'atomic_store_explicit', 'atomic_thread_fence', 'bsearch', 'bsearch_s', 'btowc', 'c16rtomb', 'c32rtomb', 'c8rtomb', 'cabs', 'cabsf', 'cabsl', 'cacos', 'cacosf', 'cacosh', 'cacoshf', 'cacoshl', 'cacosl', 'call_once', 'calloc', 'carg', 'cargf', 'cargl', 'casin', 'casinf', 'casinh', 'casinhf', 'casinhl', 'casinl', 'catan', 'catanf', 'catanh', 'catanhf', 'catanhl', 'catanl', 'cbrt', 'cbrtf', 'cbrtl', 'ccos', 'ccosf', 'ccosh', 'ccoshf', 'ccoshl', 'ccosl', 'ceil', 'ceilf', 'ceill', 'cexp', 'cexpf', 'cexpl', 'cimag', 'cimagf', 'cimagl', 'clearerr', 'clock', 'clog', 'clogf', 'clogl', 'cnd_broadcast', 'cnd_destroy', 'cnd_init', 'cnd_signal', 'cnd_timedwait', 'cnd_wait', 'conj', 'conjf', 'conjl', 'copysign', 'copysignf', 'copysignl', 'cos', 'cosf', 'cosh', 'coshf', 'coshl', 'cosl', 'cpow', 'cpowf', 'cpowl', 'cproj', 'cprojf', 'cprojl', 'creal', 'crealf', 'csin', 'csinf', 'csinh', 'csinhf', 'csinhl', 'csinl', 'csqrt', 'csqrtf', 'csqrtl', 'ctan', 'ctanf', 'ctanh', 'ctanhf', 'ctanhl', 'ctanl', 'ctime', 'ctime_s', 'difftime', 'div', 'erf', 'erfc', 'erfcf', 'erfcl', 'erff', 'erfl', 'exit', 'exp', 'exp2', 'exp2f', 'exp2l', 'expf', 'expl', 'expm1', 'expm1f', 'expm1l', 'fabs', 'fabsf', 'fabsl', 'fclose', 'fdim', 'fdimf', 'fdiml', 'feclearexcept', 'fegetenv', 'fegetexceptflag', 'fegetround', 'feholdexcept', 'feof', 'feraiseexcept', 'ferror', 'fesetenv', 'fesetexceptflag', 'fesetround', 'fetestexcept', 'feupdateenv', 'fflush', 'fgetc', 'fgetpos', 'fgets', 'fgetwc', 'fgetws', 'floor', 'floorf', 'floorl', 'fma', 'fmaf', 'fmal', 'fmax', 'fmaxf', 'fmaxl', 'fmin', 'fminf', 'fminl', 'fmod', 'fmodf', 'fmodl', 'fopen', 'fopen_s', 'fprintf', 'fprintf_s', 'fputc', 'fputs', 'fputwc', 'fputws', 'fread', 'free', 'free_aligned_sized', 'free_sized', 'freopen', 'freopen_s', 'frexp', 'frexpf', 'frexpl', 'fscanf', 'fscanf_s', 'fseek', 'fsetpos', 'ftell', 'fwide', 'fwprintf', 'fwprintf_s', 'fwrite', 'fwscanf', 'fwscanf_s', 'getc', 'getchar', 'getenv', 'getenv_s', 'gets', 'gets_s', 'getwc', 'getwchar', 'gmtime', 'gmtime_r', 'gmtime_s', 'hypot', 'hypotf', 'hypotl', 'ignore_handler_s', 'ilogb', 'ilogbf', 'ilogbl', 'imaxabs', 'imaxdiv', 'isalnum', 'isalpha', 'isblank', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'iswalnum', 'iswalpha', 'iswblank', 'iswcntrl', 'iswctype', 'iswdigit', 'iswgraph', 'iswlower', 'iswprint', 'iswpunct', 'iswspace', 'iswupper', 'iswxdigit', 'isxdigit', 'labs', 'ldexp', 'ldexpf', 'ldexpl', 'ldiv', 'lgamma', 'lgammaf', 'lgammal', 'llabs', 'lldiv', 'llrint', 'llrintf', 'llrintl', 'llround', 'llroundf', 'llroundl', 'localeconv', 'localtime', 'localtime_r', 'localtime_s', 'log', 'log10', 'log10f', 'log10l', 'log1p', 'log1pf', 'log1pl', 'log2', 'log2f', 'log2l', 'logb', 'logbf', 'logbl', 'logf', 'logl', 'longjmp', 'lrint', 'lrintf', 'lrintl', 'lround', 'lroundf', 'lroundl', 'malloc', 'mblen', 'mbrlen', 'mbrtoc16', 'mbrtoc32', 'mbrtoc8', 'mbrtowc', 'mbsinit', 'mbsrtowcs', 'mbsrtowcs_s', 'mbstowcs', 'mbstowcs_s', 'mbtowc', 'memccpy', 'memchr', 'memcmp', 'memcpy', 'memcpy_s', 'memmove', 'memmove_s', 'memset', 'memset_explicit', 'memset_s', 'mktime', 'modf', 'modff', 'modfl', 'mtx_destroy', 'mtx_init', 'mtx_lock', 'mtx_timedlock', 'mtx_trylock', 'mtx_unlock', 'nan', 'nanf', 'nanl', 'nearbyint', 'nearbyintf', 'nearbyintl', 'nextafter', 'nextafterf', 'nextafterl', 'nexttoward', 'nexttowardf', 'nexttowardl', 'perror', 'pow', 'powf', 'powl', 'printf', 'printf_s', 'putc', 'putchar', 'puts', 'putwc', 'putwchar', 'qsort', 'qsort_s', 'quick_exit', 'raise', 'rand', 'realloc', 'remainder', 'remainderf', 'remainderl', 'remove', 'remquo', 'remquof', 'remquol', 'rename', 'rewind', 'rint', 'rintf', 'rintl', 'round', 'roundf', 'roundl', 'scalbln', 'scalblnf', 'scalblnl', 'scalbn', 'scalbnf', 'scalbnl', 'scanf', 'scanf_s', 'set_constraint_handler_s', 'setbuf', 'setlocale', 'setvbuf', 'signal', 'sin', 'sinf', 'sinh', 'sinhf', 'sinhl', 'sinl', 'snprintf', 'snprintf_s', 'snwprintf_s', 'sprintf', 'sprintf_s', 'sqrt', 'sqrtf', 'sqrtl', 'srand', 'sscanf', 'sscanf_s', 'strcat', 'strcat_s', 'strchr', 'strcmp', 'strcoll', 'strcpy', 'strcpy_s', 'strcspn', 'strdup', 'strerror', 'strerror_s', 'strerrorlen_s', 'strfromd', 'strfromf', 'strfroml', 'strftime', 'strlen', 'strncat', 'strncat_s', 'strncmp', 'strncpy', 'strncpy_s', 'strndup', 'strnlen_s', 'strpbrk', 'strrchr', 'strspn', 'strstr', 'strtod', 'strtof', 'strtoimax', 'strtok', 'strtok_s', 'strtol', 'strtold', 'strtoll', 'strtoul', 'strtoull', 'strtoumax', 'strxfrm', 'swprintf', 'swprintf_s', 'swscanf', 'swscanf_s', 'system', 'tan', 'tanf', 'tanh', 'tanhf', 'tanhl', 'tanl', 'tgamma', 'tgammaf', 'tgammal', 'thrd_create', 'thrd_current', 'thrd_detach', 'thrd_equal', 'thrd_exit', 'thrd_join', 'thrd_sleep', 'thrd_yield', 'time', 'timespec_get', 'timespec_getres', 'tmpfile', 'tmpfile_s', 'tmpnam', 'tmpnam_s', 'tolower', 'toupper', 'towctrans', 'towlower', 'towupper', 'trunc', 'truncf', 'truncl', 'tss_create', 'tss_delete', 'tss_get', 'tss_set', 'ungetc', 'ungetwc', 'vfprintf', 'vfprintf_s', 'vfscanf', 'vfscanf_s', 'vfwprintf', 'vfwprintf_s', 'vfwscanf', 'vfwscanf_s', 'vprintf', 'vprintf_s', 'vscanf', 'vscanf_s', 'vsnprintf', 'vsnprintf_s', 'vsnwprintf_s', 'vsprintf', 'vsprintf_s', 'vsscanf', 'vsscanf_s', 'vswprintf', 'vswprintf_s', 'vswscanf', 'vswscanf_s', 'vwprintf', 'vwprintf_s', 'vwscanf', 'vwscanf_s', 'wcrtomb', 'wcrtomb_s', 'wcscat', 'wcscat_s', 'wcschr', 'wcscmp', 'wcscoll', 'wcscpy', 'wcscpy_s', 'wcscspn', 'wcsftime', 'wcslen', 'wcsncat', 'wcsncat_s', 'wcsncmp', 'wcsncpy', 'wcsncpy_s', 'wcsnlen_s', 'wcspbrk', 'wcsrchr', 'wcsrtombs', 'wcsrtombs_s', 'wcsspn', 'wcsstr', 'wcstod', 'wcstof', 'wcstoimax', 'wcstok', 'wcstok_s', 'wcstol', 'wcstold', 'wcstoll', 'wcstombs', 'wcstombs_s', 'wcstoul', 'wcstoull', 'wcstoumax', 'wcsxfrm', 'wctob', 'wctomb', 'wctomb_s', 'wctrans', 'wctype', 'wmemchr', 'wmemcmp', 'wmemcpy', 'wmemcpy_s', 'wmemmove', 'wmemmove_s', 'wmemset', 'wprintf', 'wprintf_s', 'wscanf', 'wscanf_s'
}


def ids():
    return ('M17-0-3', 'MISRA08_17-0-3', 'CPP_L012')


def name(id):
    return {
        'M17-0-3': 'Published Standards/AUTOSAR/Standard Library Function Names',
        'MISRA08_17-0-3': 'Published Standards/MISRA-C++ 2008/17-0-3 Standard Library Function Names',
        'CPP_L012': 'All Checks/Language Specific/C and C++/Libraries/Standard Library Function Names',
    }[id]


def tags(id):
    return {
        'MISRA08_17-0-3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Libraries',
        ],
        'M17-0-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Libraries',
        ],
        'CPP_L012': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
    }.get(id)


def detailed_description():
    return '''\
<p><b>Title</b></p>
<p>The names of standard library functions shall not be overridden.</p>

<p><b>Rationale</b></p>
<p>Where the developer uses new versions of standard library functions (e.g. to
enhance functionality or add checks of input values), the modified function
shall have a new name. However, it is permissible to overload the name to add
new parameter types if the functionality is consistent with those of the
original. This ensures that the behaviour associated with the name remains
consistent. So, for example, if a new version of the sqrt function is written
to check that the input is not negative, the new function shall not be named
"sqrt", but shall be given a new name. It is permissible to add a new
<i>sqrt</i> function for a type not present in the library.</p>

<p><b>Example</b></p>
<pre><code language="C++">\
int32_t printf ( int32_t a, int32_t b ) // Non-compliant
{
    return ( ( a &gt; b ) ? a : b );
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>This rule is vague on whether or not the identifier can be used in places
besides function names. An option is provided to only check functions.</p>
<p>If an overridden function definition is deemed to be consistent with the
original, then the violation can be ignored with a comment or annotation.</p>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def define_options(check):
    check.options().checkbox('onlyFunctions', 'Only check functions', False)


def check(check, file):
    entKinds = '~Member Function' if check.options().lookup('onlyFunctions') else '~Member'

    for ref in file.filerefs('Define', entKinds, True):
        ent = ref.ent()

        if ent.name() in STD_LIB_FUNCTIONS:
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
