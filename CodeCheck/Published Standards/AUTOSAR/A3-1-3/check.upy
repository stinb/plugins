
ERR1 = 'Implementation files should only be .cpp'

# The ID for the check


def ids():
    return ('A3-1-3', 'CPP_N015')

# The short name of the check


def name(id):
    return {
        'A3-1-3': 'Published Standards/AUTOSAR/Implementation files, that are defined locally in the project, should have a file name extension of ".cpp"',
        'CPP_N015': 'All Checks/Language Specific/C and C++/Naming Conventions/Implementation files, that are defined locally in the project, should have a file name extension of ".cpp"',
    }[id]

# The short description of the check



def tags(id):
    return {
        'A3-1-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Naming Conventions',
        ],
        'CPP_N015': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],
    }.get(id)

def description():
    return 'Implementation files, that are defined locally in the project, should have a file name extension of ".cpp".'

# The long description of the check


def detailed_description():
    return """\
<p><b>Rationale</b></p>
This is consistent with developer expectations to provide C++ implementation files with the standard file name extension.
</p>

<p>
Note that compilers support various file name extensions for C++ implementation files.
</p>

<p><b>See also</b></p><p>
â€¢ JSF December 2005 [8]: 4.9.2 AV Rule 54 Implementation files will always have a file name extension of ".cpp".
</p>
"""



# Tests the type of file


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    ext = file.name().rsplit('.', 1)[-1]

    if ext not in {"cpp", "c"}:
        check.violation(file, file, 1, 1, ERR1)
