import re


ERR1 = 'Switch statement has only %1 cases'


def ids():
    return ('A6-4-1', 'CPP_C039')


def name(id):
    return {
        'A6-4-1': 'Published Standards/AUTOSAR/A switch statement shall have at least two case-clauses, distinct from the default label',
        'CPP_C039': 'All Checks/Language Specific/C and C++/Control Flow/A switch statement shall have at least two case-clauses, distinct from the default label',
    }[id]





def tags(id):
    return {
        'A6-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'CPP_C039': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Rationale</b></p>

<p>
A switch statement constructed with less than two case-clauses can be expressed as an if statement more naturally.
</p>

<p>
Note that a switch statement with no case-clauses is redundant.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A6-4-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
void F1(std::uint8_t choice) noexcept
{
  switch (choice)
  {
    default:
      break;
  } // Non-compliant, the switch statement is redundant
}
void F2(std::uint8_t choice) noexcept
{
  switch (choice)
  {
    case 0:
      // ...
      break;

    default:
      // ...
    break;
  } // Non-compliant, only 1 case-clause

  if (choice == 0) // Compliant, an equivalent if statement
  {
    // ...
  }
  else
  {
    // ...
  }

  // ...
  switch (choice)
  {
  case 0:
    // ...
    break;

  case 1:
    // ...
    break;

  default:
    // ...
    break;
  } // Comapliant
}
</code></pre>

<p><b>See also</b></p>

<p>
MISRA C++ 2008 [7]: Rule 6-4-8 Every switch statement shall have at least one case-clause.
</p>

<p>
HIC++ v4.0 [9]: 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label.
</p>
'''


def test_entity(file):
    return file.kind().check('header file,code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def store_and_travel_block(lex):
    keywords = []
    open = 1
    while open != 0 and lex: # Travel block
        if lex.token() == "Keyword" and open == 1:
            keywords.append(lex.text())
        if lex.text() == '{' and lex.token() == "Punctuation":
            open += 1
        elif lex.text() == '}' and lex.token() == "Punctuation":
            open -= 1
        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
    return keywords


def check(check, file):
    lexer = file.lexer(lookup_ents=False)
    lex = lexer.first()
    while lex:
        if lex.token() == "Keyword" and lex.text() == "switch":
            while lex and not (lex.text() == '{' and lex.token() == "Punctuation"):
                lex = lex.next(ignore_whitespace=True, ignore_comments=True)
                list = store_and_travel_block(lex.next())
            if list.count("case") < 2:
                check.violation(file, file, lex.line_begin(), lex.column_end(), ERR1, list.count('case'))
        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
