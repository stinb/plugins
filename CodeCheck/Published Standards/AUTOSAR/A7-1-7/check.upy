# This script is designed to run with Understand - CodeCheck
# 1-17-22

import re

ERR1 = 'Each expression statement and identifier declaration shall be placed on a separate line'

# The ID for the check
def ids():
    return ('A7-1-7', 'CPP_E048', 'MISRA23_10.0.1')

# The short name of the check
def name(id):
    return {
        'A7-1-7': 'Published Standards/AUTOSAR/Each expression statement and identifier declaration shall be placed on a separate line',
        'CPP_E048': 'All Checks/Language Specific/C and C++/Expressions/Each expression statement and identifier declaration shall be placed on a separate line',
        'MISRA23_10.0.1': 'Published Standards/MISRA C++ 2023/10.0.1 A declaration should not declare more than one variable or member variable',
    }[id]



def tags(id):
    return {
        'A7-1-7': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E048': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_10.0.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Control Flow',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'A7-1-7': """\
<p><b>Rationale</b></p>

<p>
Declaring an identifier on a separate line makes the identifier declaration easier to find and the source code more readable. Also, combining objects, references and pointers declarations with assignments and function calls on the same line may become confusing.
</p>

<p><b>Exception</b></p>

<p>
It is permitted to declare identifiers in initialization statement of a for loop.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A7-1-7.cpp 292454 2017-10-23 13:14:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;vector&gt;

typedef std::int32_t* ptr;            // Compliant
typedef std::int32_t *pointer, value; // Non-compliant

void Fn1() noexcept
{
    std::int32_t x = 0;                // Compliant
    std::int32_t y = 7, *p1 = nullptr; // Non-compliant
    std::int32_t const *p2, z = 1;     // Non-compliant
}

void Fn2()
{
    std::vector&lt;std::int32_t&gt; v{1, 2, 3, 4, 5};
    for (auto iter{v.begin()}, end{v.end()}; iter != end;
        ++iter) // Compliant by exception
    {
        // ...
    }
}

void Fn3() noexcept
{
    std::int32_t x{5};
    std::int32_t y{15}; // Non-compliant
    x++;
    ++y; // Non-compliant
    for (std::int32_t i{0}; i &lt; 100; ++i)
    {
        Fn2(); // Compliant
    }
}
</code></pre>

<p><b>See also</b></p>

<p>
• HIC++ v4.0 [9]: 7.1.1 Declare each identifier on a separate line in a separate declaration.
</p>

<p>
• JSF December 2005 [8]: AV Rule 42 Each expression-statement will be on a separate line.
</p>

<p>
• JSF December 2005 [8]: AV Rule 152: Multiple variable declarations shall not be allowed on the same line.
</p>

<p>
• C++ Core Guidelines [11]: NL.20: Don't place two statements on the same line.
</p>""",
        'CPP_E048': """\
<p><b>Rationale</b></p>

<p>
Declaring an identifier on a separate line makes the identifier declaration easier to find and the source code more readable. Also, combining objects, references and pointers declarations with assignments and function calls on the same line may become confusing.
</p>

<p><b>Exception</b></p>

<p>
It is permitted to declare identifiers in initialization statement of a for loop.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A7-1-7.cpp 292454 2017-10-23 13:14:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;vector&gt;

typedef std::int32_t* ptr;            // Compliant
typedef std::int32_t *pointer, value; // Non-compliant

void Fn1() noexcept
{
    std::int32_t x = 0;                // Compliant
    std::int32_t y = 7, *p1 = nullptr; // Non-compliant
    std::int32_t const *p2, z = 1;     // Non-compliant
}

void Fn2()
{
    std::vector&lt;std::int32_t&gt; v{1, 2, 3, 4, 5};
    for (auto iter{v.begin()}, end{v.end()}; iter != end;
        ++iter) // Compliant by exception
    {
        // ...
    }
}

void Fn3() noexcept
{
    std::int32_t x{5};
    std::int32_t y{15}; // Non-compliant
    x++;
    ++y; // Non-compliant
    for (std::int32_t i{0}; i &lt; 100; ++i)
    {
        Fn2(); // Compliant
    }
}
</code></pre>

<p><b>See also</b></p>

<p>
• HIC++ v4.0 [9]: 7.1.1 Declare each identifier on a separate line in a separate declaration.
</p>

<p>
• JSF December 2005 [8]: AV Rule 42 Each expression-statement will be on a separate line.
</p>

<p>
• JSF December 2005 [8]: AV Rule 152: Multiple variable declarations shall not be allowed on the same line.
</p>

<p>
• C++ Core Guidelines [11]: NL.20: Don't place two statements on the same line.
</p>""",
        'MISRA23_10.0.1': """\
<p><b>Amplification</b></p>
<p>An init-declarator-list or a member-declarator-list should consist of a single init-declarator or member-declarator respectively.</p>
<p>Structured bindings are permitted by this rule.</p>
<p><b>Rationale</b></p>
<p>Where multiple declarators appear in the same declaration, the type of an identifier may not meet
developer expectations.</p>
<p><b>Example</b></p>
<pre><code language="C++">int32_t i1; int32_t j1; // Compliant
int32_t i2, * j2; // Non-compliant
int32_t * i3,
 & j3 = i2; // Non-compliant
struct point
{
 int32_t x, y; // Non-compliant
};
std::map< char, char > map = f();
auto [ loc, inserted ] =
 map.insert( make_pair( 'A', 'a' ) ); // Compliant - structured binding
</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
        return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
        return False

def test_language(language):
        return language == 'C++'

def s_colon_ctr(lex_list):
    count = 0
    for lex in lex_list:
        if lex.token() == "Punctuation" and lex.text() == ";":
            count += 1
    return count

def com_ctr(lex_list):
    skip_count = False
    count = 0
    open = 0
    for lex in lex_list:
        if not lex.token() in ["Comment","Newline","Whitespace","Indent","Dedent"]:
            if (lex.token() == "Punctuation" and lex.text() in ["(","{"]) or (lex.token() == "Operator" and lex.text() in ["[","<"]):
                skip_count = True
                open += 1
            elif (lex.token() == "Punctuation" and lex.text() in [")","}"]) or (lex.token() == "Operator" and lex.text() in ["]",">"]):
                if open == 1:
                    skip_count = False
                else:
                    open -= 1
            if not skip_count and lex.token() == "Operator" and lex.text() == ",":
                count += 1
    return count

def check_definition(ref, lexer):
    lex_list = lexer.lexemes(ref.line(), ref.line())
    for_loop = [True for lex in lex_list if lex.text() == "for"]
    if not for_loop and com_ctr(lex_list) > 0:
        return False
    return True

def check_statement(ref, lexer):
    lex_list = lexer.lexemes(ref.line(), ref.line())
    for_loop = [True for lex in lex_list if lex.text() == "for"]
    if not for_loop and s_colon_ctr(lex_list) > 1:
        return False
    return True

def process_ents(file, checked_line, lexer, check):
    for ent in file.ents("Define","~File"):
        if ent.kind().check("Function,Struct"):
            process_ents(ent, checked_line, lexer, check)
        else:
            if ent.kind().check("Object,Typedef"):
                # handling variable definition
                if ent.ref("Definein"):
                    definein = ent.ref("Definein")
                    if definein.line() not in checked_line:
                        if not check_definition(definein, lexer):
                            check.violation(None, definein.file(),definein.line(), definein.column(), ERR1)
                            checked_line.append(definein.line())
                    # handling variable modification
                    if ent.refs("Modifyby,~Init Setby"):
                        for modifyby in ent.refs("Modifyby"):
                            if modifyby.line() not in checked_line:
                                if not check_statement(modifyby, lexer):
                                    check.violation(None, modifyby.file(), modifyby.line(), modifyby.column(), ERR1)
                                    checked_line.append(modifyby.line())

def check(check, file):
    lexer = file.lexer(False, 8, False, False)
    checked_line = []
    process_ents(file, checked_line, lexer, check)
