import re


ERR1 = 'The operator does not return a "prvalue"'
BINARY_OPERATOR = r"operator[+-/*/%&|^](?![+->])|operator<{2}|operator>{2}"
INVALID_TYPE = r"\*|const"


# The ID for the check
def ids():
    return ('A13-2-2', 'CPP_T041')


# The short name of the check
def name(id):
    return {
        'A13-2-2': 'Published Standards/AUTOSAR/A binary arithmetic operator and a bitwise operator shall return a "prvalue"',
        'CPP_T041': 'All Checks/Language Specific/C and C++/Types/A binary arithmetic operator and a bitwise operator shall return a "prvalue"',
    }[id]





def tags(id):
    return {
        'A13-2-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types'
        ],
        'CPP_T041': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>A binary arithmetic operator and a bitwise operator shall return a "prvalue".</p>
<p><b>Rationale</b></p>
<p>Returning a type "T" from binary arithmetic and bitwise operators is consistent with the
C++ Standard Library.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A13-2-2.cpp 271687 2017-03-23 08:57:35Z piotr.tanski $
#include &lt;cstdint&gt;

class A
{
};

A operator+(A const&, A const&) noexcept // Compliant
{
return A{};
}
std::int32_t operator/(A const&, A const&) noexcept // Compliant
{
return 0;
}
A operator&(A const&, A const&)noexcept // Compliant
{
return A{};
}
const A operator-(A const&, std::int32_t) noexcept // Non-compliant
{
return A{};
}
A* operator|(A const&, A const&) noexcept // Non-compliant
{
return new A{};
}
</code></pre>
<p><b>See also</b></p>
<p>â€¢ HIC++ v4.0 [9]: 13.2.2 Ensure that the return type of an overloaded binary
operator matches the built-in counterparts.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        if re.search(BINARY_OPERATOR, func_ref.ent().name()):
            if re.search(INVALID_TYPE, func_ref.ent().type()):
                check.violation(func_ref.ent(), file,
                                func_ref.line(), func_ref.column(), ERR1)
