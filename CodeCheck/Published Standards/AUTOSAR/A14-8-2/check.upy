import re


ERR1 = 'Explicit specializations of function templates shall not be used'


# The ID for the check
def ids():
    return ('A14-8-2', 'CPP_F049')


# The short name of the check
def name(id):
    return {
        'A14-8-2': 'Published Standards/AUTOSAR/Explicit specializations of function templates shall not be used',
        'CPP_F049': 'All Checks/Language Specific/C and C++/Functions/Explicit specializations of function templates shall not be used',
    }[id]





def tags(id):
    return {
        'A14-8-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions'
        ],
        'CPP_F049': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Explicit specializations of function templates shall not be used.</p>
<p><b>Rationale</b></p>
<p>Specializations of function templates do not participate in overload resolution. They
are only considered after their primary template has been selected during overload
resolution. This is highly dependent on the declaration order of overloads and
specializations and may be inconsistent with developer expectations.</p>
<p>A non-template function is always selected over a function template specialization if
they are otherwise an equally good match, which also may be confusing for developers.</p>
<p>Function templates cannot be partially specialized, which may lead to troublesome
implementations. If a partial specialization is required, then it is recommended to write
a single function template that delegates to a class template (which can be partially
specialized).</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A14-8-2.cpp 312698 2018-03-21 13:17:36Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
#include &lt;memory&gt;
#include &lt;iostream&gt;

template &lt;typename T&gt;
void F1(T t)
{
//compliant, (a)
std::cout &lt;&lt; "(a)" &lt;&lt; std::endl;
}

template &lt;&gt;
void F1&lt;&gt;(uint16_t* p)
{
//non-compliant
//(x), explicit specialization of
//(a), not (b), due to declaration
//order
std::cout &lt;&lt; "(x)" &lt;&lt; std::endl;
}

template &lt;typename T&gt;
void F1(T* p)
{
//compliant, (b), overloads (a)
std::cout &lt;&lt; "(b)" &lt;&lt; std::endl;
}

template &lt;&gt;
void F1&lt;&gt;(uint8_t* p)
{
//non-compliant
//(c), explicit specialization of (b)
std::cout &lt;&lt; "(c)" &lt;&lt; std::endl;
}

void F1(uint8_t* p)
{
//compliant
//(d), plain function, overloads with (a), (b)
//but not with (c)
std::cout &lt;&lt; "(d)" &lt;&lt; std::endl;
}

int main(void)
{
auto sp8 = std::make_unique&lt;uint8_t&gt;(3);
auto sp16 = std::make_unique&lt;uint16_t&gt;(3);

F1(sp8.get()); //calls (d), which might be
//confusing, but (c) is non-compliant

F1(sp16.get()); //calls (b), which might be
//confusing, but (b) is non-compliant
}
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: 14-8-1: Overloaded function templates shall not be
explicitly specialized.</p>
<p>• MISRA C++ 2008 [7]: 14-8-2: The viable function set for a function call should
either contain no function specializations, or only contain function specializations.</p>
<p>• HIC++ v4.0 [9]: 14.2.2: Do not explicitly specialize a function template that is
overloaded with other templates.</p>
<p>• C++ Core Guidelines [11]: T.144: Don't specialize function templates.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Function ~Template"):
        func_name = func_ref.ent().name()

        if "operator" not in func_name and re.search(f"{func_name}<.*>", func_ref.ent().longname()):
            check.violation(func_ref.ent(), file,
                            func_ref.line(), func_ref.column(), ERR1)
