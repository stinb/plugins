ERR1 = 'Class derived from virtual base'


# The ID for the check
def ids():
    return ('M10-1-1', 'CPP_D006', 'MISRA23_13.1.1')

def name(id):
    return {
        'M10-1-1': """\
Published Standards/AUTOSAR/Class Derived From Virtual Bases""",
        'CPP_D006': """\
All Checks/Language Specific/C and C++/Declarations and Definitions/Class Derived From Virtual Bases""",
        'MISRA23_13.1.1': 'Published Standards/MISRA C++ 2023/13.1.1 Classes should not be inherited virtually'
    }[id]






def tags(id):
    return {
        'M10-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D006': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
        'MISRA23_13.1.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Declarations and Definitions',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    if id == 'MISRA23_13.1.1':
        return '''
<p><b>Rationale</b></p>
<p>Virtual inheritance of base classes is not recommended as it introduces a number of potentially
confusing behaviours, such as call by dominance in diamond hierarchies and changes to the order of
initialization of bases.</p>

<p><b>Example</b></p>
<pre><code language="C++">struct A
{
 virtual int32_t foo() { return 1; }
};
struct B : public virtual A // Non-compliant
{
 int32_t goo()
 {
 return foo();
 }
};
struct C : public virtual A // Non-compliant
{
 int32_t foo() override { return 2; }
};
struct D : C, B
{
};
int main()
{
 D d;
 return d.goo(); // Calls C::foo(), which may not be expected
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 8.2.1, Rule 13.1.2, Rule 15.1.1</p>
        '''

    return """
<p><b>Rule</b></p>
<p>Classes should not be derived from virtual bases.</p>
<p><b>Rationale</b></p>
<p>The use of virtual base classes can introduce a number of undefined and potentially confusing
behaviours. The use of virtual bases is not recommended.</p>
<p><b>Example</b></p>
<pre><code language="C++">class B {};
class D: public virtual B {}; // Non-compliant - B is a virtual base
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class, Struct"):
        virtual_base = class_ref.ent().ref("Virtual Base")

        if virtual_base:
            check.violation(class_ref.ent(), file,
                            class_ref.line(), class_ref.column(), ERR1)
