import re
from Modules import stringIsStd


ERR1 = '''Non-static data members or captured values of predicate function objects
that are state related to this object's identity shall not be copied'''


# The ID for the check
def ids():
    return ('A25-1-1', 'CPP_F046')

def name(id):
    return {
        'A25-1-1': """\
Published Standards/AUTOSAR/Predicate Function Objects Copied Incorrectly""",
        'CPP_F046': """\
All Checks/Language Specific/C and C++/Functions/Predicate Function Objects \
Copied Incorrectly"""
    }[id]



def tags(id):
    return {
        'A25-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F046': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Non-static data members or captured values of predicate function objects
that are state related to this object's identity shall not be copied.</p>
<p><b>Rationale</b></p>
<p>Generic algorithms available in the C++ Standard Library accept a predicate
function object. The ISO/IEC 14882:2014 C++ Language Standard states that it is
implementation-defined whether predicate function objects can be copied by the STL
algorithms.</p>
<p>To prevent from unexpected results while using predicate function objects, any such
object shall either:</p>
<p>• be passed to an STL algorithm wrapped as a std::reference_wrapper.</p>
<p>• implement a function call operator that is const and does not modify any data
members or captured values that have a mutable specifier.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A25-1-1.cpp 309784 2018-03-01 20:18:29Z michal.szczepankiewicz $
2
3 #include &lt;iostream&gt;
4 #include &lt;vector&gt;
5 #include &lt;algorithm&gt;
6 #include &lt;functional&gt;
7 #include &lt;iterator&gt;
8
9 class ThirdElemPred : public std::unary_function&lt;int, bool&gt;
10 {
11 public:
12 ThirdElemPred() : timesCalled(0) {}
13 bool operator()(const int &) { return (++timesCalled) == 3; }
14 //non-compliant, non-const call operator that
15 //modifies the predicate object field
16 private:
17 size_t timesCalled;
18 };
19
20 class ThirdElemPred2 : public std::unary_function&lt;int, bool&gt;
21 {
22 public:
23 ThirdElemPred2() : timesCalled(0) {}
24 bool operator()(const int &) const { return (++timesCalled) == 3; }
25 //non-compliant, const call operator that
26 //modifies the mutable predicate object field
27 private:
28 mutable size_t timesCalled;
29 };
30
31 class ValueFivePred: public std::unary_function&lt;int, bool&gt;
32 {
33 public:
34 bool operator()(const int& v) const { return v == 5; }
35 //compliant, const call operator that does not
36 //modify the predicate object state
37 };
38
39 void F1(std::vector&lt;int&gt; v)
40 {
41 //non-compliant, predicate object state modified
42 int timesCalled = 0;
43 //display values that are NOT to be removed
44 std::copy(v.begin(), std::remove_if(v.begin(), v.end(), [timesCalled](const
int &) mutable { return (++timesCalled) == 3; }), std::ostream_iterator&lt;std::
vector&lt;int&gt;::value_type&gt;(std::cout, " ") );
45 std::cout &lt;&lt; std::endl;
46 }
47
48 void F2(std::vector&lt;int&gt; v)
49 {
50 //non-compliant, predicate object state modified
51 std::copy(v.begin(), std::remove_if(v.begin(), v.end(), ThirdElemPred()), std
::ostream_iterator&lt;std::vector&lt;int&gt;::value_type&gt;(std::cout, " ") );
52 std::cout &lt;&lt; std::endl;
53 }
54
55 void F22(std::vector&lt;int&gt; v)
56 {
57 //non-compliant, predicate object state modified
58 std::copy(v.begin(), std::remove_if(v.begin(), v.end(), ThirdElemPred2()),
std::ostream_iterator&lt;std::vector&lt;int&gt;::value_type&gt;(std::cout, " ") );
59 std::cout &lt;&lt; std::endl;
60 }
61
62 void F3(std::vector&lt;int&gt; v)
63 {
64 //compliant, predicate object that has its state
65 //modified is passed as a std::reference_wrapper
66 ThirdElemPred pred;
67 std::copy(v.begin(), std::remove_if(v.begin(), v.end(), std::ref(pred)), std
::ostream_iterator&lt;std::vector&lt;int&gt;::value_type&gt;(std::cout, " ") );
68 std::cout &lt;&lt; std::endl;
69 }
70
71 int main(void)
72 {
73 std::vector&lt;int&gt; v{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
74
75 F1(v);
76 F2(v);
77 F22(v);
78 F3(v);
79 //output for g++-5.5, correct result only for F3
80 //F1 0 1 3 4 6 7 8 9
81 //F2 0 1 3 4 6 7 8 9
82 //F22 0 1 3 4 6 7 8 9
83 //F3 0 1 3 4 5 6 7 8 9
84 return 0;
85 }
</code></pre>
<p><b>See also</b></p>
<p>• SEI CERT C++ Coding Standard [10]: CTR58-CPP: Predicate function objects
should not be mutable</p>
<p>• cppreference.com [16]: C++ concepts: Predicate</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    def check_violation(_ent, _line, _col):
        check.violation(_ent, file, _line, _col, ERR1)

    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    copied_identifiers = {}

    for copy_ref in file.filerefs("Call", "Function"):
        if stringIsStd(copy_ref.ent().longname(), 'copy'):
            lex = lexer.lexeme(copy_ref.line(), copy_ref.column())
            lex = lex.next(ignore_whitespace=True)
            on_param = 1

            while lex and on_param:
                lex = lex.next(ignore_whitespace=True,
                               ignore_comments=True)

                if lex.text() == "(":
                    on_param += 1
                elif lex.text() == ")":
                    on_param -= 1
                elif lex.token() == "Identifier" and lex.ent() and lex.ent().kind().check("Member Function ~Unresolved"):
                    _key = f"{lex.line_begin()} {lex.column_begin()}"
                    copied_identifiers[_key] = lex.ent()
                elif lex.token() == "Identifier" and lex.ref() and lex.ref().kind().check("Useby Capture"):
                    for mod_ref in lex.ent().refs("Modifyby"):
                        if mod_ref.ent().id() == lex.ref().ent().id():
                            check_violation(
                                lex.ent(), mod_ref.line(), mod_ref.column())

    if not copied_identifiers:
        return

    for class_ref in file.filerefs("Define", "Class"):
        check_copy = False
        members = []

        for member in class_ref.ent().refs("Define", "~Static Member Object"):
            members.append(member.ent().name())

        for func_ref in class_ref.ent().refs("Define", "Function"):
            if func_ref.ent().name() == "operator()":
                non_compliant = False

                for modify_ref in func_ref.ent().refs("Modify", "Object"):
                    if modify_ref.ent().name() in members:
                        non_compliant = True

                if not func_ref.ent().kind().check("Const"):
                    non_compliant = True

                if non_compliant:
                    check_copy = True
                    check_violation(
                        func_ref.ent(), func_ref.line(), func_ref.column())

        if check_copy:
            for key, val in copied_identifiers.items():
                if val.parent() and class_ref.ent() and val.parent().id() == class_ref.ent().id():
                    line, column = str(key).split(" ")
                    check_violation(val, int(line), int(column))
