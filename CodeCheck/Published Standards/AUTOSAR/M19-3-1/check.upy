# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12-02-2021
import re

ERR1 = 'errno was used'

def ids():
    return ('M19-3-1', 'CPP_E011', 'MISRA04_20.5', 'MISRA08_19-3-1', 'CPP_L008')

def name(id):
    return {
        'M19-3-1': """\
Published Standards/AUTOSAR/The error indicator errno shall not be used""",
        'CPP_E011': """\
All Checks/Language Specific/C and C++/Exception Handling/No \"errno\" allowed""",
        'MISRA04_20.5': """\
Published Standards/MISRA-C 2004/20.5 The error indicator \"errno\" shall not be \
used""",
        'MISRA08_19-3-1': """\
Published Standards/MISRA-C++ 2008/19-3-1 The error indicator \"errno\" shall \
not be used.""",
        'CPP_L008': """\
All Checks/Language Specific/C and C++/Libraries/No \"errno\" allowed"""

    }[id]




def tags(id):
    return {
        'MISRA08_19-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Exception Handling',
            'Libraries',
        ],
        'MISRA04_20.5': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Exception Handling',
            'Libraries',
        ],
        'M19-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Exception Handling',
            'Libraries',
        ],
        'CPP_E011': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
            'Libraries',
        ],
        'CPP_L008': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
            'Libraries',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>errno is a facility of C++ which should in theory be useful, but which in
practice is poorly defined by ISO/IEC 14882:2003 [1]. A non-zero value may or
may not indicate that a problem has occurred; therefore errno shall not be used.
</p>
<p>Even for those functions for which the behaviour of errno is well defined,
it is preferable to check the values of inputs before calling the function
rather than relying on using errno to trap errors.</p>
<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstdlib&gt;
#include &lt;cerrno&gt;
void f1 ( const char_t * str )
{
  errno = 0; // Non-compliant
  int32_t i = atoi ( str );
  if ( 0 != errno ) // Non-compliant
  {
    // handle error case???
  }
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'errno', file.contents()):
        return

    lexer = file.lexer()

    lexemes = lexer.lexemes()

    for lexeme in lexemes:
        if lexeme.text() == 'errno' and lexeme.ent() and re.search(r'Unresolved Macro', lexeme.ent().kind().longname()):
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
