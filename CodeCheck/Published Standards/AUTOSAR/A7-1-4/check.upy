# This script is designed to run with Understand - CodeCheck
# 6-16-21


import re


ERR1 = 'Register keyword is used'


def ids():
    return ('A7-1-4', 'CPP_D026')


def name(id):
    return {
        'A7-1-4': 'Published Standards/AUTOSAR/The register keyword shall not be used',
        'CPP_D026': 'All Checks/Language Specific/C and C++/Declarations and Definitions/The register keyword shall not be used',
    }[id]





def tags(id):
    return {
        'A7-1-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D026': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Rationale</b></p>

<p>
This feature was deprecated in the 2011 C++ Language Standard [2] and may be withdrawn in a later version.
</p>

<p>
Moreover, most compilers ignore register specifier and perform their own register assignments.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A7-1-4.cpp 289448 2017-10-04 11:11:03Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
std::int32_t F1(register std::int16_t number) noexcept  // Non-compliant
{
    return ((number * number) + number);
}
void F2(std::int16_t number) noexcept  // Compliant
{
    register std::int8_t x = 10;       // Non-compliant
    std::int32_t result = F1(number);  // Compliant
    // ...
}
</code></pre>

<p><b>See also</b></p>

<p>
• JSF December 2005 [8]: AV Rule 140 The register storage class specifier shall not be used.
</p>

<p>
• HIC++ v4.0 [9]: 1.3.2 Do not use the register keyword
</p>
'''


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"register", file.contents()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    for lex in lexer.lexemes():
        if lex.text() == "register" and lex.token() == "Keyword":
            check.violation(lex.ent(), file, lex.line_begin(),
                            lex.column_begin(), ERR1)
