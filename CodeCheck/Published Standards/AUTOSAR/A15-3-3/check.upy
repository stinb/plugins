import re


ERR1 = 'Explicit specializations of function templates shall not be used'


# The ID for the check
def ids():
    return ('A15-3-3', 'CPP_E064')

def name(id):
    return {
        'A15-3-3': """\
Published Standards/AUTOSAR/Unhandled Exceptions on Main Function""",
        'CPP_E064': """\
All Checks/Language Specific/C and C++/Exception Handling/Unhandled Exceptions \
on Main Function"""

    }[id]




def tags(id):
    return {
        'A15-3-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Partially Automated',
            'Exception Handling',
        ],
        'CPP_E064': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Main function and a task main function shall catch at least: base class
exceptions from all third-party libraries used, std::exception and all
otherwise unhandled exceptions.</p>
<p><b>Rationale</b></p>
<p>If a program throws an unhandled exception in main function, as well as in init thread
function, the program terminates in an implementation-defined manner. In particular,
it is implementation-defined whether the call stack is unwound, before termination, so
the destructors of any automatic objects may or may not be executed. By enforcing
the provision of a “last-ditch catch-all”, the developer can ensure that the program
terminates in a consistent manner.</p>
<p>Exceptions hierarchy from external libraries may be completely separate from C++
Standard Library std::exception. Handling such base exception classes separately
may provide some additional information about application termination causes.</p>
<p><b>Note</b></p>
<p>This check only flags main functions that catches the std::exception but not the unexpected exceptions.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A15-3-3.cpp 309502 2018-02-28 09:17:39Z michal.szczepankiewicz $
#include &lt;stdexcept&gt;

//base exception class from external library that is used
class ExtLibraryBaseException {};

int MainGood(int, char**) // Compliant
{
try
{
// program code
}
catch (std::runtime_error& e)
{
// Handle runtime errors
}
catch (std::logic_error& e)
{
// Handle logic errors
}
catch (ExtLibraryBaseException &e)
{
// Handle all expected exceptions
// from an external library
}
catch (std::exception& e)
{
// Handle all expected exceptions
}
catch (...)
{
// Handle all unexpected exceptions
}

return 0;
}
int MainBad(int, char**) // Non-compliant - neither unexpected exceptions
// nor external libraries exceptions are caught
{
try
{
// program code
}
catch (std::runtime_error& e)
{
// Handle runtime errors
}
catch (std::logic_error& e)
{
// Handle logic errors
}
catch (std::exception& e)
{
// Handle all expected exceptions
}

return 0;
}
void ThreadMainGood() // Compliant
{
try
{
// thread code
}
catch (ExtLibraryBaseException &e)
{
// Handle all expected exceptions
// from an external library
}
catch (std::exception& e)
{
// Handle all expected exception
}
catch (...)
{
// Handle all unexpected exception
}
}

void ThreadMainBad() // Non-compliant - neither unexpected exceptions
// nor external libraries exceptions are caught
{
try
{
// thread code
}
catch (std::exception& e)
{
// Handle all expected exceptions
}

// Uncaught unexpected exception will cause an immediate program termination
}
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: 15-3-2 There should be at least one exception handler to
catch all otherwise unhandled exceptions.</p>
<p>• SEI CERT C++ [10]: ERR51-CPP. Handle all exceptions</p>
<p>• Effective Java 2nd Edition [15]: Item 65: Don't ignore exceptions</p>
"""



# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if not lexer:
        return

    for func_ref in file.filerefs("Define", "Function ~Template ~Lambda"):
        if re.search(r"main", func_ref.ent().name(), re.I):
            for catch_ref in func_ref.ent().refs("Catch Exception"):
                if re.search(r"std::(__1::)?exception", catch_ref.ent().longname()):
                    compliant = False
                    lex = lexer.lexeme(catch_ref.line(), catch_ref.column())

                    while lex and lex.text() != "{":
                        lex = next_lex(lex)

                    lex = next_lex(lex)
                    on_body = 1

                    while on_body:
                        if lex.text() == "{":
                            on_body += 1
                        elif lex.text() == "}":
                            on_body -= 1

                        lex = next_lex(lex)

                    if lex.text() == "catch" and lex.token() == "Keyword":
                        compliant = True

                    if not compliant:
                        check.violation(func_ref.ent(), file,
                                        func_ref.line(), func_ref.column(), ERR1)


def next_lex(_lex):
    return _lex.next(ignore_whitespace=True, ignore_comments=True)
