import re

ERR1 = 'The character \\ occurs as a last character of a comment'

def ids():
    return ('A2-7-1', 'CPP_C035')

def name(id):
    return {
        'A2-7-1': 'Published Standards/AUTOSAR/The character &#92; shall not occur as a last character of a C++ comment',
        'CPP_C035': 'All Checks/Language Specific/C and C++/Comments/No Backslash at End of Comment',
    }[id]



def tags(id):
    return {
        'A2-7-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Comments',
        ],
        'CPP_C035': [
            'Language: C',
            'Language: C++',
            'Comments',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Rationale</b></p>
If the last character in a single-line C++ comment is \\, then the comment will continue
in the next line. This may lead to sections of code that are unexpectedly commented
out.
</p>

<p><b>Example</b></p>
<pre><code language="C++">// $Id: A2-7-1.cpp 305382 2018-01-26 06:32:15Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
void Fn() noexcept
{
    std::int8_t idx = 0;
    // Incrementing idx before the loop starts // Requirement X.X.X \\
    ++idx; // Non-compliant - ++idx was unexpectedly commented-out because of \\ character occurrence in the end of C++ comment

    constexpr std::int8_t limit = 10;
    for (; idx &lt;= limit; ++idx)
    {
        // ...
    }
}
</code></pre>

'''

def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    line = 1
    for lexeme in file.lexer(False,8,False,True):
        if(lexeme.token() == "Comment"):
            if("\\" + "\n" in lexeme.text().strip()):
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), "The \\ character preceeds a newline in comment: " + lexeme.text())
