# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 11-8-21


import re


ERR1 = 'Expression of type "%1" is converted to "%2"'


def ids():
    return ('M5-0-7', 'MISRA08_5-0-7', 'CPP_T011')


def name(id):
    return {
        'M5-0-7': 'Published Standards/AUTOSAR/There shall be no explicit floating-integral conversions of a cvalue expression',
        'MISRA08_5-0-7': 'Published Standards/MISRA-C++ 2008/5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression',
        'CPP_T011': 'All Checks/Language Specific/C and C++/Types/There shall be no explicit floating-integral conversions of a cvalue expression',
    }[id]





def tags(id):
    return {
        'MISRA08_5-0-7': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'M5-0-7': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T011': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

def description():
    return 'There shall be no explicit floating-integral conversions of a cvalue expression.'


def detailed_description():
    return '''\

<p><b>Rationale</b></p>

<p>
A cast applied to the result of an expression does not change the type in which the expression is evaluated, which may be contrary to developer expectations.
</p>

<p><b>Example</b></p>
<pre><code language="C++">// Integral to Float
void f1 ( )
{
    int16_t s16a;
    int16_t s16b;
    int16_t s16c;
    float32_t f32a;
    // The following performs integer division
    f32a = static_cast&lt; float32_t &gt; ( s16a / s16b ); // Non-compliant
    // The following also performs integer division
    s16c = s16a / s16b;
    f32a = static_cast&lt; float32_t &gt; ( s16c ); // Compliant
    // The following performs floating-point division
    f32a = static_cast&lt; float32_t &gt; ( s16a ) / s16b; // Compliant
}
</code></pre>

<p>
In the above example, the expression <code>( s16a / s16b )</code> is performed with an <i>underlying type</i> of <code>int16_t</code> rather than <code>float32_t</code>.
</p>

<pre><code language="C++">// Float to Integral
void f2 ( )
{
    float32_t f32a;
    float32_t f32b;
    float32_t f32c;
    int16_t s16a;
    // The following performs floating-point division
    s16a = static_cast&lt; int16_t &gt; ( f32a / f32b ); // Non-compliant
    // The following also performs floating-point division
    f32c = f32a / f32b;
    s16a = static_cast&lt; int16_t &gt; ( f32c ); // Compliant
    // The following performs integer division
    s16a = static_cast&lt; int16_t &gt; ( f32a ) / f32b; // Compliant
}
</code></pre>

<p>
In the above example, the expression <code>( f32a / f32b )</code> is performed with an <i>underlying type</i> of <code>float32_t</code> rather than <code>int16_t</code>.
</p>

'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def matchString(lexeme, text):
    if lexeme.text() == text:
        return lexeme.next(ignore_comments=True, ignore_whitespace=True)
    else:
        return None


def matchSet(lexeme, texts):
    if lexeme.text() in texts:
        return lexeme.next(ignore_comments=True, ignore_whitespace=True)
    else:
        return None


def check(check, file):
    casts = {'static_cast', 'dynamic_cast', 'const_cast', 'reinterpret_cast'}
    integrals = {'char', 'signed char', 'unsigned char', 'short', 'short int', 'signed short', 'signed short int', 'unsigned short int', 'int', 'signed', 'signed int', 'unsigned', 'unsigned int', 'long', 'long int', 'signed long', 'signed long int', 'unsigned long', 'unsigned long int', 'long long', 'long long int', 'signed long long', 'signed long long int', 'unsigned long long', 'unsigned long long int', 'int8_t', 'int16_t', 'int32_t', 'int64_t', 'int_fast8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_least8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint64_t', 'uint_fast8_t', 'uint_fast16_t', 'uint_fast32_t', 'uint_fast64_t', 'uint_least8_t', 'uint_least16_t', 'uint_least32_t', 'uint_least64_t'}
    floats = {'float', 'double', 'long double'}
    operators = {'+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>'}

    lexer = None

    # Whenever a value is set by a cast
    for toRef in file.filerefs('Set', 'Object'):
        toEnt = toRef.ent()

        # If the value being assigned is a number
        if toEnt.type() in integrals or toEnt.type() in floats:
            
            # Get the lexer and lexeme
            if not lexer:
                lexer = file.lexer()
            lexeme = lexer.lexeme(toRef.line(), toRef.column())
            lexeme = lexeme.next(ignore_comments=True, ignore_whitespace=True)

            # Match the following: = cast<float>
            lexeme = matchString(lexeme, '=')
            if not lexeme:
                continue
            lexeme = matchSet(lexeme, casts)
            if not lexeme:
                continue
            lexeme = matchString(lexeme, '<')
            if not lexeme:
                continue
            lexeme = matchSet(lexeme, integrals | floats)
            if not lexeme:
                continue
            lexeme = matchString(lexeme, '>')
            if not lexeme:
                continue
            lexeme = matchString(lexeme, '(')
            if not lexeme:
                continue

            fromEnt = lexeme.ent()
            if not fromEnt:
                continue

            # If the fromEnt type is a float and the toEnt type is an integral, or vice versa
            if (fromEnt.type() in floats and toEnt.type() in integrals) or (fromEnt.type() in integrals and toEnt.type() in floats):

                # If the next token is an operator
                lexeme = lexeme.next(ignore_comments=True, ignore_whitespace=True)
                if matchSet(lexeme, operators):
                    
                    check.violation(toEnt, file, toRef.line(), toRef.column(), ERR1, fromEnt.type(), toEnt.type())

