import re


ERR1 = 'Only instances of types derived from std::exception should be thrown'
STD_EXCEPTION_LIB = {"logic_error", "bad_optional_access", "runtime_error", "bad_typeid", "bad_cast",
        "bad_weak_ptr", "bad_function_call", "bad_alloc", "bad_exception", "bad_variant_access", "ios_base::failure", "basic_ios::failure"}


# The ID for the check
def ids():
    return ('A15-1-1', 'CPP_E057')


# The short name of the check
def name(id):
    return {
        'A15-1-1': 'Published Standards/AUTOSAR/Only instances of types derived from std::exception should be thrown',
        'CPP_E057': 'All Checks/Language Specific/C and C++/Exception Handling/Only instances of types derived from std::exception should be thrown',
    }[id]



def tags(id):
    return {
        'A15-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Automated',
            'Exception Handling'
        ],
        'CPP_E057': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Only instances of types derived from std::exception should be thrown.'


# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Only instances of types derived from std::exception should be thrown.</p>
<p><b>Rationale</b></p>
<p>If an object that inherits from std::exception is thrown, there's a guarantee that it serves
to document the cause of an exception in an unified way. Also, "it makes your code
easier to learn and re-use, because it matches established conventions with which
programmers are already familiar.". [Effective Java 2nd Edition [15]]</p>
<p>This means that only standard library exceptions or user-defined exceptions that inherit
from std::exception base class should be used for exceptions.</p>
<p>Note that direct instances of std::exception are not to be thrown as they can not be
unique.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A15-1-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;memory&gt;
3 #include &lt;stdexcept&gt;
4 class A
5 {
6 // Implementation
7 };
8 class MyException : public std::logic_error
9 {
10 public:
11 using std::logic_error::logic_error;
12 // Implementation
13 };
14 void F1()
15 {
16 throw - 1; // Non-compliant - integer literal thrown
17 }
18 void F2()
19 {
20 throw nullptr; // Non-compliant - null-pointer-constant thrown
21 }
22 void F3()
23 {
24 throw A(); // Non-compliant - user-defined type that does not inherit from
25 // std::exception thrown
26 }
27 void F4()
28 {
29 throw std::logic_error{
30 "Logic Error"}; // Compliant - std library exception thrown
31 }
32 void F5()
33 {
34 throw MyException{"Logic Error"}; // Compliant - user-defined type that
35 // inherits from std::exception thrown
36 }
37 void F6()
38 {
39 throw std::make_shared&lt;std::exception&gt;(
40 std::logic_error("Logic Error")); // Non-compliant - shared_ptr does
41 // not inherit from std::exception
42 }
43 void F7()
44 {
45 try
46 {
47 F6();
48 }
49
50 catch (std::exception& e) // An exception of
51 // std::shared_ptr&lt;std::exception&gt; type will not
52 // be caught here
53 {
54 // Handle an exception
55 }
56 catch (std::shared_ptr&lt;std::exception&gt;& e) // An exception of
57 // std::shared_ptr&lt;std::exception&gt;
58 // type will be caught here, but
59 // unable to access
60 // std::logic_error information
61 {
62 // Handle an exception
63 }
64 }
</code></pre>
<p><b>See Also</b></p>
<p>• HIC++ v4.0 [9]: 15.1.1 Only use instances of std::exception for exceptions</p>
<p>• C++ Core Guidelines [11]: E.14: Use purpose-designed user-defined types as
exceptions (not built-in types)</p>
<p>• Effective Java 2nd Edition [15]: Item 60: Favor the use of standard exceptions</p>
"""




# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    def check_violation(_lex):
        check.violation(None, file, _lex.line_begin(),
                        _lex.column_begin(), ERR1)

    lexer = file.lexer(True, 8, False, False)

    if not (lexer or re.search(r"throw", file.contents())):
        return

    lex = lexer.first()
    in_throw = False
    throw_lex = None

    while lex:
        if lex.text() == "throw" and lex.token() == "Keyword":
            in_throw = True
            throw_lex = lex
        elif in_throw:
            lex_ent = lex.ent() if lex.ent() else None

            if lex.token() == "Literal":
                check_violation(throw_lex)
            elif lex.text() == "-" and lex.token() == "Operator" and lex.next().token() == "Literal":
                check_violation(throw_lex)
            elif lex.text() == "nullptr" and lex.token() == "Identifier":
                check_violation(throw_lex)
            elif lex_ent:
                if lex_ent.kind().check("Namespace"):
                    lex = lex.next(ignore_whitespace=True,
                                   ignore_comments=True)

                    while lex.token() != "Identifier":
                        lex = lex.next(ignore_whitespace=True,
                                       ignore_comments=True)

                    if lex.text() not in STD_EXCEPTION_LIB:
                        check_violation(throw_lex)

                elif lex_ent.kind().check("Member Function"):
                    declare_ref = lex.ref().scope().ref("Declarein, Definein")
                    parent_base = declare_ref.ent().ref("Base") if declare_ref else None

                    if not parent_base or (parent_base and parent_base.ent().name() not in STD_EXCEPTION_LIB):
                        check_violation(throw_lex)

            in_throw = False

        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
