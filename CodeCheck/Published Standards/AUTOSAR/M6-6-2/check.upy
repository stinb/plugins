# This script is designed to run with Understand - CodeCheck
# 8-4-21


ERR1 = 'Backward goto statement is prohibited'


# The ID for the check
def ids():
    return ('M6-6-2', 'MISRA08_6-6-2', 'CPP_C023', 'MISRA23_9.6.3')


# The short name of the check
def name(id):
    return {
        'M6-6-2': 'Published Standards/AUTOSAR/The goto statement shall jump to a label declared later in the same function body',
        'MISRA08_6-6-2': 'Published Standards/MISRA-C++ 2008/6-6-2 The goto statement shall jump to a label declared later in the same function body',
        'CPP_C023': 'All Checks/Language Specific/C and C++/Control Flow/The goto statement shall jump to a label declared later in the same function body',
        'MISRA23_9.6.3': 'Published Standards/MISRA C++ 2023/9.6.3 The goto statement shall jump to a label declared later in the function body',
    }[id]





def tags(id):
    return {
        'MISRA08_6-6-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Control Flow',
        ],
        'M6-6-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'CPP_C023': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
        'MISRA23_9.6.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Control Flow',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return '''
<p><b>Rationale</b></p>

<p>
Unconstrained use of <i>goto</i> can lead to programs that are extremely difficult to comprehend, analyse and, for C++, can also lead to the program exhibiting <i>unspecified behaviour</i>.
</p>

<p>
However, in many cases a total ban on <i>goto</i> requires the introduction of flags to ensure correct control flow, and it is possible that these flags may themselves be less transparent than the <i>goto</i> they replace.
</p>

<p>
Therefore, the restricted use of <i>goto</i> is allowed where that use will not lead to semantics contrary to developer expectations. "Back" jumps are prohibited as they can be used to create iterations without using the well-defined iteration statements supplied by the core language.
</p>

<p><b>Example</b></p>

<pre><code language="C++">  void f ( )
  {
    int32_t j = 0;
  L1:
    ++j;
    if ( 10 == j )
    {
      goto L2; // Compliant
    }
    goto L1;   // Non-compliant
  L2:
    ++j;
  }
</code></pre>
'''


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for label_ref in file.filerefs("Define", "Label"):
        for use_ref in label_ref.ent().refs("Useby"):
            if use_ref.line() > label_ref.line():
                check.violation(use_ref.scope(), file, use_ref.line(), use_ref.column(), ERR1)
