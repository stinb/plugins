import re

# The ID for the check
def ids():
    return ('A2-13-3', 'CPP_T005')

# The short name of the check
def name(id):
    return {
        'A2-13-3': 'Published Standards/AUTOSAR/Type wchar_t shall not be used',
        'CPP_T005': 'All Checks/Language Specific/C and C++/Types/Type wchar_t shall not be used',
    }[id]



def tags(id):
    return {
        'A2-13-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T005': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Width of wchar_t type is implementation-defined.</p>
<p>Types char16_t and char32_t should be used instead.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A2-13-3.cpp 305629 2018-01-29 13:29:25Z piotr.serwa $
2 char16_t string1[] = u"ABC"; // Compliant
3 char32_t string2[] = U"DEF"; // Compliant
4 wchar_t string3[] = L"GHI"; // Non-compliant
</code></pre>
<p><b>See also</b></p>
<p>none
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check_type_and_format(ref, file, check) :
    ref_format = re.compile("wchar_t", re.I)
    if ref_format.findall(str(ref.ent().type())):
        check.violation(ref.ent(), file, ref.line(), ref.column(), "Type wchar_t shall not be used.")

def check(check, file):

    for ref in file.filerefs("Define, Declare", "", True) :
        # check on entity
        check_type_and_format(ref, file, check)
