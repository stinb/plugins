ERR1 = 'Unions shall not be used'


# The ID for the check
def ids():
    return ('A9-5-1', 'CPP_S004')

def name(id):
    return {
        'A9-5-1': """\
Published Standards/AUTOSAR/Unions Shall not be Used""",
        'CPP_S004': """\
All Checks/Language Specific/C and C++/Structures and Unions/Unions Shall not be Used"""

    }[id]





def tags(id):
    return {
        'A9-5-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Structures and Unions',
        ],
        'CPP_S004': [
            'Language: C',
            'Language: C++',
            'Structures and Unions',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'Unions shall not be used.'


# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Unions shall not be used.</p>
<p><b>Rationale</b></p>
<p>Unions are not type safe and their usage can be misleading and easily misinterpreted
by developers.</p>
<p><b>Exception</b></p>
<p>It is allowed to use tagged unions until std::variant is available in the C++ Standard
Library (C++17)</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A9-5-1.cpp 305588 2018-01-29 11:07:35Z michal.szczepankiewicz $
2
3 #include &lt;cstdint&gt;
4 // Compliant
5 struct Tagged
6 {
7 enum class TYPE
8 {
9 UINT,
10 FLOAT
11 };
12 union {
13 uint32_t u;
14 float f;
15 };
16 TYPE which;
17 };
18
19 int main(void)
20 {
21 Tagged un;
22
23 un.u = 12;
24 un.which = Tagged::TYPE::UINT;
25
26 un.u = 3.14f;
27 un.which = Tagged::TYPE::FLOAT;
28
29 return 0;
30 }
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: M9-5-1: Unions shall not be used</p>
<p>• JSF December 2005 [8]: AV Rule 153: Bit-fields shall have explicitly unsigned
integral or enumeration types only</p>
<p>• C++ Core Guidelines [11]: C.181: Avoid “naked” unions</p>
<p>• C++ Core Guidelines [11]: C.182: Use anonymous unions to implement tagged
unions</p>
<p>• C++ Core Guidelines [11]: Type.7: Avoid naked union: Use variant instead.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for union_ref in file.filerefs("Define", "Union"):
        union_parent = union_ref.ent().parent() if union_ref.ent().parent() else None

        if union_parent and union_parent.kind().check("Struct"):
            continue
        else:
            check.violation(union_ref.ent(), file,
                            union_ref.line(), union_ref.column(), ERR1)
