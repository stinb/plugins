# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2021-10-15


import re


ERR1 = 'Array %1 decayed to a pointer'


def ids():
    return ('M5-2-12', 'MISRA08_5-2-12', 'CPP_T023', 'MISRA23_7.11.2')


def name(id):
    return {
        'M5-2-12': 'Published Standards/AUTOSAR/Array to Pointer Decay',
        'MISRA08_5-2-12': 'Published Standards/MISRA-C++ 2008/5-2-12 Array to Pointer Decay',
        'CPP_T023': 'All Checks/Language Specific/C and C++/Types/Array to Pointer Decay',
        'MISRA23_7.11.2': 'Published Standards/MISRA C++ 2023/7.11.2 Array to Pointer Decay',
    }[id]


def tags(id):
    return {
        'MISRA08_5-2-12': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'M5-2-12': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T023': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
        'MISRA23_7.11.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Types',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA08_5-2-12': '''\
<p><b>Title</b></p>
<p>An identifier with array type passed as a function argument shall not decay
to a pointer.</p>

<p><b>Rationale</b></p>
<p>When a variable with array type decays to a pointer, its bounds are lost.</p>
<p>If a design requires arrays of different lengths, then a class should be used
to encapsulate the array objects and so ensure that the dimensionality is
maintained.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f1( int32_t p[ 10 ] );
void f2( int32_t *p );
void f3( int32_t ( &p )[ 10 ] );

void b ()
{
   int32_t a[ 10 ];
   f1( a );      // Non-compliant - Dimension "10" lost due to array to
                 // pointer conversion.
   f2( a );      // Non-compliant - Dimension "10" lost due to array to
                 // pointer conversion.
   f3( a );      // Compliant - Dimension preserved.
}
</code></pre>
''',
        'M5-2-12': '''\
<p><b>Title</b></p>
<p>An identifier with array type passed as a function argument shall not decay
to a pointer.</p>

<p><b>Rationale</b></p>
<p>When a variable with array type decays to a pointer, its bounds are lost.</p>
<p>If a design requires arrays of different lengths, then a class should be used
to encapsulate the array objects and so ensure that the dimensionality is
maintained.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f1( int32_t p[ 10 ] );
void f2( int32_t *p );
void f3( int32_t ( &p )[ 10 ] );

void b ()
{
   int32_t a[ 10 ];
   f1( a );      // Non-compliant - Dimension "10" lost due to array to
                 // pointer conversion.
   f2( a );      // Non-compliant - Dimension "10" lost due to array to
                 // pointer conversion.
   f3( a );      // Compliant - Dimension preserved.
}
</code></pre>

<p><b>See also</b></p>
<ul>
<li>C++ Core Guidelines [11]: C.152: Never assign a pointer to an array of derived
class objects to a pointer to its base.</li>
<li>C++ Core Guidelines [11]: R.2: In interfaces, use raw pointers to denote
individual objects (only).</li>
<li>C++ Core Guidelines [11]: I.13: Do not pass an array as a single pointer.</li>
</ul>
''',
        'CPP_T023': '''\
<p><b>Title</b></p>
<p>An identifier with array type passed as a function argument shall not decay
to a pointer.</p>

<p><b>Rationale</b></p>
<p>When a variable with array type decays to a pointer, its bounds are lost.</p>
<p>If a design requires arrays of different lengths, then a class should be used
to encapsulate the array objects and so ensure that the dimensionality is
maintained.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f1( int32_t p[ 10 ] );
void f2( int32_t *p );
void f3( int32_t ( &p )[ 10 ] );

void b ()
{
   int32_t a[ 10 ];
   f1( a );      // Non-compliant - Dimension "10" lost due to array to
                 // pointer conversion.
   f2( a );      // Non-compliant - Dimension "10" lost due to array to
                 // pointer conversion.
   f3( a );      // Compliant - Dimension preserved.
}
</code></pre>
''',
        'MISRA23_7.11.2': '''\
<p><b>Title</b></p>
<p>An array passed as a function argument shall not decay to a pointer.</p>

<p><b>Rationale</b></p>
<p>An object of array type decays to a pointer when it is passed as a function argument. As a consequence, it
becomes more difficult to detect array bounds errors as the arrayâ€™s bounds are lost.</p>
<p>If a design requires arrays of different lengths, then measures shall be taken to ensure that the
dimensionality is maintained.</p>
<p>Note: Rule 11.3.1 recommends that C-style arrays should not be used as better options are available
in C++.</p>

<p><b>Exception</b></p>
<p>Passing a string literal as an argument to a function that expects a pointer to character parameter is
permitted, as the literal is guaranteed to end with a sentinel character (of value 0) which can be used
to detect the end of the array.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f1( int32_t p[ 10 ] ); // Array will decay to pointer
void f2( int32_t * p ); // Array will decay to pointer
void f3( int32_t ( &p )[ 10 ] ); // Only accepts arrays of 10 elements
template&lt; size_t N &gt; // Accepts arrays of any size, with the
void f4( int32_t ( &p )[ N ] ); // size being automatically deduced
void f5( initializer_list&lt; int32_t &gt; l );
void log( char const * s );
void log( string_view s );
</code></pre>

<p>Note: it is also possible to deduce the size of an array argument without changing the function into a
template. For example, an intermediate class can be used to wrap the array, with the constructor
deducing the size using the same technique as shown in f4 (above). Arguments can then use this
wrapper class, avoiding the array to pointer decay. The std::span class that has been introduced in
C++20 uses this idiom.</p>

<pre><code language="C++">void b()
{
 int32_t a[ 10 ];
 f1( a ); // Non-compliant - dimension lost due to array to pointer conversion
 f2( a ); // Non-compliant - dimension lost due to array to pointer conversion
 f3( a ); // Compliant - dimension of 10 matches that of the parameter
 f4( a ); // Compliant - dimension deduced to be 10
 f5( { 1, 2 } ); // { 1, 2 } is an initializer_list, not an array
 log( "Hello" ); // Compliant by exception
 char const msg[] = "Hello";
 log( msg ); // Non-compliant - not a literal
 string_view msg2 = "Hello"sv; // Compliant by exception - the literal operator
 // has a string literal as an argument
 log( msg2 ); // msg2 is a string_view, not an array
</code></pre>

<p><b>See also</b></p>
<p>Rule 11.3.1</p>
''',
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def define_options(check):
    check.options().text('allowedFunctions', 'Allowed functions', '')
    check.options().checkbox('allowUnresolvedFunctions', 'Allow unresolved functions', False)


def check(check, file):
    allowedFunctions = set(check.options().lookup('allowedFunctions').split())
    allowUnresolvedFunctions = check.options().lookup('allowUnresolvedFunctions')

    entKinds = '~Unresolved Parameter' if allowUnresolvedFunctions else 'Parameter'

    # Every time something is turned into a pointer
    for ref in file.filerefs('C Assignby Ptr', entKinds):
        array = ref.scope()

        # Skip if the function is whitelisted
        function = ref.ent().parent()
        if function and function.longname() in allowedFunctions:
            continue

        # Skip if the argument is not an array
        if not re.match('.*\\[.*\\]', str(array.type())):
            continue

        check.violation(array, file, ref.line(), ref.column(), ERR1, array.name())
