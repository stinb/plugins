ERR1 = 'Assembly language code is not documented'


# The ID for the check
def ids():
    return ('M7-4-1', 'CPP_A008')


# The short name of the check
def name(id):
    return {
        'M7-4-1': 'Published Standards/AUTOSAR/Assembly Language Code Usage not Documented',
        'CPP_A008': 'All Checks/Language Specific/C and C++/Assembly/Assembly Language Code Usage not Documented',
    }[id]




def tags(id):
    return {
        'M7-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Non-automated',
            'Assembly',
        ],
        'CPP_A008': [
            'Language: C',
            'Language: C++',
            'Assembly',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>All usage of assembler shall be documented.</p>
<p><b>Rationale</b></p>
<p>Assembly language code is implementation-defined and therefore is not portable.</p>
"""



# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(False, 8, False, False)

    if not (lexer and "asm" in file.contents()):
        return

    lex = lexer.first()

    while lex:
        if lex.text() == "asm" and lex.token() == "Keyword":
            asm_lex = lex
            has_comment = False
            prev_lex = lex

            while prev_lex.line_begin() == lex.line_begin():
                prev_lex = prev_lex.previous(ignore_whitespace=True)

            if prev_lex.token() == "Comment":
                if "undcc_violation" not in prev_lex.text().lower(): #special case for aspen
                    has_comment = True

            while lex.text() != ";":
                if lex.token() == "Comment":
                    if "undcc_violation" not in lex.text().lower(): #special case for aspen
                        has_comment = True

                lex = lex.next(ignore_whitespace=True)

            next_lex = lex.next()
            if (next_lex.line_begin() == lex.line_begin()) and (lex.next().token() == "Comment"):
                if "undcc_violation" not in lex.next().text().lower(): #special case for aspen
                    has_comment = True

            if not has_comment:
                check.violation(None, file, asm_lex.line_begin(),
                                asm_lex.column_begin(), ERR1)

        lex = lex.next(ignore_whitespace=True)
