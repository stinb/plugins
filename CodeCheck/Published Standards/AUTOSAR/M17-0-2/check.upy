# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 10-15-21


import re


ERR1 = 'Name for a standard library macro or object is reused in file %1'


def ids():
	return ('M17-0-2', 'MISRA08_17-0-2', 'MISRA04_20.2', 'CPP_PR021')


def name(id):
	return {
		'M17-0-2': 'Published Standards/AUTOSAR/The names of standard library macros and objects shall not be reused',
		'MISRA08_17-0-2': 'Published Standards/MISRA-C++ 2008/17-0-2 The names of standard library macros and objects shall not be reused',
		'MISRA04_20.2': 'Published Standards/MISRA-C 2004/20.2 The names of standard library macros and objects shall not be reused',
		'CPP_PR021': 'All Checks/Language Specific/C and C++/Preprocessor/The names of standard library macros and objects shall not be reused',
	}[id]





def tags(id):
    return {
        'MISRA08_17-0-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Preprocessor',
        ],
        'MISRA04_20.2': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Preprocessor',
        ],
        'M17-0-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR021': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
    }.get(id)

def description():
	return 'The names of standard library macros and objects shall not be reused.'


def detailed_description():
	return '''\

<p><b>Rationale</b></p>
Where the developer uses new versions of standard library macros or objects (e.g. to enhance
functionality or add checks of input values), the modified macro or object shall have a new name.
This is to avoid any confusion as to whether a standard macro or object, or a modified version of
them, is being used.
</p>

<p><b>Developer's Notes</b></p>
This check will throw a violation on the overloaded exception mentioned above.
</p>

<p><b>Example</b></p>
<pre><code language="C++">#define NULL ( a &gt; b ) // Non-compliant
</code></pre>

'''


def test_language(language):
	return language == 'C++'


def test_entity(file):
	return True


def test_global():
	return False


def check(check, file):

	# Define a diciontary of reserved keywords
	reservedNames = {'assert', 'BUFSIZ', 'CLOCKS_PER_SEC', 'EDOM', 'EOF', 'ERANGE', 'errno',
					 'EXIT_FAILURE', 'EXIT_SUCCESS', 'FILENAME_MAX', 'HUGE_VAL', 'LC_ALL',
					 'LC_COLLATE', 'LC_CTYPE', 'LC_MONETARY', 'LC_NUMERIC', 'LC_TIME', 'L_tmpnam',
					 'MB_CUR_MAX', 'NULL', 'FOPEN_MAX', 'offsetof', 'RAND_MAX', 'SEEK_CUR',
					 'SEEK_END', 'SEEK_SET', 'setjmp', 'SIGTERM', 'SIG_DFL', 'SIG_ERR', 'SIG_IGN',
					 'stderr', 'stdin', 'SIGABRT', 'SIGILL', 'SIGINT', 'SIGSEGV', 'WCHAR_MAX',
					 'WCHAR_MIN', 'WEOF', 'WEOF', '_IOFBF', '_IOLBF', 'stdout', 'SIGFPE', 'va_arg',
					 'va_end', 'va_start', '_IONBF', 'TMP_MAX', 'CHAR_BIT', 'CHAR_MAX', 'CHAR_MIN',
					 'DBL_DIG', 'DBL_EPSILON', 'DBL_MANT_DIG', 'DBL_MAX', 'DBL_MAX_10_EXP',
					 'DBL_MAX_EXP', 'DBL_MIN', 'DBL_MIN_10_EXP', 'DBL_MIN_EXP', 'MB_LEN_MAX',
					 'SCHAR_MAX', 'SCHAR_MIN', 'SHRT_MAX', 'SHRT_MIN', 'UCHAR_MAX', 'UINT_MAX',
					 'ULONG_MAX', 'USHRT_MAX', 'FLT_DIG', 'FLT_EPSILON', 'FLT_MANT_DIG', 'FLT_MAX',
					 'FLT_MAX_10_EXP', 'FLT_MAX_EXP', 'FLT_MIN', 'FLT_MIN_10_EXP', 'FLT_MIN_EXP',
					 'FLT_RADIX', 'FLT_ROUNDS', 'INT_MAX', 'INT_MIN', 'LDBL_DIG', 'LDBL_EPSILON',
					 'LDBL_MANT_DIG', 'LDBL_MAX', 'LDBL_MAX_10_EXP', 'LDBL_MAX_EXP', 'LDBL_MIN',
					 'LDBL_MIN_10_EXP', 'LDBL_MIN_EXP', 'LONG_MAX', 'LONG_MIN', 'clock_t', 'div_t',
					 'FILE', 'fpos_t', 'ldiv_t', 'mbstate_t', 'ptrdiff_t', 'sig_atomic_t', 'size_t',
					 'time_t', 'jmp_buf', 'wint_t', 'wctrans_t', 'wctype_t', 'wint_t', 'va_list',
					 'lconv', 'tm', 'alignas', 'alignof', 'and', 'and_eq', 'asm', 'auto', 'bitand',
					 'bitor', 'bool', 'break', 'case', 'catch', 'char', 'char16_t', 'char32_t',
					 'class', 'compl', 'const', 'constexpr', 'const_cast', 'continue', 'decltype',
					 'default', 'delete', 'do', 'double', 'dynamic_cast', 'else', 'enum', 'explicit',
					 'export', 'extern', 'false', 'float', 'for', 'friend', 'goto', 'if', 'inline',
					 'int', 'long', 'mutable', 'namespace', 'new', 'noexcept', 'not', 'not_eq',
					 'nullptr', 'operator', 'or', 'or_eq', 'private', 'protected', 'public', 'register',
					 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'static', 'static_assert',
					 'static_cast', 'struct', 'switch', 'template', 'this', 'thread_local', 'throw',
					 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using',
					 'virtual', 'void', 'volatile', 'wchar_t', 'while', 'xor', 'xor_eq'}

	# Loop through all macros and check the defines against the black list
	funcrefs = file.filerefs('define', 'macro')
	for ref in funcrefs:
		name = ref.ent().name()
		if re.match(r'_[A-Z].*', name):
			check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, file.name())
		elif re.match(r'__.*', name):
			check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, file.name())
		elif name in reservedNames:
			check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, file.name())
