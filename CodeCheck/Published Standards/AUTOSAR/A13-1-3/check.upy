import re


ERR1 = 'User defined literals operators shall only perform conversion of passed parameters'


# The ID for the check
def ids():
    return ('A13-1-3', 'CPP_T040')


# The short name of the check
def name(id):
    return {
        'A13-1-3': 'Published Standards/AUTOSAR/User defined literals operators shall only perform conversion of passed parameters',
        'CPP_T040': 'All Checks/Language Specific/C and C++/Types/User defined literals operators shall only perform conversion of passed parameters',
    }[id]





def tags(id):
    return {
        'A13-1-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types'
        ],
        'CPP_T040': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>User defined literals operators shall only perform conversion of passed
parameters.</p>
<p><b>Rationale</b></p>
<p>It is expected behavior that the user-defined literals operators are only used to convert
passed parameters to the type of declared return value. User-defined literals are not
supposed to provide any other side-effects.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A13-1-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include &lt;cstdint&gt;
3 #include &lt;iostream&gt;
4 struct Cube
5 {
6 unsigned long long int volume;
7 constexpr explicit Cube(unsigned long long int v) : volume(v) {}
8 };
9 constexpr Cube operator"" _m3(unsigned long long int volume)
10 {
11 return Cube(volume); // Compliant
12 }
13 struct Temperature
14 {
15 unsigned long long int kelvins;
16 constexpr explicit Temperature(unsigned long long int k) : kelvins(k) {}
17 };
18 constexpr Temperature operator"" _K(unsigned long long int kelvins)
19 {
20 return Temperature(kelvins); // Compliant
21 }
22 static void SumDistances(std::int32_t distance)
23 {
24 static std::int32_t overallDistance = 0;
25 overallDistance += distance;
26 }
27 struct Distance
28 {
29 long double kilometers;
30 explicit Distance(long double kms) : kilometers(kms) {}
31 };
32 Distance operator"" _m(long double meters)
33 {
34 SumDistances(meters); // Non-compliant - function has a side-effect
35 return Distance(meters / 1000);
36 }
37 void operator"" _print(const char* str)
38 {
39 std::cout &lt;&lt; str &lt;&lt; '\n'; // Non-compliant - user-defined literal operator
40 // does not perform conversion and has a
41 // side-effect
42 }
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(True, 8, False, False)

    if lexer:
        for func_ref in file.filerefs("Define", "Function ~Macro ~Lambda"):
            if re.search(r'^operator""', func_ref.ent().name()):
                for param_ref in func_ref.ent().refs("Define", "Parameter"):
                    violation = []

                    for ref in param_ref.ent().refs("Assignby Value, Useby"):
                        ent_id = None
                        compliant = False
                        lex = lexer.lexeme(ref.line(), ref.column())

                        while lex and lex.line_begin() == ref.line():
                            lex_kind = lex.ent().kind().longname() if lex.ent() else None

                            if lex.token() == "Identifier" and "Function" in lex_kind:
                                ent_id = lex.ent().id()
                                if lex.text() == func_ref.ent().type():
                                    compliant = True
                                break

                            lex = lex.previous(
                                ignore_whitespace=True, ignore_comments=True)

                        if not compliant and ent_id not in violation:
                            violation.append(ent_id)
                            check.violation(param_ref.ent(), file,
                                            ref.line(), ref.column(), ERR1)
