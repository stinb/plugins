ERR1 = '"operator new" defined without a corresponding "operator delete" function'

OPERATOR_NEW = {"operator new", "operator new[]"}
OPERATOR_DELETE = {"operator delete", "operator delete[]"}

# The ID for the check


def ids():
    return ('A18-5-11', 'CPP_F029')

# The short name of the check


def name(id):
    return {
        'A18-5-11': """\
Published Standards/AUTOSAR/operator \"new\" and operator \"delete\" shall be \
defined together""",
        'CPP_F029': """\
All Checks/Language Specific/C and C++/Functions/operator \"new\" and operator \
\"delete\" shall be defined together"""
    }[id]





def tags(id):
    return {
        'A18-5-11': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F029': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

# The description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>Providing a custom allocation function (operator new) for a class or program implies
the use of a custom memory management scheme different to the default one. It is
therefore unlikely that memory allocated using a custom allocation function can be
deallocated by the default deallocation function (operator delete).</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A18-5-11.cpp 316977 2018-04-20 12:37:31Z christof.meerwald $
2 #include &lt;cstdlib&gt;
3
4 class A {
5 public:
6 static void * operator new(std::size_t s); // Compliant: operator new
7 static void operator delete(void *ptr); // defined together with
8 // operator delete
9 };
10
11 class B {
12 public:
13 static void * operator new(std::size_t s); // Non-compliant: operator
14 static void * operator new [](std::size_t s); // new defined without
15 // corresponding operator
16 // delete
17 };
</code></pre>
<p><b>See also</b></p>
<p>â€¢ HIC++ v4.0 [9]: 12.3.1: Correctly declare overloads for operator new and delete</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    # for non-member functions
    new_ref_list = []
    del_list = []

    for non_member_ref in file.filerefs("Declare", "~Member Function"):
        append_list(non_member_ref, new_ref_list, del_list)

    if new_ref_list and not del_list:
        check_violation(new_ref_list, file, check)

    # for member functions
    for class_ref in file.filerefs("Define", "Class"):
        new_ref_list = []
        del_list = []

        for func_ref in class_ref.ent().refs("Declare", "Function"):
            append_list(func_ref, new_ref_list, del_list)

        if new_ref_list and not del_list:
            check_violation(new_ref_list, file, check)


def append_list(ref, new_ref_list, del_list):
    if ref.ent().name() in OPERATOR_NEW:
        new_ref_list.append(ref)
    elif ref.ent().name() in OPERATOR_DELETE:
        del_list.append(ref)


def check_violation(new_ref_list, file, check):
    for ref in new_ref_list:
        check.violation(ref.ent(), file, ref.line(),
                        ref.column(), ERR1)
