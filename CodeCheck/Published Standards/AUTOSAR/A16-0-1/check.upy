ERR1 = 'The pre-processor shall only be used for unconditional and conditional file inclusion and include guards'
PREPROCESSORS = {"ifndef", "ifdef", "if", "ifdef",
                 "elif", "else", "define", "endif", "include"}


# The ID for the check
def ids():
    return ('A16-0-1', 'CPP_PR041')


# The short name of the check
def name(id):
    return {
        'A16-0-1': 'Published Standards/AUTOSAR/Incorrect Use of Pre-processor',
        'CPP_PR041': """\
All Checks/Language Specific/C and C++/Preprocessor/Incorrect Use of \
Pre-processor"""
    }[id]





def tags(id):
    return {
        'A16-0-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR041': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>The pre-processor shall only be used for unconditional and conditional file
inclusion and include guards, and using the following directives: (1) #ifndef,
(2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9)
#include.</p>
<p><b>Rationale</b></p>
<p>C++ provides safer, more readable and easier to maintain ways of achieving what is
often done using the pre-processor. The pre-processor does not obey the linkage,
lookup and function call semantics. Instead, constant objects, constexprs, inline
functions and templates are to be used.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A16-0-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #pragma once // Non-compliant - implementation-defined feature
3
4 #ifndef HEADER_FILE_NAME // Compliant - include guard
5 #define HEADER_FILE_NAME // Compliant - include guard
6
7 #include &lt;cstdint&gt; // Compliant - unconditional file inclusion
8
9 #ifdef WIN32
10 #include &lt;windows.h&gt; // Compliant - conditional file inclusion
11 #endif
12
13 #ifdef WIN32
14 std::int32_t fn1(
15 std::int16_t x,
16 std::int16_t y) noexcept; // Non-compliant - not a file inclusion
17 #endif
18
19 #if defined VERSION && VERSION &gt; 2011L // Compliant
20 #include &lt;array&gt; // Compliant - conditional file inclusion
21 #elif VERSION &gt; 1998L // Compliant
22 #include &lt;vector&gt; // Compliant - conditional file inclusion
23 #endif // Compliant
24
25 #define MAX_ARRAY_SIZE 1024U // Non-compliant
26 #ifndef MAX_ARRAY_SIZE // Non-compliant
27 #error "MAX_ARRAY_SIZE has not been defined" // Non-compliant
28 #endif // Non-compliant
29 #undef MAX_ARRAY_SIZE // Non-compliant
30
31 #define MIN(a, b) (((a) &lt; (b)) ? (a) : (b)) // Non-compliant
32 #define PLUS2(X) ((X) + 2) // Non-compliant - function should be used instead
33 #define PI 3.14159F // Non-compliant - constexpr should be used instead
34 #define std ::int32_t long // Non-compliant - ’using’ should be used instead
35 #define STARTIF if( // Non-compliant - language redefinition
36 #define HEADER "filename.h" // Non-compliant - string literal
37
38 void Fn2() noexcept
39 {
40 #ifdef __linux__ // Non-compliant - ifdef not used for file inclusion
41
42 // ...
43
44 #elif WIN32 // Non-compliant - elif not used for file inclusion
45
46 // ...
47
48 #elif __APPLE__ // Non-compliant - elif not used for file inclusion
49
50 // ...
51
52 #else // Non-compliant - else not used for file inclusion
53
54 // ...
55
56 #endif // Non-compliant - endif not used for file inclusion or include guards
57 }
58
59 #endif // Compliant - include guard
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: Rule 16-2-1 The pre-processor shall only be used for file
inclusion and include guards.</p>
<p>• MISRA C++ 2008 [7]: Rule 16-2-2 C++ macros shall only be used for: include
guards, type qualifiers, or storage class specifiers.</p>
<p>• JSF December 2005 [8]: AV Rule 26 Only the following pre-processor directives
shall be used: 1. #ifndef 2. #define 3. #endif 4. #include.</p>
<p>• JSF December 2005 [8]: AV Rule 27 #ifndef, #define and #endif will be used to
prevent multiple inclusions of the same header file. Other techniques to prevent
the multiple inclusions of header files will not be used.</p>
<p>• JSF December 2005 [8]: AV Rule 28 The #ifndef and #endif pre-processor
directives will only be used as defined in AV Rule 27 to prevent multiple inclusions
of the same header file.</p>
<p>• JSF December 2005 [8]: AV Rule 29 The #define pre-processor directive shall
not be used to create inline macros. Inline functions shall be used instead.</p>
<p>• JSF December 2005 [8]: AV Rule 30 The #define pre-processor directive shall not
be used to define constant values. Instead, the const qualifier shall be applied to
variable declarations to specify constant values.</p>
<p>• JSF December 2005 [8]: AV Rule 31 The #define pre-processor directive will
only be used as part of the technique to prevent multiple inclusions of the same
header file.</p>
<p>• JSF December 2005 [8]: AV Rule 32 The #include pre-processor directive will
only be used to include header (*.h) files.</p>
<p>• HIC++ v4.0 [9]: 16.1.1 Use the preprocessor only for implementing include
guards, and including header files with include guards.</p>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    def check_violation(_lex):
        check.violation(None, file, _lex.line_begin(),
                        _lex.column_begin(), ERR1)

    lexer = file.lexer(True, 8, True, True)

    if lexer:
        on_if = False
        on_preprocessor = False
        lex = lexer.first()
        has_file_inclusion = False

        while lex:
            if lex.text() == "#" and lex.token() == "Preprocessor":
                on_preprocessor = True
            elif on_preprocessor:
                current_lex = lex
                if lex.text() not in PREPROCESSORS:
                    check_violation(current_lex)
                elif lex.text() == "define" and lex.token() == "Preprocessor":
                    lex = lex.next(ignore_whitespace=True)
                    is_macro = lex.ent().kind().check("Macro") if lex.ent() else False
                    has_value = lex.ent().value() if lex.ent() else False

                    if is_macro and has_value:
                        check_violation(current_lex)
                elif lex.text() in {"if", "ifdef", "elif", "ifndef", "else"} and lex.token() == "Preprocessor":
                    file_inclusion = False
                    proceed = True
                    next_line_lex = lexer.lexeme(
                        lex.line_begin() + 1, lex.column_begin())

                    if lex.text() in {"ifdef", "if", "ifndef"}:
                        on_if = True

                    if lex.text() == "ifndef" and next_line_lex.text() == "define":
                        on_if = False
                        proceed = False

                    if proceed:
                        lex = lex.next(ignore_whitespace=True,
                                       ignore_comments=True)

                        while lex and lex.text() not in {"elif", "endif", "else"}:
                            if lex.text() == "include" and lex.token() == "Preprocessor":
                                file_inclusion = True

                                if on_if:
                                    has_file_inclusion = True

                            lex = lex.next(ignore_whitespace=True,
                                           ignore_comments=True)

                        if not file_inclusion:
                            check_violation(current_lex)

                        if lex and lex.text() == "endif":
                            if not has_file_inclusion:
                                check_violation(lex)

                            on_if = False
                            has_file_inclusion = False
                        else:
                            continue

                on_preprocessor = False

            lex = lex.next(ignore_whitespace=True, ignore_comments=True)
