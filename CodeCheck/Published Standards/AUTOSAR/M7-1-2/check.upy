# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 9-13-2021
import re


ERR1 = 'Unmodified pointer or reference parameter %1 was not declared const'


def ids():
    return ('M7-1-2', 'MISRA08_7-1-2', 'CPP_F019', 'MISRA23_10.1.1')


def name(id):
    return {
        'M7-1-2': 'Published Standards/AUTOSAR/A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified',
        'MISRA08_7-1-2': 'Published Standards/MISRA-C++ 2008/7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified',
        'CPP_F019': 'All Checks/Language Specific/C and C++/Functions/A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified',
        'MISRA23_10.1.1': 'Published Standards/MISRA C++ 2023/10.1.1 The target type of a pointer or lvalue reference parameter should be const-qualified appropriately',
    }[id]


def tags(id):
    return {
        'MISRA08_7-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Functions',
        ],
        'M7-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F019': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
        'MISRA23_10.1.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Functions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA23_10.1.1': """
<p><b>Amplification</b></p>
<p>The target type of a named pointer or reference parameter should be const-qualified, unless:</p>
<p>1. It is not an object type; or</p>
<p>2. The parameter is assigned to a pointer or reference with a non-const target type; or</p>
<p>3. The target object is modified within the function.</p>
<p>For the purposes of this rule, an object is also considered to be modified if it is passed as a pointer to
non-const parameter or a non-const reference parameter, including use as the implicit this parameter
of a non-const member function.</p>
<p>This rule does not apply to parameters:</p>
<p>1. That are unnamed; or</p>
<p>2. Of virtual functions; or</p>
<p>3. Of function templates; or</p>
<p>4. Of functions or lambdas declared within the scope of a template.</p>
<p>Note: this rule also applies to pointer parameters declared using array syntax.</p>

<p><b>Rationale</b></p>
<p>Consistent application of this guideline results in function signatures that more accurately reflect the
behaviour of the functions within the project, making it less likely that a developer will falsely assume
that a call will not result in the modification to an object.</p>
<p>The rule does not apply to virtual functions as different overrides of the function may or may not
modify the target object, and all overrides will need to omit const-qualification if one or more of the
overrides requires that the target type be non-const. Similarly, for templates, only some instantiations
may modify the target object.</p>

<p><b>Exception</b></p>
<p>This rule does not apply to main whose signature, which does not use const-qualification, is defined
within the C++ Standard.</p>

<p><b>Example</p></b>
<pre><code language="C++">void f1( int8_t * p1, // Compliant - *p1 modified
 const int8_t * p2, // Compliant - *p2 not modified, but is const
 int8_t * p3, // Non-compliant - *p3 not modified, no const
 int8_t * const p4, // Non-compliant - *p4 not modified, no const
 int8_t a[3] ) // Non-compliant - 'a' decays to int8_t *
{
 *p1 = *p2 + *p3 + *p4 + a[ 2 ];
}

auto & f2( int32_t & i, // Compliant
 int32_t && j, // Rule does not apply - rvalue reference
 int32_t & ) // Rule does not apply - unnamed parameter
{
 return i; // Assigning to non-const reference
}

auto f3( std::vector< int32_t > & x ) // Compliant - even though x.begin has an
{ // equivalent const overload
 return x.begin(); // Non-const member function
}

auto f4( std::vector< int32_t > & x ) // Non-compliant
{
 return x.cbegin(); // Const member function
}

template< typename T >
struct A
{
 void foo ( T & t, // Rule does not apply - in template scope
 int32_t & i ) // Rule does not apply - in template scope
 {
 t.f( i ); // t and/or i may or may not be modified,
 } // depending on the signature of T::f
};
</code></pre>
""",
    'M7-1-2': '''
<p><b>Rationale</b></p>
<p>This rule leads to greater precision in the definition of the function
interface. The const qualification shall be applied to the object pointed to,
not to the pointer, since it is the object itself that is being protected.</p>
<p><b>Exception</b></p>
<p>This rule does not apply if the parameter object is modified by any of the
functions in a set of overriding functions.</p>
<p><b>Example</p></b>
<pre><code language="C++">void myfunc(        int16_t *   param1,
              const int16_t *   param2,
                    int16_t *   param3,
                    int16_t *   const param4)
// param1: Addresses an object which is modified     - Compliant
// param2: Addresses an object which is not modified - Compliant
// param3: Addresses an object which is not modified - Non-compliant
// param4: Addresses an object which is not modified - Non-compliant
{
    *param1 = *param2 + *param3 + *param4;
    // Data at address param3 and param4 have not been changed
}
</code></pre>
''',
    'MISRA08_7-1-2' : '''
<p><b>Rationale</b></p>
<p>This rule leads to greater precision in the definition of the function
interface. The const qualification shall be applied to the object pointed to,
not to the pointer, since it is the object itself that is being protected.</p>
<p><b>Exception</b></p>
<p>This rule does not apply if the parameter object is modified by any of the
functions in a set of overriding functions.</p>
<p><b>Example</p></b>
<pre><code language="C++">void myfunc(        int16_t *   param1,
              const int16_t *   param2,
                    int16_t *   param3,
                    int16_t *   const param4)
// param1: Addresses an object which is modified     - Compliant
// param2: Addresses an object which is not modified - Compliant
// param3: Addresses an object which is not modified - Non-compliant
// param4: Addresses an object which is not modified - Non-compliant
{
    *param1 = *param2 + *param3 + *param4;
    // Data at address param3 and param4 have not been changed
}
</code></pre>
''',
    'CPP_F019': '''
<p><b>Rationale</b></p>
<p>This rule leads to greater precision in the definition of the function
interface. The const qualification shall be applied to the object pointed to,
not to the pointer, since it is the object itself that is being protected.</p>
<p><b>Exception</b></p>
<p>This rule does not apply if the parameter object is modified by any of the
functions in a set of overriding functions.</p>
<p><b>Example</p></b>
<pre><code language="C++">void myfunc(        int16_t *   param1,
              const int16_t *   param2,
                    int16_t *   param3,
                    int16_t *   const param4)
// param1: Addresses an object which is modified     - Compliant
// param2: Addresses an object which is not modified - Compliant
// param3: Addresses an object which is not modified - Non-compliant
// param4: Addresses an object which is not modified - Non-compliant
{
    *param1 = *param2 + *param3 + *param4;
    // Data at address param3 and param4 have not been changed
}
</code></pre>
'''
    }[id]


def test_entity(file):
    return file.kind().check('code file, header file')


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Function ~Virtual ~Template"):
        if func_ref.ent().name() == "main":
            continue
    
        for param_ref in func_ref.ent().refs("Define", "Parameter"):
            utype = param_ref.ent().freetext("UnderlyingType")

            if (param_ref.ent().name() == "[unnamed]") or not utype or re.search("^const", utype) or not re.search(r"(?<!&)&(?!&)|\*", utype) or on_template(param_ref.ent().parent()):
                continue     

            compliant = False

            for ref in param_ref.ent().refs("Setby, Modifyby, Deref Setby"):
                if ref.ent().id() == func_ref.ent().id():
                    compliant = True
                    break

            if compliant:
                continue

            for ass_ref in param_ref.ent().refs("Assignby ~Deref"):
                if not ass_ref.ent().kind().check("Const"):
                    compliant = True
                    break 

            if compliant:
                continue

            for use_ref in param_ref.ent().refs("Useby, Callby"):
                if use_ref.ent().id() != func_ref.ent().id():
                    continue

                lex = use_ref.file().lexer().lexeme(use_ref.line(), use_ref.column())
                lex = lex.next()

                if lex.text() not in [".", "->"]:
                    continue

                lex = lex.next()

                if lex.ent() and not lex.ent().kind().check("Const Function"):
                    compliant = True
                    break

            if compliant:
                continue

            check.violation(param_ref.ent(), file, param_ref.line(), param_ref.column(), ERR1, param_ref.ent().name())

                
def on_template(parent):
    while parent:
        if parent.kind().check("Template"):
            return True

        parent = parent.parent()

    return False
