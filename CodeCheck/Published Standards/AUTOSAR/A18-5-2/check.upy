# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 9-07-2021
import re

ERR1 = 'Non-placement new or delete expression was used'

def ids():
    return ('A18-5-2', 'CPP_M002')

def name(id):
    return {
        'A18-5-2': """\
Published Standards/AUTOSAR/Non-placement new or delete expressions shall not \
be used""",
        'CPP_M002': """\
All Checks/Language Specific/C and C++/Memory Allocation/Non-placement new or \
delete expressions shall not be used"""

    }[id]



def tags(id):
    return {
        'A18-5-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Partially Automated',
            'Memory Allocation',
        ],
        'CPP_M002': [
            'Language: C',
            'Language: C++',
            'Memory Allocation',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>If a resource returned by a non-placement new expression is assigned to a
raw pointer, then a developer's mistake, an exception or a return may lead to
memory leak. It is highly recommended to follow RAII design pattern or use
manager objects that manage the lifetime of variables with dynamic storage
duration, e.g.:</p>
<ul>
  <li>std::unique_ptr along with std::make_unique</li>
  <li>std::shared_ptr along with std::make_shared</li>
  <li>std::string</li>
  <li>std::vector</li>
</ul>
<p>Note: Functions that do not extend lifetime shall not take parameters as
smart pointers, see A8-4-11.</p>
<p><b>Exception</b></p>
<p>If the result of explicit resource allocation using a new expression is
immediately passed to a manager object or an RAII class which does not provide
a safe alternative for memory allocation, then it is not a violation of this
rule. This rule does not apply to dynamic memory allocation/deallocation
performed in userdefined RAII classes and managers. Placement new expression is
allowed, see A18-5-10.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A18-5-2.cpp 316977 2018-04-20 12:37:31Z christof.meerwald $
#include &lt;cstdint&gt;
#include &lt;memory&gt;
#include &lt;vector&gt;
std::int32_t Fn1()
{
    std::int32_t errorCode{0};

    std::int32_t* ptr =
        new std::int32_t{0}; // Non-compliant - new expression
    // ...
    if (errorCode != 0)
    {
        throw std::runtime_error{"Error"}; // Memory leak could occur here
    }
    // ...

    if (errorCode != 0)
    {
        return 1; // Memory leak could occur here
    }

    // ...
    delete ptr; // Non-compilant - delete expression

    return errorCode;
}
std::int32_t Fn2()
{
    std::int32_t errorCode{0};

    std::unique_ptr&lt;std::int32_t&gt; ptr1 = std::make_unique&lt;std::int32_t&gt;(
        0); // Compliant - alternative for 'new std::int32_t(0)'

    std::unique_ptr&lt;std::int32_t&gt; ptr2(new std::int32_t{
        0}); // Non-compliant - unique_ptr provides make_unique
    // function which shall be used instead of explicit
    // new expression

    std::shared_ptr&lt;std::int32_t&gt; ptr3 =
        std::make_shared&lt;std::int32_t&gt;(0); // Compliant

    std::vector&lt;std::int32_t&gt; array; // Compliant
    // alternative for dynamic array

    if (errorCode != 0)
    {
        throw std::runtime_error{"Error"}; // No memory leaks
    }
    // ...
    if (errorCode != 0)
    {
        return 1; // No memory leaks
    }
    // ...
    return errorCode; // No memory leaks
}
template &lt;typename T&gt;
class ObjectManager
{
    public:
        explicit ObjectManager(T* obj) : object{obj} {}
        ~ObjectManager() { delete object; } // Compliant by exception
        // Implementation

    private:
        T* object;
};
std::int32_t Fn3()
{
    std::int32_t errorCode{0};

    ObjectManager&lt;std::int32_t&gt; manager{
        new std::int32_t{0}}; // Compliant by exception
    if (errorCode != 0)
    {
        throw std::runtime_error{"Error"}; // No memory leak
    }
    // ...
    if (errorCode != 0)
    {
        return 1; // No memory leak
    }
    // ...
    return errorCode; // No memory leak
}
</code></pre>
"""


def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer()

    lexemes = lexer.lexemes()

    for lexeme in lexemes:
        ok = False
        # Look for uses of new and delete
        if re.match(r'(new|delete)$', lexeme.text()):
            prevLex = lexeme.previous(True, True)
            if lexeme.text() == 'delete' and prevLex and re.match(r'=', prevLex.text()):
                continue
            # Look for use of member function or class template managers and skip
            elif prevLex and re.match(r'{', prevLex.text()):
                prevLex = prevLex.previous(True, True)
                while prevLex and not re.match(r';|{|}', prevLex.text()):
                    if prevLex.ent() and re.search(r'class template|member function', prevLex.ent().kind().longname().lower()):
                        ok = True
                        break
                    prevLex = prevLex.previous(True, True)

                if ok:
                    continue

            elif prevLex and re.match(r'operator', prevLex.text()):
                continue

            prevLex = lexeme
            # Look for use of std::string and std::vector and skip
            while prevLex and not re.match(r';|{', prevLex.text()):
                if re.match(r'string|vector', prevLex.text()) and prevLex.ent() and re.match(r'std::(__1::)?string|std::(__1::)?vector', prevLex.ent().longname()):
                    ok = True
                    break

                prevLex = prevLex.previous(True, True)

            if not ok:
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
