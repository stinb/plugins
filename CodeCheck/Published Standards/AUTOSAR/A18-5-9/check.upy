ERR1 = 'New method shall not throw exceptions'


# The ID for the check
def ids():
    return ('A18-5-9', 'CPP_EH009')


# The short name of the check
def name(id):
    return {
        'A18-5-9': 'Published Standards/AUTOSAR/New Method Throwing an Exception',
        'CPP_EH009': 'All Checks/Language Specific/C and C++/Exception Handling/New Method Throwing an Exception'
    }[id]





def tags(id):
    return {
        'A18-5-9': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Exception Handling',
        ],
        'CPP_EH009': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Custom implementations of dynamic memory allocation and deallocation
functions shall meet the semantic requirements specified in the
corresponding "Required behaviour" clause from the C++ Standard.</p>
<p><b>Rationale</b></p>
<p>It is possible to provide custom implementations of global dynamic memory
allocation/deallocation functions. Requirements for custom implementations for each
function declaration are specified in the C++ Standard in the section "Required
behaviour". If the provided function do not implement the required semantics, it can
lead to undefined behaviour.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 //% $Id: A18-5-9.cpp 305629 2018-01-29 13:29:25Z piotr.serwa $
2 #include &lt;new&gt;
3
4 void* operator new(std::size_t count, const std::nothrow_t& tag)
5 {
6 extern void* custom_alloc(std::size_t); // Implemented elsewhere; may return
nullptr
7 if (void *ret = custom_alloc(count))
8 {
9 return ret;
10 }
11 throw std::bad_alloc(); //non-compliant, this version of new method shall not
throw exceptions
12 }
</code></pre>
<p><b>See also</b></p>
<p>â€¢ SEI CERT C++ Coding Standard [10]: MEM55-CPP: Honor replacement dynamic
storage management requirements</p>
"""


def test_language(language):
    return language == 'C++'


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        if func_ref.ent().longname() == "operator new" and func_ref.ent().freetext("ThrowExceptions"):
            check.violation(func_ref.ent(), file,
                                func_ref.line(), func_ref.column(), ERR1)
