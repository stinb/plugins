ERR1 = 'Unbounded functions of library <cstring> shall not be used'
ERR2 = 'Unbounded functions of library <string.h> shall not be used'
ERR3 = 'The string handling functions from <cstring>, <cstdlib>, <cwchar> and <cinttypes> shall not be used'


# The ID for the check
def ids():
    return ('M18-0-5', 'CPP_L006', 'MISRA08_18-0-5', 'MISRA23_21.17', 'MISRA23_21.2.2')


# The short name of the check
def name(id):
    return {
        'M18-0-5': """\
Published Standards/AUTOSAR/Unbounded Functions of <cstring>""",
        'CPP_L006': """\
All Checks/Language Specific/C and C++/Libraries/Unbounded Functions of <cstring>""",
        'MISRA08_18-0-5': """\
Published Standards/MISRA-C++ 2008/18-0-5 Unbounded Functions of <cstring>""",
        'MISRA23_21.17': """\
Published Standards/MISRA C 2023/21.17 Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters""",
        'MISRA23_21.2.2': """\
Published Standards/MISRA C++ 2023/21.2.2 The string handling functions from <cstring>, <cstdlib>, <cwchar> and <cinttypes> shall not be used"""
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA08_18-0-5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Libraries',
        ],
        'M18-0-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Libraries',
        ],
        'CPP_L006': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
        'MISRA23_21.17': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Mandatory',
            'Libraries',
        ],
        'MISRA23_21.2.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)


def description():
    return 'The unbounded functions of library &lt;cstring&gt; shall not be used.'


# The long description of the check
def detailed_description(id):
    if id == 'MISRA23_21.2.2':
        return """
<p><b>Amplification</b></p>
<p>The string handling functions are:</p>

<p>From &lt;cstring&gt;: strcat strchr strcmp strcoll strcpy strcspn
strerror strlen strncat strncmp strncpy strpbrk
strrchr strspn strstr strtok strxfrm</p>

<p>From &lt;cstdlib&gt;: strtol strtoll strtoul strtoull strtod strtof
strtold</p>

<p>From &lt;cstring&gt;: strcat strchr strcmp strcoll strcpy strcspn
strerror strlen strncat strncmp strncpy strpbrk
strrchr strspn strstr strtok strxfrm</p>

<p>From &lt;cwchar&gt;: fgetwc fputwc wcstol wcstoll wcstoul wcstoull
wcstod wcstof wcstold</p>

<p>From &lt;cinttypes&gt;: strtoumax strtoimax wcstoumax wcstoimax</p>

<p>These functions shall not be called or have their addresses taken, and no macro having one of these
names shall be expanded.</p>
<p>Note: the same functions from &lt;string.h&gt;, &lt;stdlib.h&gt;, &lt;wchar.h&gt; and &lt;inttypes.h&gt; are also
covered by this rule.</p>

<p><b>Rationale</b></p>
<p>Incorrect use of some string handling function may result in a read or write access beyond the bounds
of an object passed as a parameter, resulting in undefined behaviour. Also, some string handling
functions only report errors through the use of errno, which is a fragile mechanism — a non-zero
value may reveal an error in any function that was called between the last point the value 0 was
assigned to errno and the current point.</p>
<p>In all cases, the features provided by these functions can be obtained through other C++ Standard
Library features which are less error-prone.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f1( char * buffer, size_t bufferSize )
{
 char const * str = "Msg";
 if ( ( strlen( str ) + 1u ) &lt; bufferSize ) // Non-compliant
 {
 ( void ) strcpy( buffer, str ); // Non-compliant
 }
}
The following example performs the same operations in a compliant way:
void f2( char * buffer, size_t bufferSize )
{
 std::string_view str = "Msg";
 if ( str.size() + 1u &lt; bufferSize )
 {
 str.copy( buffer, str.size() );
 buffer[ str.size() ] = 0;
 }
}</code></pre>

<p><b>Developer's Notes</b></p>
<p>This check automatically flags the usage of the specified functions.</p>

<p><b>See also</b></p>
<p>Rule 8.7.1</p>
        """

    if id == 'MISRA23_21.17':
        return """
<p><b>Amplification</b></p>
<p>The relevant string handling functions from &lt;string.h&gt; are:</p>
<p>strcat, strchr, strcmp, strcoll, strcpy, strcspn, strlen, strpbrk, strrchr, strspn,
strstr, strtok</p>

<p><b>Rationale</b></p>
<p>Incorrect use of a function listed above may result in a read or write access beyond the bounds of an
object passed as a parameter, resulting in undefined behaviour.</p>

<p><b>Example</b></p>
<pre><code language="C++">char string[] = "Short";
void f1 ( const char *str )
{
 /*
 * Non-compliant use of strcpy as it results in writes beyond the end of 'string'
 */
 ( void ) strcpy ( string, "Too long to fit" );
 /*
 * Compliant use of strcpy as 'string' is only modified if 'str' will fit.
 */
 if ( strlen ( str ) &lt; ( sizeof ( string ) - 1u ) )
 {
 ( void ) strcpy ( string, str );
 }
}
size_t f2 ( void )
{
 char text[ 5 ] = "Token";
 /*
 * The following is non-compliant as it results in reads beyond
 * the end of 'text' as there is no null terminator.
 */
 return strlen ( text );
}
</code></pre>

<p><b>Developer's Notes</b></p>
<p>This check automatically flags the usage of the specified functions.</p>

<p><b>See also</b></p>
<p>Rule 21.18</p>
        """

    return """
<p><b>Rationale</b></p>
<p>The <i>strcpy</i>, <i>strcmp</i>, <i>strcat</i>, <i>strchr</i>, <i>strspn</i>, <i>strcspn</i>, <i>strpbrk</i>, <i>strrchr</i>, <i>strstr</i>, <i>strtok</i> and <i>strlen</i> functions
within the <i>&lt;cstring&gt;</i> library can read or write beyond the end of a buffer, resulting in undefined
behaviour.</p>
<p>Ideally, a safe string handling library should be used.</p>
<p>See MISRA C++ 2008 [7]</p>
<p>Note: The intention of this rule is to prohibit the functions from &lt;cstring&gt; which have
a char* or char const* parameter, but no additional size_t parameter placing a
bound on the underlying loop. Other functions from &lt;cstring&gt; taking a char* or
char const* parameter fall under the restrictions of rule A27-0-4. Use of memchr,
memcmp, memset, memcpy, and memmove is still allowed by this rule, but limited by rule
A12-0-2.</p>
<p><b>Example</b></p>
<pre><code language="C++">#include &lt;cstring&gt;
void fn ( const char_t * pChar )
{
 char_t array [ 10 ];
 strcpy ( array, pChar ); // Non-compliant
}
</code></pre>
<p><b>See also</b></p>
<p>• Rule A12-0-2 in section 6.12.0</p>
<p>• Rule A27-0-4 in section 6.27.1</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    if check.id() == 'MISRA23_21.2.2':
        all_libs = 'All Libraries'
    elif check.id() == 'MISRA23_21.17':
        all_libs = 'Functions from <string.h>'
    else:
        all_libs = 'Unbounded functions of <cstdlib>'

    check.option().choice('all_libs', 'Functions from cstring/string.h, cstdlib/stdlib.h, cstring, cwchar/wchar.h, cinttypes/inttypes.h', ['All Libraries', 'Functions from <string.h>', 'Unbounded functions of <cstdlib>'],  all_libs)


def check(check, file):
    all_libs = check.option().lookup('all_libs')
    func_list = []
    err = ""

    if all_libs == 'All Libraries':
        func_list = ["strcat", "strchr", "strcmp", "strcoll", "strcpy", "strcspn", "strerror", "strlen", "strncat", "strncmp", "strncpy", "strpbrk",
                     "strrchr", "strspn", "strstr", "strtok", "strxfrm", "strtol", "strtoll", "strtoul", "strtoull", "strtod", "strtof", "strtold", "fgetwc",
                     "fputwc", "wcstol", "wcstoll", "wcstoul", "wcstoull", "wcstod", "wcstof", "wcstold", "strtoumax", "strtoimax", "wcstoumax", "wcstoimax"]
        err = ERR3
    elif all_libs == 'Functions from <string.h>':
        func_list = ["strcpy", "strcmp", "strcat", "strchr", "strspn", "strcspn", "strpbrk", "strrchr", "strstr", "strtok", "strlen", "strcoll", "strrchr"]
        err = ERR2
    else:
        func_list = ["strcpy", "strcmp", "strcat", "strchr", "strspn", "strcspn", "strpbrk", "strrchr", "strstr", "strtok", "strlen"]
        err = ERR1

    for ref in file.filerefs("Call", "~Virtual Function"):
        if ref.ent().longname() in func_list:
            check.violation(ref.ent(), file, ref.line(), ref.column(), err)
