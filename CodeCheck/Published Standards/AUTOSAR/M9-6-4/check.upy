ERR1 = 'Bit-field should have a length of more than one bit'


# The ID for the check
def ids():
    return ('M9-6-4', 'CPP_B006', 'MISRA23_12.2.3')

# The short name of the check
def name(id):
    return {
        'M9-6-4': """\
Published Standards/AUTOSAR/Bit-field Length""",
        'CPP_B006': """\
All Checks/Language Specific/C and C++/Bit-fields/Bit-field Length""",
        'MISRA23_12.2.3': '''Published Standards/MISRA C++ 2023/\
12.2.3 A named bit-field with signed integer type shall not have a length of one bit''',
    }[id]





def tags(id):
    return {
        'M9-6-4': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Bit-fields',
        ],
        'CPP_B006': [
            'Language: C',
            'Language: C++',
            'Bitfields',
        ],
        'MISRA23_12.2.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Bit-fields',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    if id == 'MISRA23_12.2.3':
        return '''
<p><b>Rationale</b></p>
<p>A single-bit signed bit-field is unlikely to behave in a useful way and its presence is likely to indicate an
error.</p>
<p>Note: anonymous signed bit-fields of any length are allowed as they cannot be accessed.</p>

<p><b>Example</b></p>
<pre><code language="C++">struct S
{
 signed int a : 1; // Non-compliant
 signed int : 1; // Rule does not apply
 signed int : 0; // Rule does not apply
 signed int b : 2; // Compliant
 int c : 1; // Non-compliant
};
</code></pre>      
        '''

    return """
<p><b>Rule</b></p>
<p>Named bit-fields with signed integer type shall have a
length of more than one bit.</p>
<p><b>Rationale</b></p>
<p>The values which may be represented by a bit-field of length one may not meet developer
expectations. Anonymous signed bit-fields of any length are allowed.</p>
<p><b>Example</b></p>
<pre><code language="C++">struct S
{
 signed int a : 1; // Non-compliant
 signed int : 1; // Compliant
 signed int : 0; // Compliant
 signed int b : 2; // Compliant
 signed int : 2; // Compliant
};
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for obj_ref in file.filerefs("Define", "Object"):
        bitfield = obj_ref.ent().freetext("Bitfield")
        utype = obj_ref.ent().freetext("UnderlyingType")

        if (obj_ref.ent().name() == "[unnamed]") or (utype and ("unsigned" in utype)):
            continue

        if bitfield and bitfield.isdigit() and (int(bitfield) <= 1):
            check.violation(obj_ref.ent(), file, obj_ref.line(),
                            obj_ref.column(), ERR1)
