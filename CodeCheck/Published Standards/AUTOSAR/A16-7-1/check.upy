import re

ERR1 = '#pragma directive shall not be used'
ERR2 = '_Pragma operator shall not be used'

# The ID for the check


def ids():
    return ('A16-7-1', 'CPP_PR030', 'MISRA23_19.6.1')

# The short name of the check


def name(id):
    return {
        'A16-7-1': """\
Published Standards/AUTOSAR/The #pragma directive shall not be used""",
        'CPP_PR030': """\
All Checks/Language Specific/C and C++/Preprocessor/The #pragma directive shall not be used""",
        'MISRA23_19.6.1': """\
Published Standards/MISRA C++ 2023/19.6.1 The #pragma directive and the _Pragma operator should not be used""",
    }[id]





def tags(id):
    return {
        'A16-7-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR030': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
        'MISRA23_19.6.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Advisory',
            'Preprocessor',
        ],
    }.get(id)

# The long description of the check
def detailed_description(id):
    if id == 'MISRA23_19.6.1':
        return '''
<p><b>Rationale</b></p>
<p>The effects of the #pragma directive and the _Pragma operator are implementation-defined.</p>
<p><b>Example</b></p>
<pre><code language="C++">#pragma once // Non-compliant
#define P( x ) _Pragma( #x ) // Non-compliant
_Pragma( "once" ) // Non-compliant
</code></pre>
        '''

    return """
<p><b>Rationale</b></p>
<p>The #pragma directive is implementation-defined and causes the implementation to
behave in implementation-defined manner.</p>
<p><b>Example</b></p>
<pre><code language="C++">1 // $Id: A16-7-1.hpp 270497 2017-03-14 14:58:50Z piotr.tanski $
2 // #pragma once // Non-compliant - implementation-defined manner
3 #ifndef A16_7_1_HPP // Compliant - equivalent to #pragma once directive
4 #define A16_7_1_HPP
5
6 // ...
7
8 #endif
</code></pre>
<p><b>See also</b></p>
<p>â€¢ MISRA C++ 2008 [7]: Rule 16-6-1 All uses of the #pragma directive shall be
documented.</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'

def define_options(check):
    macros = False
    if check.id() == 'MISRA23_19.6.1':
        macros = True
    check.option().checkbox('macro', 'Include Macros', macros)

def check(check, file):
    if not re.search(r"#pragma|_Pragma", file.contents()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    for lex in lexer.lexemes():
        if lex.text() == "pragma" and lex.token() == "Preprocessor":
            check.violation(lex.ent(), file, lex.line_begin(),
                            lex.column_begin(), ERR1)

    if check.option().lookup('macro'):
        for macro_ref in file.filerefs("", "Macro Project"):
            if macro_ref.ent().name() == "_Pragma":
                check.violation(macro_ref.ent(), file, macro_ref.line(),
                            macro_ref.column(), ERR2)

