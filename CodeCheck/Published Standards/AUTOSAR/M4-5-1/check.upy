# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 1-4-21


import re


ERR1 = 'Boolean operator used incorrectly in %1'
ERR2 = "Boolean object '%1' converted to an integral type"


def ids():
    return ('M4-5-1', 'MISRA08_4-5-1', 'CPP_E015', 'MISRA23_7.0.1')

def name(id):
    return {
        'M4-5-1': 'Published Standards/AUTOSAR/Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator',
        'MISRA08_4-5-1': 'Published Standards/MISRA-C++ 2008/4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator',
        'CPP_E015': 'All Checks/Language Specific/C and C++/Expressions/Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator',
        'MISRA23_7.0.1': 'Published Standards/MISRA C++ 2023/7.0.1 There shall be no conversion from type bool',
    }[id]





def tags(id):
    return {
        'MISRA08_4-5-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Expressions',
        ],
        'M4-5-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E015': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_7.0.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Expressions',
        ],
    }.get(id)

def description():
    return 'Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator.'


def detailed_description(id):
    if id == 'MISRA23_7.0.1':
        return '''
<p><b>Amplification</b></p>
<p>This rule applies to all implicit and explicit conversions, except for:</p>
<p>1. The operands of an equality operator where both operands have type bool; or</p>
<p>2. An explicit cast from bool to class T, when that class has a converting constructor with a
parameter of type bool:</p>
<p>a. T { true }</p>
<p>b. T ( true )</p>
<p>c. static_cast< T >( true )</p>
<p>d. ( T )true — note that this violates Rule 8.2.2</p>

<p><b>Rationale</b></p>
<p>Values of type bool may be subject to integral promotion and the usual arithmetic conversions.
However, occurrences are generally indicative of an error or code obfuscation. For example, the use
of bool operands with the bitwise operators is unlikely to be intentional and is likely to indicate that a
bitwise operator (&, |, ~) has been confused with a logical operator (&&, ||, !). This rule allows errors
such as this to be detected.</p>
<p>The integral promotion that occurs when an equality operator is used to compare two values of type
bool is permitted as it is benign.</p>
<p>Casting a bool to an integral type is not allowed as it is clearer to specify the values to which true
and false will be converted.</p>

<p><b>Exception</b></p>
<p>As there is no risk of confusion, a value of type bool may be assigned to a bit-field of length 1 — this
is a common idiom used when accessing hardware registers.</p>

<p><b>Example</b></p><pre><code language="C++">bool b1 = true;
bool b2 = false;
double d1;
int8_t s8a;
if ( b1 & b2 ) // Non-compliant - b1 and b2 converted to int
if ( b1 < b2 ) // Non-compliant - b1 and b2 converted to int
if ( ~b1 ) // Non-compliant - b1 converted to int
if ( b1 ^ b2 ) // Non-compliant - b1 and b2 converted to int
if ( b1 == 0 ) // Non-compliant - b1 converted to int
double result = d1 * b1; // Non-compliant - b1 converted to double
s8a = static_cast< int8_t >( b1 ); // Non-compliant - b1 converted to int8_t
if ( b1 == false ) // Compliant - Boolean operands to equality
if ( b1 == b2 ) // Compliant - Boolean operands to equality
if ( b1 != b2 ) // Compliant - Boolean operands to equality
if ( b1 && b2 ) // Compliant - no conversion from bool
if ( !b1 ) // Compliant - no conversion from bool
s8a = b1 ? 3 : 7; // Compliant - no conversion from bool
void f( int32_t n );
bool b;
f( b ); // Non-compliant - b converted to int32_t
f( b ? 1 : 0 ); // Compliant - no conversion from bool
switch ( b ) // Non-compliant - b converted to int
struct A
{
 explicit A( bool );
};
A anA { true }; // Compliant - constructor
anA = A { false }; // Compliant - explicit cast calls constructor
</code></pre>

<p><b>See also</b></p>
<p>Rule 7.0.2, Rule 8.2.2</p>

<br>
<p><b>Developer's Notes</b></p>
<p>This check only looks at boolean type objects. Currently, Understand's Code Check feature cannot evaluate an expression statically; therefore, any expression or function that returns a boolean will not be tested with this check.</p>
<p>Any explicit cast from bool to class T will not be flagged, regardless of the case listed in item number 2 of the Amplification.</p>
<br>
        '''

    return '''
<p><b>Rationale</b></p>
The use of <i>bool</i> operands with other operators is unlikely to be meaningful (or intended). This rule allows the detection of such uses, which often occur because the logical operators (&&, || and !) can be easily confused with the bitwise operators (&, | and ~).</p>
<br>

<p><b>Example</b></p><pre><code language="C++">bool b1 = true;
bool b2 = false;
int8_t s8a;
if ( b1 & b2 )     // Non-compliant
if ( b1 &lt; b2 )     // Non-compliant
if ( ~b1 )         // Non-compliant
if ( b1 ^ b2 )     // Non-compliant
if ( b1 == false ) // Compliant
if ( b1 == b2 )    // Compliant
if ( b1 != b2 )    // Compliant
if ( b1 && b2 )    // Compliant
if ( !b1 )         // Compliant
s8a = b1 ? 3 : 7;  // Compliant
</code></pre>

<br>
<p><b>Developer's Notes</b></p>
This check only looks at boolean type objects. Currently, Understand's Code Check feature cannot evaluate an expression statically; therefore, any expression or function that returns a boolean will not be tested with this check.</p>
<br>
'''


def test_entity(file):
    return file.kind().check('header file, code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    flagBoolCasting = True if check.id() == "MISRA23_7.0.1" else False
    check.options().checkbox('flagBoolCasting', 'Flag casting a bool to an integral type', flagBoolCasting)


def check(check, file):
    lexer = file.lexer()
    flagBoolCasting = check.options().lookup('flagBoolCasting')

    # Pull a list of all boolean refs
    booleans = file.filerefs('Use')

    # Loop through all use references and check if they are booleans
    for boolean in booleans:
        ent = boolean.ent()
        if ent.type() != 'bool':
            continue

        # Pull the previous symbol and the next symbol for testing
        lexeme = lexer.lexeme(boolean.line(), boolean.column())
        prevLexeme = lexeme.previous(True, True)
        nextLexeme = lexeme.next(True, True)
        prevToken = prevLexeme.text()
        nextToken = nextLexeme.text()

        # Initialize flag and check for bad symbols
        flag = 0
        bad = {'+', '-', '*', '/', '%', '++', '--', '>', '<', '>=', '|', '^', '~', '<<', '>>', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '&=', '^=', '|='}
        if prevLexeme.previous(True, True) and prevLexeme.previous(True, True).token() == 'Identifier':
            bad.add('&')

        if prevToken in bad or nextToken in bad:
            flag = 1
        elif flagBoolCasting and prevToken == "(" and prevLexeme.previous(True,True).text() == "switch":
            flag = 2
        elif (nextToken == "=="):
            compared_to = nextLexeme.next(True, True)

            if (compared_to.token() == "Literal") and compared_to.text() and compared_to.text().isdigit():
                flag = 1
        elif flagBoolCasting:
            for ass_ref in ent.refs("Assignby"):
                if (ass_ref.line() == boolean.line()) and (ass_ref.column() == boolean.column()) and ass_ref.ent() and ass_ref.ent().kind().check("Parameter, Object") and ass_ref.ent().type() and "int" in ass_ref.ent().type():
                    flag = 2
                    break

        # Throw and error if we found a bad token
        if flag == 1:
            check.violation(ent, file, boolean.line(), boolean.column(), ERR1, ent.name())
        elif flag == 2:
            check.violation(ent, file, boolean.line(), boolean.column(), ERR2, ent.name())
