# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 8-30-2021
import re

ERR1 = 'The macro offsetof was used'

def ids():
    return ('M18-2-1', 'CPP_PR033', 'MISRA23_21.2.4')

def name(id):
    return {
        'M18-2-1': """\
Published Standards/AUTOSAR/The macro offsetof shall not be used""",
        'CPP_PR033': """\
All Checks/Language Specific/C and C++/Preprocessor/The macro offsetof shall \
not be used""",
        'MISRA23_21.2.4': '''Published Standards/MISRA C++ 2023/\
21.2.4 The macro offsetof shall not be used''',
    }[id]





def tags(id):
    return {
        'M18-2-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR033': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
        'MISRA23_21.2.4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Preprocessor',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>

<p>
The offsetof macro is used to access the underlying representation of an object, breaking its
encapsulation. In addition, its use results in undefined behaviour when the specified member is a bitfield, a static data member, or a member function.
</p>

<p><b>Example</b></p>
<pre><code language="C++">
struct A
{
 int32_t i;
};
void f1()
{
 offsetof( A, i ); // Non-compliant
}
</code></pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    refs = file.filerefs('Use', 'Unresolved Macro')

    for ref in refs:
        if ref.ent().name() == 'offsetof':
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
