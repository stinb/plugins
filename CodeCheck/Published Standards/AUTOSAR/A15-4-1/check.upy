import re

ERR1 = 'Dynamic exception-specification is used'

# The ID for the check


def ids():
    return ('A15-4-1', 'CPP_E061')

def name(id):
    return {
        'A15-4-1': """\
Published Standards/AUTOSAR/Dynamic exception-specification shall not be used \
""",
        'CPP_E061': """\
All Checks/Language Specific/C and C++/Exception Handling/Dynamic exception-specification shall \
not be used"""
    }[id]



def tags(id):
    return {
        'A15-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Exception Handling',
        ],
        'CPP_E061': [
            'Language: C',
            'Language: C++',
            'Exception Handling',
        ],
    }.get(id)

def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>This feature was deprecated in the 2011 C++ Language Standard (See: Deprecating
Exception Specifications).</p>
<p>Main issues with dynamic exception specifications are:</p>
<p>1. Run-time checking: Exception specifications are checked at runtime, so the
program does not guarantee that all exceptions will be handled. The run-time
failure mode does not lend itself to recovery</p>
<p>2. Run-time overhead: Run-time checking requires the compiler to produce
additional code that hampers optimizations.</p>
<p>3. Unusable in generic code: It is not possible to know what types of exceptions
may be thrown from templates arguments operations, so a precise exception
specification cannot be written.</p>
<p>In place of dynamic exception-specification, use noexcept specification that allows to
declare whether a function throws or does not throw exceptions.</p>
<p>Note: std::unexpected_handler shall not be used.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A15-4-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;stdexcept&gt;
void F1() noexcept; // Compliant - note that noexcept is the same as
// noexcept(true)
void F2() throw(); // Non-compliant - dynamic exception-specification is
// deprecated
void F3() noexcept(false); // Compliant
void F4() throw(std::runtime_error); // Non-compliant - dynamic
// exception-specification is deprecated
void F5() throw(
...); // Non-compliant - dynamic exception-specification is deprecated
template &lt;class T&gt;
void F6() noexcept(noexcept(T())); // Compliant
</code></pre>
<p><b>See also</b></p>
<p>• C++ Core Guidelines [11]: E.12: Use noexcept when exiting a function because
of a throw is impossible or unacceptable</p>
<p>• open-std.org [18]: open std Deprecating Exception Specifications</p>
<p>• mill22: A Pragmatic Look at Exception Specifications</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r"throw", file.contents()):
        return

    lexer = file.lexer(lookup_ents=False)

    if not lexer:
        return

    for ref in file.filerefs("Declare", "Function"):
        for lex_line in lexer.lexemes(ref.line(), ref.line()):
            if lex_line.text() == "throw" and lex_line.token() == "Keyword":
                check.violation(ref.ent(), file, ref.line(),
                                ref.column(), ERR1)
