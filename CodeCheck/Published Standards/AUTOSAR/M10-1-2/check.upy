# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

import re

ERR1 = 'Class %1 derived from virtual base declared virtual without being in a diamond hierarchy'

def ids():
	return ('M10-1-2', 'MISRA08_10-1-2', 'CPP_D005')

def name(id):
	return {
		'M10-1-2': 'Published Standards/AUTOSAR/A base class shall only be declared virtual if it is used in a diamond hierarchy',
		'MISRA08_10-1-2': 'Published Standards/MISRA-C++ 2008/10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy',
		'CPP_D005': 'All Checks/Language Specific/C and C++/Declarations and Definitions/A base class shall only be declared virtual if it is used in a diamond hierarchy',
	}[id]




def tags(id):
    return {
        'MISRA08_10-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'M10-1-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D005': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

def description():
	return 'A base class shall only be declared virtual if it is used in a diamond hierarchy.'

def detailed_description():
	return '''\
<p><b>Rationale</b></p>
<p>The use of virtual base classes can introduce a number of undefined and potentially confusing
behaviours. Therefore, a base class shall only be declared virtual if that base class is to be used as
a common base class in a diamond hierarchy.</p>
<p><b>Example</b></p>
<pre><code language="C++">class A {};
class B1: public virtual A {}; // Compliant – A is a common base for C
class B2: public virtual A {}; // Compliant – A is a common base for C
class C: public B1, B2 {};
class D: public virtual A {}; // Non-compliant
</code></pre>
'''

def test_language(language):
	return language == 'C++'

def test_entity(file):
	return file.kind().check('header file, code file')

def test_global():
	return False

def check(check, file):
	# Pull a list of all classes that have virtual bases
	classesDefined = file.filerefs('Virtual Base')
	if not classesDefined:
		return

	# Loop through all classes with virtual bases
	for aClass in classesDefined:

		# Check if this class is a base class for another class, throw error if so
		sibling = aClass.scope().ref('Derive')
		if not sibling:
			check.violation(aClass.scope(), file, aClass.line(), aClass.column(), ERR1, aClass.scope().name())
			continue

		# Count the number of parents the child has, throw error if not at least 2
		parents = sibling.ent().refs('Base')
		if len(parents) < 2:
			check.violation(aClass.scope(), file, aClass.line(), aClass.column(), ERR1, aClass.scope().name())
