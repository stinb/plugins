import re

ERR1 = 'Character used that is not in the C++ basic source character set'

ALLOWED = r' \t\v\f\na-zA-Z0-9_\{\}\[\]#\(\)<>%:;\.\?\*\+-\/\^&\|~!=,\\\\\"\''

def ids():
    return ('A2-3-1', 'CPP_N012')

def name(id):
    return {
        'A2-3-1': 'Published Standards/AUTOSAR/Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code',
        'CPP_N012': 'All Checks/Language Specific/C and C++/Naming Conventions/Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code',
    }[id]



def tags(id):
    return {
        'A2-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Naming Conventions',
        ],
        'CPP_N012': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Rationale</b></p>

<p>
The basic source character set consists of 96 characters: the space character,
the control characters representing horizontal tab, vertical tab, form feed,
and new-line, plus the following 91 graphical characters: a b c d e f g h i j k
l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y
Z 0 1 2 3 4 5 6 7 8 9 _ { } [ ] # ( ) &lt; &gt; % : ; . ? * + - / ^ & | ~ ! = , \\ " '
</p>

<p><b>Exception</b></p>

<p>
It is permitted to use other characters inside the text of a wide string and a
UTF-8 encoded string literal.
</p>

<p>
It is also permitted to use a character @ inside comments. See rule A2-7-3.
</p>

<p><b>Developer's Notes</b></p>

<p>
This check cannot detect if invalid characters are used inside the test of a
wide string and a UTF-8 encoded string literal.
</p>

<p><b>Example</b></p>

<pre><code language="C++">// $Id: A2-3-1.cpp 307578 2018-02-14 14:46:20Z michal.szczepankiewicz $
#include &lt;cstdint&gt;

void Fn() noexcept
{
    std::int32_t sum = 0; // Compliant
    // std::int32_t Â£_value = 10; // Non-compliant
    // sum += Â£_value; // Non-compliant
    // Variable sum stores Â£ pounds // Non-compliant
}
</code></pre>

<p><b>See also</b></p>

<p>
JSF December 2005 [8]: AV Rule 9: Only those characters specified in the C++
basic source character set will be used.
</p>
'''

def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    line_content = ''
    for lex in file.lexer(False, 8, False, True).lexemes():
        text = lex.text()
        token = lex.token()

        # Skip certain token types
        if token in {'EOF', 'Whitespace', 'Preprocessor'}:
            continue

        # Skip comments with allowed characters, including @
        if token == 'Comment' and re.fullmatch(f'[{ALLOWED}@]+', text):
            continue

        # Skip allowed characters
        if re.fullmatch(f'[{ALLOWED}]+', text):
            continue

        check.violation(file, file, lex.line_begin(), lex.column_begin(), ERR1)
