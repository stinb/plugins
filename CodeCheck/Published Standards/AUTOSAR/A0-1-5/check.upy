
ERR1 = 'Unused parameter'

# The ID for the check


def ids():
    return ('A0-1-5', 'CPP_F028')

# The short name of the check


def name(id):
    return {
        'A0-1-5': 'Published Standards/AUTOSAR/There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it',
        'CPP_F028': 'All Checks/Language Specific/C and C++/Functions/There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it',
    }[id]


def tags(id):
    return {
        'A0-1-5': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions'
        ],
        'CPP_F028': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)


def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Unused named parameters are often a result of a design changes and can lead to
mismatched parameter lists.</p>
<p>Note: This rule does not apply to unnamed parameters, as overridden methods for
some subclasses may need additional parameters.</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A0-1-5.cpp 305588 2018-01-29 11:07:35Z michal.szczepankiewicz $

#include &lt;cstdint&gt;
#include &lt;vector&gt;

//Compressor.h
class Compressor
{
public:
using raw_memory_type = std::vector&lt;uint8_t&gt;;

raw_memory_type Compress(const raw_memory_type& in, uint8_t ratio);

private:
virtual raw_memory_type __Compress(const raw_memory_type& in, uint8_t ratio) = 0;
};

//Compressor.cpp
Compressor::raw_memory_type Compressor::Compress(const raw_memory_type& in, uint8_t ratio)
{
return __Compress(in, ratio);
}

//JPEGCompressor.h
class JPEGCompressor : public Compressor
{
private:
raw_memory_type __Compress(const raw_memory_type& in, uint8_t ratio) override;
};

//JPEGCompressor.cpp
JPEGCompressor::raw_memory_type JPEGCompressor::__Compress(const raw_memory_type& in, uint8_t ratio)
{
raw_memory_type ret;
//jpeg compression, ratio used
return ret;
}

//HuffmanCompressor.h
class HuffmanCompressor : public Compressor
{
private:
raw_memory_type __Compress(const raw_memory_type& in, uint8_t) override;
};

//JPEGCompressor.cpp
HuffmanCompressor::raw_memory_type HuffmanCompressor::__Compress(const raw_memory_type& in, uint8_t)
{
raw_memory_type ret;
//Huffman compression, no ratio parameter available in the algorithm
return ret;
}
</code></pre>
<p><b>See also</b></p>
<p>C++ Core Guidelines [11]: F.9: Unused parameters should be unnamed</p>"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Virtual Function"):
        for param_ref in func_ref.ent().refs("Define", "~Unnamed Parameter"):
            if not param_ref.ent().refs("~Declarein ~Definein ~Typed ~Name"):
                check.violation(param_ref.ent(), file,
                                param_ref.line(), param_ref.column(), ERR1)
