# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 9-27-2021
import re

ERR1 = 'Header file name %1 does not reflect an entity that it provides'

HEADER_PATTERN = r'\.(H|h|hh|hpp|hxx)$'

def ids():
    return ('A2-8-1', 'CPP_N013')

def name(id):
    return {
        'A2-8-1': 'Published Standards/AUTOSAR/A header file name should reflect the logical entity for which it provides declarations',
        'CPP_N013': 'All Checks/Language Specific/C and C++/Naming Conventions/Naming Convention: Header File Names',
    }[id]

def tags(id):
    return {
        'A2-8-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Non-automated',
            'Naming Conventions',
        ],
        'CPP_N013': [
            'Language: C',
            'Language: C++',
            'Naming Conventions',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
Naming a header file with a name of a declared type or accordingly to a collection of free functions or forwarded headers makes include-directives and a project structure more clear and readable.
</p>

<p><b>See also</b><br>
â€¢ JSF December 2005 [8]: AV Rule 55: The name of a header file should reflect the logical entity for which it provides declarations.
</p>

"""

def test_entity(file):
    return True

def test_language(language):
    return language == 'C++'

def check(check, file):
    if not re.search(HEADER_PATTERN, file.name()):
        return
    filename = re.sub(HEADER_PATTERN, '', file.name())

    refs = file.filerefs('Define')
    ok = False

    for ref in refs:
        if re.search(filename, ref.ent().name()):
            ok = True
            break

    if not ok:
        check.violation(file, file, 0, 0, ERR1, filename)

