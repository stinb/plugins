import re

keywords = ["virtual","override","final"]
ERR1 = "Virtual function declaration does not contain exactly one of the three specifiers: (1) virtual, (2) override, (3) final"

# The ID for the check
def ids():
    return ('A10-3-1', 'CPP_D054', 'MISRA23_13.3.1')

# The short name of the check
def name(id):
    return {
        'A10-3-1': 'Published Standards/AUTOSAR/Virtual function declaration shall contain exactly one of the three specifiers: (1) virtual, (2) override, (3) final',
        'CPP_D054': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Virtual function declaration shall contain exactly one of the three specifiers: (1) virtual, (2) override, (3) final',
        'MISRA23_13.3.1': 'Published Standards/MISRA C++ 2023/13.3.1 User-declared member functions shall use the virtual, override and final specifiers appropriately',
    }[id]



def tags(id):
    return {
        'A10-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions'
        ],
        'CPP_D054': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
        'MISRA23_13.3.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
    }.get(id)



def detailed_description(id):
    return {
        'A10-3-1': """\
<p><b>Rationale</b></p>
<p>Specifying more than one of these three specifiers along with virtual function declaration is redundant and a potential source of errors.</p>
<p>It is recommended to use the virtual specifier only for new virtual function declaration, the override specifier for overrider declaration, and the final specifier for final overrider declaration.</p>
<p>Note that this applies to virtual destructors and virtual operators, too.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A10-3-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
class A
{
public:
virtual ~A() {} // Compliant
virtual void F() noexcept = 0; // Compliant
virtual void G() noexcept final = 0; // Non-compliant - virtual final pure
// function is redundant
virtual void
H() noexcept final // Non-compliant - function is virtual and final
{
}
virtual void K() noexcept // Compliant
{
}
virtual void J() noexcept {}
virtual void M() noexcept // Compliant
{
}
virtual void Z() noexcept // Compliant
{
}
virtual A& operator+=(A const& rhs) noexcept // Compliant
{
// ...
return *this;
}
};
class B : public A
{
public:
~B() override {} // Compliant
virtual void F() noexcept override // Non-compliant - function is specified
// with virtual and override
{
}
void K() noexcept override
final // Non-compliant - function is specified with override and final
{
}
virtual void M() noexcept // Compliant - violates A10-3-2
{
}
void Z() noexcept override // Compliant
{
}
void J() noexcept // Non-compliant - virtual function but not marked as
// overrider
{
}
A& operator+=(A const& rhs) noexcept override // Compliant - to override
// the operator correctly,
// its signature needs to be
// the same as in the base
// class
{
// ...
return *this;
}
};
</code></pre>
<p><b>See also</b></p>
<p>C++ Core Guidelines [11]: C.128: Virtual functions should specify exactly one of virtual, override, or final.
</p>""",
        'CPP_D054': """\
<p><b>Rationale</b></p>
<p>Specifying more than one of these three specifiers along with virtual function declaration is redundant and a potential source of errors.</p>
<p>It is recommended to use the virtual specifier only for new virtual function declaration, the override specifier for overrider declaration, and the final specifier for final overrider declaration.</p>
<p>Note that this applies to virtual destructors and virtual operators, too.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A10-3-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
class A
{
public:
virtual ~A() {} // Compliant
virtual void F() noexcept = 0; // Compliant
virtual void G() noexcept final = 0; // Non-compliant - virtual final pure
// function is redundant
virtual void
H() noexcept final // Non-compliant - function is virtual and final
{
}
virtual void K() noexcept // Compliant
{
}
virtual void J() noexcept {}
virtual void M() noexcept // Compliant
{
}
virtual void Z() noexcept // Compliant
{
}
virtual A& operator+=(A const& rhs) noexcept // Compliant
{
// ...
return *this;
}
};
class B : public A
{
public:
~B() override {} // Compliant
virtual void F() noexcept override // Non-compliant - function is specified
// with virtual and override
{
}
void K() noexcept override
final // Non-compliant - function is specified with override and final
{
}
virtual void M() noexcept // Compliant - violates A10-3-2
{
}
void Z() noexcept override // Compliant
{
}
void J() noexcept // Non-compliant - virtual function but not marked as
// overrider
{
}
A& operator+=(A const& rhs) noexcept override // Compliant - to override
// the operator correctly,
// its signature needs to be
// the same as in the base
// class
{
// ...
return *this;
}
};
</code></pre>
<p><b>See also</b></p>
<p>C++ Core Guidelines [11]: C.128: Virtual functions should specify exactly one of virtual, override, or final.
</p>""",
        'MISRA23_13.3.1': """\
<p><b>Amplification</b></p>
<p>The specifiers are used appropriately when a member function declaration:</p>
<p>1. Does not override a function in a base class, and has either no specifier or has the virtual
specifier; or</p>
<p>2. Overrides a function in a base class, does not use the virtual specifier, and does use either
the override or final specifier.</p>
<p>Note: this rule also applies to destructors.</p>
<p><b>Rationale</b></p>
<p>When a function is declared that does not override a function in a base class (including the case where
the owning class has no base classes), then it is either not intended to be virtual or it is a virtual function
that is expected to be overridden in a derived class. The function declaration should therefore include
either no specifier or the virtual specifier, as appropriate. The use of the override specifier in
this case would render the program ill-formed, whilst use of the final specifier would mean that it is
a virtual function that cannot be subsequently overridden (in which case making it virtual is
redundant).</p>
<p>When a function is declared that overrides a virtual function in a base class:</p>
<p>● The override specifier explicitly documents that this declaration overrides a function in a base
class;</p>
<p>● The final speci9er documents that no further overrides are permitted.</p>
<p>Whilst they are permitted by the C++ Standard, the following redundant combinations of specifier shall
be avoided:</p>
<p>1. Use of virtual with either override or final;</p>
<p>2. Use of final with override.</p>
<p>The use of a single specifier makes the meaning clearer:</p>
<p>1. virtual — this is a new virtual function this is expected to be overridden;</p>
<p>2. override — this is an override that may or may not be overridden;</p>
<p>3. final — this is an override that cannot be overridden</p>
<p>Notes:</p>
<p>1. Declaring a class itself as final does not make its virtual member functions override or
final; the compiler is not required to check that the declarations are overrides.</p>
<p>2. Rule 6.4.2 restricts the use of function declarations that hide non-virtual functions in base
classes.</p>
<p><b>Example</b></p>
<pre><code language="C++">class A
{
public:
 virtual ~A() = default;
 virtual void f1() noexcept = 0; // Compliant
 virtual void f2() noexcept {} // Compliant
 virtual void f3() noexcept {} // Compliant
 void f4() noexcept {} // Compliant
 // The following declarations are non-compliant
 virtual void f5() noexcept final = 0; // 'virtual' and 'final'
 virtual void f6() noexcept final {} // 'virtual' and 'final'
 void f7() noexcept final {} // Ill-formed - not virtual
};
class B : public A
{
public:
 // The following declarations are non-compliant
 ~B(); // No specifier given for override
 virtual void f1() noexcept override {} // 'virtual' and 'override'
 void f2() noexcept override final {} // 'override' and 'final'
 void f3() noexcept {} // No specifier given for override
 void f4() noexcept override {} // Ill-formed - A::f4() not virtual
};
</code></pre>
<p><b>See also</b></p>
<p>Rule 6.4.2, Rule 15.0.1</p>""",
    }[id]
    

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexer = file.lexer(lookup_ents=False)
    for ref in file.filerefs("","Virtual Function", True):

        specifier = 0
        lex = lexer.lexeme(ref.line(), ref.column())
        prev = lexer.lexeme(ref.line(), ref.column())

        while prev and prev.text() != "}" and prev.text() != ";" and prev.text() != ":":
            if prev.text() in keywords:
                specifier += 1
            prev = prev.previous(ignore_whitespace=True, ignore_comments=True)

        while lex and lex.text() != "{" and lex.text() != ";":
            if lex.text() in keywords:
                specifier += 1
            lex = lex.next()

        if specifier != 1:
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)

        lex = None
