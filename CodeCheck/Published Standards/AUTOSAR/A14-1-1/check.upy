# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 9-29-2021
import re

ERR1 = """\
Template does not check if a specific template argument is suitable for this
template"""

def ids():
    return ('A14-1-1', 'CPP_A017')

def name(id):
    return {
        'A14-1-1': 'Published Standards/AUTOSAR/A template should check if a specific template argument is suitable for this template',
        'CPP_A017': 'All Checks/Language Specific/C and C++/Assignment Operators/A template should check if a specific template argument is suitable for this template',
    }[id]




def tags(id):
    return {
        'A14-1-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Advisory',
            'Automation: Non-automated',
            'Assignment Operators'
        ],
        'CPP_A017': [
            'Language: C',
            'Language: C++',
            'Assignment Operators',
        ],
    }.get(id)

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>If a template class or function requires specific characteristics from a
template type (e.g. if it is move constructible, copyable, etc.), then it needs
to check whether the type matches the requirements to detect possible faults.
The goal of this rule is to ensure that a template defines all of the
preconditions that a template argument needs to fulfill without having any
information about the specific class. This can be achieved in compile time using
static_assert assertion.</p>
<p><b>Example</b></p>
<pre><code language="C++">// $Id: A14-1-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;utility&gt;
class A
{
  public:
    A() = default;
    ~A() = default;
    A(A const&) = delete;
    A& operator=(A const&) = delete;
   A(A&&) = delete;
   A& operator=(A&&) = delete;
};
class B
{
  public:
    B() = default;
    B(B const&) = default;
    B& operator=(B const&) = default;
    B(B&&) = default;
    B& operator=(B&&) = default;
};
template &lt;typename T&gt;
void F1(T const& obj) noexcept(false)
{
  static_assert(
             std::is_copy_constructible&lt;T&gt;(),
             "Given template type is not copy constructible."); // Compliant
}
template &lt;typename T&gt;
class C
{
  // Compliant
  static_assert(std::is_trivially_copy_constructible&lt;T&gt;(),
             "Given template type is not trivially copy constructible.");

  // Compliant
  static_assert(std::is_trivially_move_constructible&lt;T&gt;(),
             "Given template type is not trivially move constructible.");

  // Compliant
  static_assert(std::is_trivially_copy_assignable&lt;T&gt;(),
             "Given template type is not trivially copy assignable.");

  // Compliant
  static_assert(std::is_trivially_move_assignable&lt;T&gt;(),
             "Given template type is not trivially move assignable.");

  public:
    C() = default;
    C(C const&) = default;
    C& operator=(C const&) = default;
    C(C&&) = default;
    C& operator=(C&&) = default;

  private:
    T c;
};
template &lt;typename T&gt;
class D
{
  public:
    D() = default;
    D(D const&) = default; // Non-compliant - T may not be copyable
    D& operator=(D const&) = default; // Non-compliant - T may not be copyable
    D(D&&) = default; // Non-compliant - T may not be movable
    D& operator=(D&&) = default; // Non-compliant - T may not be movable

  private:
    T d;
};
void F2() noexcept
{
  A a;
  B b;
  // f1&lt;A&gt;(a); // Class A is not copy constructible, compile-time error
  // occurs
  F1&lt;B&gt;(b); // Class B is copy constructible
  // C&lt;A&gt; c1; // Class A can not be used for template class C, compile-time
  // error occurs
  C&lt;B&gt; c2; // Class B can be used for template class C
  D&lt;A&gt; d1;
  // D&lt;A&gt; d2 = d1; // Class D can not be copied, because class A is not
  // copyable, compile=time error occurs
  // D&lt;A&gt; d3 = std::move(d1); // Class D can not be moved, because class A is
  // not movable, compile-time error occurs
  D&lt;B&gt; d4;
  D&lt;B&gt; d5 = d4;
  D&lt;B&gt; d6 = std::move(d4);
}
</code></pre>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexer = None
    classRefs = file.filerefs('Define', 'Class Template')

    for classRef in classRefs:
        ok = False
        defaultRefs = classRef.ent().refs('Declare Default')

        for defaultRef in defaultRefs:
            if not defaultRef.scope().name() == classRef.ent().name():
                continue

            if not ok:
                if not lexer:
                    lexer = file.lexer()

                lexemes = lexer.lexemes(classRef.ent().ref('Begin').line(), classRef.ent().ref('End').line())
                for lexeme in lexemes:
                    if re.search(r'is_trivially', lexeme.text()):
                        ok = True

            if not ok:
                check.violation(defaultRef.ent(), file, defaultRef.line(), defaultRef.column(), ERR1)
