import re


ERR1 = 'There are more than one occurence of the # or ## operators'


# The ID for the check
def ids():
    return ('M16-3-1', 'CPP_PR006', 'MISRA04_19.12', 'MISRA08_16-3-1')


# The short name of the check
def name(id):
    return {
        'M16-3-1': """\
Published Standards/AUTOSAR/There shall be at most one occurrence of the # or ## \
operators in a single macro definition""",
        'CPP_PR006': """\
All Checks/Language Specific/C and C++/Preprocessor/There shall be at most one \
occurrence of the # or ## operators in a single macro definition""",
        'MISRA04_19.12': """\
Published Standards/MISRA-C 2004/19.12 There shall be at most one occurrence of the # \
or ## operators in a single macro definition""",
        'MISRA08_16-3-1': """\
Published Standards/MISRA-C++ 2008/16-3-1 There shall be at most one occurrence of the # \
or ## operators in a single macro definition""",

    }[id]


    




def tags(id):
    return {
        'MISRA08_16-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Preprocessor',
        ],
        'MISRA04_19.12': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Preprocessor',
        ],
        'M16-3-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Preprocessor',
        ],
        'CPP_PR006': [
            'Language: C',
            'Language: C++',
            'Preprocessor',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>There shall be at most one occurrence of the # or ##
operators in a single macro definition.</p>
<p><b>Rationale</b></p>
<p>The order of evaluation associated with both the # and ## preprocessor operators is unspecified.
This problem can be avoided by having only one occurrence of either operator in any single macro
definition (i.e. one #, one ##, or neither).</p>
<p><b>Example</b></p>
<pre><code language="C++">#define A(x) #x // Compliant
#define B(x, y) x ## y // Compliant
#define C(x, y) # x ## y // Non-compliant
In the following, if y is joined to z first then the fourth parameter of D will be substituted and
joined to x. Alternatively, if x is joined with y first, then the fourth parameter of D will not be
substituted.
#define D(x, y, z, yz) x ## y ## z // Non-compliant
</code></pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for macro_ref in file.filerefs("Define", "Macro Functional"):
        macro_type = macro_ref.ent().type()

        if macro_type:
            hash_op = re.findall("#{1,2}", macro_type)

            if len(hash_op) > 1:
                check.violation(macro_ref.ent(), file,
                                macro_ref.line(), macro_ref.column(), ERR1)
