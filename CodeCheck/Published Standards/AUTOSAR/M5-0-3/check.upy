# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 11-3-21


import re


ERR1 = 'Type is implicitly converted from "%1" to "%2"'


def ids():
    return ('M5-0-3', 'MISRA08_5-0-3', 'CPP_T007')


def name(id):
    return {
        'MISRA08_5-0-3': 'Published Standards/MISRA-C++ 2008/5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type',
        'M5-0-3': 'Published Standards/AUTOSAR/A cvalue expression shall not be implicitly converted to a different underlying type',
        'CPP_T007': 'All Checks/Language Specific/C and C++/Types/A cvalue expression shall not be implicitly converted to a different underlying type',
    }[id]





def tags(id):
    return {
        'MISRA08_5-0-3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Types',
        ],
        'M5-0-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T007': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

def detailed_description():
    return '''\

<p><b>Rationale</b></p>

<p>
In order to ensure all operations in an expression are performed in the same underlying type, an expression defined as a cvalue shall not undergo further implicit conversions.
</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( )
{
    int32_t s32;
    int8_t s8;
    s32 = s8 + s8;                             // Example 1 - Non-compliant
    s32 = static_cast &lt; int32_t &gt; ( s8 ) + s8; // Example 2 - Compliant
    s32 = s32 + s8;                            // Example 3 - Compliant
}
</code></pre>

<p>
In Example 1, the addition operation is performed with an <i>underlying type</i> of <i>int8_t</i> and the result is converted to an <i>underlying type</i> of <i>int32_t</i>.
</p>

<p>
In Examples 2 and 3, the addition is performed with an <i>underlying type</i> of <i>int32_t</i> and therefore no <i>underlying type</i> conversion is required.
</p>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    numTypes = {'short', 'short int', 'signed short', 'signed short int', 'unsigned short int', 'int', 'signed', 'signed int', 'unsigned', 'unsigned int', 'long', 'long int', 'signed long', 'signed long int', 'unsigned long', 'unsigned long int', 'long  long', 'long long int', 'signed long long', 'signed long long int', 'unsigned long long', 'unsigned long long int', 'float', 'double', 'long double', 'int8_t', 'int16_t', 'int32_t', 'int64_t', 'int_fast8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_least8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'intmax_t', 'intptr_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint64_t', 'uint_fast8_t', 'uint_fast16_t', 'uint_fast32_t', 'uint_fast64_t', 'uint_least8_t', 'uint_least16_t', 'uint_least32_t', 'uint_least64_t', 'uintmax_t', 'uintptr_t'}

    lexer = None

    # Whenever a value is set
    for ref in file.filerefs('Set'):
        ent = ref.ent()

        if not lexer:
            lexer = file.lexer()

        # Get the lexeme after the =
        lexeme = lexer.lexeme(ref.line(), ref.column())
        for i in range(2):
            if lexeme:
                if i == 1 and lexeme.text() != '=':
                    lexeme = None
                    break
                lexeme = lexeme.next(ignore_whitespace=True, ignore_comments=True)
        
        # Both are different types
        if lexeme and lexeme.ent():
            if ent.type() in numTypes and lexeme.ent().type() in numTypes:
                    if ent.type() != lexeme.ent().type():
                        check.violation(ent, file, ref.line(), ref.column(), ERR1, lexeme.ent().type(), ent.type())
