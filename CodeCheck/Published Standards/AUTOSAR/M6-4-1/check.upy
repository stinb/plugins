# This script is designed to run with Understand - CodeCheck
# 1-10-22


import re


ERR1 = 'If statement not enclosed in curly braces { }'


def ids():
    return ('M6-4-1', 'MISRA08_6-4-1', 'CPP_C016', 'MISRA04_14.9')


def name(id):
    return {
        'M6-4-1': 'Published Standards/AUTOSAR/An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement',
        'MISRA08_6-4-1': 'Published Standards/MISRA-C++ 2008/6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement',
        'CPP_C016': 'All Checks/Language Specific/C and C++/Control Flow/An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement',
        'MISRA04_14.9': 'Published Standards/MISRA-C 2004/14.9 An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement',
    }[id]





def tags(id):
    return {
        'MISRA08_6-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA04_14.9': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Control Flow',
        ],
        'M6-4-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Control Flow',
        ],
        'CPP_C016': [
            'Language: C',
            'Language: C++',
            'Control Flow',
        ],
    }.get(id)

def detailed_description(id):
    return {
        'M6-4-1': '''
<p><b>Rationale</b></p>

<p>
If the bodies of these constructs are not compound statements, then errors can occur if a developer fails to add the required braces when attempting to change a single statement body to a multistatement body.
</p>

<p>
Requiring that the body of these constructs shall be a compound statement (enclosed within braces) ensures that these errors cannot arise.
</p>

<p><b>Example</b></p>

<pre><code language="C++">if ( test1 );     // Non-compliant - accidental single null statement
{
    x = 1;
}
if ( test1 )
{
    x = 1;        // Compliant - a single statement must be in braces
}
else if ( test2 ) // Compliant - no need for braces between else and if
{
    x = 0;        // Compliant - a single statement must be in braces
}
else              // Non-compliant
    x = 3;        // This was (incorrectly) not enclosed in braces
    y = 2;        // This line was added later but, despite the
                  // appearance (from the indent) it is actually not
                  // part of the else, and is executed unconditionally
</code></pre>

<p>
Note that this example assumes a particular style for the layout of compound statements and their enclosing braces. This style is not mandated, but a style should be defined within the style guide for the project.
</p>
''',

        'MISRA08_6-4-1': '''
<p><b>Rationale</b></p>

<p>
If the bodies of these constructs are not compound statements, then errors can occur if a developer fails to add the required braces when attempting to change a single statement body to a multistatement body.
</p>

<p>
Requiring that the body of these constructs shall be a compound statement (enclosed within braces) ensures that these errors cannot arise.
</p>

<p><b>Example</b></p>

<pre><code language="C++">if ( test1 );     // Non-compliant - accidental single null statement
{
    x = 1;
}
if ( test1 )
{
    x = 1;        // Compliant - a single statement must be in braces
}
else if ( test2 ) // Compliant - no need for braces between else and if
{
    x = 0;        // Compliant - a single statement must be in braces
}
else              // Non-compliant
    x = 3;        // This was (incorrectly) not enclosed in braces
    y = 2;        // This line was added later but, despite the
                  // appearance (from the indent) it is actually not
                  // part of the else, and is executed unconditionally
</code></pre>

<p>
Note that this example assumes a particular style for the layout of compound statements and their enclosing braces. This style is not mandated, but a style should be defined within the style guide for the project.
</p>
''',

        'CPP_C016': '''
<p><b>Rationale</b></p>

<p>
If the bodies of these constructs are not compound statements, then errors can occur if a developer fails to add the required braces when attempting to change a single statement body to a multistatement body.
</p>

<p>
Requiring that the body of these constructs shall be a compound statement (enclosed within braces) ensures that these errors cannot arise.
</p>

<p><b>Example</b></p>

<pre><code language="C++">if ( test1 );     // Non-compliant - accidental single null statement
{
    x = 1;
}
if ( test1 )
{
    x = 1;        // Compliant - a single statement must be in braces
}
else if ( test2 ) // Compliant - no need for braces between else and if
{
    x = 0;        // Compliant - a single statement must be in braces
}
else              // Non-compliant
    x = 3;        // This was (incorrectly) not enclosed in braces
    y = 2;        // This line was added later but, despite the
                  // appearance (from the indent) it is actually not
                  // part of the else, and is executed unconditionally
</code></pre>

<p>
Note that this example assumes a particular style for the layout of compound statements and their enclosing braces. This style is not mandated, but a style should be defined within the style guide for the project.
</p>
''',

        'MISRA04_14.9': '''
<p>For example:</p>

<pre><code language="C++">if ( test1 )
{
    x = 1;        /* Even a single statement must be in braces */
}
else if ( test2 ) /* No need for braces in else if */
{
    x = 0;        /* Single statement must be in braces */
}
else
    x = 3;        /* This was (incorrectly) not enclosed in braces */
    y = 2;        /* This line was added later but, despite the
                     appearance (from the indent), it is actually
                     not part of the else, and is executed
                     unconditionally */
</code></pre>

<p>
Note that the layout for compound statements and their enclosing braces should be determined from the style guidelines. The above is just an example.
</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('header file, code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def condition_block(lex):
    lex = lex.next(ignore_whitespace=True,ignore_comments=True)
    if lex.token() == 'Punctuation' and lex.text() == '(':
        lex = lex.next(ignore_whitespace=True,ignore_comments=True)
        open = 1
        while open != 0:
            if lex.token() == 'Punctuation' and lex.text() == '(':
                open += 1
            elif lex.token() == 'Punctuation' and lex.text() == ')':
                open -= 1
            lex = lex.next(ignore_whitespace=True,ignore_comments=True)
        return lex
    else:
        return lex


def check(check, file):
    lexer = file.lexer(True, 8, False, False)
    lex = lexer.first()

    while lex:
        if lex.text() in ['if', 'else'] and lex.token() == 'Keyword':
            line, col = lex.line_begin(), lex.column_begin()

            lex = condition_block(lex)

            if lex.text() != '{' and lex.text() != 'if':
                check.violation(None, file, line, col, ERR1)
        else:
            lex = lex.next(ignore_whitespace=True,ignore_comments=True)
