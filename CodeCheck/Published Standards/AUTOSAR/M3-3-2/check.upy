ERR1 = "Function re-declared without the static specifier"


# The ID for the check
def ids():
    return ('M3-3-2', 'MISRA08_3-3-2', 'CPP_D042')


# The short name of the check
def name(id):
    return {
        'M3-3-2': 'Published Standards/AUTOSAR/If a function has internal linkage then all redeclarations shall include the static storage class specifier',
        'MISRA08_3-3-2': 'Published Standards/MISRA-C++ 2008/3-3-2 If a function has internal linkage then all redeclarations shall include the static storage class specifier',
        'CPP_D042': 'All Checks/Language Specific/C and C++/Declarations and Definitions/If a function has internal linkage then all redeclarations shall include the static storage class specifier',
    }[id]





def tags(id):
    return {
        'MISRA08_3-3-2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2008',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'M3-3-2': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Declarations and Definitions',
        ],
        'CPP_D042': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)

# The short description of the check
def description():
    return 'If a function has internal linkage then all redeclarations shall include the static storage class specifier.'


# The long description of the check
def detailed_description(id):
    return {
        'M3-3-2': '''
<p><b>Rule</b></p>
<p>If a function has internal linkage then all redeclarations shall include the static storage class
specifier.</p>
<p><b>Rationale</b></p>
<p>If the declaration of a function includes the static storage class specifier, then it has internal
linkage.</p>
<p>A re-declaration of such a function is not required to have the static keyword, but it will still have
internal linkage. However, this is implicit and may not be obvious to a developer. It is therefore
good practice to apply the static keyword consistently so that the linkage is explicitly stated.</p>
<p><b>Example</b></p>
<pre><code language="C++">static void f1 ( );
static void f2 ( );
       void f1 ( ) { } // Non-compliant
static void f2 ( ) { } // Compliant
</code></pre>
<p>Note: Static storage duration class specifier is redundant and does not need to be
specified if a function is placed in an unnamed namespace.</p>
''',
        'MISRA08_3-3-2': '''
<p><b>Rule</b></p>
<p>If a function has internal linkage then all redeclarations shall include the static storage class
specifier.</p>
<p><b>Rationale</b></p>
<p>If the declaration of a function includes the static storage class specifier, then it has internal
linkage.</p>
<p>A re-declaration of such a function is not required to have the static keyword, but it will still have
internal linkage. However, this is implicit and may not be obvious to a developer. It is therefore
good practice to apply the static keyword consistently so that the linkage is explicitly stated.</p>
<p><b>Example</b></p>
<pre><code language="C++">static void f1 ( );
static void f2 ( );
       void f1 ( ) { } // Non-compliant
static void f2 ( ) { } // Compliant
</code></pre>
''',
        'CPP_D042': '''
<p><b>Rule</b></p>
<p>If a function has internal linkage then all redeclarations shall include the static storage class
specifier.</p>
<p><b>Rationale</b></p>
<p>If the declaration of a function includes the static storage class specifier, then it has internal
linkage.</p>
<p>A re-declaration of such a function is not required to have the static keyword, but it will still have
internal linkage. However, this is implicit and may not be obvious to a developer. It is therefore
good practice to apply the static keyword consistently so that the linkage is explicitly stated.</p>
<p><b>Example</b></p>
<pre><code language="C++">static void f1 ( );
static void f2 ( );
       void f1 ( ) { } // Non-compliant
static void f2 ( ) { } // Compliant
</code></pre>
''',
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer()

    if not lexer:
        return

    for func_ref in file.filerefs("Declare", "Static Function"):
        for define_ref in func_ref.ent().refs("Definein"):
            if define_ref.line() != func_ref.line():
                defined_static = False
                begin_ref = define_ref.scope().ref("Begin")
                if not begin_ref:
                    continue
                lex = lexer.lexeme(begin_ref.line(), begin_ref.column())

                while lex and lex.text() != define_ref.scope().name():
                    if lex.text() == "static" and lex.token() == "Keyword":
                        defined_static = True
                        break

                    lex = lex.next(ignore_whitespace=True,
                                   ignore_comments=True)

                if not defined_static:
                    check.violation(define_ref.scope(), define_ref.file(),
                                    define_ref.line(), define_ref.column(), ERR1)
