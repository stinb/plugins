# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 9-20-2021

import re

ERR1 = 'Undefined escape sequence '

def ids():
    return ('A2-13-1', 'CPP_E027', 'MISRA23_5.13.1')

def name(id):
    return {
        'A2-13-1': 'Published Standards/AUTOSAR/Only those escape sequences that are defined in ISO&#47;IEC 14882:2014 shall be used',
        'CPP_E027': 'All Checks/Language Specific/C and C++/Expressions/Only those escape sequences that are defined in ISO&#47;IEC 14882:2014 shall be used',
        'MISRA23_5.13.1': 'Published Standards/MISRA C++ 2023/5.13.1 Within character literals and non raw-string literals, &#92; shall only be used to form a defined escape sequence or universal character name',
    }[id]



def tags(id):
    return {
        'A2-13-1': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Expressions',
        ],
        'CPP_E027': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
        'MISRA23_5.13.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Comments',
        ],
    }.get(id)

def detailed_description(id):
    return {
            'A2-13-1': '''\
<p><b>Rationale</b></p>
<p>The use of an undefined escape sequence leads to undefined behavior. The defined
escape sequences (ISO/IEC 14882:2014) are: \\\', \\\", \\?, \\\\, \\a, \\b, \\f, \\n, \\r, \\t, \\v, \\&lt;octal
Number&gt;, \\x&lt;hexadecimal Number>.</p>
<p>Note: Universal-character-names (\\u hex-quad and \\U hex-quad hex-quad) are also
allowed in character and string literals (although they look similar to escape sequences,
they are handled in a different way by the C++ language, see A2-13-6).</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-13-1.cpp 305629 2018-01-29 13:29:25Z piotr.serwa $
#include &lt;string&gt;
void F()
{
    const std::string a = "\\k";         // Non-compliant
    const std::string b = "\\n";         // Compliant
    const std::string c = "\\U0001f34c"; // Compliant
}
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: required 2-13-1 Only those escape sequences that are
defined in ISO/IEC14882:2003 shall be used.</p>''',
            'CPP_E027': '''\
<p><b>Rationale</b></p>
<p>The use of an undefined escape sequence leads to undefined behavior. The defined
escape sequences (ISO/IEC 14882:2014) are: \\\', \\\", \\?, \\\\, \\a, \\b, \\f, \\n, \\r, \\t, \\v, \\&lt;octal
Number&gt;, \\x&lt;hexadecimal Number>.</p>
<p>Note: Universal-character-names (\\u hex-quad and \\U hex-quad hex-quad) are also
allowed in character and string literals (although they look similar to escape sequences,
they are handled in a different way by the C++ language, see A2-13-6).</p>
<p><b>Example</b></p>
<pre><code language="C++">//% $Id: A2-13-1.cpp 305629 2018-01-29 13:29:25Z piotr.serwa $
#include &lt;string&gt;
void F()
{
    const std::string a = "\\k";         // Non-compliant
    const std::string b = "\\n";         // Compliant
    const std::string c = "\\U0001f34c"; // Compliant
}
</code></pre>
<p><b>See also</b></p>
<p>• MISRA C++ 2008 [7]: required 2-13-1 Only those escape sequences that are
defined in ISO/IEC14882:2003 shall be used.</p>''',
            'MISRA23_5.13.1': '''\
<p><b>Amplification</b></p>
<p>The escape sequences defined within the C++ Standard are:</p>
<p>\\n, \\t, \\v, \\b, \\r, \\f, \\a, \\\\, \\?, \\', \\", \\&lt;Octal Number&gt;, \\x&lt;Hexadecimal Number&gt;</p>
<p>The universal character names are:</p>
<p>\\u hex-quad, \\U hex-quad hex-quad</p>
<p><b>Rationale</b></p>
<p>The use of an undefined escape sequence results in implementation-defined behaviour.</p>
<p><b>Example</b></p>
<pre><code language="C++">void fn()
{
 const char * a = "\\k"; // Non-compliant
 const char * b = "\\b\\u00E9"; // Compliant
}
</code></pre>''',
    }[id]


def test_entity(file):
    return file.kind().check('header file, code file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    invalidLiterals = re.compile('[^\\\\](\\\\(\\\\\\\\)*([^\'|"|?|\\\\|0-9|a-f|n|r|t|U|u|v|x]))')

    for lexeme in file.lexer(lookup_ents=False).lexemes():
        token = lexeme.token()
        string = lexeme.text()
        if token in {'Literal', 'String'}:
            invalidLiteral = invalidLiterals.search(string)
            if invalidLiteral:
                line = lexeme.line_begin()
                column = lexeme.column_begin() + invalidLiteral.start()
                check.violation(None, file, line, column, ERR1 + visible(invalidLiteral.group(1)))

def visible(string: str) -> str:
    return re.sub(r'[\s]', '(WHITESPACE)', string)
