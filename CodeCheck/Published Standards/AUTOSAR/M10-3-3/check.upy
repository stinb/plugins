import re

declared_pures = []
DEF_NAME = "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual"

# The ID for the check 
def ids():
    return ('M10-3-3', 'CPP_F040')

def name(id):
    return {
        'M10-3-3': """\
Published Standards/AUTOSAR/A virtual function shall only be overridden by a \
pure virtual function if it is itself declared as pure virtual""",
        'CPP_F040': """\
All Checks/Language Specific/C and C++/Functions/A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual"""

    }[id]




def tags(id):
    return {
        'M10-3-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Functions',
        ],
        'CPP_F040': [
            'Language: C',
            'Language: C++',
            'Functions',
        ],
    }.get(id)

# The long description of the check
def detailed_description():
  return """\
<p><b>Rationale</b></p>
<p>Re-declaring a function as pure may not meet developer expectations.</p>
<p><b>Example</b></p>
<pre><code language="C++">class A
{
public:
virtual void foo ( ) = 0; // foo declared pure
};
class B : public A
{
public:
virtual void foo ( ) // foo defined
{
}
};
class C: public B
{
public:
virtual void foo ( ) = 0; // Non-compliant â€“ foo re-declared pure
};
</code></pre>
<p>The function foo is introduced as pure (making class A abstract), defined in class B (making class B concrete), then re-declared as pure (making class C abstract). As this may not meet developer expectations, the re-declaration as pure is not allowed.</p>
"""

# Tests the type of file
def test_entity(file):
  return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for 
# project-level checks
def test_global():
  return False

def test_language(language):
  return language == 'C++'

def check(check, file):
  for ref in file.filerefs("Declare","~Unresolved, ~Unknown Pure Virtual", True):
    if ref.scope().kind().check("Abstract"):
      if ref.scope().ref('C Public Base') == None:
        if not (str(ref.ent().name()) in declared_pures):
          declared_pures.append(str(ref.ent().name()))
      else:
        if str(ref.ent().name()) in declared_pures:
          check.violation(ref.ent(), file, ref.line(), ref.column(), DEF_NAME)
