# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 2021-11-10


import re


ERR1 = '"%1" placed on left side of type "%2"'


def ids():
    return ('A7-1-3', 'CPP_T025')


def name(id):
    return {
        'A7-1-3': 'Published Standards/AUTOSAR/\
CV-qualifiers shall be placed on the right hand side of the type that is a \
typedef or a using name',
        'CPP_T025': 'All Checks/Language Specific/C and C++/Types/\
CV-qualifiers shall be placed on the right hand side of the type that is a \
typedef or a using name',
    }[id]





def tags(id):
    return {
        'A7-1-3': [
            'Language: C',
            'Language: C++',
            'Standard: AUTOSAR',
            'Category: Required',
            'Automation: Automated',
            'Types',
        ],
        'CPP_T025': [
            'Language: C',
            'Language: C++',
            'Types',
        ],
    }.get(id)

def detailed_description():
    return '''\
<p><b>Rationale</b></p>

<p> If the type is a typedef or a using name, placing const or volatile
qualifier on the left hand side may result in confusion over what part of the
type the qualification applies to.</p>

<p><b>Example</b></p>
<pre><code language="C++">// $Id: A7-1-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
using IntPtr = std::int32_t*;
using IntConstPtr = std::int32_t* const;
using ConstIntPtr = const std::int32_t*;
void Fn(const std::uint8_t& input) // Compliant
{
    std::int32_t value1 = 10;
    std::int32_t value2 = 20;

    const IntPtr ptr1 =
    &value1; // Non-compliant - deduced type is std::int32_t*
             // const, not const std::int32_t*

    // ptr1 = &value2; // Compilation error, ptr1 is read-only variable

    IntPtr const ptr2 =
    &value1; // Compliant - deduced type is std::int32_t* const

    // ptr2 = &value2; // Compilation error, ptr2 is read-only variable

    IntConstPtr ptr3 = &value1; // Compliant - type is std::int32_t* const, no
                                // additional qualifiers needed

    // ptr3 = &value2; // Compilation error, ptr3 is read-only variable

    ConstIntPtr ptr4 = &value1; // Compliant - type is const std::int32_t*

    const ConstIntPtr ptr5 = &value1; // Non-compliant, type is const
                                      // std::int32_t* const, not const const
                                      // std::int32_t*
    ConstIntPtr const ptr6 =
    &value1; // Compliant - type is const std::int32_t* const
}
</code></pre>

<p><b>See also</b></p>

<p>â€¢ HIC++ v4.0 [9]: 7.1.4 Place CV-qualifiers on the right hand side of the
type they apply to</p>
'''


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True


def test_global():
    return False


def check(check, file):
    for ref in file.filerefs('Typed', 'Type Alias, Typedef'):
        ent = ref.ent()

        # Skip unless the previous lexeme is const or volatile
        lex = file.lexer(lookup_ents=False).lexeme(ref.line(), ref.column())
        if not lex:
            continue
        lex = lex.previous(True, True)
        if not lex or lex.text() not in {'const', 'volatile'}:
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1, lex.text(), ent.name())
