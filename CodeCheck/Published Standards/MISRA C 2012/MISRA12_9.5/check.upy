# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 7/16/24

import re

ERR1 = 'Array size not explicitly specified for array with designated initializers'


# The ID for the check
def ids():
    return ('MISRA12_9.5', 'MISRA23_9.5', 'CPP_DD021')

# The short name of the check
def name(id):
    return {
        'MISRA12_9.5': 'Published Standards/MISRA C 2012/9.5 Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly',
        'MISRA23_9.5': 'Published Standards/MISRA C 2023/9.5 Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly',
        'CPP_DD021': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly',
    }[id]




def tags(id):
    return {
        'MISRA12_9.5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'MISRA23_9.5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'CPP_DD021': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA12_9.5': """\
<p><b>Rationale</b></p>
<p>If the size of an array is not specified explicitly, it is determined by the
highest index of any of the elements that are initialized. When using designated
initializers it may not always be clear which initializer has the highest index,
especially when the initializer contains a large number of elements.</p>
<p>To make the intent clear, the array size shall be declared explicitly. This
provides some protection if, during development of the program, the indices of
the initialized elements are changed as it is a constraint violation (C99
Section 6.7.8) to initialize an element outside the bounds of an array.</p>
<p><b>Example</b></p>
<pre><code language="C++">/* Non-compliant - probably unint entional to have single element */
int a1[ ] = { [ 0 ] = 1 };

/* Compliant */
int a2[ 10 ] = { [ 0 ] = 1 };</code></pre>
""",
    'MISRA23_9.5': """\
<p><b>Rationale</b></p>
<p>If the size of an array is not specified explicitly, it is determined by the
highest index of any of the elements that are initialized. When using designated
initializers it may not always be clear which initializer has the highest index,
especially when the initializer contains a large number of elements.</p>
<p>To make the intent clear, the array size shall be declared explicitly. This
provides some protection if, during development of the program, the indices of
the initialized elements are changed as it is a constraint violation (C99
Section 6.7.8) to initialize an element outside the bounds of an array.</p>
<p><b>Example</b></p>
<pre><code language="C++">/* Non-compliant - probably unint entional to have single element */
int a1[ ] = { [ 0 ] = 1 };

/* Compliant */
int a2[ 10 ] = { [ 0 ] = 1 };</code></pre>
""",
    'CPP_DD021': """\
An element of an object shall not be initialized more than once""",

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexer = None
    refs = file.filerefs('Set Init', 'Object ~Unknown ~Unresolved')
    for ref in refs:
        # Check for designated initializers
        if ref.ent().value() and re.search(r'^{.*=.*}$', ref.ent().value()) and re.search(r'\[\d*\]', str(ref.ent().type())):
            if not lexer:
                lexer = file.lexer()

            lexeme = lexer.lexeme(ref.line(), ref.column())
            ok = False
            # Check if array size is explicitly specified
            while lexeme and lexeme.text() != '=':
                if lexeme.text() == '[':
                    lexeme = lexeme.next(True, True)
                    if lexeme and lexeme.text() != ']':
                        ok = True
                        break
                else:
                    lexeme = lexeme.next(True, True)

            if not ok:
                check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)
