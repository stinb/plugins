# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 12/11/24

import re
import Modules

ERR1 = '<time.h> was used'
ERR2 = 'The function wcsftime shall not be used'


# The ID for the check
def ids():
    return ('MISRA12_21.10', 'MISRA04_20.12', 'CPP_L016', 'MISRA23_21.10')

# The short name of the check
def name(id):
    return {
        'MISRA12_21.10': 'Published Standards/MISRA C 2012/' + """\
21.10 The Standard Library time and date functions shall not be used""",
        'MISRA04_20.12': 'Published Standards/MISRA C 2004/' + """\
20.12 The time handling functions of library <time.h> shall not be used""",
        'CPP_L016': 'All Checks/Language Specific/C and C++/Control Flow/' + """\
The library <time.h> shall not be used""",
        'MISRA23_21.10': 'Published Standards/MISRA C 2023/' + """\
21.10 The Standard Library time and date functions shall not be used""",
    }[id]




def tags(id):
    return {
        'MISRA12_21.10': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Libraries',
        ],
        'MISRA04_20.12': [
            'Language: C',
            'Standard: MISRA C 2004',
            'Category: Required',
            'Libraries',
        ],
        'CPP_L016': [
            'Language: C',
            'Language: C++',
            'Libraries',
        ],
        'MISRA23_21.10': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    desc = """\
<p><b>Amplification</b></p>
<p>None of the facilities that are specified as being provided by &lt;time.h&gt;
shall be used. In C99, the identifier <i>wcsftime</i> shall not be used and no
macro with this name shall be expanded.</p>

<p><b>Rationale</b></p>
<p>The time and date functions have unspecified, undefined and
implementation-defined behaviours associated with them.</p>
"""
    desc1 = """\
<p>Includes <i>time</i>, <i>strftime</i>. This library is associated with clock
times. Various aspects are implementation dependent or unspecified, such as the
formats of times. If any of the facilities of time.h are used then the exact
implementation for the compiler being used must be determined and a deviation
raised.</p>"""
    desc2 = """\
<p><b>Rationale</b></p>
<p>Since the various aspects of time management are implementation dependent,
the use of time libraries should be strictly understood and documented.</p>"""

    desc3 = """\
<p><b>Amplification</b></p>
<p>This rule applies to the functions that are specified as being provided by &lt;time.h&gt; and the function
wcsftime provided by &lt;wchar.h&gt;.</p>
<p>The standard header file &lt;time.h&gt; shall not be #include'd, and none of the features that are
specified as being provided by &lt;time.h&gt; shall be used.</p>
<p>For C99 or later, the function wcsftime shall not be used and no macro with this name shall be
expanded.</p>

<p><b>Rationale</b></p>
<p>The time and date functions have unspecified, undefined and
implementation-defined behaviours associated with them.</p>
"""

    return {
        'MISRA12_21.10': desc,
        'MISRA04_20.12': desc1,
        'CPP_L016': desc2,
        'MISRA23_21.10': desc3,

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_language(language):
    return language == 'C++'

def define_options(check):
    flag_wcsftime = check.id() in ["MISRA12_21.10", "MISRA23_21.10"]

    check.option().checkbox('flag_wcsftime', 'Flag the use of wcsftime function', flag_wcsftime)


def check(check, file):
    flag_wcsftime = check.options().lookup('flag_wcsftime')

    refs = file.filerefs("include", "file")
    for ref in refs:
        if ref.ent().name() == "time.h":
            check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)

    if not flag_wcsftime:
        return

    for call_ref in file.filerefs("Call", "Unresolved Function"):
            if call_ref.ent().name() == "wcsftime":
                check.violation(call_ref.ent(), file, call_ref.line(), call_ref.column(), ERR2)
