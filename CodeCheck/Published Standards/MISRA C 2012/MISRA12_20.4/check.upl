# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-23-16


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Keyword %1 redefined as a MACRO';


# This registers ERR1 with Understand
sub register_tr_text {

  my $check = shift;
  $check->add_tr_text(ERR1);

}

sub checkID { return "MISRA12_20.4";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2012\\20.4 A macro shall not be defined with the same name as a keyword";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Required',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description {
  return '20.4 ( Required ) A macro shall notbe defined with the same name as a keyword.';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"


<p><b>Amplification</b></p>
This rule applies to all keywords, including those that implement language extensions.
</p>

<p><b>Rationale</b></p>
Using macros to change the meaning of keywords can be confusing. The behaviour is undefined if a
standard header is included while a macro is defined with the same name as a keyword.
</p>

<p><b>Example</b></p>
The following example is non-compliant because it alters the behaviour of the int keyword. Including
a standard header in the presence of this macro results in undefined behaviour. 
</p>

<pre><code language="C++">  #define int some_other_type
  #include &lt;stdlib.h&gt;

</code></pre>

<p>
The following example shows that it is non-compliant to redefine the keyword while but it is compliant
to define a macro that expands to statements. 
</p>

<pre><code language="C++">  #define while( E ) for ( ; ( E ) ; )  /* Non-compliant - redefined while  */
  #define unless( E ) if ( ! ( E ) )    /* Compliant                        */

  #define seq( S1, S2 ) do { S1; S2; } while ( false )  /* Compliant        */
  #define compound( S ) { S; }                          /* Compliant        */

</code></pre>

<p>
The following example is compliant in C90, but not C99, because inline is not a keyword in C90.
</p>

<pre><code language="C++">  /* Remove inline if compiling for C90 */
  #define inline

</code></pre>

<p><b>See also</b></p><p>
Rule 21.1
</p>

<p><b>Developer's Note</b></p>
It is not possible to determine which version of C ( C90, C99, C11, etc ) is being used.
Therefore all keywords will be flagged as a violation regardless of which version of C is
being used.
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is run per file
sub test_entity {
  return 1;
}


# This determines if this script is run on the whole project
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options {
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( 'C File' );

  my @macrosDefined = $file->filerefs( 'C Define', 'C Macro', 0 );
  return unless @macrosDefined;

  my %keywords = (
    'auto' => 1,
    'break' => 1,
    'case' => 1,
    'char' => 1,
    'const' => 1,
    'continue' => 1,
    'default' => 1,
    'do' => 1,
    'double' => 1,
    'else' => 1,
    'enum' => 1,
    'extern' => 1,
    'float' => 1,
    'for' => 1,
    'goto' => 1,
    'if' => 1,
    'inline' => 1,
    'int' => 1,
    'long' => 1,
    'register' => 1,
    'restrict' => 1,
    'return' => 1,
    'short' => 1,
    'signed' => 1,
    'sizeof' => 1,
    'static' => 1,
    'struct' => 1,
    'switch' => 1,
    'typedef' => 1,
    'union' => 1,
    'unsigned' => 1,
    'void' => 1,
    'volatile' => 1,
    'while' => 1,
    '_Alignas' => 1,
    '_Alignof' => 1,
    '_Atomic' => 1,
    '_Bool' => 1,
    '_Complex' => 1,
    '_Generic' => 1,
    '_Imaginary' => 1,
    '_Noreturn' => 1,
    '_Static_assert' => 1,
    '_Thread_local' => 1,
    '_Pragma' => 1,
    'asm' => 1,
    'fortran' => 1,
    'elif' => 1,
    'endif' => 1,
    'definedifdef' => 1,
    'ifndef' => 1,
    'define' => 1,
    'undef' => 1,
    'include' => 1,
    'line' => 1,
    'error' => 1,
    'pragma' => 1,
  );

  foreach my $macro ( @macrosDefined ) {
    $check->violation( $macro->ent, $file, $macro->line, $macro->column, ERR1, $macro->ent->name ) if exists $keywords{ $macro->ent->name };
  }

}
