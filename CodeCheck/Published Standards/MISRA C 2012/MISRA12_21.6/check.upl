#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;

use constant ERR1 => 'stdio.h input/output function %2 used in file %1';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_21.6";}


sub name { return "Published Standards\\MISRA C 2012\\21.6 The Standard Library input/output functions shall not be used";}

sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Required',
    'Libraries',
  );
}

sub description { return "21.6 (Required) The Standard Library input/output functions shall not be used";}

sub detailed_description { return <<"END_DESC"
<p><b>Amplification</b></p>
This rule applies to the functions that are specified as being provided by &lt;stdio.h&gt; and, in C99,
their wide-character equivalents specified in Sections 7.24.2 and 7.24.3 of the C99 Standard as being
provided by &lt;wchar.h&gt;.
</p>

<p>
None of these identifiers shall be used and no macro with one of these names shall be expanded.
</p>

<p><b>Rationale</b></p>
Streams and file I/O have unspecified, undefined and implementation-defined behaviours associated
with them.
</p>

<p><b>See also</b></p><p>
Rule 22.1, Rule 22.3, Rule 22.4, Rule 22.5, Rule 22.6
</p>

END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}


sub define_options {
  my $check = shift;
}

my %filesSeen = ();

sub check {
  my $check = shift; 
  my $file = shift;

  my @inOutFunctions = (
    "fprintf","printf","sprintf","vfprintf","vprintf","vsprintf","fscanf","scanf","sscanf","fgetpos","fgetc",
    "fgets","getc","getchar","gets","ungetc","fputc","fputs","putc","putchar","puts","fread","fwrite"
    );

  

  return unless $file->kind->check("c file ~unknown ~unresolved");

 	foreach my $libFuncs($file->filerefs("C Call","Function")){
 		if( grep {$_ eq $libFuncs->ent->name} @inOutFunctions ){
 			my $libUsed = includeCheck($file,$check);
      if($libUsed){
        $check->violation($libFuncs->ent,$file,$libFuncs->line,$libFuncs->column,ERR1,$file->name,$libFuncs->ent->name);
      }
    }
 	}
}

sub includeCheck {
  my $file = shift;
  my $check = shift;
  
  if($file->name eq "stdio.h" || $file->name eq "wchar.h"){
    return 1;
  }
  my @refs = $file->refs("include","file",1);
  $check->yield();
  foreach my $ref (@refs){
    next if $filesSeen{ $ref->ent->uniquename } == 1;
    $filesSeen{ $ref->ent->uniquename } = 1;
    return 1 if includeCheck($ref->ent, $check);
  }
  return 0;
}
