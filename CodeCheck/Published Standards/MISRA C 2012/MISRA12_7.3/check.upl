# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 10-27-14


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Lowercase character "L" used in literal suffix %1';


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_7.3";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2012\\7.3 The lowercase character L shall not be used in a literal suffix";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Required',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description {
  return '7.3 ( Required ) The lowercase character "L" shall not be used in a literal suffix.';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b></p>
Using the uppercase suffix "L" removes the potential ambiguity between "1" (digit 1) and "l" (letter "el")
when declaring literals.
</p>

<p><b>Example</b></p>
<i>Note</i>: the examples containing the <i>long long</i> suffi x are applicable only to C99.
</p>

<pre><code language="C++">const int64_t a = 0L;
const int64_t b = 0l;       /* Non-compliant */
const uint64_t c = 0Lu;
const uint64_t d = 0lU;     /* Non-compliant */
const uint64_t e = 0ULL;
const uint64_t f = 0Ull;    /* Non-compliant */
const int128_t g = 0LL;
const int128_t h = 0ll;      /* Non-compliant */
const float128_t m = 1.2L;
const float128_t n = 2.4l;  /* Non-compliant */

</code></pre>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the check and file from calling function, return unless file
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'file' );
  
  # Pull all lexemes for this file
  my $lexer = $file->lexer( 0 );
  my @lexemes = $lexer->lexemes if $lexer;
  
  # Loop through all lexemes
  foreach my $lexeme ( @lexemes ) {
    return if $check->is_abort();

    # Next unless we are looking at a literal that is not a string
    next unless $lexeme->token eq 'Literal';
    next if $lexeme->text =~ /\'\"/;

    # Create test phrase through regex
    my $suffix = $lexeme->text;
    $suffix =~ s/(^0[0-8]+)|(^0x[0-9a-fA-F]+)|(^[1-9][0-9]*\.[0-9]+)|(^[1-9][0-9]*)//;

    # Test test phrase
    $check->violation( $file, $file, $lexeme->line_begin, $lexeme->column_begin, ERR1, $lexeme->text ) if $suffix =~ /l/;

  }
}
