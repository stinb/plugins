# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 1/26/17


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Function like Macro has an argument that looks like a preprocessing directive in file %1';


# This registers ERR1 with Understand
sub register_tr_text {

  my $check = shift;
  $check->add_tr_text(ERR1);

}


sub checkID { return "MISRA12_20.6";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2012\\20.6 Tokens that look like a preprocessing directive shall not occur within a macro argument";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Required',
    'Preprocessor',
  );
}

# This is the full description of the rule being tested
sub description {
  return '20.6 ( Required ) Tokens that look like a preprocessing directive shall not occur within a macro argument.';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"


<p><b>Rationale</b></p>
An argument containing sequences of tokens that would otherwise act as preprocessing directives
leads to undefined behaviour.
</p>

<p><b>Example</b></p>
</p>

<pre><code language="C++">  #define M( A ) pri ntf ( #A )

  #include &lt;stdio.h&gt;

  void main ( void )
  {
    M (
  #ifdef SW /* Non-compliant */
      "Message 1"
  #else /* Non-compliant */
      "Message 2"
  #endif /* Non-compliant */
    );
  }

</code></pre>

<p>
The above may print
</p>

<pre><code language="C++">  #ifdef SW "Message 1" #else "Message 2" #endif

</code></pre>

<p>
or
</p>

<pre><code language="C++">  "Message 2"

</code></pre>

<p>
or exhibit some other behaviour.
</p>


END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is run per file
sub test_entity {
  return 1;
}


# This determines if this script is run on the whole project
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options {
}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Loop through all macros and check and check if they are functional
  my @macroFuncs = $file->filerefs("Use","macro functional");

  # Start loop of functional macros found
  MAC: foreach my $macro(@macroFuncs) {

    # Set flag for beginning of macro and initialize the lexer
    my $lexeme = $macro->lexeme;

    # Look around to determine if we are calling the marco or using it in another way
    next MAC if $lexeme->prevUseful and $lexeme->prevUseful->token eq 'Preprocessor' and $lexeme->prevUseful->line_begin == $lexeme->line_begin;
    next MAC if $lexeme->nextUseful->text ne '(';

    # Move lexeme into the paramters of the calling macro and create a counter to track position
    $lexeme = $lexeme->nextUseful;
    my $counter = 0;

    # Start pulling lexemes one at a time to test if arguments look like preprocessing directives
    while ( $lexeme ){

      if ( $lexeme->token eq "Preprocessor" ) {
        throwError($check, $macro->ent, $file, $macro->line, $macro->column, ERR1, $file->name);
        next MAC;
      }

      # This counter control counts opening ( and closing ) to test if we are at the end of a Macro function call.
      $counter++ if $lexeme->text eq "(";
      $counter-- if $lexeme->text eq ")";
      next MAC if $counter == 0;

      $lexeme = $lexeme->next;

    }
  }
}
