#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;


use constant ERR1 => 'fenv.h function %2 used in file %1';
use constant ERR2 => 'fenv.h macro %2 used in file %1';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_21.12";}


sub name { return "Published Standards\\MISRA C 2012\\21.12 The exception handling features of <fenv.h> should not be used";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Advisory',
    'Libraries',
    'Exception Handling',
  );
}

sub description { return "21.12 (Advisory) The exception handling features of &lt;fenv.h&gt; should not be used";}

sub detailed_description { return <<"END_DESC"
<p><b>Amplification</b></p>
The identifiers <i>feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag</i> and <i>fetestexcept</i> shall not be
used and no macro with one of these names shall be expanded.
</p>

<p>
The macros FE_INEXACT, FE_DIVBYZERO, FE_UNDERFLOW, FE_OVERFLOW, FE_INVALID and FE_ALL_EXCEPT,
along with any implementation-defined floating-point exception macros, shall not be used.
</p>

<p><b>Rationale</b></p>
In some circumstances, the values of the floating-point status flags are unspecified and attempts to
access them may lead to undefined behaviour.
</p>

<p>
The order in which exceptions are raised by the feraiseexcept function is unspecified and could
therefore result in a program that has been designed for a certain order not operating correctly
</p>

<p>
The order in which exceptions are raised by the <i>feraiseexcept</i> function is unspecified and could
therefore result in a program that has been designed for a certain order not operating correctly.
</p>

<p><b>Example</b></p><pre><code language="C++">  #include &lt;fenv.h&gt;

  void f ( float32_t x, float32_t y )
  {
    float32_t z;

    feclearexcept ( FE_DIVBYZERO ); /* Non-compliant */

    z = x / y;

    if ( fetestexcept ( FE_DIVBYZERO ) ) /* Non-compliant */
    {
    }

    else
    {
  #pragma STDC FENV_ACCESS ON
    z = x * y;
  }

  if ( z &gt; x )
  {
  #pragma STDC FENV_ACCESS OFF
    if ( fetestexcept ( FE_OVERFLOW ) ) /* Non-compliant */
    {
    }
   }
  }
</code></pre>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

sub define_options {
  my $check = shift;
  $check->option->checkbox( 'oneViolation', 'Limit one violation per file?', 0 );
}

our %seen;
sub check {
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file ~unknown ~unresolved");
 	foreach my $libFuncs($file->filerefs("","Function")){
 		if($libFuncs->ent->name eq "feclearexcept" || $libFuncs->ent->name eq "fegetexceptflag" || $libFuncs->ent->name eq "feraiseexcept" || $libFuncs->ent->name eq "fesetexceptflag" || $libFuncs->ent->name eq "fetestexcept" ){
 			my $libUsed = includeCheck($file,$check);
      if($libUsed){
        $check->violation($libFuncs->ent,$file,$libFuncs->line,$libFuncs->column,ERR1,$file->name,$libFuncs->ent->name);
      }
    }
 	}
  foreach my $libFuncs($file->filerefs("","Macro")){
    if($libFuncs->ent->name eq "FE_INEXACT" || $libFuncs->ent->name eq "FE_DIVBYZERO" || $libFuncs->ent->name eq "FE_UNDERFLOW" || $libFuncs->ent->name eq "FE_OVERFLOW" || $libFuncs->ent->name eq "FE_INVALID" || $libFuncs->ent->name eq "FE_ALL_EXCEPT"){
      my $libUsed = includeCheck($file,$check);
      if($libUsed){
        $check->violation($libFuncs->ent,$file,$libFuncs->line,$libFuncs->column,ERR2,$file->name,$libFuncs->ent->name);
      }
    }
  }
  %seen=();
}

sub includeCheck {
  my $file = shift;
  my $check = shift;
  
  if ($seen{$file->id}){
    return 0;
  }
  $seen{$file->id}=1 if $check->option->lookup( 'oneViolation' );
  if($file->name eq "fenv.h"){
    return 1;
  }
  my @refs = $file->refs("include","file",1);
  foreach my $ref (@refs){
    return 1 if includeCheck($ref->ent, $check);
  }
}
