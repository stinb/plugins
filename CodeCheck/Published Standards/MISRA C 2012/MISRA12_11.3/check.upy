# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10/15/24

import re
import Modules

ERR1 = 'Cast between pointer to object type and a pointer to a different object type'


# The ID for the check
def ids():
    return ('MISRA12_11.3', 'MISRA23_11.3', 'CPP_E080')

# The short name of the check
def name(id):
    return {
        'MISRA12_11.3': 'Published Standards/MISRA C 2012/' + """\
11.3 A cast shall not be performed between a pointer to object type and a pointer to a different object type""",
        'MISRA23_11.3': 'Published Standards/MISRA C 2023/' + """\
11.3 A cast shall not be performed between a pointer to object type and a pointer to a different object type""",
        'CPP_E080': 'All Checks/Language Specific/C and C++/Expressions/' + """\
A cast shall not be performed between a pointer to object type and a pointer to a different object type""",
    }[id]




def tags(id):
    return {
        'MISRA12_11.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Expressions',
        ],
        'MISRA23_11.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Expressions',
        ],
        'CPP_E080': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    desc = """\
<p><b>Amplification</b></p>
<p>This rule applies to the unqualified types that are pointed to by the
pointers.</p>
<p><b>Rationale</b></p>
<p>Casting a pointer to object into a pointer to a different object may result
in a pointer that is not correctly aligned, resulting in undefined behaviour.
</p>
<p>Even if conversion is known to produce a pointer that is correctly aligned,
the behaviour may be undefined if that pointer is used to access an object. For
example, if an object whose type is int is accessed as a short the behaviour is
undefined even if int and short have the same representation and alignment
requirements. See C90 Section 6.3, C99 Section 6.5, paragraph 7 for details.</p>
<p><b>Exception</b></p>
<p>It is permitted to convert a pointer to object type into a pointer to one of
the object types char, signed char or unsigned char. The Standard guarantees
that pointers to these types can be used to access the individual bytes of an
object.</p>
<p><b>Example</b></p>
<pre><code language="C++">uint8_t *p1;
uint32_t *p2;
/* Non-compliant - possible incompatible alignment */
p2 = ( uint32_t * ) p1;
extern uint32_t read_value ( void );
extern void print ( uint32_t n );
void f ( void )
{
uint32_t u = read_value ( );
uint16_t *hi_p = ( uint16_t * ) &u; /* Non-compliant even though
* probably correctly aligned */
*hi_p = 0; /* Attempt to clear high 16-bits on big-endian machine */
print ( u ); /* Line above may appear not to have been performed */
}</pre></code>
<p>The following example is compliant because the rule applies to the
unqualified pointer types. It does not prevent type qualifiers from being added
to the object type.</p>
<pre><code language="C++">const short *p;
const volatile short *q;
q = ( const volatile short * ) p; /* Compliant */</code></pre>
<p>The following example is non-compliant because the unqualified pointer types
are different, namely "pointer to const-qualified int" and "pointer to int".</p>
<pre><code language="C++">int * const * pcpi;
const int * const * pcpci;
pcpci = ( const int * const * ) pcpi;</code></pre>
"""
    return {
        'MISRA12_11.3': desc,
        'MISRA23_11.3': desc,
        'CPP_E080': desc,

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    lexer = None
    refs = file.filerefs('Define', 'Object')
    for ref in refs:
        if not '*' in str(ref.ent().type()) or re.search(r'\*\)', str(ref.ent().type())):
            continue
        setRefs = ref.ent().refs('Setby ~Deref')
        type0 = ref.ent().freetext("UnderlyingType")
        if not type0:
            continue
        type0 = type0.lower()
        if 'const' in type0 and not re.search(r'\*\s*const', type0):
            type0 = re.sub(r'const', '', type0)
        else:
            type0 = re.sub(r'\*\s*const', '*', type0)
        type0 = re.sub(r'\[\d*\]', '', type0)
        type0 = remove_parentheses(type0)
        type0 = re.sub(r'(volatile|struct|restrict)|[^a-z\d]', '', type0)
        

        for setRef in setRefs:
            if not lexer:
                if not file.lexer():
                    return
                lexer = file.lexer()
            lexeme = lexer.lexeme(setRef.line(), setRef.column())
            while lexeme and not re.match(r'=|;|{|}', lexeme.text()):
                lexeme = lexeme.next(True, True)

            if lexeme and lexeme.text() == '=':
                prevLex = lexeme
                line = lexeme.line_begin()
                while lexeme and not re.match(r';|{|}|,', lexeme.text()) and lexeme.line_begin() == line:
                    if lexeme.text() == '(' or lexeme.text() == '[':
                        lexeme = Modules.findClose(lexeme)
                        if not lexeme:
                            break
                        lexeme = lexeme.next(True, True)
                        continue
                    if lexeme.text() == ')':
                        break
                    # Look for ents
                    if lexeme.ent():
                        nextLex = lexeme.next(True, True)
                        if nextLex and (nextLex.text() in ['->', '.', '['] or nextLex.token() == 'Operator'):
                            lexeme = nextLex
                            continue
                        # Remove volatile keywords
                        type1 = lexeme.ent().freetext("UnderlyingType")
                        if not type1:
                            lexeme = nextLex 
                            continue
                        type1 = type1.lower()
                        if ('*' not in type1 and prevLex.text() != '&') or re.search(r'\*\)', type1):
                            lexeme = nextLex
                            continue
                        if not re.search(r'const|volatile|restrict', type1) and 'char' in type0:
                            lexeme = nextLex 
                            continue
                        if 'const' in type1 and not re.search(r'\*\s*const', type1):
                            type1 = re.sub(r'const', '', type1)
                        else:
                            type1 = re.sub(r'\*\s*const', '*', type1)
                        type1 = re.sub(r'\[\d*\]', '', type1)
                        type1 = remove_parentheses(type1)
                        type1 = re.sub(r'(volatile|struct|restrict)|[^a-z\d]', '', type1)

                        # Check if types are the same
                        if type0 != type1 and not 'void' in type0 + type1 and type0 not in ['char', 'signedchar', 'unsignedchar']:
                            check.violation(ref.ent(), file, setRef.line(), setRef.column(), ERR1)
                            break
                    prevLex = lexeme
                    lexeme = lexeme.next(True, True)

def remove_parentheses(s):
    while True:
        s, n = re.subn(r'\([^()]*\)', '', s)
        if n == 0:
            break
    return s
