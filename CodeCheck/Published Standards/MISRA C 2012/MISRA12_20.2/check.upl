#This script is designed to run with Understand - CodeCheck
# Written by Blake Knudsen
use base ("Understand::Codecheck");
use strict;


use constant ERR1 => 'Non recommended characters used in Header File name.';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_20.2";}


sub name { return "Published Standards\\MISRA C 2012\\20.2 The ', \" or backslash characters and the /* or // character sequences shall not occur in a header file name";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Required',
    'Preprocessor',
  );
}

sub description { return "20.2 (Required) The ',\" or backslash; characters and the /* or // character sequences shall not occur in a header file name";}

sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b></p>
The behaviour is undefined if:
</p>

<ul>
  <li>
    The ', " or \ characters, or the /* or // character sequences are used between &lt; and &gt;
    delimiters in a header name preprocessing token;
  </li>
  <li>
    The ' or \ characters, or the /* or // character sequences are used between the " delimiters
    in a header name preprocessing token.
  </li>
</ul>

<p>
<i>Note:</i> although use of the \ character results in undefined behaviour, many implementations will
accept the / character in its place.
</p>

<p><b>Example</b></p><pre><code language="C++">#include "fi'le.h" /* Non-compliant */
</code></pre>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

sub define_options {
  my $check = shift;
}

sub check {
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file ~unknown ~unresolved");
 	foreach my $libHeader($file->filerefs("C include","Header File", 0)){
    my $lexeme = $libHeader->lexeme();

    while($lexeme && $lexeme->token() ne "String"){
      $lexeme = $lexeme->next();
    }

 		if($lexeme && $lexeme->text() =~ /([\']{1}|[\\]{1}|[\/]{2}|(\/\*))/g ){
      $check->violation($libHeader->ent,$file,$libHeader->line,$libHeader->column,ERR1);
    }
 	}
}

