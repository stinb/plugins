#This script is designed to run with Understand - CodeCheck
# Written by Jordan Colbeth
# 12/01/22

ERR1 = 'stdlib.h function %2 used in file %1'

# The ID for the check
def ids():
    return ('MISRA12_21.9', 'MISRA23_21.9')

# The short name of the check
def name(id):
    return {
        'MISRA12_21.9': 'Published Standards\\MISRA C 2012\\21.9 The library functions bsearch and qsort of <stdlib.h> shall not be used',
        'MISRA23_21.9': 'Published Standards\\MISRA C 2023\\21.9 The library functions bsearch and qsort of <stdlib.h> shall not be used',
    }[id]




def tags(id):
    return {
        'MISRA12_21.9': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Libraries',
        ],
        'MISRA23_21.9': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Libraries',
        ],
    }.get(id)

# The short description of the check
def description():
    return '21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h&gt; shall not be used'

# The long description of the check
def detailed_description():
    return """\
<p><b>Amplification</b></p>
The identifiers bsearch and qsort shall not be used and no macro with one of these names shall be
expanded.
</p>

<p><b>Rationale</b></p>
If the comparison function does not behave consistently when comparing elements, or it modifies any
of the elements, the behaviour is undefined.
</p>

<p>
Note: the unspecified behaviour, which relates to the treatment of elements that compare as equal,
can be avoided by ensuring that the comparison function never returns 0. When two elements are
otherwise equal, the comparison function could return a value that indicates their relative order in
the initial array. 
</p>

<p>
The implementation of <i>qsort</i> is likely to be recursive and will therefore place unknown demands on
stack resource. This is of concern in embedded systems as the stack is likely to be a fixed, often small,
size.
</p>
"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_call in file.filerefs("C Call", "C Function"):
        ent = func_call.ent()

        if ent.name() == "qsort" or ent.name() == "bsearch":
            check.violation(ent, file, func_call.line(), func_call.column(), ERR1, file, ent.name())
