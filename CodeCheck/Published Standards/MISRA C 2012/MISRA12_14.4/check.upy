# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10/31/24

import re
import Modules

ERR1 = 'Controlling expression does not have essentially Boolean type'


# The ID for the check
def ids():
    return ('MISRA12_14.4', 'MISRA23_14.4', 'CPP_E083')

# The short name of the check
def name(id):
    return {
        'MISRA12_14.4': 'Published Standards/MISRA C 2012/' + """\
14.4 The controlling expression of an if statement and the controlling \
expression of an iteration-statement shall have essentially Boolean type""",
        'MISRA23_14.4': 'Published Standards/MISRA C 2023/' + """\
14.4 The controlling expression of an if statement and the controlling \
expression of an iteration-statement shall have essentially Boolean type""",
        'CPP_E083': 'All Checks/Language Specific/C and C++/Expressions/' + """\
The controlling expression of an if statement and the controlling expression of\
 an iteration-statement shall have essentially Boolean type""",
    }[id]




def tags(id):
    return {
        'MISRA12_14.4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Expressions',
        ],
        'MISRA23_14.4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Expressions',
        ],
        'CPP_E083': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    desc = """\
<p><b>Amplification</b></p>
<p>The controlling expression of a for statement is optional. The rule does not
require the expression to be present but does require it to have essentially
Boolean type if it is present.</p>
<p><b>Rationale</b></p>
<p>Strong typing requires the controlling expression of an if statement or
iteration-statement to have essentially Boolean type.</p>
<p><b>Example</b></p>
<pre><code language="C++">int32_t *p, *q;
while ( p ) /* Non-compliant - p is a pointer */
{
}
while ( q != NULL ) /* Compliant */
{
}
while ( true ) /* Compliant */
{
}
extern bool_t flag;
while ( flag ) /* Compliant */
{
}
int32_t i;
if ( i ) /* Non-compliant */
{
}
if ( i != 0 ) /* Compliant */
{
}</pre></code>
"""
    return {
        'MISRA12_14.4': desc,
        'MISRA23_14.4': desc,
        'CPP_E083': desc,

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    if not file.lexer():
        return
    lexer = file.lexer()
    lexemes = lexer.lexemes()
    statements = ['if', 'while']
    compliant = ['==', '!=', '>', '<', '>=', '<=', '&&', '&', '||', '|', '!', 'false', 'true']

    for lexeme in lexemes:
        if lexeme.text() in statements:
            ok = False
            # Save line and column for violation
            line = lexeme.line_begin()
            column = lexeme.column_begin()
            lexeme = lexeme.next(True, True)
            if lexeme and lexeme.text() == '(':
                close = Modules.findClose(lexeme)
                while lexeme and close and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.column_begin()):
                    # Look for bool
                    if lexeme.text() in compliant or (lexeme.ent() and 'bool' in str(lexeme.ent().type()).lower()):
                        ok = True

                    lexeme = lexeme.next(True, True)


            if not ok:
                check.violation(file, file, line, column, ERR1)
