# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 7/10/24

import re
import Modules

ERR1 = 'Element of the object %1 initialized more than once'


# The ID for the check
def ids():
    return ('MISRA12_9.4', 'MISRA23_9.4', 'CPP_DD020')

# The short name of the check
def name(id):
    return {
        'MISRA12_9.4': 'Published Standards/MISRA C 2012/9.4 An element of an object shall not be initialized more than once',
        'MISRA23_9.4': 'Published Standards/MISRA C 2023/9.4 An element of an object shall not be initialized more than once',
        'CPP_DD020': 'All Checks/Language Specific/C and C++/Declarations and Definitions/An element of an object shall not be initialized more than once',
    }[id]




def tags(id):
    return {
        'MISRA12_9.4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'MISRA23_9.4': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'CPP_DD020': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA12_9.4': """\
<p><b>Rationale</b></p>
<p>Care is required when using designated initializers since the initialization
of object elements can be inadvertently repeated leading to overwriting of
previously initialized elements. The C99 Standard does not specify whether the
side eff ects in an overwritten initializer occur or not although this is not
listed in Annex J.</p>
<p>In order to allow sparse arrays and structures, it is acceptable to only
initialize those which are necessary to the application.</p>
<p><b>Example</b></p>
<p>Array initialization:</p>
<pre><code language="C++">/*
 * Required behaviour using positional initialization
 * Compliant - a1 is -5, -4, -3, -2, -1
 */
int16_t a1[ 5 ] = { -5, -4, -3, -2, -1 };
/*
 * Similar behaviour using designated initializers
 * Compliant - a2 is -5, -4, -3, -2, -1
 */
int16_t a2[ 5 ] = { [ 0 ] = -5, [ 1 ] = -4, [ 2 ] = -3,
                    [ 3 ] = -2, [ 4 ] = -1              };
/*
 * Repeated designated initializer element values overwrite earlier ones
 * Non-compliant - a3 is -5, -4, -2, 0, -1
 */
int16_t a3[ 5 ] = { [ 0 ] = -5, [ 1 ] = -4, [ 2 ] = -3,
                    [ 2 ] = -2, [ 4 ] = -1              };</code></pre>
<p>In the following non-compliant example, it is unspecified whether the side
effect occurs or not:</p>
<pre><code language="C++">uint16_t *p;
void f ( void )
{
  uint16_t a[ 2 ] = { [ 0 ] = *p++, [ 0 ] = 1 };
}</code></pre>
<p>Structure initialization:</p>
<pre><code language="C++">struct mystruct
{
  int32_t a;
  int32_t b;
  int32_t c;
  int32_t d;
};
/*
 * Required behaviour using positional initialization
 * Compliant - s1 is 100, -1, 42, 999
 */
struct mystruct s1 = { 100, -1, 42, 999 };
/*
 * Similar behaviour using designated initializers
 * Compliant - s2 is 100, -1, 42, 999
 */
struct mystruct s2 = { .a = 100, .b = -1, .c = 42, .d = 999 };
/*
 * Repeated designated initializer element values overwrite earlier ones
 * Non-compliant - s3 is 42, -1, 0, 999
 */
struct mystruct s3 = { .a = 100, .b = -1, .a = 42, .d = 999 };</code></pre>""",
    'MISRA23_9.4': """\
<p>The provision of designated initializers allows the naming of the components
of an aggregate (structure or array) or of a union to be initialized within an
initializer list and allows the objectâ€™s elements to be initialized in any order
by specifying the array indices or structure member names they apply to
(elements having no initialization value assume the default for uninitialized
objects).</p>
<p>A designator can specify elements to be initialized in a different syntactic
sequence from their order within the object layout. An initializer without a
designator will always initialize the next subobject within the object layout.
</p>
<p>Care is required when using designated initializers since the initialization
of object elements can be inadvertently repeated. The C Standard specifies that
the value produced by the syntactically-last initializer referring to an element
in the list is used, overriding any preceding initializers for that element. The
Standard leaves unspecified whether overridden initializers are evaluated, and
therefore whether or not any side effects in the initializing expressions occur
or not. This is not listed in Annex J of the C Standard.</p>
<p>In order to allow sparse arrays and structures, it is acceptable to only
initialize those which are necessary to the application.</p>
<p><b>Example</b></p>
<p>Array initialization:</p>
<pre><code language="C++">/*
* Required behaviour using positional initialization
* Compliant - a1 is -5, -4, -3, -2, -1
*/
int16_t a1[ 5 ] = { -5, -4, -3, -2, -1 };
/*
* Similar behaviour using designated initializers
* Compliant - a2 is -5, -4, -3, -2, -1
*/
int16_t a2[ 5 ] = { [ 0 ] = -5, [ 1 ] = -4, [ 2 ] = -3,
[ 3 ] = -2, [ 4 ] = -1 };
/*
* Repeated designated initializer element values overwrite earlier ones
* Non-compliant - a3 is -5, -4, -2, 0, -1
*/
int16_t a3[ 5 ] = { [ 0 ] = -5, [ 1 ] = -4, [ 2 ] = -3,
[ 2 ] = -2, [ 4 ] = -1 };</code></pre>

<p>In the following non-compliant example, it is unspecified whether the side
effect occurs or not:</p>
<pre><code language="C++">uint16_t *p;
void f ( void )
{
uint16_t a[ 2 ] = { [ 0 ] = *p++, [ 0 ] = 1 };
}
Structure initialization:
struct mystruct
{
int32_t a;
int32_t b;
int32_t c;
int32_t d;
};
/*
* Required behaviour using positional initialization
* Compliant - s1 is 100, -1, 42, 999
*/
struct mystruct s1 = { 100, -1, 42, 999 };
/*
* Similar behaviour using designated initializers
* Compliant - s2 is 100, -1, 42, 999
*/
struct mystruct s2 = { .a = 100, .b = -1, .c = 42, .d = 999 };
/*
* Repeated designated initializer element values overwrite earlier ones
* Non-compliant - s3 is 42, -1, 0, 999
*/
struct mystruct s3 = { .a = 100, .b = -1, .a = 42, .d = 999 };
/*
* Positional initializer element values can overwrite earlier ones
* if preceded by a designated element out of sequence
* Non-compliant - s4 is 1, 4, 3, 0
*/
struct mystruct s4 = { .b = 2, .c = 3, .a = 1, /* b */ 4 };</code></pre>
""",
    'CPP_DD020': """\
An element of an object shall not be initialized more than once""",

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    refs = file.filerefs('Set Init', 'Object ~Unknown ~Unresolved')
    lexer = None
    # Look for array set inits
    for ref in refs:
        if not lexer:
            if not file.lexer():
                return
            lexer = file.lexer()
        lexeme = lexer.lexeme(ref.line(), ref.column())
        # Find equals
        while lexeme and lexeme.text() not in ['=', ';']:
            lexeme = lexeme.next(True, True)
        if lexeme and lexeme.text() == '=':

            lexeme = lexeme.next(True, True)
            # Check each set including nested sets
            if lexeme and lexeme.text() == '{':
                lexeme = checkList(lexeme, check, ref)



# Recursive check inside sets of curly braces
def checkList(lexeme, check, ref):
    currentIndex = ''
    indices = []
    end = Modules.findClose(lexeme)
    lexeme = lexeme.next(True, True)

    # Go through to close
    while lexeme and not (lexeme.line_begin() == end.line_begin() and lexeme.column_begin() == end.column_begin()):
        lastLex = lexeme
        currentIndex += lexeme.text()
        if lexeme.text() == ',':
            currentIndex = ''
        elif lexeme.text() == '=' and lexeme.token() != 'String':
            # If index already exists in list then throw violation
            if currentIndex in indices:
                check.violation(ref.ent(), ref.file(), ref.line(), ref.column(), ERR1, ref.ent().name())
            else:
                indices.append(currentIndex)
        # Recurse if nested list found
        elif lexeme.text() == '{':
            lexeme = checkList(lexeme, check, ref)
        # Skip to closing parenthesis
        elif lexeme.text() == '(':
            close = Modules.findClose(lexeme)
            while lexeme and close and not (lexeme.line_begin() == close.line_begin() and lexeme.column_begin() == close.column_begin()):
                currentIndex += lexeme.text()
                lexeme = lexeme.next(True, True)
            if lexeme and (lexeme.line_begin() > end.line_begin() or (lexeme.line_begin() == end.line_begin() and lexeme.column_begin() > end.column_begin())):
                return lexeme
        # If lexeme didn't change then get next
        if lexeme and lastLex.line_begin() == lexeme.line_begin() and lastLex.column_begin() == lexeme.column_begin():
            lexeme = lexeme.next(True, True)

    return lexeme
