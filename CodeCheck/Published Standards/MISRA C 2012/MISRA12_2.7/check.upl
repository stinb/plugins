#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-19-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => "Unused unused parameter %1";


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_2.7";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2012\\2.7 There should be no unused parameters in functions";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Advisory',
    'Variables',
    'Functions',
  );
}

# This is the full description of the rule being tested
sub description {
  return "2.7 ( Advisory ) There should be no unused parameters in functions.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b></p>
Most functions will be specified as using each of their parameters. If a function parameter is unused,
it is possible that the implementation of the function does not match its specification. This rule
highlights such potential mismatches.</p>

<p><b>Example</b></p>

<pre><code language="C++">  void withunusedpara ( uint1 6_t *para1,
                        int16_t unusedpara ) /* Non-compliant - unused */
  {
    *para1 = 42U;
  }

</code></pre>
END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'file' );

  # Pull all parameters, return if non exists
  my @perametersDefined = $file->filerefs( 'Define', 'Parameter ~unnamed');
  return unless @perametersDefined;
  
  # Check that each parameter is use
  foreach my $perameter ( @perametersDefined ) {

    # Special cast functions defined with ellipsis notation
    next if $perameter->ent->name eq '...';

    # Pull all possible use references and throw error if none
    my @parameterUses = $perameter->ent->refs( 'Setby, Useby, Callby, Modifyby' );
    throwError( $check, $perameter->ent, $file, $perameter->line, $perameter->column, ERR1, $perameter->ent->name ) unless 0 + @parameterUses > 0;
    

  }
}
