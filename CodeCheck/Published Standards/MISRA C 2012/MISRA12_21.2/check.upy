#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# Converted from perl to python by Ian Reed November 2023.
import re

ERR1 = 'Reserved Identifier, Macro, or Function declared in file %1'


def ids():
    return ('MISRA12_21.2', 'MISRA23_21.2', 'CPP_I016')


def name(id):
    return {
        'MISRA12_21.2': 'Published Standards/MISRA C 2012/21.2 Reserved Identifiers or Macros',
        'MISRA23_21.2': 'Published Standards/MISRA C 2023/21.2 Reserved Identifiers or Macros',
        'CPP_I016': 'All Checks/Language Specific/C and C++/Identifiers/Reserved Identifiers or Macros',
    }[id]


def tags(id):
    return {
        'MISRA12_21.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'MISRA23_21.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
        'CPP_I016': [
            'Language: C',
            'Language: C++',
            'Declarations and Definitions',
            'Identifiers',
        ],
    }.get(id)


def detailed_description():
  return """
<p><b>Amplification</b></p>
See the Amplification for Rule 21.1 for a description of the relevant identifiers and macro names.
</p>

<p><b>Rationale</b></p>
The implementation is permitted to rely on reserved identifiers behaving as described in The Standard
and may treat them specially. If reserved identifiers are reused, the program may exhibit undefined
behaviour.
</p>


<p><b>Example</b></p>
<p>In the following non-compliant example, the function memcpy is declared explicitly. The compliant
  method of declaring this function is to include &lt;string.h&gt;.</p>

<pre><code language="C++">

  /*
   * Include &lt;stddef.h&gt; to define size_t
   */
  #include &lt;stddef.h&gt;
  extern void *memcpy ( void *restrict s1, const void *restrict s2, size_t n );
</code></pre>

<p>An implementation is permitted to provide a function-like macro definition for each Standard Library
  function in addition to the library function itself. This feature is often used by compiler writers to
  generate efficient inline operations in place of the call to a library function. Using a function-like macro,
  the call to a library function can be replaced with a call to a reserved function that is detected by the
  compiler’s code generation phase and replaced with the inline operation. For example, the fragment
  of &lt;math.h&gt; that declares sqrt might be written using a function-like macro that generates a call to
  _BUILTIN_sqrt which is replaced with an inline SQRT instruction on processors that support it:</p>

  <pre><code language="C++">extern double sqrt ( double x );

  #define sqrt( x ) ( _BUILTIN_sqrt ( x ) )

  The following non-compliant code might interfere with the compiler’s built-in mechanism for handling
  sqrt and therefore produce undefined behaviour:

  #define _BUILTIN_sqrt( x ) ( x )   /* Non-compliant */
  #include &lt;math.h&gt;

  float64_t x = sqrt ( ( float64_t ) 2.0 ); /* sqrt may not behave as
                         * defined in The Standard */
</code></pre>
"""

# This section defines the programming language this script is testing
def test_language(language):
  return language == 'C++'

# This determines if this script is per file
def test_entity(ent):
  return ent.kind().check("C Code File, C Header File")

# This determines if this script is per project or per file
def test_global():
  return False

# This is the actual test being performed on the user's code
def check(check, file):
  #define my array of reserved keywords
  reservedNames = ["abort", "abs", "acos", "asctime", "asin", "atan", "atan2", "atexit",
                       "atof", "atoi", "atol", "bsearch", "btowc", "calloc", "ceil", "clearerr",
             "clock", "cos", "cosh", "ctime", "difftime", "div", "exit", "exp", "fabs",
             "fclose", "feof", "ferror", "fflush", "fgetc", "fgetpos", "fgets",
             "fgetwc", "fgetws", "floor", "fmod", "fopen", "fprintf", "fputc", "fputs",
             "fputwc", "fputws", "fread", "free", "freopen", "frexp", "fscanf", "fseek",
             "fsetpos", "ftell", "fwide", "fwprintf", "fwrite", "fwscanf", "getc",
             "getchar", "getenv", "gets", "getwc", "getwchar", "gmtime", "isalnum",
             "isalpha", "iscntrl", "isdigit", "isgraph", "islower", "isprint",
             "ispunct", "isspace", "isupper", "iswalnum", "iswalpha", "iswcntrl",
             "iswctype", "iswdigit", "iswgraph", "iswlower", "iswprint", "iswpunct",
             "iswspace", "iswupper", "iswxdigit", "isxdigit", "labs", "ldexp", "ldiv",
             "localeconv", "localtime", "log", "log10", "longjmp", "malloc", "mblen",
             "mbrlen", "mbrtowc", "mbsinit", "mbsrtowcs", "mbstowcs", "mbtowc", "memchr",
             "memcmp", "memcpy", "memmove", "memset", "mktime", "modf", "perror", "pow",
             "printf", "putc", "putchar", "puts", "putwc", "putwchar", "qsort", "raise",
             "rand", "realloc", "remove", "rename", "rewind", "scanf", "setbuf",
             "setlocale", "setvbuf", "signal", "sin", "sinh", "sprintf", "sqrt", "srand",
             "sscanf", "strcat", "strchr", "strcmp", "strcoll", "strcpy", "strcspn",
             "strerror", "strftime", "strlen", "strncat", "strncmp", "strncpy", "strpbrk",
             "strrchr", "strspn", "strstr", "strtod", "strtok", "strtol", "strtoul",
             "strxfrm", "swprintf", "swscanf", "system", "tan", "tanh", "time", "tmpfile",
             "tmpnam", "tolower", "toupper", "towctrans", "towlower", "towupper", "ungetc",
             "ungetwc", "vfprintf", "vfwprintf", "vprintf", "vsprintf", "vswprintf",
             "vwprintf", "wcrtomb", "wcscat", "wcschr", "wcscmp", "wcscoll", "wcscpy",
             "wcscspn", "wcsftime", "wcslen", "wcsncat", "wcsncmp", "wcsncpy", "wcspbrk",
             "wcsrchr", "wcsrtombs", "wcsspn", "wcsstr", "wcstod", "wcstok", "wcstol",
             "wcstombs", "wcstoul", "wcsxfrm", "wctob", "wctomb", "wctrans", "wctype",
             "wmemchr", "wmemcmp", "wmemcpy", "wmemmove", "wmemset", "wprintf", "wscanf",
             "assert", "BUFSIZ", "CLOCKS_PER_SEC", "EDOM", "EOF", "ERANGE", "errno",
             "EXIT_FAILURE", "EXIT_SUCCESS", "FILENAME_MAX", "HUGE_VAL", "LC_ALL",
             "LC_COLLATE", "LC_CTYPE", "LC_MONETARY", "LC_NUMERIC", "LC_TIME", "L_tmpnam",
             "MB_CUR_MAX", "NULL", "FOPEN_MAX", "offsetof", "RAND_MAX", "SEEK_CUR",
             "SEEK_END", "SEEK_SET", "setjmp", "SIGTERM", "SIG_DFL", "SIG_ERR", "SIG_IGN",
             "stderr", "stdin", "SIGABRT", "SIGILL", "SIGINT", "SIGSEGV", "WCHAR_MAX",
             "WCHAR_MIN", "WEOF", "WEOF", "_IOFBF", "_IOLBF", "stdout", "SIGFPE", "va_arg",
             "va_end", "va_start", "_IONBF", "TMP_MAX", "alignas", "alignof", "and",
             "and_eq", "asm", "auto", "bitand", "bitor", "bool", "break", "case", "catch",
             "char", "char16_t", "char32_t", "class", "compl", "const", "constexpr",
             "const_cast", "continue", "decltype", "default", "delete", "do", "double",
             "dynamic_cast", "else", "enum", "explicit", "export", "extern", "false",
             "float", "for", "friend", "goto", "if", "inline", "int", "long", "mutable",
             "namespace", "new", "noexcept", "not", "not_eq", "nullptr", "operator", "or",
             "or_eq", "private", "protected", "public", "register", "reinterpret_cast",
             "return", "short", "signed", "sizeof", "static", "static_assert", "static_cast",
             "struct", "switch", "template", "this", "thread_local", "throw", "true", "try",
             "typedef", "typeid", "typename", "union", "unsigned", "using", "virtual", "void",
             "volatile", "wchar_t", "while", "xor", "xor_eq","defined"]

  # Loop through all macros and check the defines and undefs against the black list
  funcrefs = file.filerefs("Declare, Define", "", True)
  rangeMacroRegex = re.compile(r"__begin|__end|__range|__i")
  macBuiltInRegex = re.compile(r"^__builtin.*$")
  for ref in funcrefs:
    ent = ref.ent()
    name = ent.name()

    # Special case to detect when a range based loop is used
    if re.search(rangeMacroRegex, name):
      define = ent.ref('Definein')
      set = ent.ref('Setby Init')
      use = ent.ref('Useby')
      if not (define and set and use):
        continue
      if define.line() == set.line() and set.line() == use.line():
        continue
    # avoid builtin macro functionals on Mac
    if re.search(macBuiltInRegex, name):
      continue
    if re.search(r"^_[A-Z]{1}.*$", name):
      check.violation(ent, file, ref.line(), ref.column(), ERR1, file.name())
    if re.search(r"^__.*$", name):
      check.violation(ent, file, ref.line(), ref.column(), ERR1, file.name())
    if name in reservedNames:
      check.violation(ent, file, ref.line(), ref.column(), ERR1, file.name())
