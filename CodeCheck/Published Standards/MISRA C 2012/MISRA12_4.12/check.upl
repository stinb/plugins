# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-23-16


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Violation: File contains invalid dynamic memory statement.';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_DIR_4.12";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2012\\Directive 4.12 Dynamic memory allocation shall not be used";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Required',
    'Memory Allocation',
  );
}

# This is the full description of the rule being tested
sub description {
  return 'Directive 4.12 ( Required ) Dynamic memory allocation shall not be used.';
}




# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Amplification</b></p>
This rule applies to all dynamic memory allocation packages including:
</p>

<ul>
<li>
Those provided by The Standard Library;
</li>
<li>
Third-party packages.
</li>
</ul>

<p><b>Rationale</b></p>
The Standard Library’s dynamic memory allocation and deallocation routines can lead to undefined
behaviour as described in Rule 21.3. Any other dynamic memory allocation system is likely to exhibit
undefined behaviours that are similar to those of The Standard Library.
</p>

<p>
The specification of third-party routines shall be checked to ensure that dynamic memory allocation
is not being used inadvertently.
</p>

<p>
If a decision is made to use dynamic memory, care shall be taken to ensure that the software behaves
in a predictable manner. For example, there is a risk that:
</p>

<ul>
<li>
Insufficient memory may be available to satisfy a request — care must be taken to ensure
that there is a safe and appropriate response to an allocation failure;
</li>
<li>
There is a high variance in the execution time required to perform allocation or deallocation
depending on the pattern of usage and resulting degree of fragmentation.
</li>
</ul>

<p><b>Example</b></p>
For convenience, these examples are based around use of The Standard Library’s dynamic memory
functions as their interfaces are well-known.
</p>

<p>
In this example, the behaviour is undefined following the first call to free because the value of the
pointer p becomes indeterminate. Although the value stored in the pointer is unchanged following
the call to free, it is possible, on some targets, that the memory to which it points no longer exists and
the act of copying that pointer could cause a memory exception.
</p>

<pre><code language="C++">  #include &lt;stdlib.h&gt;
  void f ( void )
  {
    char *p = ( char * ) malloc ( 10 );
    char *q;
    free ( p );
    q = p;    /* Undefined behaviour - value of p is indeterminate    */
    p = ( char * ) malloc ( 20 );
    free ( p );
    p = NULL; /* Assigning NULL to freed pointer makes it determinate */
  }

</code></pre>

<p><b>See also</b><br>
Dir 4.1, Rule 18.7, Rule 21.3, Rule 22.1, Rule 22.2
</p>

END_DESC

}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options {

}


sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("c file");

  my @functionCallRefs = $file->filerefs("call","function",0);
  foreach my $funcCall (@functionCallRefs){
    if ($funcCall->ent->name =~ /^calloc$|^malloc$|^realloc$|^free$/){
      $check->violation($funcCall->ent(),$file,$funcCall->line(),$funcCall->column(),ERR1);
    }
  }

    my $lexer = $file->lexer();
    return unless $lexer;
    my $lexeme = $lexer->first;

  #check if lexeme text has the new or delete keyword
  while($lexeme) {
    #Yield to GUI interupts
    $check->yield();
    return if $check->is_abort();

    if ($lexeme->text() =~ /^new$|^delete$/  && $lexeme->token() eq "Keyword"){
      # Added special case for = delete because of C++ 11
      $check->violation($lexeme->ent(),$file,$lexeme->line_begin(),$lexeme->column_begin(),ERR1) unless $lexeme->text() =~ /^delete$/ and $lexeme->prevUseful->text eq '=';
   }
   $lexeme=$lexeme->next;
  }
}
