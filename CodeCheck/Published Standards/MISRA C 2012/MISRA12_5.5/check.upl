#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 10-8-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => "Non macro identifier %1 is not distinct from macro identifier %2 on line %3";


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_5.5";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2012\\5.5 Identifiers shall be distinct from macro names";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Required',
    'Identifiers',
  );
}

# This is the full description of the rule being tested
sub description {
  return "5.5 ( Required ) Identifiers shall be distinct from macro names.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Amplification</b></p>
This rule requires that the names of macros that exist prior to preprocessing be distinct from the
identifiers that exist after preprocessing. It applies to identifiers, regardless of scope or name space,
and to any macros that have been defined regardless of whether the definition is still in force when
the identifier is declared.
</p>

<p>
The definition of distinct depends on the implementation and the version of the C language that is
being used:
</p>

<p>
• In C90 the minimum requirement is that the first 31 characters are significant;
</p>

<p>
• In C99 the minimum requirement is that the first 63 characters are significant, with each
universal character or extended source character counting as a single character.
</p>

<p><b>Rationale</b></p>
Keeping macro names and identifiers distinct can help to avoid developer confusion.
</p>

<p><b>Example</b></p>
In the following non-compliant example, the name of the function-like macro Sum is also used as
an identifier. The declaration of the object Sum is not subject to macro-expansion because it is not
followed by a ( character. The identifier therefore exists after preprocessing has been performed.
</p>

<pre><code language="C++">  #define Sum(x, y) ( ( x ) + ( y ) )
  int16_t Sum;

</code></pre>

<p>
The following example is compliant because there is no instance of the identifier Sum after
preprocessing.
</p>

<pre><code language="C++">  #define Sum(x, y) ( ( x ) + ( y ) )
  int16_t x = Sum ( 1, 2 );

</code></pre>

<p>
In the following example, the implementation in question supports 31 significant case-sensitive
characters in identifiers that do not have external linkage. The example is non-compliant because
the macro name is not distinct from an identifier name with internal linkage in the first 31 characters.
</p>

<pre><code language="C++">  /*              1234567890123456789012345678901********* Characters */
  #define         low_pressure_turbine_temperature_1 lp_tb_temp_1
  static int32_t  low_pressure_turbine_temperature_2;

</code></pre>

<p><b>See also</b></p><p>
Rule 5.1, Rule 5.2, Rule 5.4
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->checkbox( 'C99', 'Use C99 standard? ( C90 default )', 0 );
}


# Subroutine to get the length of significant characters
sub getLength {

  # Set the length of the string to be tested based off the user selected option
  my $check = shift;
  my $length;
  if  ( $check->option->lookup( 'C99' ) ) {
    $length = 63;
  } else {
    $length = 31
  }
  return $length

}


# Create a sub string of length of significant characters
sub makeSubstring {

  # Create the substring of the entity name to compare to other entities
  my $check = shift;
  my $name = shift;
  my $subString = substr ( $name, 0, getLength( $check ) );
  return $subString;

}


# This is the actual test being performed on the user's code
sub check {

  # Pull check and file from Understand. Test that we are looking at a file and return otherwise
  my $check = shift; 
  my $file = shift; 
  return unless $file->kind->check("file ~unknown ~unresolved");

  # Pull all the Macros defined in this file, return if none
  my @macrosDefined = $file->filerefs( 'Define, Declare', 'Macro');
  return unless @macrosDefined;

  # Start my hash for tracking patterns
  my %patternsSeen = ();

  foreach my $macro ( @macrosDefined ) {

    # Create substring for hash comparison
    my $subString = makeSubstring ( $check, $macro->ent->name );
    $patternsSeen{ $subString } = $macro;

  }

  # Pull everything else defined in this file
  my @allDefined = $file->filerefs( 'Define, Declare', '~Macro');
  return unless @allDefined;

  foreach my $all ( @allDefined ) {

    # Create substring for hash comparison
    my $subString = makeSubstring ( $check, $all->ent->name );

    # Test if we have seen a macro with the same name
    if ( exists $patternsSeen{ $subString } ) {

      # We've seen this macro name before, throw error
      my $seenMacro = $patternsSeen{ $subString };
      $check->violation( $all->ent, $all->file, $all->line, $all->column, ERR1, $all->ent->name, $seenMacro->ent->name, $seenMacro->line );

    }
  }
}
