# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 8/8/24

import re

ERR1 = 'Operand of type %2 which is an inappropriate essential type for the operator %3'


# The ID for the check
def ids():
    return ('MISRA12_10.1', 'MISRA23_10.1', 'CPP_E074')

# The short name of the check
def name(id):
    return {
        'MISRA12_10.1': 'Published Standards/MISRA C 2012/10.1 Operands shall not be of an inappropriate essential type',
        'MISRA23_10.1': 'Published Standards/MISRA C 2023/10.1 Operands shall not be of an inappropriate essential type',
        'CPP_E074': 'All Checks/Language Specific/C and C++/Expressions/Operands shall not be of an inappropriate essential type',
    }[id]




def tags(id):
    return {
        'MISRA12_10.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Expressions',
        ],
        'MISRA23_10.1': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Expressions',
        ],
        'CPP_E074': [
            'Language: C',
            'Language: C++',
            'Expressions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    developersNote = """\
<p><b>Developer's Notes</b></p>
<p>This check isn't able to check for the resulting essential type of
an expression within parenthesis.</p>
"""
    desc = """\
<p>Operands shall not be of an inappropriate essential type</p>
<p><b>Amplification</b></p>
<p>In the following table a number within a cell indicates where a restriction
applies to the use of an essential type as an operand to an operator. These
numbers correspond to paragraphs in the Rationale section below and indicate why
each restriction is imposed.</p>
<table>
  <tr>
    <th>Operator</th>
    <th>Operand</th>
    <th>Boolean</th>
    <th>character</th>
    <th>enum</th>
    <th>signed</th>
    <th>unsigned</th>
    <th>floating</th>
  </tr>
  <tr>
    <th>[ ]</th>
    <td>integer</td>
    <td>3</td>
    <td>4</td>
    <td></td>
    <td></td>
    <td></td>
    <td>1</td>
  </tr>
  <tr>
    <th>+ (unary)</th>
    <td></td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <th>- (unary)</th>
    <td></td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <th>+ -</th>
    <td>either</td>
    <td>3</td>
    <td></td>
    <td>5</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <th>* /</th>
    <td>either</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <th>%</th>
    <td>either</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td></td>
    <td></td>
    <td>1</td>
  </tr>
  <tr>
    <th>&lt; &gt; &lt;= &gt;=</th>
    <td>either</td>
    <td>3</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <th>== !=</th>
    <td>either</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <th>! && ||</th>
    <td>any</td>
    <td></td>
    <td>2</td>
    <td>2</td>
    <td>2</td>
    <td>2</td>
    <td>2</td>
  </tr>
  <tr>
    <th>&lt;&lt; &gt;&gt;</th>
    <td>left</td>
    <td>3</td>
    <td>4</td>
    <td>5,6</td>
    <td>6</td>
    <td></td>
    <td>1</td>
  </tr>
  <tr>
    <th>&lt;&lt; &gt;&gt;</th>
    <td>right</td>
    <td>3</td>
    <td>4</td>
    <td>7</td>
    <td>7</td>
    <td></td>
    <td>1</td>
  </tr>
  <tr>
    <th>~ & | ^</th>
    <td>any</td>
    <td>3</td>
    <td>4</td>
    <td>5,6</td>
    <td>6</td>
    <td></td>
    <td>1</td>
  </tr>
  <tr>
    <th>?:</th>
    <td>1st</td>
    <td></td>
    <td>2</td>
    <td>2</td>
    <td>2</td>
    <td>2</td>
    <td>2</td>
  </tr>
  <tr>
    <th>?:</th>
    <td>2nd and 3rd</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>
<p><b>Rationale</b></p>
<ol>
<li>The use of an expression of essentially floating type for these operands is
a constraint violation.</li>
<li>An expression of essentially Boolean type should always be used where an
operand is interpreted as a Boolean value.</li>
<li>An operand of essentially Boolean type should not be used where an operand
is interpreted as a numeric value.</li>
<li>An operand of essentially character type should not be used where an operand
is interpreted as a numeric value. The numeric values of character data are
implementation-defined.</li>
<li>An operand of essentially enum type should not be used in an arithmetic
operation because an enum object uses an implementation-defined integer type.
An operation involving an enum object may therefore yield a result with an
unexpected type. Note that an enumeration constant from an anonymous enum has
essentially signed type.</li>
<li>Shift and bitwise operations should only be performed on operands of
essentially unsigned type. The numeric value resulting from their use on
essentially signed types is implementation-defined.</li>
<li>The right hand operand of a shift operator should be of essentially unsigned
type to ensure that undefined behaviour does not result from a negative shift.
</li>
<li>An operand of essentially unsigned type should not be used as the operand to
the unary minus operator, as the signedness of the result is determined by the
implemented size of int.</li>
</ol>
<p><b>Exception</b></p>
<p>A non-negative integer constant expression of essentially signed type may be
used as the right hand operand to a shift operator.</p>
<p><b>Example</b></p>
<pre><code language="C++">enum enuma { a1, a2, a3 } ena, enb; /* Essentially enum<enuma> */
enum { K1 = 1, K2 = 2 }; /* Essentially signed */
</code></pre>
<p>The following examples are non-compliant. The comments refer to the numbered
rationale item that results in the non-compliance.</p>
<pre><code language="C++">f32a & 2U /* Rationale 1 - constraint violation */
f32a << 2 /* Rationale 1 - constraint violation */
cha && bla /* Rationale 2 - char type used as a Boolean value */
ena ? a1 : a2 /* Rationale 2 - enum type used as a Boolean value */
s8a && bla /* Rationale 2 - signed type used as a Boolean value */
u8a ? a1 : a2 /* Rationale 2 - unsigned type used as a Boolean value */
f32a && bla /* Rationale 2 - floating type used as a Boolean value */
bla * blb /* Rationale 3 - Boolean used as a numeric value */
bla > blb /* Rationale 3 - Boolean used as a numeric value */
cha & chb /* Rationale 4 - char type used as a numeric value */
cha << 1 /* Rationale 4 - char type used as a numeric value */
ena-- /* Rationale 5 - enum type used in arithmetic operation */
ena * a1 /* Rationale 5 - enum type used in arithmetic operation */
s8a & 2 /* Rationale 6 - bitwise operation on signed type */
50 << 3U /* Rationale 6 - shift operation on signed type */
u8a << s8a /* Rationale 7 - shift magnitude uses signed type */
u8a << -1 /* Rationale 7 - shift magnitude uses signed type */
-u8a /* Rationale 8 - unary minus on unsigned type */
</code></pre>
"""
    return {
        'MISRA12_10.1': desc + developersNote,
        'MISRA23_10.1': """\
<p>Operands shall not be of an inappropriate essential type</p>
<p><b>Amplification</b></p>
<p>In the following table a number within a cell indicates where a restriction
applies to the use of an essential type as an operand to an operator. These
numbers correspond to paragraphs in the Rationale section below and indicate why
each restriction is imposed.</p>
<table>
<tr>
<th>Operator</th>
<th>Operand</th>
<th>Boolean</th>
<th>character</th>
<th>enum</th>
<th>signed</th>
<th>unsigned</th>
<th>floating real</th>
<th>floating complex</th>
</tr>
<tr>
<td>[ ]</td>
<td>integer</td>
<td>3</td>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>9</td>
</tr>
<tr>
<td>+ (unary)</td>
<td></td>
<td>3</td>
<td>4</td>
<td>5</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>- (unary)</td>
<td></td>
<td>3</td>
<td>4</td>
<td>5</td>
<td></td>
<td>8</td>
<td></td>
<td></td>
</tr>
<tr>
<td>+ -</td>
<td>either</td>
<td>3</td>
<td></td>
<td>5</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>++ --</td>
<td>either</td>
<td>3</td>
<td></td>
<td>5</td>
<td></td>
<td></td>
<td></td>
<td>9</td>
</tr>
<tr>
<td>* /</td>
<td>either</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>%</td>
<td>either</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td></td>
<td></td>
<td>1</td>
<td>9</td>
</tr>
<tr>
<td>&lt; &gt; &lt;= &gt;=</td>
<td>either</td>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>9</td>
</tr>
<tr>
<td>== !=</td>
<td>either</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>10</td>
</tr>
<tr>
<td>! && ||</td>
<td>any</td>
<td></td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>&lt;&lt; &gt;&gt;</td>
<td>left</td>
<td>3</td>
<td>4</td>
<td>5,6</td>
<td>6</td>
<td></td>
<td>1</td>
<td>9</td>
</tr>
<tr>
<td>&lt;&lt; &gt;&gt;</td>
<td>right</td>
<td>3</td>
<td>4</td>
<td>7</td>
<td>7</td>
<td></td>
<td>1</td>
<td>9</td>
</tr>
<tr>
<td>~ & | ^</td>
<td>any</td>
<td>3</td>
<td>4</td>
<td>5,6</td>
<td>6</td>
<td></td>
<td>1</td>
<td>9</td>
</tr>
<tr>
<td>?:</td>
<td>1st</td>
<td></td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>?:</td>
<td>2nd and 3rd</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</table>
<p><b>Rationale</b></p>
<ol>
<li>The use of an expression of essentially floating type for these operands is
a constraint violation.</li>
<li>An expression of essentially Boolean type should always be used where an
operand is interpreted as a Boolean value.</li>
<li>An operand of essentially Boolean type should not be used where an operand
is interpreted as a numeric value.</li>
<li>An operand of essentially character type should not be used where an operand
is interpreted as a numeric value. The numeric values of character data are
implementation-defined.</li>
<li>An operand of essentially enum type should not be used in an arithmetic
operation because an enum object uses an implementation-defined integer type.
An operation involving an enum object may therefore yield a result with an
unexpected type. Note that an enumeration constant from an anonymous enum has
essentially signed type.</li>
<li>Shift and bitwise operations should only be performed on operands of
essentially unsigned type. The numeric value resulting from their use on
essentially signed types is implementation-defined.</li>
<li>The right hand operand of a shift operator should be of essentially unsigned
type to ensure that undefined behaviour does not result from a negative shift.
</li>
<li>An operand of essentially unsigned type should not be used as the operand to
the unary minus operator, as the signedness of the result is determined by the
implemented size of int.</li>
<li>The use of an expression of essentially complex floating type for these
operands is a constraint violation.</li>
<li>The inherent nature of floating-point types is such that comparisons of
equality will often not evaluate to true even when they are expected to. In
addition the behaviour of such a comparison cannot be predicted before
execution, and may well vary from one implementation to another. Deterministic
floating-point comparisons should take into account the floating-point
granularity (FLT_EPSILON) and the magnitude of the numbers being compared.</li>
</ol>
<p><b>Exception</b></p>
<p>A non-negative integer constant expression of essentially signed type may be
used as the right hand operand to a shift operator.</p>
<p><b>Example</b></p>
<pre><code language="C++">enum enuma { a1, a2, a3 } ena, enb; /* Essentially enum<enuma> */
enum { K1 = 1, K2 = 2 }; /* Essentially signed */
</code></pre>
<p>The following examples are non-compliant. The comments refer to the numbered
rationale item that results in the non-compliance.</p>
<pre><code language="C++">f32a & 2U /* Rationale 1 - constraint violation */
f32a << 2 /* Rationale 1 - constraint violation */
cha && bla /* Rationale 2 - char type used as a Boolean value */
ena ? a1 : a2 /* Rationale 2 - enum type used as a Boolean value */
s8a && bla /* Rationale 2 - signed type used as a Boolean value */
u8a ? a1 : a2 /* Rationale 2 - unsigned type used as a Boolean value */
f32a && bla /* Rationale 2 - floating type used as a Boolean value */
bla * blb /* Rationale 3 - Boolean used as a numeric value */
bla > blb /* Rationale 3 - Boolean used as a numeric value */
cha & chb /* Rationale 4 - char type used as a numeric value */
cha << 1 /* Rationale 4 - char type used as a numeric value */
ena-- /* Rationale 5 - enum type used in arithmetic operation */
ena * a1 /* Rationale 5 - enum type used in arithmetic operation */
s8a & 2 /* Rationale 6 - bitwise operation on signed type */
50 << 3U /* Rationale 6 - shift operation on signed type */
u8a << s8a /* Rationale 7 - shift magnitude uses signed type */
u8a << -1 /* Rationale 7 - shift magnitude uses signed type */
-u8a /* Rationale 8 - unary minus on unsigned type */
</code></pre>
""" + developersNote,
    'CPP_E074': desc + developersNote,

    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = None
    macros = check.option().lookup('includeMacros')
    # Regex for each operator for left operand
    left = {'+': r'bool|enum', '-': r'bool|enum', '++': r'bool|enum', '--': r'bool|enum', '*': r'bool|char|enum', '/': r'bool|char|enum', '%': r'bool|char|enum|float', '<': r'bool', '>': r'bool', '<=': r'bool', '>=': r'bool', '&&': r'char|enum|signed|int|float', '||': r'char|enum|signed|int|float', '<<': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '>>': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '~': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '&': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '|': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '^': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '?': r'char|enum|signed|float'}
    # Regex for each operator for right operand
    right = {'+': r'bool|enum', '-': r'bool|enum', 'u+': r'bool|char|enum', 'u-': r'bool|char|enum|unsigned', '++': r'bool|enum', '--': r'bool|enum', '*': r'bool|char|enum', '/': r'bool|char|enum', '%': r'bool|char|enum|float', '<': r'bool', '>': r'bool', '<=': r'bool', '>=': r'bool', '!': r'char|enum|signed|int|floating', '&&': r'char|enum|signed|int|floating', '||': r'char|enum|signed|int|floating', '<<': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '>>': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '~': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '&': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '|': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '^': r'bool|char|enum|(?<!un)signed|^(?!.*unsigned).*\bint\b|float', '[': r'bool|char|float'}
    refs = file.filerefs('Define', 'Object')
    for ref in refs:
        # Skip if object is not of the mentioned types
        if not re.search('bool|char|enum|signed|float|int', ref.ent().type().lower()):
            continue

        # Check everywhere used
        useRefs = ref.ent().refs('Useby')
        for useRef in useRefs:
            if not lexer:
                if not file.lexer():
                    return
                lexer = file.lexer()
            lexeme = lexer.lexeme(useRef.line(), useRef.column())
            if not lexeme:
                continue

            prevLex = lexeme.previous(True, True)
            nextLex = lexeme.next(True, True)

            # Check for operators to the left
            operator = ''
            while operator == '' and prevLex and not re.search(r'{|}|\)|;|->', prevLex.text()) and not prevLex.token() in ['Identifier', 'Literal']:
                # See if one of the mentioned operators was found
                if prevLex.text() in right.keys():
                    operator = prevLex.text()
                    # Check if '+' or '-' found is unary
                    if prevLex.text() in ['+', '-', '&', '*']:
                        prevLex1 = prevLex.previous(True, True)

                        if not (prevLex1 and (re.search(r'Identifier|Literal', prevLex1.token()) or prevLex1.text() == ')')) or (prevLex1 and prevLex1.text() == '('):
                            if prevLex.text() in ['&', '*']:
                                operator = ''
                                break
                            operator = 'u' + prevLex.text()
                    break
                elif prevLex.token() == 'Operator':
                    break
                prevLex = prevLex.previous(True, True)

            # Throw violation if the operator found uses a listed essential type on one of the operands
            if operator != '' and re.search(right[operator], ref.ent().type().lower()):
                tempLex = prevLex.next(True, True)
                if tempLex and tempLex.text() != '(':
                    check.violation(ref.ent(), file, useRef.line(), useRef.column(), ERR1, str(ref.ent().type()), operator)
                continue


            # Check for operators to the right
            operator = ''
            while operator == '' and nextLex and not re.search(r'{|}|\)|;|->', nextLex.text()) and not nextLex.token() in ['Identifier', 'Literal']:
                # See if one of the mentioned operators was found
                if nextLex.text() in left.keys():
                    operator = nextLex.text()
                    break
                elif nextLex.token() == 'Operator':
                    break
                nextLex = nextLex.next(True, True)

            # Throw violation if the operator found uses a listed essential type on one of the operands
            if operator != '' and re.search(left[operator], ref.ent().type().lower()):
                tempLex = nextLex.previous(True, True)
                if tempLex and tempLex.text() != '(':
                    check.violation(ref.ent(), file, useRef.line(), useRef.column(), ERR1, str(ref.ent().type()), operator)
