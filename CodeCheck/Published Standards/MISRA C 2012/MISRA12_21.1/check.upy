# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# Rewritten by Robby Bennett


import re


ERR1 = 'Reserved identifier or macro redefined or undefined'


def ids():
    return ('MISRA12_21.1', 'CPP_PR000', 'MISRA23_21.1')


def name(id):
    return {
        'MISRA12_21.1': '''Published Standards/MISRA C 2012/\
21.1 #define and #undef shall not be used on a reserved identifier or reserved \
macro name''',
        'CPP_PR000': '''All Checks/Language Specific/C and C++/Preprocessor/\
#define and #undef shall not be used on a reserved identifier or reserved macro \
name''',
        'MISRA23_21.1': '''Published Standards/MISRA C 2023/\
21.1 #define and #undef shall not be used on a reserved identifier or reserved \
macro name''',
    }[id]





def tags(id):
    return {
        'MISRA12_21.1': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Preprocessor',
        ],
        'CPP_PR000': [
            'Language: C',
            'Preprocessor',
        ],
        'MISRA23_21.1': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Preprocessor',
        ],
    }.get(id)

def detailed_description():
    return '''
<p><b>Amplification</b></p>

<p>
This rule applies to the following:
</p>

<ul>
<li>
Identifiers or macro names beginning with an underscore;
</li>
<li>
Identifiers in file scope described in Section 7, "Library", of The Standard;
</li>
<li>
Macro names described in Section 7, "Library", of The Standard as being defined
in a standard header.
</li>
</ul>

<p>
This rule also prohibits the use of <i>#define</i> or <i>#undef</i> on the
identifier <i>defined</i> as this results in explicitly undefined behaviour.
</p>

<p>
This rule does <b>not</b> include those identifiers or macro names that are
described in the section of the applicable C standard entitled "Future Library
Directions".
</p>

<p>
The Standard states that defining a macro with the same name as:
</p>

<ul>
<li>
A macro defined in a standard header, or
</li>
<li>
An identifier with file scope declared in a standard header
</li>
</ul>

<p>
is well-defined provided that the header is not included. This rule does not
permit such definitions on the grounds that they are likely to cause confusion.
</p>

<p>
<i>Note:</i> the macro NDEBUG is not defined in a standard header and may
therefore be <i>#define</i>'d.
</p>

<p><b>Rationale</b></p>
Reserved identifiers and reserved macro names are intended for use by the
implementation. Removing or changing the meaning of a reserved macro may result
in undefined behaviour.
</p>

<p><b>Example</b></p>

<pre><code language="C++">#undef __LINE__                  /* Non-compliant - begins with _ */
#define _GUARD_H 1               /* Non-compliant - begins with _ */
#undef _BUILTIN_sqrt             /* Non-compliant - the implementation
                                  * may use _BUILTIN_sqrt for other
                                  * purposes, e.g. generating a sqrt
                                  * instruction */

#define defined                  /* Non-compliant - reserved identifier */
#define errno my_errno           /* Non-compliant - library identifier */
#define isneg( x ) ( ( x ) &lt; 0 ) /* Compliant - rule doesn't include
                                  * future library
                                  * directions */
</code></pre>

<p><b>Additional Information</b></p>

<p>
In the C++ 11 standard, under the section 'Reserved Identifiers' is statement,
"All identifiers that begin with an underscore and either an uppercase letter
or another underscore are always reserved for any use." This Code Check enforces
this rule when determining if an identifier is acceptable.
</p>
'''


def test_entity(file):
    return True


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    reserved = {
        'abort', 'abs', 'acos', 'asctime', 'asin', 'atan', 'atan2', 'atexit',
        'atof', 'atoi', 'atol', 'bsearch', 'btowc', 'calloc', 'ceil',
        'clearerr', 'clock', 'cos', 'cosh', 'ctime', 'defined', 'difftime',
        'div', 'exit', 'exp', 'fabs', 'fclose', 'feof', 'ferror', 'fflush',
        'fgetc', 'fgetpos', 'fgets', 'fgetwc', 'fgetws', 'floor', 'fmod',
        'fopen', 'fprintf', 'fputc', 'fputs', 'fputwc', 'fputws', 'fread',
        'free', 'freopen', 'frexp', 'fscanf', 'fseek', 'fsetpos', 'ftell',
        'fwide', 'fwprintf', 'fwrite', 'fwscanf', 'getc', 'getchar', 'getenv',
        'gets', 'getwc', 'getwchar', 'gmtime', 'isalnum', 'isalpha', 'iscntrl',
        'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace',
        'isupper', 'iswalnum', 'iswalpha', 'iswcntrl', 'iswctype', 'iswdigit',
        'iswgraph', 'iswlower', 'iswprint', 'iswpunct', 'iswspace', 'iswupper',
        'iswxdigit', 'isxdigit', 'labs', 'ldexp', 'ldiv', 'localeconv',
        'localtime', 'log', 'log10', 'longjmp', 'malloc', 'mblen', 'mbrlen',
        'mbrtowc', 'mbsinit', 'mbsrtowcs', 'mbstowcs', 'mbtowc', 'memchr',
        'memcmp', 'memcpy', 'memmove', 'memset', 'mktime', 'modf', 'perror',
        'pow', 'printf', 'putc', 'putchar', 'puts', 'putwc', 'putwchar',
        'qsort', 'raise', 'rand', 'realloc', 'remove', 'rename', 'rewind',
        'scanf', 'setbuf', 'setlocale', 'setvbuf', 'signal', 'sin', 'sinh',
        'sprintf', 'sqrt', 'srand', 'sscanf', 'strcat', 'strchr', 'strcmp',
        'strcoll', 'strcpy', 'strcspn', 'strerror', 'strftime', 'strlen',
        'strncat', 'strncmp', 'strncpy', 'strpbrk', 'strrchr', 'strspn',
        'strstr', 'strtod', 'strtok', 'strtol', 'strtoul', 'strxfrm',
        'swprintf', 'swscanf', 'system', 'tan', 'tanh', 'time', 'tmpfile',
        'tmpnam', 'tolower', 'toupper', 'towctrans', 'towlower', 'towupper',
        'ungetc', 'ungetwc', 'vfprintf', 'vfwprintf', 'vprintf', 'vsprintf',
        'vswprintf', 'vwprintf', 'wcrtomb', 'wcscat', 'wcschr', 'wcscmp',
        'wcscoll', 'wcscpy', 'wcscspn', 'wcsftime', 'wcslen', 'wcsncat',
        'wcsncmp', 'wcsncpy', 'wcspbrk', 'wcsrchr', 'wcsrtombs', 'wcsspn',
        'wcsstr', 'wcstod', 'wcstok', 'wcstol', 'wcstombs', 'wcstoul',
        'wcsxfrm', 'wctob', 'wctomb', 'wctrans', 'wctype', 'wmemchr',
        'wmemcmp', 'wmemcpy', 'wmemmove', 'wmemset', 'wprintf', 'wscanf',
        'assert', 'BUFSIZ', 'CLOCKS_PER_SEC', 'EDOM', 'EOF', 'ERANGE',
        'errno', 'EXIT_FAILURE', 'EXIT_SUCCESS', 'FILENAME_MAX', 'HUGE_VAL',
        'LC_ALL', 'LC_COLLATE', 'LC_CTYPE', 'LC_MONETARY', 'LC_NUMERIC',
        'LC_TIME', 'L_tmpnam', 'MB_CUR_MAX', 'NULL', 'FOPEN_MAX', 'offsetof',
        'RAND_MAX', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'setjmp', 'SIGTERM',
        'SIG_DFL', 'SIG_ERR', 'SIG_IGN', 'stderr', 'stdin', 'SIGABRT',
        'SIGILL', 'SIGINT', 'SIGSEGV', 'WCHAR_MAX', 'WCHAR_MIN', 'WEOF', 'WEOF',
        '_IOFBF', '_IOLBF', 'stdout', 'SIGFPE', 'va_arg', 'va_end', 'va_start',
        '_IONBF', 'TMP_MAX', 'alignas', 'alignof', 'and', 'and_eq', 'asm',
        'auto', 'bitand', 'bitor', 'bool', 'break', 'case', 'catch', 'char',
        'char16_t', 'char32_t', 'class', 'compl', 'const', 'constexpr',
        'const_cast', 'continue', 'decltype', 'default', 'delete', 'do',
        'double', 'dynamic_cast', 'else', 'enum', 'explicit', 'export',
        'extern', 'false', 'float', 'for', 'friend', 'goto', 'if', 'inline',
        'int', 'long', 'mutable', 'namespace', 'new', 'noexcept', 'not',
        'not_eq', 'nullptr', 'operator', 'or', 'or_eq', 'private', 'protected',
        'public', 'register', 'reinterpret_cast', 'return', 'short', 'signed',
        'sizeof', 'static', 'static_assert', 'static_cast', 'struct', 'switch',
        'template', 'this', 'thread_local', 'throw', 'true', 'try', 'typedef',
        'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual', 'void',
        'volatile', 'wchar_t', 'while', 'xor', 'xor_eq',
    }

    for ref in file.filerefs('Set ~Inactive, Define ~Inactive', 'Macro'):
        ent = ref.ent()
        if re.match(r'_(_|[A-Z])', ent.name()) or ent.name() in reserved:
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
