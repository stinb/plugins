#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-22-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => "Character sequence /* or // used in a comment";


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_3.1";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2012\\3.1 The character sequences /* and // shall not be used within a comment";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2012',
    'Category: Required',
    'Comments',
  );
}

# This is the full description of the rule being tested
sub description {
  return "3.1 ( Required ) The character sequences /* and // shall not be used within a comment.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b></p>
If a comment starting sequen ce, /* or //, occurs within a /* comment, is it quite likely to be caused
by a missing */ comment ending sequence.</p>

<p>
If a comment starting sequence occurs within a // comment, it is probably because a region of code
has been commented-out using //.</p>

<p><b>Exception</b></p>
The sequence // is permitted within a // comment.</p>

<p><b>Example</b></p>

<p>
Consider the following code fr agment:
</p>

<pre><code language="C++">  /* some comment, end comment marker accidentally omitted
  &lt;&lt;new Page&gt;&gt;
  Perform_Critical_Safety_Function( X );
  /* this comment is non-compliant */

</code></pre>

<p>
In reviewing the page containing the call to the function, the assumption is that it is executed code.
Because of the accidental omission of the end comment marker, the call to the safety critical function
will not be executed.</p>

<p>
In the following C99 example, the presence of // comments changes the meaning of the program:
</p>

<pre><code language="C++">  x = y // /*
        + z
        // */
      ;

</code></pre>

<p>
This gives x = y + z; but would have been x = y; in the absence of the two // comment start
sequences.
</p>

<p><b>See Also</b><br>
Dir 4.4</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}


# This is the actual test being performed on the user's code
sub check {

  my $check = shift;
  my $file = shift;
  return unless $file->kind->check('file');

  my $lexer = $file->lexer(0);
  my @lexemes = $lexer->lexemes if $lexer;

  foreach my $lexeme (@lexemes){
    if ( $lexeme->token eq 'Comment'
      && $lexeme->text =~ m! ^ /\* .* /\* !sx
      || $lexeme->text =~ m! ^ /\* .* // !sx
      || $lexeme->text =~ m! ^ // .* /\* !sx ) {
      $check->violation(0, $file, $lexeme->line_begin, $lexeme->column_begin, ERR1);
    }
  }

  return;
}
