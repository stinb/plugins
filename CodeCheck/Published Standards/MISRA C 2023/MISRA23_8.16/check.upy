ERR1 = "The alignment specification of zero should not appear in an object declaration"


# The ID for the check
def ids():
    return ('MISRA23_8.16')


# The short name of the check
def name(id):
    return {
        'MISRA23_8.16': "Published Standards/MISRA C 2023/8.16 The alignment specification of zero should not appear in an object declaration"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_8.16': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Declarations and Definitions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_8.16': """
<p><b>Amplification</b></p>
<p>This rule applies to any integer constant expression operand to _Alignas that evaluates to zero.</p>

<p><b>Rationale</b></p>
<p>If the alignment of an object is important, it should be specified explicitly.</p>
<p>If configuration settings or platform implementation details are intended to change the alignment of
an object to conditionally disable explicit alignment, this should be abstracted by the preprocessor.</p>

<p><b>Example</b></p>
<pre><code language="C++">/ int32_t a; /* Compliant: no alignment specification */
alignas (16) int32_t b; /* Compliant: explicit non-zero alignment specification */
alignas (0) int32_t c; /* Non-compliant: zero-alignment specification */
/* Non-compliant on platforms where sizeof (int) == sizeof (long) */
alignas (sizeof (long) - sizeof (int)) int32_t d;</code></pre>

<p>When the alignment is not important, the configuration can remove it entirely:</p>

<pre><code language="C++">#if REQUIRED_ALIGNMENT > 0
#define ALIGNED alignas (REQUIRED_ALIGNMENT)
#else
#define ALIGNED /**/
#endif
</code></pre>

<p><b>Developer's Note</b></p>
<p>This check only flags an explicit zero alignment specification.</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if "alignas(0)" not in file.contents():
        return
    
    lex = file.lexer(lookup_ents=False).first()

    while lex:
        if (lex.text() == "alignas") and (lex.token() == "Identifier"):
            lex = lex.next().next()

            if (lex.text() == "0") and (lex.token() == "Literal"):
                check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1)

        lex = lex.next(True, True)