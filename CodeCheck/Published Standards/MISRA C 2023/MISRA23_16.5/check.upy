ERR1 = "Default shall appear as either the first or the last switch label of a switch statement"


# The ID for the check
def ids():
    return ('MISRA23_16.5', 'MISRA12_16.5')


# The short name of the check
def name(id):
    return {
        'MISRA23_16.5': "Published Standards/MISRA C 2023/16.5 A default label shall appear as either the first or the last switch label of a switch statement",
        'MISRA12_16.5': "Published Standards/MISRA C 2012/16.5 A default label shall appear as either the first or the last switch label of a switch statement"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_16.5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA12_16.5': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Control Flow',
        ]
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_16.5': """
<p><b>Rationale</b></p>
<p>This rule makes it easy to locate the default label within a switch statement.</p>

<p><b>Example</b></p>
<pre><code language="C++">switch ( x )
{
 default: /* Compliant - default is the first label */
 case 0:
 ++x;
 break;
 case 1:
 case 2:
 break;
}

switch ( x )
{
 case 0:
 ++x;
 break;
 default: /* Non-compliant - default is mixed with the case labels */
 x = 0;
 break;
 case 1:
 case 2:
 break;
}

switch ( x )
{
 case 0:
 ++x;
 break;
 case 1:
 case 2:
 break;
 default: /* Compliant - default is the final label */
 x = 0;
 break;
}</code></pre>

<p><b>See also</b></p>
<p>Rule 15.7, Rule 16.1</p>
""",
    'MISRA12_16.5': """
<p><b>Rationale</b></p>
<p>This rule makes it easy to locate the default label within a switch statement.</p>

<p><b>Example</b></p>
<pre><code language="C++">switch ( x )
{
 default: /* Compliant - default is the first label */
 case 0:
 ++x;
 break;
 case 1:
 case 2:
 break;
}

switch ( x )
{
 case 0:
 ++x;
 break;
 default: /* Non-compliant - default is mixed with the case labels */
 x = 0;
 break;
 case 1:
 case 2:
 break;
}

switch ( x )
{
 case 0:
 ++x;
 break;
 case 1:
 case 2:
 break;
 default: /* Compliant - default is the final label */
 x = 0;
 break;
}</code></pre>

<p><b>See also</b></p>
<p>Rule 15.7, Rule 16.1</p>
"""
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer(lookup_ents=False)

    for func_ref in file.filerefs("Define", "Function"):
        func_cfg = func_ref.ent().control_flow_graph()

        for node in func_cfg.nodes():
            if node.kind() != "switch":
                continue

            case_ctr = []
            default = None

            for node_child in node.children():
                if not str(node_child.kind()).startswith("switch-"):
                    continue

                lex = lexer.lexeme(node_child.line_begin(), node_child.column_begin())

                while lex and (lex.line_begin() <= node_child.line_end()):
                    if lex.text() in ["default", "case"] and lex.token() == "Keyword":
                        case_ctr.append(lex.text())

                        if lex.text() == "default":
                            if len(case_ctr) == 1:
                                break

                            default = lex

                    lex = lex.next(True, True)

            if "default" in case_ctr[1:-1]:
                check.violation(None, file, default.line_begin(), default.column_begin(), ERR1)