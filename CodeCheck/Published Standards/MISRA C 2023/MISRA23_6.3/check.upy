ERR1 = "A bit field shall not be declared as a member of a union"


# The ID for the check
def ids():
    return ('MISRA23_6.3')


# The short name of the check
def name(id):
    return {
        'MISRA23_6.3': "Published Standards/MISRA C 2023/6.3 A bit field shall not be declared as a member of a union"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_6.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Types',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_6.3': """
<p><b>Amplification</b></p>
<p>A member of a union shall not be declared as a bit field.</p>
<p>This rule does not apply to sub-objects within union members that do not themselves have a union
type.</p>

<p><b>Rationale</b></p>
<p>The exact bitwise position of a bit field within a storage unit is implementation defined. Therefore, if
two bit fields are declared such that they fit within the same storage unit of a union, the compiler is
not required to overlay them over one another beginning from the starting bit of the storage unit.</p>
<p>If the union is used for type-punning, it is therefore unclear which bits of the previously-stored value
will be accessed by the bit field.</p>
<p>If the union is not intended to be used for type-punning, there is no point in declaring the members
as bit fields, because no space will be saved (a complete storage unit will need to be allocated within
the union anyway).</p>

<p><b>Example</b></p>
<pre><code language="C++">/* Compliant - if the user wants to type-pun, the bits of 'big' which will
 ... be overlaid are clearly identified */
union U1 {
 uint8_t small;
 uint32_t big;
};

/* Non-compliant - it is unclear which, if any, bits of 'big' are overlaid by
 ... 'small' in this type */
union U2 {
 uint32_t small:8;
 uint32_t big;
};

/* Non-compliant - it is unclear if any bits of 'big' are overlaid by
 ... 'small' in this type */
union U3 {
 uint32_t small: 8;
 uint32_t big :24;
};

/* Compliant - a sub-object can be a bit-field */
union U4 {
 struct {
 uint8_t a:4;
 uint8_t b:4;
 uint8_t c:4;
 uint8_t d:4;
 } q;
 uint16_t r;
};</code></pre>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for union_ref in file.filerefs("Define", "Union"):
        for mem_ref in union_ref.ent().refs("Define", "Member"):
            if mem_ref.ent().freetext("BitField"):
                check.violation(mem_ref.ent(), file, mem_ref.line(), mem_ref.column(), ERR1)
                break
                
               
                    
                    
                    




            




