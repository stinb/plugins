ERR1 = "Function should be declared with a '_Noreturn' specifier"

EXIT_FUNCS = ["exit", "abort", "_Exit", "quick_exit"]


# The ID for the check
def ids():
    return ('MISRA23_17.11')


# The short name of the check
def name(id):
    return {
        'MISRA23_17.11': "Published Standards/MISRA C 2023/17.11 A function \
that never returns should be declared with a _Noreturn function specifier"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_17.11': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Functions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_17.11': """
<p><b>Rationale</b></p>
<p>Declaring a function that cannot return as _Noreturn highlights that this is “by design”.</p>

<p><b>Exception</b></p>
<p>This rule does not apply to main(), as the C Standard states that it is a constraint violation for main()
to be declared with the _Noreturn function specifier.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( void ) /* Non-compliant - exit() call means there is no return */
{
    exit ( 0 );
}</code></pre>

<p><b>See also</b></p>
<p>Rule 17.9</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for func_ref in file.filerefs("Define", "Function"):
        if func_ref.ent().name() == "main":
            continue

        has_exit = False

        for call_ref in func_ref.ent().refs("Call", "Function"):
            if call_ref.ent().name() in EXIT_FUNCS:
                has_exit = True
                break

        if (not has_exit
                or "return" in func_ref.ent().contents()
                or "_Noreturn" in func_ref.ent().contents()):
            continue

        check.violation(func_ref.ent(), file,
                        func_ref.line(), func_ref.column(), ERR1)
