ERR1 = 'Parameter %1 is unused'


def ids():
    return ('MISRA12_2.7', 'MISRA23_2.7')


def name(id):
    return {
        'MISRA12_2.7': "Published Standards/MISRA C 2012/2.7 There should be no unused parameters in functions",
        'MISRA23_2.7': "Published Standards/MISRA C 2023/2.7 A function should not contain unused parameters",
    }[id]


def tags(id):
    return {
        'MISRA12_2.7': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Variables',
            'Functions',
        ],
        'MISRA23_2.7': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Variables',
            'Functions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA12_2.7': """
<p><b>Rationale</b></p>
<p>Most functions will be specified as using each of their parameters. If a function parameter is unused,
it is possible that the implementation of the function does not match its specification. This rule
highlights such potential mismatches.</p>

<p><b>Example</b></p>
<pre><code language="C++">void withunusedpara ( uint1 6_t *para1,
 int16_t unusedpara ) /* Non-compliant - unused */
{
 *para1 = 42U;
}</code></pre>
""",
    'MISRA23_2.7': """
<p><b>Rationale</b></p>
<p>Most functions will be specified as using each of their parameters. If a function parameter is unused,
it is possible that the implementation of the function does not match its specification. This rule
highlights such potential mismatches.</p>

<p><b>Example</b></p>
<pre><code language="C++">void withunusedpara ( uint16_t *para1,
 int16_t unusedpara ) /* Non-compliant - unused */
{
 *para1 = 42U;
}</code></pre>
""",
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def check(check, file):
    for param_ref in file.filerefs("Define", "Parameter ~Unnamed"):
        if not param_ref.ent().ref("~Define ~Definein ~Typed"):
            check.violation(param_ref.ent(), file, param_ref.line(), param_ref.column(), ERR1, param_ref.ent().name())
