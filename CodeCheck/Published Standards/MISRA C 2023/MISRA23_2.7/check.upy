ERR1 = 'Parameter %1 is unused'


def ids():
    return ('MISRA12_2.7', 'MISRA23_2.7')


def name(id):
    return {
        'MISRA12_2.7': "Published Standards/MISRA C 2012/2.7 There should be no unused parameters in functions",
        'MISRA23_2.7': "Published Standards/MISRA C 2023/2.7 A function should not contain unused parameters",
    }[id]


def tags(id):
    return {
        'MISRA12_2.7': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Variables',
            'Functions',
        ],
        'MISRA23_2.7': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Variables',
            'Functions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA12_2.7': """
<p><b>Rationale</b></p>
<p>Most functions will be specified as using each of their parameters. If a function parameter is unused,
it is possible that the implementation of the function does not match its specification. This rule
highlights such potential mismatches.</p>

<p><b>Example</b></p>
<pre><code language="C++">void withunusedpara ( uint1 6_t *para1,
 int16_t unusedpara ) /* Non-compliant - unused */
{
 *para1 = 42U;
}</code></pre>

<p><b>Developer's Note</b></p>
<p>On Windows, enabling 'Delayed Template Parsing' in the project configuration may result in some false positive violations, specifically for the parameters of function templates.
Disabling this feature may provide better results but could also cause some analysis errors.</p>
<p>An option to ignore all parameters of function templates can be enabled.</p>
""",
    'MISRA23_2.7': """
<p><b>Rationale</b></p>
<p>Most functions will be specified as using each of their parameters. If a function parameter is unused,
it is possible that the implementation of the function does not match its specification. This rule
highlights such potential mismatches.</p>

<p><b>Example</b></p>
<pre><code language="C++">void withunusedpara ( uint16_t *para1,
 int16_t unusedpara ) /* Non-compliant - unused */
{
 *para1 = 42U;
}</code></pre>

<p><b>Developer's Note</b></p>
<p>On Windows, enabling 'Delayed Template Parsing' in the project configuration may result in some false positive violations, specifically for the parameters of function templates.
Disabling this feature may provide better results but could also cause some analysis errors.</p>
<p>An option to ignore all parameters of function templates can be enabled.</p>
""",
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def define_options(check):
    check.option().checkbox('ignore_template_param', 'Ignore parameters of function templates', False)


def check(check, file):
    ignore_template_param = check.options().lookup('ignore_template_param')

    for param_ref in file.filerefs("Define", "Parameter ~Unnamed"):
        if param_ref.ent().name() == "...":
            continue

        if (ignore_template_param and param_ref.ent().parent().kind().check("Template")):
            continue

        if param_ref.ent().parent().kind().check("Member Function"):
            func_parent = param_ref.ent().parent().parent()

            if func_parent and func_parent.kind().check("Template") and (func_parent.name() == param_ref.ent().parent().name()):
                continue

        if not param_ref.ent().ref("~Define ~Definein ~Typed"):
            check.violation(param_ref.ent(), file, param_ref.line(), param_ref.column(), ERR1, param_ref.ent().name())
