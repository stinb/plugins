import re


ERR1 = "A function type shall not be type qualified (%1)"


# The ID for the check
def ids():
    return ('MISRA23_17.13')


# The short name of the check
def name(id):
    return {
        'MISRA23_17.13': "Published Standards/MISRA C 2023/17.13 A function type shall not be type qualified"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_17.13': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Functions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_17.13': """
<p><b>Amplification</b></p>
<p>The type qualifiers are const, volatile, restrict or _Atomic.</p>

<p><b>Rationale</b></p>
<p>The behaviour is undefined if the specification of a function type includes any type qualifiers.</p>
<p>Note: this rule applies to a function type and not to the return type of a function.</p>

<p><b>Example</b></p>
<pre><code language="C++">const uint16_t cf (void); /* Compliant - returns const uint16_t */
const uint16_t * pcf (void); /* Compliant - returns a pointer to const uint16_t */</code></pre>

<p>In the following examples, ftype is the type of a function returning uint16_t:</p>

<pre><code language="C++">typedef uint16_t ftype (void);

typedef const ftype cftype; /* Non-compliant - cftype is const-qualified */

typedef ftype dftype; /* Compliant - dftype is not qualified */
typedef ftype * const pcftype; /* Compliant - const pointer to ftype */

typedef const uint16_t * cfptype (void); /* Compliant - cfptype is the type of a
 function returning
 const uint16_t * */</code></pre>


<p><b>See also</b></p>
<p>Rule 17.9, Rule 17.11</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for type_ref in file.filerefs("Define", "Typedef Type"):
        utype = type_ref.ent().type()

        if not re.search(r"\(.*\)$", str(utype)):
            continue

        for typedby_ref in type_ref.ent().refs("Typedby"):
            lex = typedby_ref.file().lexer(lookup_ents=False).lexeme(typedby_ref.line(), typedby_ref.column())
            lex = lex.previous(True, True)

            if (lex.token() == "Keyword") and lex.text() in ["const", "volatile", "restrict", "_Atomic"]:
                check.violation(typedby_ref.ent(), file, typedby_ref.line(), typedby_ref.column(), ERR1, lex.text())

                        


                        
                    
                    