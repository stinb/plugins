# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-8-15


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Goto statement for %1 is not in the same block or containing block';


# This registers ERR1 with Understand
sub register_tr_text {

  my $check = shift;
  $check->add_tr_text(ERR1);

}

sub checkID { return "MISRA23_15.3";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2023\\15.3 Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2023',
    'Category: Required',
    'Control Flow',
  );
}

# This is the full description of the rule being tested
sub description {
  return '15.3 ( Required ) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement.';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Amplification</b></p>
For the purposes of this rule, a <em>switch-clause</em> that does not consist of a compound statement is treated
as if it were a block.
</p>

<p><b>Rationale</b></p>
Unconstrained use of <em>goto</em> can lead to programs that are unstructured and extremely difficult to
understand.
</p>

<p>
Preventing jumps between blocks, or into nested blocks, helps to minimize visual code complexity.
</p>

<p>
<em>Note</em>: C99 is more restrictive when variably modified types are used. An attempt to make a jump from
outside the scope of an identifier with a variably modified type into such a scope results in a <em>constraint</em>
violation.
</p>

<p><b>Example</b></p>
The layout for the compound-statement and its enclosing braces are style issues which are not
addressed by this document; the style used in the following examples is not mandatory.
</p>

<pre><code language="C++">  void f1 ( int32_t a )
  {
    if ( a &lt;= 0 )
    {
      goto L2; /* Non-compliant */
    }
    goto L1; /* Compliant */
    if ( a == 0 )
    {
      goto L1; /* Compliant */
    }
    goto L2; /* Non-compliant */
  L1:
    if ( a &gt; 0 )
    {
      L2:
      ;
    }
  }

</code></pre>

<p>
In the following example, the label L1 is defined in a block which encloses the block containing the
goto statement. However, the jump crosses from one <em>switch-clause</em> to another and, since <em>switch-clauses</em>
are treated like blocks for the purposes of this rule, the <em>goto</em> statement is non-compliant.
</p>

<pre><code language="C++">  switch ( x )
  {
    case 0:
      if ( x == y )
      {
        goto L1;
      }
      break;
    case 1:
      y = x;
  L1:
      ++x;
      break;
    default:
      break;
  }

</code></pre>

<p><b>See also</b></p><p>
Rule 9.1, Rule 15.1, Rule 15.2, Rule 15.4, Rule 16.1
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is run per file
sub test_entity {
  return 1;
}


# This determines if this script is run on the whole project
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options {
}


# Use this function to walk the funtion forward or backwards
sub findLabel {

  # Pull everything that was passed in
  my $check = shift;
  my $label = shift;
  my $goto = shift;


  # Variable needed for tracking where the label is in relationship to the goto
  my $count = 0;
  my $isGood = 1;
  my $good = '';
  my $bad = '';
  my $switch = 'nextUseful';
  my $caseFlag = 0;

  if ( $label->line > $goto->line ) {

    $good = '}';
    $bad = '{';

  } else {

    $switch = 'prevUseful';
    $good = '{';
    $bad = '}';

  }

  my $lexeme = $goto->lexeme;

  while ( ! ( $lexeme->line_begin == $label->line and $lexeme->text == $label->ent->name ) ) {

    if ( $lexeme->text eq $bad ) {

      $count++;

    } elsif ( $lexeme->text eq $good ) {

      $count-- if $count > 0;

      # If we are at count one with a caseFlag, then we know we are leaving the end of the switch statement
      if ( $count <= 1 and $caseFlag ) {
        $count-- if $count > 0;
        $caseFlag = 0;
      }

    } elsif ( ( $lexeme->token eq 'Keyword' and lc( $lexeme->text ) eq 'case' ) or ( $lexeme->token eq 'Keyword' and lc( $lexeme->text ) eq 'default' ) ) {

      $count++ unless $caseFlag;
      $caseFlag = 1;

    } elsif ( $lexeme->token eq 'Keyword' and lc( $lexeme->text ) eq 'switch' ) {

      $caseFlag = 0;

    }

    $lexeme = $lexeme->$switch;

  }

  $isGood = 0 if $count != 0;
  #$isGood = 1 if $caseFlag and $count == 1;
  return $isGood;

}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( 'C File' );

  # Pull a list of all labels that are defined within this file
  my @labelsDefined = $file->filerefs( 'C Define', 'C Label' );
  return unless @labelsDefined;

  foreach my $label ( @labelsDefined ) {

    # Pull all of my useby references and check all
    my @gotosDefined = $label->ent->refs( 'C Useby' );
    foreach my $goto ( @gotosDefined ) {

      my $ok = findLabel( $check, $label, $goto );
      $check->violation( $label->ent, $label->file, $goto->line, $goto->column, ERR1, $label->ent->name ) unless $ok;

    }
  }
}
