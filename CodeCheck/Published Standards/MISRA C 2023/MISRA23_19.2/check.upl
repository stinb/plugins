#This script is designed to run with Understand - CodeCheck
use base qw(Understand::Codecheck);
use strict;


use CodeCheck::Libraries::InfoSiftr qw(resolveTypedefs);

use constant ERR1 => 'Violation: union used for "%1".';
use constant ERR2 => 'Violation: union "%1" is invalid.';

sub register_tr_text {
	my $check = shift;
	$check->add_tr_text(ERR1);
	$check->add_tr_text(ERR2);
}

sub checkID { return "MISRA23_19.2";}


sub name { return "Published Standards\\MISRA C 2023\\19.2 The union keyword should not be used";}


sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2023',
    'Category: Advisory',
    'Structures and Unions',
  );
}

sub description { '19.2(Global)(Advisory) The union keyword should not be used.' }

sub detailed_description { <<'END_DESC'
<p><b>Rationale</b></p>
A union member can be written and the same member can then be read back in a well-defined
manner.
</p>

<p>
However, if a union member is written and then a different union member is read back, the behaviour
depends on the relative sizes of the members:
</p>

<ul>
<li>
If the member read is wider than the member written then the value is unspecified;
</li>
<li>
Otherwise, the value is implementation-defined.
</li>
</ul>

<p>
The Standard permits the bytes of a union member to be accessed by means of another member
whose type is array of <i>unsigned char</i>. However, since it is possible to access bytes with unspecified
values, unions should not be used.
</p>

<p>
If this rule is not followed, the kinds of behaviour that need to be determined are:
</p>

<ul>
<li>
Padding — how much padding is inserted at the end of the union;
</li>
<li>
Alignment — how are members of any structures within the union aligned;
</li>
<li>
Endianness — is the most significant byte of a word stored at the lowest or highest memory
address;
</li>
<li>
Bit-order — how are bits numbered within bytes and how are bits allocated to bit fields.
</li>
</ul>

<p><b>Example</b></p><pre><code language="C++">In this non-compliant example, a 16-bit value is stored into a union but a 32-bit value is read back
resulting in an unspecified value being returned.

uint32_t zext ( uint16_t s )
{
	union
	{
		uint32_t ul;
		uint16_t us;
	} tmp;
	
	tmp.us = s;
	return tmp.ul; /* unspecified value */
}
</code></pre>
END_DESC
}

sub test_language {
	my $language = shift;
	return $language eq 'C++';
}

sub test_entity { 0 }

sub test_global { 1 }

sub define_options { }

sub check {
	my $check = shift;
   my %typelist;
  
	foreach my $file ($check->get_files) {
    next unless $file->kind->check('c file');
    my $type;
	
	foreach my $ref ($file->filerefs('define, declare', 'c union', 0)) {
		$check->violation($ref->ent, $ref->file, $ref->line, $ref->column, ERR2, $ref->ent->longname);
	}
	
	foreach my $ref ($file->filerefs('define, declare', 'c object, c typedef', 0)) {
		if($typelist{$ref->ent->type}){
      $type = $typelist{$ref->ent->type};
     }
    else{
      $type = resolveTypedefs($ref->ent->type, $check->db);
      $typelist{$ref->ent->type} = $type;
    }
		next unless $type =~ m! \b union \b !x;
		
		$check->violation($ref->ent, $ref->file, $ref->line, $ref->column, ERR1, $ref->ent->longname);
	}
	}
	return;
}
