# This script is designed to run with Understand - CodeCheck



# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Static keyword found in array brackets. ';


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA23_17.6";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2023\\17.6 The declaration of an array parameter shall not contain the static keyword between the [ ]";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2023',
    'Category: Mandatory',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description {
  return '17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"



<p><b>Rationale</b></p>
The C Standard  provides a mechanism for the programmer to inform the compiler that an
array parameter contains a specified minimum number of elements. Some compilers are able to take
advantage of this information to generate more efficient code for some types of processor 
</p>

<p>
If the guarantee made by the programmer is not honoured, and the number of elements is less than
the minimum specified, the behaviour is undefined.
</p>

<p>
The processors used in typical embedded applications are unlikely to provide the facilities required
to take advantage of the additional information provided by the programmer. The risk of the program
failing to meet the guaranteed minimum number of elements outweighs any potential performance
increase.
</p>

<p><b>Example</b></p>
There is no use of this C99 language feature that is compliant with this rule. The examples show some
of the undefined behaviour that can arise from its use. 
</p>

<pre><code language="C++">extern double power ( double d, int n );
</code></pre>

<p>
but the declaration is <b>not</b> visible in the following code then undefined behaviour will occur.
</p>

<pre><code language="C++">/* Non-compliant - uses static in array declarator */
uint16_t total ( uint16_t n, uint16_t a[ static 20 ] )
{
  uint16_t i;

  uint16_t sum = 0U;

  /* Undefined behaviour if a has fewer than 20 elements */
  for ( i = 0U; i &lt; n; ++i )
  {
    sum = sum + a[ i ];
  }

  return sum;
}

extern uint16_t v1[ 10 ];
extern uint16_t v2[ 20 ];

void g ( void )
{
  uint16_t x;

  x = total ( 10U, v1 ); /* Undefined - v1 has 10 elements but needs
                          * at least 20                             */

  x = total ( 20U, v2 ); /* Defined but non-compliant               */
}
</code></pre>

<p><b>See also</b></p><p>
Rule 17.5
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity {
  return 1;
}

# This determines if this script is per project or per file
sub test_global {
  return 0;
}

# Any defined options go here
sub define_options {
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the check and file from calling function, return unless file
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check ( "c file ~unknown ~unresolved" );
  my @defines = $file->filerefs ( 'define, declare', '', 1 );
  return unless @defines;

  # Loop through each defined
  foreach my $defined ( @defines ) {

    checkLine($defined->line, $defined->column, $file, $check);
  }
}


sub checkLine {
  my $line = shift;
  my $column = shift;
  my $file = shift;
  my $check = shift;

  my $binc = 1;

  my $lexer = $file->lexer(0);
  my $lexeme = $lexer->lexeme($line, $column);
  return unless $lexeme;

  $lexeme = $lexeme->nextUseful();
  if ($lexeme and $lexeme->token() eq 'Operator' and $lexeme->text() eq '['){
    while ($binc > 0) {
      $lexeme = $lexeme->next();

      if($lexeme and $lexeme->token() eq 'Operator') {
        if ($lexeme->text() eq '[') {
          $binc += 1;
        }
        if ($lexeme and $lexeme->text() eq ']') {
          $binc -= 1;
        }
      }

      if ($lexeme and $lexeme->token() eq 'Keyword') {
        if ($lexeme and $lexeme->text() eq 'static'){
          $check->violation($lexeme->ent(),$file,$lexeme->line_begin(),$lexeme->column_end(),ERR1);
          return;
        }
      }
      if ($lexeme and $lexeme->token() eq 'Newline') {
        return;
      }
    }

  }
  
}

