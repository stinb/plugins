#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-19-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => "Unused tag declaration %1";


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA23_2.4";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2023\\2.4 A project should not contain unused tag declarations";}



sub tags {
  return (
    'Language: C',
    'Category: Advisory',
    'Standard: MISRA C 2023',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description {
  return "2.4 ( Advisory ) A project should not contain unused tag declarations.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b></p>
If a tag is declared but not used, then it is unclear to a reviewer if the tag is redundant or it has been
left unused by mistake.</p>

<p><b>Example</b></p>

<p>
In the following example, the tag state is unused and the declaration could have been written
without it.
</p>

<pre><code language="C++">  void unusedtag ( void )
  {
    enum state { S_init, S_run, S_sleep }; /* Non-compliant */
  }

</code></pre>

<p>
In the following example, the tag record_t is used only in the typedef of record1_t which is used in
the rest of the translation unit whenever the type is needed. This typedef can be written in a compliant
manner by omitting the tag as shown in the definition of record2_t.
</p>

<pre><code language="C++">typedef struct record_t /* Non-compliant */
{
  uint16_t key;
  uint16_t val;
} record1_t;

typedef struct /* Compliant */
{
  uint16_t key;
  uint16_t val;
} record2_t;

</code></pre>
END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'file' );

  # Pull all typedefs, return if non exists
  my @tagsDefined = $file->filerefs( 'Define', 'Struct Type ~unnamed, Union Type ~unnamed, Enum Type ~unnamed');
  return unless @tagsDefined;
  
  # Check that each type is use
  TAG : foreach my $tag ( @tagsDefined ) {

    # If we have more than 1 typed by reference, we know we are good
    my @typedBys = $tag->ent->refs( 'Typedby' );
    next TAG if 0 + @typedBys > 1;
    
    # If we only have 1 typed by reference, test to see if it is the same as the define reference, ok if not
    my $defineRef = $tag->ent->ref( 'Definein' );
    foreach my $type ( @typedBys ) {
      next TAG if $defineRef->line != $type->line;
    }

    # If we get this far, we know we have an error
    throwError( $check, $tag->ent, $file, $tag->line, $tag->column, ERR1, $tag->ent->name );

  }
}
