#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;


use constant ERR1 => '#include statement preceded by code other than preprocesser directives or comments';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA23_20.1";}


sub name { return "Published Standards\\MISRA C 2023\\20.1 #include directives should only be preceded by preprocessor directives or comments";}

sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2023',
    'Category: Advisory',
    'Preprocessor',
  );
}

sub description { return "20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments";}

sub detailed_description { return <<"END_DESC"
<p><b>Amplification</b></p>
The rule shall be applied to the contents of a file before preprocessing occurs.
</p>

<p><b>Rationale</b></p>
To aid code readability, all the <i>#include</i> directives in a particular code file should be grouped
together near the top of the file.
</p>

<p>
Additionally, using <i>#include</i> to include a standard <i>header file</i> within a declaration or definition, or using
part of The Standard Library before the inclusion of the related standard <i>header file</i> leads to undefined
behaviour. 
</p>

<p><b>Example</b></p><pre><code language="C++">/* f.h */
xyz = 0;

/* f.c */

int16_t
#include "f.h" /* Non-compliant */

/* f1.c */
#define F1_MACRO

#include "f1.h" /* Compliant */
#include "f2.h" /* Compliant */

int32_t i = 0;

#include "f3.h" /* Non-compliant */
</code></pre>
END_DESC
}


sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

sub check {
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file ~unknown ~unresolved");
  return unless $file->filerefs("include","file");
  
  my $lexer = $file->lexer();
  return unless $lexer;
  
  my $flag = 0;
  my $lexeme = $lexer->first();
  while ($lexeme){
    if(!$flag && $lexeme->token eq "Preprocessor"){
      while($lexeme && $lexeme->token ne "Newline"){
        $lexeme=$lexeme->next;
      } 
    }
    if($lexeme->token !~ /Newline|Comment|Whitespace/ && !$lexeme->inactive()){
      $flag=1;
    }
    if($flag && $lexeme->token eq "Preprocessor" && $lexeme->next->text =~ /include/i && !$lexeme->inactive()){
      $check->violation($file,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1);
      while($lexeme && $lexeme->token ne "Newline"){
        $lexeme = $lexeme->next;
      }
    }
    $lexeme = $lexeme->next;
  }
}

