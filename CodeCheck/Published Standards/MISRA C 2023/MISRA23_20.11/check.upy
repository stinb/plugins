import re


ERR1 = 'A macro parameter immediately following a # operator shall not immediately be followed by a ## operator'



# The ID for the check
def ids():
    return ('MISRA12_20.11', 'MISRA23_20.11', 'MISRA23_19.3.2')


# The short name of the check
def name(id):
    return {
        'MISRA12_20.11': 'Published Standards/MISRA C 2012/20.11 A macro parameter immediately following a # operator shall not immediately be followed by a ## operator',
        'MISRA23_20.11': 'Published Standards/MISRA C 2023/20.11 A macro parameter immediately following a # operator shall not immediately be followed by a ## operator',
        'MISRA23_19.3.2': 'Published Standards/MISRA C++ 2023/19.3.2 A macro parameter immediately following a # operator shall not immediately be followed by a ## operator',
}[id]


def tags(id):
    return {
        'MISRA12_20.11': [
            'Language: C',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Preprocessor',
        ],
        'MISRA23_20.11': [
            'Language: C',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Preprocessor',
        ],
        'MISRA23_19.3.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C++ 2023',
            'Category: Required',
            'Preprocessor',
        ],
    }.get(id)


# The long description of the check
def detailed_description():
    return '''
<p><b>Rationale</b></p>
<p>
The order of evaluation associated with multiple #, multiple ## or a mix of # and ## preprocessor
operators is unspecified. The use of # and ## is discouraged by Rule 20.10. In particular, the result of
a # operator is a string literal and it is extremely unlikely that pasting this to any other preprocessing
token will result in a valid token.
</p>
<p><b>Example</b></p>
<pre><code language="C++">
#define A( x ) #x /* Compliant */
#define B( x, y ) x ## y /* Compliant */
#define C( x, y ) #x ## y /* Non-compliant */
</code></pre>
'''


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for macro_ref in file.filerefs("Define", "Macro Functional"):
        val = macro_ref.ent().value()

        if val and re.search("(?<!#)#(?!#).+##", val):
            check.violation(macro_ref.ent(), file, macro_ref.line(), macro_ref.column(), ERR1)