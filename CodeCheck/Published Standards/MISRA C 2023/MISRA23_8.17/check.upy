ERR1 = "Multiple alignment specifiers should be avoided"


# The ID for the check
def ids():
    return ('MISRA23_8.17')


# The short name of the check
def name(id):
    return {
        'MISRA23_8.17': "Published Standards/MISRA C 2023/8.17 At most one explicit alignment specifier should appear in an object declaration"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_8.17': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Declarations and Definitions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_8.17': """
<p><b>Rationale</b></p>
<p>If the alignment of an object is important, it should be specified explicitly.</p>
<p>Because an alignment specifier only places a minimum requirement on the actual alignment of an
object, C permits a declaration to contain multiple alignment specifiers, with the strictest imposing the
final requirement.</p>
<p>If separate conditions require different minimum permitted alignments for an object, they should be
combined explicitly by the expression controlling the specifier. Otherwise, the conflicting alignment
specifiers risk obscuring the intent of the declaration from a human reviewer.</p>

<p><b>Example</b></p>
<pre><code language="C++">int32_t a; /* Compliant - no alignment specifier */
alignas(16) int32_t b; /* Compliant - one alignment specifier */
alignas(16) alignas(8) int32_t c; /* Non-compliant - two alignment specifiers */
alignas(16) alignas(0) int32_t d; /* Non-compliant - also violates Rule 8.16 */</code></pre>

<p>The following example shows a way of generating conditional alignment:</p>

<pre><code language="C++">#define SML_ALIGN 16
#define BIG_ALIGN 32
alignas(MAX(SML_ALIGN, BIG_ALIGN)) int32_t e; /* Compliant */</code></pre>

<p><b>See also</b></p>
<p>Rule 8.15, Rule 8.16</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if "alignas" not in file.contents():
        return
    
    lex = file.lexer(lookup_ents=False).first()

    while lex:
        if (lex.text() == "alignas") and (lex.token() == "Identifier"):
            on_param = 0

            while lex:
                if lex.text() == "(":
                    on_param += 1
                elif lex.text() == ")":
                    on_param -= 1

                    if not on_param:
                        lex = lex.next(True, True)
                        break

                lex = lex.next(True, True)

            if (lex.text() == "alignas") and (lex.token() == "Identifier"):
                check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1)

        lex = lex.next(True, True)