ERR1 = "A function declared with a _Noreturn function specifier shall have void return type"


# The ID for the check
def ids():
    return ('MISRA23_17.10')


# The short name of the check
def name(id):
    return {
        'MISRA23_17.10': "Published Standards/MISRA C 2023/17.10 A function declared with a _Noreturn function specifier shall have void return type"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_17.10': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Functions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_17.10': """
<p><b>Rationale</b></p>
<p>By definition, use of the _Noreturn function specifier indicates unambiguously that a function will not
return to its caller.</p>
<p>A function that cannot return cannot provide a return value and shall therefore be defined with a
void return type.</p>

<p><b>Example</b></p>
<pre><code language="C++">_Noreturn int32_t f ( void ); /* Non-compliant */
_Noreturn void g ( void ); /* Compliant */</code></pre>

<p><b>See also</b></p>
<p>Rule 17.9, Rule 17.11</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if "_Noreturn" not in file.contents():
        return
    
    lex = file.lexer(lookup_ents=True).first()
    
    while lex:
        if (lex.text() == "_Noreturn") and (lex.token() == "Identifier"):
            while lex:
                if (lex.token() == "Identifier") and lex.ent() and lex.ent().kind().check("Function"):
                    utype = lex.ent().freetext("UnderlyingType")

                    if str(utype) != "void":
                        check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1)
                    
                    break

                lex = lex.next(True, True)

        lex = lex.next(True, True)