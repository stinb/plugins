import re


ERR1 = "The use of 'goto' for backward jumps is prohibited"


# The ID for the check
def ids():
    return ('MISRA23_15.2', 'MISRA12_15.2')


# The short name of the check
def name(id):
    return {
        'MISRA23_15.2': "Published Standards/MISRA C 2023/15.2 The goto statement shall jump to a label declared later in the same function",
        'MISRA12_15.2': "Published Standards/MISRA C 2012/15.2 The goto statement shall jump to a label declared later in the same function"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_15.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Control Flow',
        ],
        'MISRA12_15.2': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Required',
            'Control Flow',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_15.2': """
<p><b>Rationale</b></p>
<p>Unconstrained use of goto can lead to programs that are unstructured and extremely difficult to
understand.</p>
<p>Restricting the use of goto so that “back” jumps are prohibited ensures that iteration only occurs if
the iteration statements provided by the language are used, helping to minimize visual code
complexity.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( void )
{
 int32_t j = 0;

L1:
 ++j;
 if ( 10 == j )
 {
 goto L2; /* Compliant */
 }
 goto L1; /* Non-compliant */

L2:
 ++j;
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 15.1, Rule 15.3, Rule 15.4</p>
""",
        'MISRA12_15.2': """
<p><b>Rationale</b></p>
<p>Unconstrained use of goto can lead to programs that are unstructured and extremely difficult to
understand.</p>
<p>Restricting the use of goto so that “back” jumps are prohibited ensures that iteration only occurs if
the iteration statements provided by the language are used, helping to minimize visual code
complexity.</p>

<p><b>Example</b></p>
<pre><code language="C++">void f ( void )
{
 int32_t j = 0;

L1:
 ++j;
 if ( 10 == j )
 {
 goto L2; /* Compliant */
 }
 goto L1; /* Non-compliant */

L2:
 ++j;
}
</code></pre>

<p><b>See also</b></p>
<p>Rule 15.1, Rule 15.3, Rule 15.4</p>
"""
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search(r'goto', file.contents()):
        return
    
    for func_ref in file.filerefs("Define", "Function"):
        for goto_ref in func_ref.ent().refs("Define", "Label"):
            for use_ref in goto_ref.ent().refs("Useby"):
                if use_ref.line() > goto_ref.line():
                    check.violation(goto_ref.ent(), file, use_ref.line(), use_ref.column(), ERR1)
