# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 1-31-17


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Flexible array member %1, declared';


# This registers ERR1 with Understand
sub register_tr_text {

  my $check = shift;
  $check->add_tr_text(ERR1);

}

sub checkID { return "MISRA23_18.7";}



# This is the short error the Understand will use
sub name { return "Published Standards\\MISRA C 2023\\18.7 Flexible array members shall not be declared";}



sub tags {
  return (
    'Language: C',
    'Standard: MISRA C 2023',
    'Category: Required',
    'Declarations and Definitions',
  );
}

# This is the full description of the rule being tested
sub description {
  return '18.7 ( Required ) Flexible array members shall not be declared.';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b></p>
Flexible array members are most likely to be used in conjunction with dynamic memory allocation
which is banned by Dir 4.12 and Rule 21.3.
</p>

<p>
The presence of flexible array members modifies the behaviour of the sizeof operator in ways that
might not be expected by a programmer. The assignment of a structure that contains a flexible array
member to another structure of the same type may not behave in the expected manner as it copies
only those elements up to but not including the start of the flexible array member.
</p>

<p><b>Example</b></p>
</p>

<pre><code language="C++">  #include &lt;stdlib.h&gt;

  struct s
  {
    uint16_t len;
    uint32_t data[ ];   /* Non-compliant - flexible array member            */
  } str;

  struct s *copy ( struct s *s1 )
  {
    struct s *s2;

                        /* Omit malloc ( ) return check for brevity         */
    s2 = malloc ( sizeof ( struct s ) + ( s1-&gt;len * sizeof ( uint32_t ) ) );

    *s2 = *s1;          /* Only copies s1-&gt;len                              */

    return s2;
  }

</code></pre>

<p><b>See also</b><br>
Dir 4.12, Rule 21.3
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is run per file
sub test_entity {
  return 1;
}


# This determines if this script is run on the whole project
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options {
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( 'C File' );
  
  # By definition, flexible array members are only in C Structs.
  my @structsDefined = $file->filerefs( 'C Define', 'C Struct', 1 );
  return unless @structsDefined;
  
  # Chech each struct for a data member with a type violation
  foreach my $struct ( @structsDefined ) {

    my @structMembers = $struct->ent->refs( 'C Define, C Declare', 'C Member Object', 1 );
    foreach my $member ( @structMembers ) {

      # Data member with '[]' in its type should be a violation of this rule.
      $check->violation( $member->ent, $file, $member->line, $member->column, ERR1, $member->ent->name ) if $member->ent->type =~ /\[\]/;

    }
  }
}
