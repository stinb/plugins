ERR1 = "Alignment specification is not the same in file %1 on line %2"


# The ID for the check
def ids():
    return ('MISRA23_8.15')


# The short name of the check
def name(id):
    return {
        'MISRA23_8.15': "Published Standards/MISRA C 2023/8.15 All declarations of an object with an explicit alignment specification shall specify the same alignment"
    }[id]


# The short description of the check
def tags(id):
    return {
        'MISRA23_8.15': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Required',
            'Declarations and Definitions',
        ],
    }.get(id)


# The long description of the check
def detailed_description(id):
    return {
        'MISRA23_8.15': """
<p><b>Amplification</b></p>
<p>If any declaration (including the definition) of an object includes an explicit alignment specification, all
other declarations of the same object shall also include the same explicit alignment specification.</p>
<p>Two alignment specifications are the same if they are lexically identical after macro expansion.</p>
<p>This rule applies both to alignments specified directly by an expression, and by naming a type.</p>

<p><b>Rationale</b></p>
<p>If multiple declarations of an object with external linkage have conflicting alignment specifications, the
behaviour is undefined. Therefore, if the alignment of the object is important, it should be listed
explicitly in order to avoid the risk of creating conflicting declarations in multiple translation units. If
the alignment of the object does not need to be set explicitly, the alignment specification should be
omitted entirely to avoid confusion.</p>
<p>Since an object with internal linkage is only accessible by name from within a single translation unit,
there is no direct risk of incompatible alignment specifications causing undefined behaviour.
However, this rule reduces the risk of accidentally introducing undefined behaviour during
maintenance if the code is later modified to give an object external linkage instead.</p>
<p>If the alignment operand is a type name and the alignment specifications do not consistently use that
same type name, there is a risk of introducing inconsistency if the configuration changes, such as if
code is recompiled on a different platform with different fundamental type alignments.</p>

<p><b>Developer's Note</b></p>
<p>The violation is only flagged on the declaration or definition where 'alignas' is used.</p>

<p><b>Example</b></p>
<pre><code language="C++">/* header.h - #included by both file1.c and file2.c */

extern alignas (16) int32_t a;
extern alignas (0) int32_t b;
extern int32_t c;
extern int32_t d;
extern alignas (16) int32_t e;
extern alignas (16) int32_t f;
extern int32_t g;
extern alignas (float) int32_t i;
extern alignas (float) int32_t j;
extern alignas (float) int32_t k;
extern alignas (float) int32_t l;
extern alignas (float32_t) int32_t m;

/* file1.c */
alignas (16) int32_t a; /* Compliant - same explicit alignment */
alignas (16) int32_t b; /* Non-compliant - not consistently explicit */
alignas (16) int32_t c; /* Non-compliant - not consistently explicit */
 int32_t d; /* Compliant - not manually aligned */
 int32_t e; /* Non-compliant - constraint violation */
alignas (16) int32_t f; /* Non-compliant because of file2.c */
alignas (16) int32_t g; /* Non-compliant, and undefined because of file2.c */
extern alignas (16) int32_t h; /* Non-compliant with file2.c */
alignas (float) int32_t i; /* Compliant - same type used */
alignas (double) int32_t j; /* Non-compliant - different type, and therefore
 may be a constraint violation */
alignas (4) int32_t k; /* Non-compliant - regardless of the size of float */
alignas (float32_t) int32_t l; /* Non-compliant - potentially a different type on
 a different platform */
alignas (float32_t) int32_t m; /* Compliant - same type used by name */

/* file2.c */
extern int32_t f; /* Non-compliant - not consistent with
 either file1.c or header.h */

extern alignas (8) int32_t g; /* Non-compliant - undefined behaviour because of
 inconsistency with file1.c */
extern alignas (8) int32_t h; /* Non-compliant - not consistent with file1.c
 and undefined behaviour */</code></pre>

<p><b>See also</b></p>
<p>Rule 8.6, Rule 8.16, Rule 8.17</p>
""",
    }[id]


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = file.lexer()

    for macro_ref in file.filerefs("Use", "Macro"):
            if macro_ref.ent().name() != "alignas":
                continue

            lex = lexer.lexeme(macro_ref.line(), macro_ref.column())
            on_align = False
            on_param = 0
            alignment_spec = ""

            while lex and (lex.text() != ";"):
                if lex.text() == "alignas":
                    on_align = True
                if on_align and (lex.text() == "("):
                    on_param += 1
                elif on_align and (lex.text() == ")"):
                    on_param -= 1
                    
                    if not on_param:
                        on_align = False
                elif on_param:
                    alignment_spec += str(lex.text())
                elif lex.token() == "Identifier" and lex.ent() and lex.ent().kind().check("Object"):
                    for def_ref in lex.ent().refs("Definein, Declarein"):
                        if def_ref.file().id() == file.id():
                            continue

                        if not is_alignment_same(def_ref, alignment_spec):
                            check.violation(lex.ent(), file, lex.line_begin(), lex.column_begin(), ERR1, def_ref.file().name(), def_ref.line())
                            break

                lex = lex.next(True, True)


def is_alignment_same(obj_ref, orig_align):
    lex = obj_ref.file().lexer().lexeme(obj_ref.line(), obj_ref.column())

    while lex and (lex.line_begin() == obj_ref.line()) and (lex.text() != ";"):
        if lex.text() == "alignas":
            on_param = 0
            alignment = ""

            while lex:
                if lex.text() == "(":
                    on_param += 1
                elif lex.text() == ")":
                    on_param -= 1

                    if not on_param:
                        break
                elif on_param:
                    alignment += str(lex.text())

                lex = lex.next(True, True)

            if alignment == orig_align:
                return True
            
            return False

        lex = lex.previous(True, True)                   
