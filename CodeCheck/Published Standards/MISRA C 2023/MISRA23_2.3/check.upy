ERR1 = 'Type declaration is unused'


def ids():
    return ('MISRA12_2.3', 'MISRA23_2.3')


def name(id):
    return {
        'MISRA12_2.3': "Published Standards/MISRA C 2012/2.3 A project should not contain unused type declarations",
        'MISRA23_2.3': "Published Standards/MISRA C 2023/2.3 A project should not contain unused type declarations",
    }[id]


def tags(id):
    return {
        'MISRA12_2.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2012',
            'Category: Advisory',
            'Types',
            'Declarations and Definitions',
        ],
        'MISRA23_2.3': [
            'Language: C',
            'Language: C++',
            'Standard: MISRA C 2023',
            'Category: Advisory',
            'Types',
            'Declarations and Definitions',
        ],
    }.get(id)


def detailed_description(id):
    return {
        'MISRA12_2.3': """
<p><b>Rationale</b></p>
<p>If a type is declared but not used, then it is unclear to a reviewer if the type is redundant or it has been
left unused by mistake.</p>

<p><b>Example</b></p>
<pre><code language="C++">int16_t unusedtype ( void )
{
 typedef int16_t local_Type; /* Non-compliant */
 return 67;
}
</code></pre>
""",
    'MISRA23_2.3': """
<p><b>Rationale</b></p>
<p>If a type is declared but not used, then it is unclear to a reviewer if the type is redundant or it has
been left unused by mistake.</p>

<p><b>Example</b></p>
<pre><code language="C++">int16_t unusedtype ( void )
{
 typedef int16_t local_Type; /* Non-compliant */
 return 67;
}</code></pre>
""",
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return file.kind().check('Code File, Header File')


def test_global():
    return False


def check(check, file):
    for type_ref in file.filerefs("Define", "Typedef"):
        if not type_ref.ent().ref("~Define ~Definein ~Typed"):
            check.violation(type_ref.ent(), file, type_ref.line(), type_ref.column(), ERR1)
