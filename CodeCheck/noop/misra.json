{
  "MISRA12_20.3": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2012/20.3 The #include directive shall be followed by either a <filename> or \"filename\" sequence",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p><b>Amplification</b></p>",
        "<p>",
        "This rule applies after macro replacement has been performed.",
        "</p>",
        "",
        "<p><b>Rationale</b></p>",
        "<p>",
        "The behaviour is undefined if a <i>#include</i> directive does not use one of the following forms:",
        "</p>",
        "",
        "<ul>",
        "  <li>",
        "    #include &lt;filename&gt;",
        "  </li>",
        "  <li>",
        "    #include \"filename\"",
        "  </li>",
        "</ul>",
        "",
        "<p><b>Example</b></p>",
        "<pre>",
        "  #include \"filename.h\"     /* Compliant */",
        "  #include &lt;filename.h&gt;     /* Compliant */",
        "  #include another.h        /* Non-compliant */",
        "",
        "  #define HEADER \"filename.h\"",
        "  #include HEADER           /* Compliant */",
        "  #define FILENAME file2.h",
        "  #include FILENAME         /* Non-compliant */",
        "",
        "  #define BASE \"base\"",
        "  #define EXT \".ext\"",
        "  #include BASE EXT          /* Non-compliant - strings are concatenated",
        "                              * after preprocessing */",
        "",
        "  #include \"./include/cpu.h\" /* Compliant - filename may include a path */",
        "</pre>"
      ]
    }
  },
  "MISRA08_15-3-7": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2008", "Category: Required", "Exception Handling" ],
    "name": "Published Standards/MISRA-C++ 2008/15-3-7 Catch-All Statement Before Last",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",
        "<p><b>Title</b></p>",
        "<p>Where multiple handlers are provided in a single <i>try-catch</i> statement or <i>function-try-block</i>, any ellipsis (catch-all) handler shall occur last.</p>",
        "<p><b>Rationale</b></p>",
        "<p>If the catch-all handler is found before any other handler, that behaviour will be performed. Any handlers after the catch-all are <i>unreachable code</i> and can never be executed.</p>",
        "<p><b>Example</b></p><pre><code language=\"C++\">void f1 ( )",
        "{",
        "   try",
        "   {",
        "      // ...",
        "   }",
        "   catch ( int32_t i )   // int handler",
        "   {",
        "      // Handle int exceptions",
        "   }",
        "   catch( ... )          // catch-all handler",
        "   {",
        "      // Handle all other exception types",
        "   }",
        "}",
        "void f2 ( )",
        "{",
        "   try",
        "   {",
        "      // ...",
        "   }",
        "   catch( ... )          // catch-all handler",
        "   {",
        "      // Handle all exception types",
        "   }",
        "   catch ( int32_t i )   // Non-compliant - handler will never be called",
        "   {",
        "   }",
        "}",
        "</code></pre>"
      ]
    }
  },
  "MISRA08_16-2-6": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2008", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA-C++ 2008/16-2-6 The #include directive shall be followed by either a <filename> or \"filename\" sequence",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",
        "<p><b>Rationale</b></p>",
        "These are the only forms for the #include directive permitted by ISO/IEC 14882:2003 [1].<br></p>",
        "<p><b>Example</b></p>",
        "<p>For example, the following are allowed.</p>",
        "<pre><code language=\"C++\">#include \"filename.h\" // Compliant",
        "#include &lt;filename.h&gt; // Compliant",
        "#define HEADER \"filename.h\" // Non-compliant with Rule 16-2-2",
        "#include HEADER // Compliant",
        "#include another.h // Non-compliant",
        "</code></pre>"
      ]
    }
  },
  "MISRA04_19.3": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2004", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA-C 2004/19.3 The #include directive shall be followed by either a <filename> or \"filename\" sequence",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",
        "<p>For example, the following are allowed.</p>",
        "<pre>",
        "  #include \"filename.h\"",
        "  #include &lt;filename.h&gt;",
        "  #define FILE_A \"filename.h\"",
        "  #include FILE_A",
        "</pre>"
      ]
    }
  },
  "MISRA08_0-3-1": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2008", "Category: Document", "Control Flow" ],
    "name": "Published Standards/MISRA-C++ 2008/0-3-1 Minimization of run-time failures shall be ensured by the use of static analysis tools",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",
        "<p><b>Rule</b></p><p>",
        "Minimization of run-time failures shall be ensured by the use of at least one of:<br>",
        "&nbsp;&nbsp;(a) static analysis tools/techniques;<br> ",
        "&nbsp;&nbsp;(b) dynamic analysis tools/techniques;<br>",
        "&nbsp;&nbsp;(c) explicit coding of checks to handle run-time faults.</p>",
        "",
        "<p><b>Rationale</b></p><p>",
        "Run-time checking is an issue (not specific to C++) to which developers need to pay special ",
        "attention, especially as the C++ language is weak in its provision of any run-time checking. C++ ",
        "implementations are not required to perform many of the dynamic checks that are necessary for ",
        "robust software. It is therefore an issue that C++ developers need to consider carefully, adding ",
        "dynamic checks to code wherever there is the potential for run-time errors to occur.</p>",
        "",
        "<p>Where expressions consist only of values within a well-defined range, a run-time check may ",
        "not be necessary, provided it can be demonstrated that for all values within the defined range ",
        "the exception cannot occur. Such a demonstration, if used, should be documented along with ",
        "the assumptions on which it depends. However, if adopting this approach, be very careful about ",
        "subsequent modifications of the code that may invalidate the assumptions, or of the assumptions ",
        "changing for any other reason.</p>",
        "",
        "<p>The following notes give some guidance on areas where consideration needs to be given to the ",
        "provision of dynamic checks.</p>",
        "",
        "<p><b>Arithmetic Errors</b></p><p>",
        "This includes errors occurring in the evaluation of expressions, such as overflow, underflow, ",
        "division by zero or loss of significant bits through shifting.",
        "In considering integer overflow, note that unsigned integer calculations do not strictly ",
        "overflow (producing undefined values), but the values wrap around (producing defined, but ",
        "possibly unexpected, values).</p>",
        "",
        "<p><b>Pointer Arithmetic</b></p><p>",
        "Ensure that when an address is calculated dynamically the computed address is reasonable ",
        "and points somewhere meaningful. In particular it should be ensured that if a pointer points ",
        "within a structure or array, then when the pointer has been incremented or otherwise altered ",
        "it still points to the same structure or array. See Rule 5-0-15, Rule 5-0-16, Rule 5-0-17 ",
        "and Rule 5-0-18 for restrictions on pointer arithmetic.</p>",
        "",
        "<p><b>Array Bound Errors</b></p><p>",
        "Ensure that array indices are within the bounds of the array size before using them to index ",
        "the array.</p>",
        "",
        "<p><b>Function Arguments</b></p><p>",
        "Function arguments should be validated.</p>",
        "",
        "<p><b>Pointer Dereferencing</b></p><p>",
        "Where a function returns a pointer and that pointer is subsequently de-referenced the ",
        "program should first check that the pointer is not NULL. Within a function, it is relatively ",
        "straightforward to reason about which pointers may or may not hold NULL values. Across ",
        "function boundaries, especially when calling functions defined in other source files or ",
        "libraries, it is much more difficult.</p>",
        "",
        "<pre style=\"margin-top:0;padding-top:0;\">",
        "// Given a pointer to a message, check the message header and return",
        "// a pointer to the body of the message or NULL if the message is",
        "// invalid.",
        "const char_t *msg_body ( const char_t * msg )",
        "{",
        "const char_t * body = NULL;",
        "  if ( msg != NULL )",
        "  {",
        "    if ( msg_header_valid ( msg ) )",
        "    {",
        "      body = &msg [ MSG_HEADER_SIZE ];",
        "    }",
        "  }",
        "  return ( body );",
        "}",
        "...",
        "char_t msg_buffer [ MAX_MSG_SIZE ];",
        "const char_t * payload;",
        "...",
        "payload = msg_body ( msg_buffer );",
        "if ( payload != NULL )",
        "{",
        "  // process the message payload",
        "}",
        "</pre>",
        "",
        "<p>The techniques that will be employed to minimize run-time failures should be planned and ",
        "documented, e.g. in design standards, test plans, static analysis configuration files, code review ",
        "checklists.</p>"
      ]
    }
  },
  "MISRA12_1.1": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Syntax" ],
    "name": "Published Standards/MISRA C 2012/1.1 The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p>",
        "The program shall contain no violations of the standard C syntax and",
        "constraints, and shall not exceed the implementation's translation limits",
        "</p>"
      ]
    }
  },
  "MISRA12_DIR_2.1": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required"],
    "name": "Published Standards/MISRA C 2012/Directive 2.1 All source files shall compile without any compilation errors",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p>",
        "All source files shall compile without any compilation errors",
        "</p>"
      ]
    }
  },
  "MISRA04_19.11": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2004", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA-C 2004/19.11 All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check cannot be automated</span></b>",
        "<p><b>Rationale</b></p>",
        "",
        "If an attempt is made to use an identifier in a preprocessor directive, and that",
        "identifier has not been defined, the preprocessor will sometimes not give any",
        "warning but will assume the value zero. <i>#ifdef</i>, <i>#ifndef</i> and",
        "<i>defined()</i> are provided to test the existence of a macro, and are",
        "therefore excluded.",
        "</p>",
        "",
        "<p><b>Example</b></p>",
        "",
        "<pre>",
        "#if x &lt; 0 /* x assumed to be zero as it is not defined */",
        "</pre>",
        "",
        "<p>",
        "Consideration should be given to the use of a <i>#ifdef</i> test before an",
        "identifier is used.",
        "</p>",
        "",
        "<p>",
        "Note that preprocessing identifiers may be defined either by use of",
        "<i>#define</i> directives or by options specified at compiler invocation.",
        "However, the use of the <i>#define</i> directive is preferred.",
        "</p>"
      ]
    }
  },
  "MISRA08_0-3-2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2008", "Category: Required", "Exception Handling" ],
    "name": "Published Standards/MISRA-C++ 2008/0-3-2 If a function generates error information, then that error information shall be tested",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "If a function generates error information, then that error information shall be tested",
        "</p>"
      ]
    }
  },
  "MISRA12_DIR_4.7": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Functions" ],
    "name": "Published Standards/MISRA C 2012/Directive 4.7 If a function generates error information, then that error information shall be tested",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "If a function generates error information, then that error information shall be tested",
        "</p>"
      ]
    }
  },
  "MISRA08_9-6-1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2008", "Category: Document", "Bit-fields" ],
    "name": "Published Standards/MISRA-C++ 2008/9-6-1 When the absolute positioning of bits representing a bit-field is required, then the behavior and packing of bit-fields shall be documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "When the absolute positioning of bits representing a bit-field is required, then the behavior and packing of bit-fields shall be documented",
        "</p>"
      ]
    }
  },
  "MISRA12_DIR_1.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required" ],
    "name": "Published Standards/MISRA C 2012/Directive 1.1 Any implementation-defined behaviour on which the output of the program depends shall be documented and understood",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Any implementation-defined behaviour on which the output of the program depends",
        "shall be documented and understood",
        "</p>"
      ]
    }
  },
  "MISRA12_1.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Advisory", "Control Flow" ],
    "name": "Published Standards/MISRA C 2012/1.2 Language extensions should not be used",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Language extensions should not be used",
        "</p>"
      ]
    }
  },
  "MISRA12_1.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C 2012/1.3 There shall be no occurrence of undefined or critical unspecified behaviour",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no occurrence of undefined or critical unspecified behaviour",
        "</p>"
      ]
    }
  },
  "MISRA12_11.6": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Types" ],
    "name": "Published Standards/MISRA C 2012/11.6 A cast shall not be performed between pointer to void and an arithmetic type",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",
        "",
        "<p>",
        "A cast shall not be performed between pointer to void and an arithmetic type",
        "</p>"
      ]
    }
  },
  "MISRA12_11.7": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Types" ],
    "name": "Published Standards/MISRA C 2012/11.7 A cast shall not be performed between pointer to object and a non-integer arithmetic type",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p>",
        "A cast shall not be performed between pointer to object and a non-integer arithmetic type",
        "</p>"
      ]
    }
  },
  "MISRA12_12.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Advisory", "Expressions" ],
    "name": "Published Standards/MISRA C 2012/12.1 The precedence of operators within expressions should be made explicit",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The precedence of operators within expressions should be made explicit",
        "</p>"
      ]
    }
  },
  "MISRA12_12.4": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Advisory", "Expressions" ],
    "name": "Published Standards/MISRA C 2012/12.4 Evaluation of constant expressions should not lead to unsigned integer wrap-around",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Evaluation of constant expressions should not lead to unsigned integer wrap-around",
        "</p>"
      ]
    }
  },
  "MISRA12_13.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Expressions" ],
    "name": "Published Standards/MISRA C 2012/13.2 The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders",
        "</p>"
      ]
    }
  },
  "MISRA12_14.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Expressions" ],
    "name": "Published Standards/MISRA C 2012/14.3 Controlling expressions shall not be invariant",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Controlling expressions shall not be invariant",
        "</p>"
      ]
    }
  },
  "MISRA12_18.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Pointers" ],
    "name": "Published Standards/MISRA C 2012/18.1 A pointer resulting from arithmetic on a pointer operand shall address",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A pointer resulting from arithmetic on a pointer operand shall address",
        "</p>"
      ]
    }
  },
  "MISRA12_19.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Mandatory", "Declarations and Definitions" ],
    "name": "Published Standards/MISRA C 2012/19.1 An object shall not be assigned or copied to an overlapping object",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "An object shall not be assigned or copied to an overlapping object",
        "</p>"
      ]
    }
  },
  "MISRA08_0-1-9": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2008", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA-C++ 2008/0-1-9 There shall be no dead code",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no dead code",
        "</p>"
      ]
    }
  },
  "MISRA12_2.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C 2012/2.2 There shall be no dead code",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no dead code",
        "</p>"
      ]
    }
  },
  "MISRA12_20.12": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2012/20.12 A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators",
        "</p>"
      ]
    }
  },
  "MISRA12_20.7": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Expressions" ],
    "name": "Published Standards/MISRA C 2012/20.7 Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses",
        "</p>"
      ]
    }
  },
  "MISRA12_20.8": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2012/20.8 The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1",
        "</p>"
      ]
    }
  },
  "MISRA12_20.9": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Identifiers" ],
    "name": "Published Standards/MISRA C 2012/20.9 All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation",
        "</p>"
      ]
    }
  },
  "MISRA12_22.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Mandatory", "Memory Allocation" ],
    "name": "Published Standards/MISRA C 2012/22.2 A block of memory shall only be freed if it was allocated by means of a Standard Library function",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A block of memory shall only be freed if it was allocated by means of a Standard Library function",
        "</p>"
      ]
    }
  },
  "MISRA12_22.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C 2012/22.3 The same file shall not be open for read and write access at the same time on different streams",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The same file shall not be open for read and write access at the same time on different streams",
        "</p>"
      ]
    }
  },
  "MISRA12_22.4": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Mandatory", "Control Flow" ],
    "name": "Published Standards/MISRA C 2012/22.4 There shall be no attempt to write to a stream which has been opened as read-only",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no attempt to write to a stream which has been opened as read-only",
        "</p>"
      ]
    }
  },
  "MISRA12_22.5": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Mandatory", "Pointers" ],
    "name": "Published Standards/MISRA C 2012/22.5 A pointer to a FILE object shall not be dereferenced",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A pointer to a FILE object shall not be dereferenced",
        "</p>"
      ]
    }
  },
  "MISRA12_22.6": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Mandatory", "Pointers" ],
    "name": "Published Standards/MISRA C 2012/22.6 The value of a pointer to a FILE shall not be used after the associated stream has been closed",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The value of a pointer to a FILE shall not be used after the associated stream has been closed",
        "</p>"
      ]
    }
  },
  "MISRA12_DIR_3.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Documentation"],
    "name": "Published Standards/MISRA C 2012/Directive 3.1 All code shall be traceable to documented requirements",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All code shall be traceable to documented requirements",
        "</p>"
      ]
    }
  },
  "MISRA12_DIR_4.11": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Libraries" ],
    "name": "Published Standards/MISRA C 2012/Directive 4.11 The validity of values passed to library functions shall be checked",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The validity of values passed to library functions shall be checked",
        "</p>"
      ]
    }
  },
  "MISRA12_DIR_4.13": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Advisory", "Functions" ],
    "name": "Published Standards/MISRA C 2012/Directive 4.13 Functions which are designed to provide operations on a resource should be called in an appropriate sequence",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Functions which are designed to provide operations on a resource should be",
        "called in an appropriate sequence",
        "</p>"
      ]
    }
  },
  "MISRA12_DIR_4.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Exception Handling" ],
    "name": "Published Standards/MISRA C 2012/Directive 4.1 Run-time failures shall be minimized",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Run-time failures shall be minimized",
        "</p>"
      ]
    }
  },
  "MISRA12_DIR_4.9": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Advisory", "Functions" ],
    "name": "Published Standards/MISRA C 2012/Directive 4.9 A function should be used in preference to a function-like macro where they are interchangeable",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A function should be used in preference to a function-like macro where they are",
        "interchangeable",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_1.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required" ],
    "name": "Published Standards/MISRA C 2023/Directive 1.1 Any implementation-defined behaviour on which the output of the program depends shall be documented and understood",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Any implementation-defined behaviour on which the output of the program depends",
        "shall be documented and understood",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_2.1": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required"],
    "name": "Published Standards/MISRA C 2023/Directive 2.1 All source files shall compile without any compilation errors",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p>",
        "All source files shall compile without any compilation errors",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_3.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Documentation"],
    "name": "Published Standards/MISRA C 2023/Directive 3.1 All code shall be traceable to documented requirements",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All code shall be traceable to documented requirements",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_4.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Exception Handling" ],
    "name": "Published Standards/MISRA C 2023/Directive 4.1 Run-time failures shall be minimized",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Run-time failures shall be minimized",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_4.7": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Functions" ],
    "name": "Published Standards/MISRA C 2023/Directive 4.7 If a function returns error information, then that error information shall be tested",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "If a function returns error information, then that error information shall be tested",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_4.9": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Advisory", "Functions" ],
    "name": "Published Standards/MISRA C 2023/Directive 4.9 A function should be used in preference to a function-like macro where they are interchangeable",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A function should be used in preference to a function-like macro where they are",
        "interchangeable",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_4.11": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Libraries" ],
    "name": "Published Standards/MISRA C 2023/Directive 4.11 The validity of values passed to library functions shall be checked",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The validity of values passed to library functions shall be checked",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_4.13": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Advisory", "Functions" ],
    "name": "Published Standards/MISRA C 2023/Directive 4.13 Functions which are designed to provide operations on a resource should be called in an appropriate sequence",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Functions which are designed to provide operations on a resource should be",
        "called in an appropriate sequence",
        "</p>"
      ]
    }
  },
  "MISRA23_1.1": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Syntax" ],
    "name": "Published Standards/MISRA C 2023/1.1 The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p>",
        "The program shall contain no violations of the standard C syntax and",
        "constraints, and shall not exceed the implementation's translation limits",
        "</p>"
      ]
    }
  },
  "MISRA23_1.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Advisory", "Control Flow" ],
    "name": "Published Standards/MISRA C 2023/1.2 Language extensions should not be used",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Language extensions should not be used",
        "</p>"
      ]
    }
  },
  "MISRA23_1.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C 2023/1.3 There shall be no occurrence of undefined or critical unspecified behaviour",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no occurrence of undefined or critical unspecified behaviour",
        "</p>"
      ]
    }
  },
  "MISRA23_2.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C 2023/2.2 A project shall not contain dead code",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A project shall not contain dead code",
        "</p>"
      ]
    }
  },

  "MISRA23_11.6": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Types" ],
    "name": "Published Standards/MISRA C 2023/11.6 A cast shall not be performed between pointer to void and an arithmetic type",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p>",
        "A cast shall not be performed between pointer to void and an arithmetic type",
        "</p>"
      ]
    }
  },
  "MISRA23_11.7": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Types" ],
    "name": "Published Standards/MISRA C 2023/11.7 A cast shall not be performed between pointer to object and a non-integer arithmetic type",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p>",
        "A cast shall not be performed between pointer to object and a non-integer arithmetic type",
        "</p>"
      ]
    }
  },
  "MISRA23_12.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Advisory", "Expressions" ],
    "name": "Published Standards/MISRA C 2023/12.1 The precedence of operators within expressions should be made explicit",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The precedence of operators within expressions should be made explicit",
        "</p>"
      ]
    }
  },
  "MISRA23_12.4": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Advisory", "Expressions" ],
    "name": "Published Standards/MISRA C 2023/12.4 Evaluation of constant expressions should not lead to unsigned integer wrap-around",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Evaluation of constant expressions should not lead to unsigned integer wrap-around",
        "</p>"
      ]
    }
  },
  "MISRA23_13.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Expressions" ],
    "name": "Published Standards/MISRA C 2023/13.2 The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders",
        "</p>"
      ]
    }
  },
  "MISRA23_14.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Expressions" ],
    "name": "Published Standards/MISRA C 2023/14.3 Controlling expressions shall not be invariant",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Controlling expressions shall not be invariant",
        "</p>"
      ]
    }
  },
  "MISRA23_18.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Pointers" ],
    "name": "Published Standards/MISRA C 2023/18.1 A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand",
        "</p>"
      ]
    }
  },
  "MISRA23_19.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Mandatory", "Declarations and Definitions" ],
    "name": "Published Standards/MISRA C 2023/19.1 An object shall not be assigned or copied to an overlapping object",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "An object shall not be assigned or copied to an overlapping object",
        "</p>"
      ]
    }
  },
  "MISRA23_20.3": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2023/20.3 The #include directive shall be followed by either a <filename> or \"filename\" sequence",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span>",
        "</b>",
        "",
        "<p><b>Amplification</b></p>",
        "<p>",
        "This rule applies after macro replacement has been performed.",
        "</p>",
        "",
        "<p><b>Rationale</b></p>",
        "<p>",
        "The behaviour is undefined if a <i>#include</i> directive does not use one of the following forms:",
        "</p>",
        "",
        "<ul>",
        "  <li>",
        "    #include &lt;filename&gt;",
        "  </li>",
        "  <li>",
        "    #include \"filename\"",
        "  </li>",
        "</ul>",
        "",
        "<p><b>Example</b></p>",
        "<pre>",
        "  #include \"filename.h\"     /* Compliant */",
        "  #include &lt;filename.h&gt;     /* Compliant */",
        "  #include another.h        /* Non-compliant */",
        "",
        "  #define HEADER \"filename.h\"",
        "  #include HEADER           /* Compliant */",
        "  #define FILENAME file2.h",
        "  #include FILENAME         /* Non-compliant */",
        "",
        "  #define BASE \"base\"",
        "  #define EXT \".ext\"",
        "  #include BASE EXT          /* Non-compliant - strings are concatenated",
        "                              * after preprocessing */",
        "",
        "  #include \"./include/cpu.h\" /* Compliant - filename may include a path */",
        "</pre>"
      ]
    }
  },
  "MISRA23_20.7": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Expressions" ],
    "name": "Published Standards/MISRA C 2023/20.7 Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses",
        "</p>"
      ]
    }
  },
  "MISRA23_20.8": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2023/20.8 The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1",
        "</p>"
      ]
    }
  },
  "MISRA23_20.9": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Identifiers" ],
    "name": "Published Standards/MISRA C 2023/20.9 All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation",
        "</p>"
      ]
    }
  },
  "MISRA23_20.12": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2023/20.12 A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators",
        "</p>"
      ]
    }
  },
  "MISRA23_22.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Mandatory", "Memory Allocation" ],
    "name": "Published Standards/MISRA C 2023/22.2 A block of memory shall only be freed if it was allocated by means of a Standard Library function",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A block of memory shall only be freed if it was allocated by means of a Standard Library function",
        "</p>"
      ]
    }
  },
  "MISRA23_22.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C 2023/22.3 The same file shall not be open for read and write access at the same time on different streams",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The same file shall not be open for read and write access at the same time on different streams",
        "</p>"
      ]
    }
  },
  "MISRA23_22.4": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Mandatory", "Control Flow" ],
    "name": "Published Standards/MISRA C 2023/22.4 There shall be no attempt to write to a stream which has been opened as read-only",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no attempt to write to a stream which has been opened as read-only",
        "</p>"
      ]
    }
  },
  "MISRA23_22.5": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Mandatory", "Pointers" ],
    "name": "Published Standards/MISRA C 2023/22.5 A pointer to a FILE object shall not be dereferenced",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A pointer to a FILE object shall not be dereferenced",
        "</p>"
      ]
    }
  },
  "MISRA23_22.6": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Mandatory", "Pointers" ],
    "name": "Published Standards/MISRA C 2023/22.6 The value of a pointer to a FILE shall not be used after the associated stream has been closed",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The value of a pointer to a FILE shall not be used after the associated stream has been closed",
        "</p>"
      ]
    }
  },
  "MISRA23_6.8.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Required", "Memory Allocation" ],
    "name": "Published Standards/MISRA C++ 2023/6.8.1 An object shall not be accessed outside of its lifetime",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "An object shall not be accessed outside of its lifetime",
        "</p>"
      ]
    }
  },
  "MISRA23_19.3.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C++ 2023/19.3.3 The argument to a mixed-use macro parameter shall not be subject to further expansion",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The argument to a mixed-use macro parameter shall not be subject to further expansion",
        "</p>"
      ]
    }
  },
  "MISRA23_4.1.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C++ 2023/4.1.3 There shall be no occurrence of undefined or critical unspecified behaviour",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no occurrence of undefined or critical unspecified behaviour",
        "</p>"
      ]
    }
  },
  "MISRA23_8.2.1": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Required", "Virtual Functions" ],
    "name": "Published Standards/MISRA C++ 2023/8.2.1 A virtual base class shall only be cast to a derived class by means of dynamic_cast",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",

        "<p>The behaviour when casting from a virtual base class to a derived class is only well defined when",
        "dynamic_cast is used, whilst the use of the other casts can result in undefined behaviour.",
        "Since C++17, a static_cast from a virtual base class is now ill-formed, but some compilers may not yet",
        "issue a diagnostic. This rule ensures that all cases are detected.</p>",
        "<p><b>Example</b></p>",
        "<pre>",
        "class B { ... };",
        "class D: public virtual B { ... };",
        "D d;",
        "B *pB = &d;",
        "D *pD = static_cast&lt;D*&gt;(pB); // Non-compliant - undefined behaviour",
        "D *pD2 = dynamic_cast&lt;D*&gt;(pB); // Compliant, but pD2 may be NULL",
        "D & D3 = dynamic_cast&lt;D&&gt;(*pB); // Compliant, but may throw an exception</pre>"
      ]
    }
  },
  "MISRA23_19.1.3": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C++ 2023", "Category: Required", "Identifiers" ],
    "name": "Published Standards/MISRA C++ 2023/19.1.3 All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be defined prior to evaluation",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be defined prior to evaluation",
        "</p>"
      ]
    }
  },
  "MISRA23_19.2.2": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C++ 2023/19.2.2 The #include directive shall be followed by either a <filename> or \"filename\" sequence",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",
        "<p><b>Amplification</b></p>",
        "<p>This rule applies after macro replacement has been performed.</p>",
        "<p><b>Rationale</b></p>",
        "<p>Undefined behaviour occurs if a #include directive does not use one of the following forms:",
        "<p>#include &lt;filename&gt;</p>",
        "<p>#include \"filename\"</p>",
        "<p><b>Example</b></p>",
        "<pre style=\"margin-top:0;padding-top:0;\">",
        "#include \"filename.h\" // Compliant",
        "#include &lt;filename.h&gt; // Compliant",
        "#define HEADER \"filename.h\" // Non-compliant with Rule 16-2-2",
        "#include HEADER // Compliant",
        "#include another.h // Non-compliant",
        "#define HEADER \"filename.h\"",
        "#include HEADER // Compliant",
        "#define FILENAME file2.h",
        "#include FILENAME // Non-compliant",
        "#define BASE \"base\"",
        "#define EXT \".ext\"",
        "#include BASE EXT // Non-compliant - expands to an invalid form",
        "// #include \"base\" \".ext\"",
        "// - string concatenation occurs after preprocessing",
        "</pre>"
      ]
    }
  },
  "MISRA23_0.0.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Required", "Expressions" ],
    "name": "Published Standards/MISRA C++ 2023/0.0.2 Controlling expressions should not be invariant",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Controlling expressions shall not be invariant",
        "</p>"
      ]
    }
  },
  "MISRA23_8.18.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Advisory", "Expressions" ],
    "name": "Published Standards/MISRA C++ 2023/8.18.2 The result of an assignment operator should not be used",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The result of an assignment operator should not be used",
        "</p>"
      ]
    }
  },
  "MISRA23_4.1.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Required", "Standard: MISRA C++ 2023" ],
    "name": "Published Standards/MISRA C++ 2023/4.1.1 A program shall conform to ISO&#47;IEC 14882:2017 (C++17)",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A program shall conform to ISO/IEC 14882:2017 (C++17)",
        "</p>"
      ]
    }
  },
  "MISRA23_4.1.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Advisory", "Standard: MISRA C++ 2023" ],
    "name": "Published Standards/MISRA C++ 2023/4.1.2 Deprecated features should not be used",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Deprecated features should not be used",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_5.1": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C 2023/Directive 5.1 There shall be no data races between threads",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no data races between threads",
        "</p>"
      ]
    }
  },
  "MISRA23_DIR_5.2": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Control Flow" ],
    "name": "Published Standards/MISRA C 2023/Directive 5.2 There shall be no deadlocks between threads",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "There shall be no deadlocks between threads",
        "</p>"
      ]
    }
  },
  "MISRA04_21.1": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2004", "Category: Required", "Exception Handling" ],
    "name": "Published Standards/MISRA-C 2004/21.1 Minimisation of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools&#47;techniques; (b) dynamic analysis tools&#47;techniques; (c) explicit coding of checks to handle run-time faults.",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",
        "<p><b>Rule</b></p>",
        "Minimisation of run-time failures shall be ensured by the use of at least one of<br>",
        "&nbsp;&nbsp;(a) static analysis tools/techniques;",
        "&nbsp;&nbsp;(b) dynamic analysis tools/techniques;",
        "&nbsp;&nbsp;(c) explicit coding of checks to handle run-time faults.",
        "<p><b>Rationale</b></p>",
        "Run-time checking is an issue, which is not specific to C, but it is an issue which C programmers",
        "need to pay special attention to. This is because the C language is weak in its provision of any",
        "run-time checking. C implementations are not required to perform many of the dynamic checks",
        "that are necessary for robust software. It is therefore an issue that C programmers need to consider",
        "carefully, adding dynamic checks to code wherever there is potential for run-time errors to occur.",
        "<p>Where expressions consist only of values within a well-defined range, a run-time check may",
        "not be necessary, provided it can be demonstrated that for all values within the defined range",
        "the exception cannot occur. Such a demonstration, if used, should be documented along with",
        "the assumptions on which it depends. However if adopting this approach, be very careful about",
        "subsequent modifications of the code which may invalidate the assumptions, or of the assumptions",
        "changing for any other reason.",
        "<p>The following notes give some guidance on areas where consideration needs to be given to the",
        "provision of dynamic checks.",
        "<p>Arithmetic Errors</p>",
        "This includes errors occurring in the evaluation of expressions, such as overflow,",
        "underflow, divide by zero or loss of significant bits through shifting.",
        "In considering integer overflow, note that unsigned integer calculations do not strictly",
        "overflow (producing undefined values), but the values wrap around (producing defined,",
        "but possibly wrong, values).",
        "<p>Pointer Arithmetic</p>",
        "Ensure that when an address is calculated dynamically the computed address is reasonable",
        "and points somewhere meaningful. In particular it should be ensured that if a pointer",
        "points within a structure or array, then when the pointer has been incremented or otherwise",
        "altered it still points to the same structure or array. See restrictions on pointer arithmetic",
        "Rules 17.1, 17.2 and 17.4.",
        "<p>Array Bound Errors</p>",
        "Ensure that array indices are within the bounds of the array size before using them to",
        "index the array.",
        "<p>Function Parameters</p>",
        "See Rule 20.3.",
        "<p>Pointer Dereferencing</p>",
        "Where a function returns a pointer and that pointer is subsequently de-referenced the",
        "program should first check that the pointer is not NULL. Within a function, it is relatively",
        "straightforward to reason about which pointers may or may not hold NULL values. Across",
        "function boundaries, especially when calling functions defined in other source files or",
        "libraries, it is much more difficult.</p>",
        "<pre><code language=\"C++\">/* Given a pointer to a message, check the message header and return",
        "   a pointer to the body of the message or NULL if the message is",
        "   invalid. */",
        "const char_t *msg_body (const char_t *msg)",
        "{",
        "   const char_t *body = NULL;",
        "   if (msg != NULL)",
        "   {",
        "      if (msg_header_valid (msg))",
        "      {",
        "         body = &msg[MSG_HEADER_SIZE];",
        "      }",
        "   }",
        "   return (body);",
        "}",
        "...",
        "      char_t msg_buffer[MAX_MSG_SIZE];",
        "const char_t *payload;",
        "...",
        "payload = msg_body (msg_buffer);",
        "if (payload != NULL)",
        "{",
        "   /* process the message payload */",
        "} </code></pre>",
        "<p>The techniques that will be employed to minimise run-time failures should be planned and",
        "documented, e.g. in design standards, test plans, static analysis configuration files, code review",
        "checklists."
      ]
    }
  },
  "MISRA08_16-1-2": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2008", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA-C++ 2008/16-1-2 All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",

        "<p>Confusion can arise when blocks of code are included or excluded by the use of conditional compilation",
        "directives which are spread over multiple files. Requiring that a #if directive be terminated within the",
        "same file reduces the visual complexity of the code and the chance that errors will be made during maintenance.</p>",
        "<p>Note: #if directives may be used within included files provided they are terminated within the same file.</p>",
        "<p><b>Example</b></p>",
        "<pre><code language=\"C++\">/* file1.c */",
        "#ifdef A /* Compliant */",
        "#include \"file1.h\"",
        "#endif",
        "/* End of file1.c */",
        "",
        "/* file2.c */",
        "#if 1 /* Non-compliant */",
        "#include \"file2.h\"",
        "/* End of file2.c*/",
        "",
        "/* file1.h */",
        "#if 1 /* Compliant */",
        "#endif",
        "/* End of file1.h */",
        "",
        "/* file2.h */",
        "#endif",
        "/* End of file1.h */",
        "}</code></pre>"
      ]
    }
  },
  "MISRA12_20.14": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2012", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2012/20.14 All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",

        "<p>Confusion can arise when blocks of code are included or excluded by the use of conditional compilation",
        "directives which are spread over multiple files. Requiring that a #if directive be terminated within the",
        "same file reduces the visual complexity of the code and the chance that errors will be made during maintenance.</p>",
        "<p>Note: #if directives may be used within included files provided they are terminated within the same file.</p>",
        "<p><b>Example</b></p>",
        "<pre><code language=\"C++\">/* file1.c */",
        "#ifdef A /* Compliant */",
        "#include \"file1.h\"",
        "#endif",
        "/* End of file1.c */",
        "",
        "/* file2.c */",
        "#if 1 /* Non-compliant */",
        "#include \"file2.h\"",
        "/* End of file2.c*/",
        "",
        "/* file1.h */",
        "#if 1 /* Compliant */",
        "#endif",
        "/* End of file1.h */",
        "",
        "/* file2.h */",
        "#endif",
        "/* End of file1.h */",
        "}</code></pre>"
      ]
    }
  },
  "MISRA23_20.14": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2023/20.14 All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",

        "<p>Confusion can arise when blocks of code are included or excluded by the use of conditional compilation",
        "directives which are spread over multiple files. Requiring that a #if directive be terminated within the",
        "same file reduces the visual complexity of the code and the chance that errors will be made during maintenance.</p>",
        "<p>Note: #if directives may be used within included files provided they are terminated within the same file.</p>",
        "<p><b>Example</b></p>",
        "<pre><code language=\"C++\">/* file1.c */",
        "#ifdef A /* Compliant */",
        "#include \"file1.h\"",
        "#endif",
        "/* End of file1.c */",
        "",
        "/* file2.c */",
        "#if 1 /* Non-compliant */",
        "#include \"file2.h\"",
        "/* End of file2.c*/",
        "",
        "/* file1.h */",
        "#if 1 /* Compliant */",
        "#endif",
        "/* End of file1.h */",
        "",
        "/* file2.h */",
        "#endif",
        "/* End of file1.h */",
        "}</code></pre>"
      ]
    }
  },
  "MISRA23_11.10": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2023", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2023/11.10 The _Atomic qualifier shall not be applied to the incomplete type void",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",

        "<p><b>Rationale</b></p>",
        "<p>The C Standard does not explicitly prohibit usage of the type void with the _Atomic qualifier. However,",
        "it does not provide a guarantee that a pointer to _Atomic void has any particular size or alignment",
        "requirement, so it cannot be assumed that is the same as for a pointer to an arbitrary type _Atomic T,",
        "and the behaviour of type conversion between them may be undefined.</p>",
        "<p><b>Example</b></p>",
        "<pre><code language=\"C++\">struct A {",
        "int32_t _Atomic x;",
        "int32_t _Atomic y;",
        "};",
        "void main (void)",
        "{",
        "struct A a1 = { 6, 7 };",
        "void _Atomic * pav = &a1; /* Non-compliant */",
        "void _Atomic * pax = &a1.x; /* Non-compliant */",
        "}</code></pre>",
        "<p><b>See also</b></p>",
        "<p>Rule 11.8</p>"
      ]
    }
  },
  "MISRA04_19.17": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C", "Standard: MISRA C 2004", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C 2004/20.14 All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",

        "<p>Confusion can arise when blocks of code are included or excluded by the use of conditional compilation",
        "directives which are spread over multiple files. Requiring that a #if directive be terminated within the",
        "same file reduces the visual complexity of the code and the chance that errors will be made during maintenance.</p>",
        "<p>Note: #if directives may be used within included files provided they are terminated within the same file.</p>",
        "<p><b>Example</b></p>",
        "<pre><code language=\"C++\">/* file1.c */",
        "#ifdef A /* Compliant */",
        "#include \"file1.h\"",
        "#endif",
        "/* End of file1.c */",
        "",
        "/* file2.c */",
        "#if 1 /* Non-compliant */",
        "#include \"file2.h\"",
        "/* End of file2.c*/",
        "",
        "/* file1.h */",
        "#if 1 /* Compliant */",
        "#endif",
        "/* End of file1.h */",
        "",
        "/* file2.h */",
        "#endif",
        "/* End of file1.h */",
        "}</code></pre>"
      ]
    }
  },
  "MISRA23_19.1.2": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Standard: MISRA C++ 2023", "Category: Required", "Preprocessor" ],
    "name": "Published Standards/MISRA C++ 2023/19.1.2 All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related",
    "desc": {
      "html": [
        "<b><span style=\"color:red\">This check is automatically run during strict analysis, any violations will be reported as analysis errors.</span></b>",

        "<p>Confusion can arise when code blocks are included or excluded by the use of conditional compilation",
        "directives which are spread over multiple files. Requiring that a #if directive be terminated within",
        "the same file reduces the visual complexity of the code and the chance that errors will be made during maintenance.</p>",
        "<p>Notes:</p>",
        "<p>1. #if directives may be used within included files, provided they are terminated within the same file.</p>",
        "<p>2. It is not clear from the C++ Standard whether such constructs are allowed. Some compilers",
        "do require that a #endif (etc.) must be in the same file as the associated #if (etc.), and",
        "all compilers tested raise an error if this is not the case. However, this requirement is not",
        "explicitly expressed in the C++ Standard, and there is a reading of the grammar that would allow",
        "it. This rule aims to prevent this construct, should any compiler actually allow it.</p>",
        "<p><b>Example</b></p>",
        "<pre><code language=\"C++\">// file1.c",
        "#ifdef A // Compliant",
        "#include \"file1.h\"",
        "#endif",
        "// End of file1.c",
        "// file1.h",
        "#if 1 // Compliant",
        "#endif",
        "// End of file1.h",
        "// file2.c",
        "#if 1 // Non-compliant",
        "#include \"file2.h\"",
        "// End of file2.c",
        "// file2.h",
        "#endif",
        "// End of file2.h",
        "}</code></pre>"
      ]
    }
  },
  "MISRA04_1.1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/1.1 All code shall conform to ISO&#47;IEC 9899:1990 \"Programming languages — C\", amended and corrected by ISO&#47;IEC 9899&#47;COR1:1995, ISO&#47;IEC 9899&#47;AMD1:1995, and ISO&#47;IEC 9899&#47;COR2:1996",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All code shall conform to ISO&#47;IEC 9899:1990 \"Programming languages — C\", amended and corrected by ISO&#47;IEC 9899&#47;COR1:1995, ISO&#47;IEC 9899&#47;AMD1:1995, and ISO&#47;IEC 9899&#47;COR2:1996",
        "</p>"
      ]
    }
  },
  "MISRA04_1.2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/1.2 No reliance shall be placed on undefined or unspecified behaviour",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "No reliance shall be placed on undefined or unspecified behaviour",
        "</p>"
      ]
    }
  },
  "MISRA04_1.3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/1.3 Multiple compilers and&#47;or languages shall only be used if there is a common defined interface standard for object code to which the languages&#47;compilers&#47; assemblers conform",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Multiple compilers and&#47;or languages shall only be used if there is a common defined interface standard for object code to which the languages&#47;compilers&#47; assemblers conform",
        "</p>"
      ]
    }
  },
  "MISRA04_1.4": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/1.4 The compiler&#47;linker shall be checked to ensure that 31 character significance and case sensitivity are supported for external identifiers",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The compiler&#47;linker shall be checked to ensure that 31 character significance and case sensitivity are supported for external identifiers",
        "</p>"
      ]
    }
  },
  "MISRA04_1.5": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Advisory"
    ],
    "name": "Published Standards/MISRA-C 2004/1.5 Floating-point implementations should comply with a defined floating-point standard",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Floating-point implementations should comply with a defined floating-point standard",
        "</p>"
      ]
    }
  },
  "MISRA04_3.1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/3.1 All usage of implementation-defined behaviour shall be documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All usage of implementation-defined behaviour shall be documented",
        "</p>"
      ]
    }
  },
  "MISRA04_3.2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/3.2 The character set and the corresponding encoding shall be documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The character set and the corresponding encoding shall be documented",
        "</p>"
      ]
    }
  },
  "MISRA04_3.3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Advisory"
    ],
    "name": "Published Standards/MISRA-C 2004/3.3 The implementation of integer division in the chosen compiler should be determined, documented and taken into account",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The implementation of integer division in the chosen compiler should be determined, documented and taken into account",
        "</p>"
      ]
    }
  },
  "MISRA04_3.4": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/3.4 All uses of the #pragma directive shall be documented and explained",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All uses of the #pragma directive shall be documented and explained",
        "</p>"
      ]
    }
  },
  "MISRA04_3.5": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/3.5 The implementation defined behaviour and packing of bitfields shall be documented if being relied upon",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The implementation defined behaviour and packing of bitfields shall be documented if being relied upon",
        "</p>"
      ]
    }
  },
  "MISRA04_3.6": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/3.6 All libraries used in production code shall be written to comply with the provisions of this document, and shall have been subject to appropriate validation",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All libraries used in production code shall be written to comply with the provisions of this document, and shall have been subject to appropriate validation",
        "</p>"
      ]
    }
  },
  "MISRA04_9.1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/9.1 All automatic variables shall have been assigned a value before being used",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All automatic variables shall have been assigned a value before being used",
        "</p>"
      ]
    }
  },
  "MISRA04_16.10": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C",
      "Standard: MISRA C 2004",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C 2004/16.10 Functions shall not be defined with variable numbers of arguments",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Functions shall not be defined with variable numbers of arguments",
        "</p>"
      ]
    }
  },
  "MISRA08_0-1-6": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/0-1-6 A project shall not contain instances of non-volatile variables being given values that are never subsequently used",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A project shall not contain instances of non-volatile variables being given values that are never subsequently used",
        "</p>"
      ]
    }
  },
  "MISRA08_0-2-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/0-2-1 An object shall not be assigned to an overlapping object",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "An object shall not be assigned to an overlapping object",
        "</p>"
      ]
    }
  },
  "MISRA08_0-4-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/0-4-1 Use of scaled-integer or fixed-point arithmetic shall be documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Use of scaled-integer or fixed-point arithmetic shall be documented",
        "</p>"
      ]
    }
  },
  "MISRA08_0-4-2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/0-4-2 Use of floating-point arithmetic shall be documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Use of floating-point arithmetic shall be documented",
        "</p>"
      ]
    }
  },
  "MISRA08_0-4-3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/0-4-3 Floating-point implementations shall comply with a defined floating-point standard",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Floating-point implementations shall comply with a defined floating-point standard",
        "</p>"
      ]
    }
  },
  "MISRA08_1-0-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/1-0-1 All code shall conform to ISO&#47;IEC 14882:2003 \"The C++ Standard Incorporating Technical Corrigendum 1\"",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All code shall conform to ISO/IEC 14882:2003 \"The C++ Standard Incorporating Technical Corrigendum 1\"",
        "</p>"
      ]
    }
  },
  "MISRA08_1-0-2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/1-0-2 Multiple compilers shall only be used if they have a common, defined interface",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Multiple compilers shall only be used if they have a common, defined interface",
        "</p>"
      ]
    }
  },
  "MISRA08_1-0-3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/1-0-3 The implementation of integer division in the chosen compiler shall be determined and documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The implementation of integer division in the chosen compiler shall be determined and documented",
        "</p>"
      ]
    }
  },
  "MISRA08_2-2-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/2-2-1 The character set and the corresponding encoding shall be documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The character set and the corresponding encoding shall be documented",
        "</p>"
      ]
    }
  },
  "MISRA08_2-10-6": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/2-10-6 If an identifier refers to a type, it shall not also refer to an object or a function in the same scope",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope",
        "</p>"
      ]
    }
  },
  "MISRA08_5-0-13": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-0-13 The condition of an if-statement and the condition of an iteration-statement shall have type bool",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The condition of an if-statement and the condition of an iteration-statement shall have type bool",
        "</p>"
      ]
    }
  },
  "MISRA08_5-0-15": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-0-15 Array indexing shall be the only form of pointer arithmetic",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Array indexing shall be the only form of pointer arithmetic",
        "</p>"
      ]
    }
  },
  "MISRA08_5-0-16": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array",
        "</p>"
      ]
    }
  },
  "MISRA08_5-2-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-2-1 Each operand of a logical && or || shall be a postfix expression",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Each operand of a logical && or || shall be a postfix expression",
        "</p>"
      ]
    }
  },
  "MISRA08_5-2-2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast",
        "</p>"
      ]
    }
  },
  "MISRA08_5-2-4": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-2-4 C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used",
        "</p>"
      ]
    }
  },
  "MISRA08_5-2-7": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-2-7 An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly",
        "</p>"
      ]
    }
  },
  "MISRA08_5-3-2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The unary minus operator shall not be applied to an expression whose underlying type is unsigned",
        "</p>"
      ]
    }
  },
  "MISRA08_5-14-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-14-1 The right hand operand of a logical && or || operator shall not contain side effects",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The right hand operand of a logical && or || operator shall not contain side effects",
        "</p>"
      ]
    }
  },
  "MISRA08_5-17-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The semantic equivalence between a binary operator and its assignment operator form shall be preserved",
        "</p>"
      ]
    }
  },
  "MISRA08_5-18-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-18-1 The comma operator shall not be used",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The comma operator shall not be used",
        "</p>"
      ]
    }
  },
  "MISRA08_5-19-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Advisory"
    ],
    "name": "Published Standards/MISRA-C++ 2008/5-19-1 Evaluation of constant unsigned integer expressions should not lead to wrap-around",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Evaluation of constant unsigned integer expressions should not lead to wrap-around",
        "</p>"
      ]
    }
  },
  "MISRA08_6-2-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/6-2-1 Assignment operators shall not be used in sub-expressions",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Assignment operators shall not be used in sub-expressions",
        "</p>"
      ]
    }
  },
  "MISRA08_6-4-3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/6-4-3 A switch statement shall be a well-formed switch statement",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A switch statement shall be a well-formed switch statement",
        "</p>"
      ]
    }
  },
  "MISRA08_6-4-7": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/6-4-7 The condition of a switch statement shall not have bool type",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The condition of a switch statement shall not have bool type",
        "</p>"
      ]
    }
  },
  "MISRA08_6-6-3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/6-6-3 The continue statement shall only be used within a well-formed for loop",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The continue statement shall only be used within a well-formed for loop",
        "</p>"
      ]
    }
  },
  "MISRA08_7-4-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/7-4-1 All usage of assembler shall be documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All usage of assembler shall be documented",
        "</p>"
      ]
    }
  },
  "MISRA08_7-5-3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/7-5-3 A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference",
        "</p>"
      ]
    }
  },
  "MISRA08_10-2-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Advisory"
    ],
    "name": "Published Standards/MISRA-C++ 2008/10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All accessible entity names within a multiple inheritance hierarchy should be unique",
        "</p>"
      ]
    }
  },
  "MISRA08_12-8-2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/12-8-2 The copy assignment operator shall be declared protected or private in an abstract class",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The copy assignment operator shall be declared protected or private in an abstract class",
        "</p>"
      ]
    }
  },
  "MISRA08_14-5-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/14-5-1 A non-member generic function shall only be declared in a namespace that is not an associated namespace",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "A non-member generic function shall only be declared in a namespace that is not an associated namespace",
        "</p>"
      ]
    }
  },
  "MISRA08_14-6-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->",
        "</p>"
      ]
    }
  },
  "MISRA08_14-6-2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/14-6-2 The function or operator chosen by overload resolution shall resolve to a function declared previously in the translation unit",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The function or operator chosen by overload resolution shall resolve to a function declared previously in the translation unit",
        "</p>"
      ]
    }
  },
  "MISRA08_14-7-2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/14-7-2 For any given template specialization, an explicit instantiation of the template with the template-arguments used in the specialization shall not render the program ill-formed",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "For any given template specialization, an explicit instantiation of the template with the template-arguments used in the specialization shall not render the program ill-formed",
        "</p>"
      ]
    }
  },
  "MISRA08_14-7-3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/14-7-3 All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template",
        "</p>"
      ]
    }
  },
  "MISRA08_14-8-2": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Advisory"
    ],
    "name": "Published Standards/MISRA-C++ 2008/14-8-2 The viable function set for a function call should either contain no function specializations, or only contain function specializations",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The viable function set for a function call should either contain no function specializations, or only contain function specializations",
        "</p>"
      ]
    }
  },
  "MISRA08_15-0-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/15-0-1 Exceptions shall only be used for error handling",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Exceptions shall only be used for error handling",
        "</p>"
      ]
    }
  },
  "MISRA08_15-0-3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Control shall not be transferred into a try or catch block using a goto or a switch statement",
        "</p>"
      ]
    }
  },
  "MISRA08_15-3-4": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point",
        "</p>"
      ]
    }
  },
  "MISRA08_15-5-3": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Required"
    ],
    "name": "Published Standards/MISRA-C++ 2008/15-5-3 The terminate() function shall not be called implicitly",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "The terminate() function shall not be called implicitly",
        "</p>"
      ]
    }
  },
  "MISRA08_16-6-1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/16-6-1 All uses of the #pragma directive shall be documented",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All uses of the #pragma directive shall be documented",
        "</p>"
      ]
    }
  },
  "MISRA08_17-0-4": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: MISRA C++ 2008",
      "Category: Document"
    ],
    "name": "Published Standards/MISRA-C++ 2008/17-0-4 All library code shall conform to MISRA C++",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "All library code shall conform to MISRA C++",
        "</p>"
      ]
    }
  }
}
