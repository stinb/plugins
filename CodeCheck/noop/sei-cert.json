{
  "DCL31-C": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Low", "Priority: P3", "Level: L3", "Identifiers" ],
    "name": "Published Standards/SEI Cert Standards/C/Declare identifiers before using them",
    "desc": {
      "html": [
        "<b>",
        "This check is automatically run",
        "</b>",
        "",
        "<p>",
        "Declare identifiers before using them",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "<p>",
        "Because implicit declarations lead to less stringent type checking, they can",
        "introduce unexpected and erroneous behavior. Occurrences of an omitted type",
        "specifier in existing code are rare, and the consequences are generally minor,",
        "perhaps resulting in abnormal program termination.",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/c/DCL31-C.+Declare+identifiers+before+using+them",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "extern foo;",
        "</pre>"
      ]
    }
  },
  "DCL36-C": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Identifiers" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not declare an identifier with conflicting linkage classifications",
    "desc": {
      "html": [
        "<b>",
        "This check is automatically run",
        "</b>",
        "",
        "<p>",
        "Do not declare an identifier with conflicting linkage classifications",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "<p>",
        "Use of an identifier classified as both internally and externally linked is",
        "undefined behavior.",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/c/DCL36-C.+Do+not+declare+an+identifier+with+conflicting+linkage+classifications",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "int i1 = 10;         /* Definition, external linkage */",
        "static int i2 = 20;  /* Definition, internal linkage */",
        "extern int i3 = 30;  /* Definition, external linkage */",
        "int i4;              /* Tentative definition, external linkage */",
        "static int i5;       /* Tentative definition, internal linkage */",
        "",
        "int i1;  /* Valid tentative definition */",
        "int i2;  /* Undefined, linkage disagreement with previous */",
        "int i3;  /* Valid tentative definition */",
        "int i4;  /* Valid tentative definition */",
        "int i5;  /* Undefined, linkage disagreement with previous */",
        "",
        "int main(void) {",
        "  /* ... */",
        "  return 0;",
        "}",
        "</pre>"
      ]
    }
  },
  "DCL38-C": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Low", "Priority: P3", "Level: L3", "Structures and Unions" ],
    "name": "Published Standards/SEI Cert Standards/C/Use the correct syntax when declaring a flexible array member",
    "desc": {
      "html": [
        "",
        "<p><b>This check is automatically run</b></p>",
        "<p>This check is always run during the strict analysis, any violations will be reported as analysis errors.</p>",
        "<p><b>Use the correct syntax when declaring a flexible array member</b></p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Failing to use the correct syntax when declaring a flexible array member can result in undefined behavior, although the incorrect syntax will work on most implementations.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/DCL38-C.+Use+the+correct+syntax+when+declaring+a+flexible+array+member</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;stdlib.h&gt;",
        "",
        "struct flexArrayStruct {",
        "  int num;",
        "  int data[1];",
        "};",
        "",
        "void func(size_t array_size) {",
        "  /* Space is allocated for the struct */",
        "  struct flexArrayStruct *structP",
        "    = (struct flexArrayStruct *)",
        "     malloc(sizeof(struct flexArrayStruct)",
        "          + sizeof(int) * (array_size - 1));",
        "  if (structP == NULL) {",
        "    /* Handle malloc failure */",
        "  }",
        "",
        "  structP-&gt;num = array_size;",
        "",
        "  /*",
        "   * Access data[] as if it had been allocated",
        "   * as data[array_size].",
        "   */",
        "  for (size_t i = 0; i &lt; array_size; ++i) {",
        "    structP-&gt;data[i] = 1;",
        "  }",
        "}",
        "</pre>"
      ]
    }
  },
  "DCL40-C": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Declarations and Definitions" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not create incompatible declarations of the same function or object ",
    "desc": {
      "html": [
        "<b>",
        "This check is automatically run",
        "</b>",
        "",
        "<p>",
        "Do not create incompatible declarations of the same function or object",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/c/DCL40-C.+Do+not+create+incompatible+declarations+of+the+same+function+or+object",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "/* In a.c */",
        "extern int i;   /* UB 15 */",
        "",
        "int f(void) {",
        "  return ++i;   /* UB 37 */",
        "}",
        "",
        "/* In b.c */",
        "short i;   /* UB 15 */",
        "</pre>"
      ]
    }
  },
  "DCL52-CPP": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C++", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Low", "Priority: P3", "Level: L3", "Declarations and Definitions" ],
    "name": "Published Standards/SEI Cert Standards/C++/Never qualify a reference type with const or volatile",
    "desc": {
      "html": [
        "<b>",
        "This check is automatically run",
        "</b>",
        "",
        "<p>",
        "Never qualify a reference type with const or volatile",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/cplusplus/DCL52-CPP.+Never+qualify+a+reference+type+with+const+or+volatile",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;iostream&gt;",
        "",
        "void f(char c) {",
        "int f(void) {",
        "  char &const p = c;  // non-compliant - a const-qualified reference to a char is formed instead of a reference to a const-qualified char",
        "  p = 'p';",
        "  std::cout &lt;&lt; c &lt;&lt; std::endl;",
        "}",
        "</pre>"
      ]
    }
  },
  "OOP55-CPP": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C++", "Severity: 75", "Likelihood: Probable", "Remediation Cost: High", "Priority: P6", "Level: L2", "Pointers" ],
    "name": "Published Standards/SEI Cert Standards/C++/Do not use pointer-to-member operators to access nonexistent members",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not use pointer-to-member operators to access nonexistent members",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP55-CPP.+Do+not+use+pointer-to-member+operators+to+access+nonexistent+members",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "struct B {",
        "  virtual ~B() = default;",
        "};",
        "",
        "struct D : B {",
        "  virtual ~D() = default;",
        "  virtual void g() { /* ... */ }",
        "};",
        "",
        "void f() {",
        "  B *b = new B;",
        "",
        "  // ...",
        "",
        "  void (B::*gptr)() = static_cast<void(B::*)()>(&D::g);",
        "  (b->*gptr)();",
        "  delete b;",
        "}",
        "</pre>"
      ]
    }
  },
  "EXP56-CPP": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C++", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Functions" ],
    "name": "Published Standards/SEI Cert Standards/C++/Do not call a function with a mismatched language linkage",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not call a function with a mismatched language linkage",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/cplusplus/EXP56-CPP.+Do+not+call+a+function+with+a+mismatched+language+linkage",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "extern \"java\" typedef void (*java_callback)(int);",
        "",
        "extern void call_java_fn_ptr(java_callback callback);",
        "void callback_func(int);",
        "",
        "void f() {",
        "  call_java_fn_ptr(callback_func);",
        "}",
        "</pre>"
      ]
    }
  },
  "MEM50-CPP": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C++", "Severity: 75", "Likelihood: Likely", "Remediation Cost: Medium", "Priority: P18", "Level: L1", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/C++/Do not access freed memory",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not access freed memory",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/cplusplus/MEM50-CPP.+Do+not+access+freed+memory",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;new&gt;",
        "",
        "struct S {",
        "  S();",
        "",
        "  void f();",
        "};",
        "",
        "void g() noexcept(false) {",
        "  S *s = new S;",
        "  // ...",
        "  delete s;",
        "  // ...",
        "  s->f();",
        "}",
        "</pre>"
      ]
    }
  },
  "MEM53-CPP": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C++", "Severity: 75", "Likelihood: Likely", "Remediation Cost: Medium", "Priority: P18", "Level: L1", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/C++/Explicitly construct and destruct objects when manually managing object lifetime",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Explicitly construct and destruct objects when manually managing object lifetime",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/cplusplus/MEM53-CPP.+Explicitly+construct+and+destruct+objects+when+manually+managing+object+lifetime",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;cstdlib&gt;",
        "",
        "struct S {",
        "  S();",
        "",
        "  void f();",
        "};",
        "",
        "void g() {",
        "  S *s = static_cast&lt;S *&gt;(std::malloc(sizeof(S)));",
        "",
        "  s->f();",
        "",
        "  std::free(s);",
        "}",
        "</pre>"
      ]
    }
  },
  "CON53-CPP": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C++", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Threads" ],
    "name": "Published Standards/SEI Cert Standards/C++/Avoid deadlock by locking in a predefined order",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Avoid deadlock by locking in a predefined order",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/cplusplus/CON53-CPP.+Avoid+deadlock+by+locking+in+a+predefined+order",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;mutex&gt;",
        "#include &lt;thread&gt;",
        "",
        "class BankAccount {",
        "  int balance;",
        "public:",
        "  std::mutex balanceMutex;",
        "  BankAccount() = delete;",
        "  explicit BankAccount(int initialAmount) : balance(initialAmount) {}",
        "  int get_balance() const { return balance; }",
        "  void set_balance(int amount) { balance = amount; }",
        "};",
        "",
        "int deposit(BankAccount *from, BankAccount *to, int amount) {",
        "  std::lock_guard<std::mutex> from_lock(from->balanceMutex);",
        "",
        "  // Not enough balance to transfer.",
        "  if (from->get_balance() < amount) {",
        "    return -1; // Indicate error",
        "  }",
        "  std::lock_guard<std::mutex> to_lock(to->balanceMutex);",
        "",
        "  from->set_balance(from->get_balance() - amount);",
        "  to->set_balance(to->get_balance() + amount);",
        "",
        "  return 0;",
        "}",
        "",
        "void f(BankAccount *ba1, BankAccount *ba2) {",
        "  // Perform the deposits.",
        "  std::thread thr1(deposit, ba1, ba2, 100);",
        "  std::thread thr2(deposit, ba2, ba1, 100);",
        "  thr1.join();",
        "  thr2.join();",
        "}",
        "</pre>"
      ]
    }
  },
  "DCL55-CPP": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C++", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: High", "Priority: P1", "Level: L3", "Declarations and Definitions" ],
    "name": "Published Standards/SEI Cert Standards/C++/Avoid information leakage when passing a class object across a trust boundary",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Avoid information leakage when passing a class object across a trust boundary",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/cplusplus/DCL55-CPP.+Avoid+information+leakage+when+passing+a+class+object+across+a+trust+boundary",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;cstddef&gt;",
        "",
        "struct test {",
        "  int a;",
        "  char b;",
        "  int c;",
        "};",
        "",
        "// Safely copy bytes to user space",
        "extern int copy_to_user(void *dest, void *src, std::size_t size);",
        "",
        "void do_stuff(void *usr_buf) {",
        "  test arg{1, 2, 3};",
        "  copy_to_user(usr_buf, &arg, sizeof(arg));",
        "}",
        "</pre>"
      ]
    }
  },
  "PRE30-C": {
    "checked": true,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Preprocessor" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not create a universal character name through concatenation",
    "desc": {
      "html": [
        "<b>",
        "This check is automatically run",
        "</b>",
        "",
        "<p>",
        "Do not create a universal character name through concatenation",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "<p>",
        "Creating a universal character name through token concatenation results in",
        "undefined behavior.",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/c/PRE30-C.+Do+not+create+a+universal+character+name+through+concatenation",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#define assign(uc1, uc2, val) uc1##uc2 = val",
        "",
        "void func(void) {",
        "  int \\u0401;",
        "  /* ... */",
        "  assign(\\u04, 01, 4);",
        "  /* ... */",
        "}",
        "</pre>"
      ]
    }
  },
  "ARR30-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 75", "Likelihood: Likely", "Remediation Cost: High", "Priority: P9", "Level: L2", "Control Flow" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not form or use out-of-bounds pointers or array subscripts",
    "desc": {
      "html": [
        "",
        "<p>Do not form or use out-of-bounds pointers or array subscripts</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Writing to out-of-range pointers or array subscripts can result in a buffer overflow and the execution of arbitrary code with the permissions of the vulnerable process. Reading from out-of-range pointers or array subscripts can result in unintended information disclosure.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/ARR30-C.+Do+not+form+or+use+out-of-bounds+pointers+or+array+subscripts</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "enum { TABLESIZE = 100 };",
        "",
        "static int table[TABLESIZE];",
        "",
        "int *f(int index) {",
        "  if (index &lt; TABLESIZE) {",
        "    return table + index;",
        "  }",
        "  return NULL;",
        "}",
        "",
        "",
        "error_status_t _RemoteActivation(",
        "      /* ... */, WCHAR *pwszObjectName, ... ) {",
        "   *phr = GetServerPath(",
        "              pwszObjectName, &pwszObjectName);",
        "    /* ... */",
        "}",
        "",
        "HRESULT GetServerPath(",
        "  WCHAR *pwszPath, WCHAR **pwszServerPath ){",
        "  WCHAR *pwszFinalPath = pwszPath;",
        "  WCHAR wszMachineName[MAX_COMPUTERNAME_LENGTH_FQDN+1];",
        "  hr = GetMachineName(pwszPath, wszMachineName);",
        "  *pwszServerPath = pwszFinalPath;",
        "}",
        "",
        "HRESULT GetMachineName(",
        "  WCHAR *pwszPath,",
        "  WCHAR wszMachineName[MAX_COMPUTERNAME_LENGTH_FQDN+1])",
        "{",
        "  pwszServerName = wszMachineName;",
        "  LPWSTR pwszTemp = pwszPath + 2;",
        "  while (*pwszTemp != L'\\')",
        "    *pwszServerName++ = *pwszTemp++;",
        "  /* ... */",
        "}",
        "",
        "",
        "#include &lt;stdlib.h&gt;",
        "",
        "static int *table = NULL;",
        "static size_t size = 0;",
        "",
        "int insert_in_table(size_t pos, int value) {",
        "  if (size &lt; pos) {",
        "    int *tmp;",
        "    size = pos + 1;",
        "    tmp = (int *)realloc(table, sizeof(*table) * size);",
        "    if (tmp == NULL) {",
        "      return -1;   /* Failure */",
        "    }",
        "    table = tmp;",
        "  }",
        "",
        "  table[pos] = value;",
        "  return 0;",
        "}",
        "",
        "",
        "#include &lt;stddef.h&gt;",
        "#define COLS 5",
        "#define ROWS 7",
        "static int matrix[ROWS][COLS];",
        "",
        "void init_matrix(int x) {",
        "  for (size_t i = 0; i &lt; COLS; i++) {",
        "    for (size_t j = 0; j &lt; ROWS; j++) {",
        "      matrix[i][j] = x;",
        "    }",
        "  }",
        "}",
        "",
        "",
        "#include &lt;stdlib.h&gt;",
        "",
        "struct S {",
        "  size_t len;",
        "  char buf[];  /* Flexible array member */",
        "};",
        "",
        "const char *find(const struct S *s, int c) {",
        "  const char *first = s-&gt;buf;",
        "  const char *last  = s-&gt;buf + s-&gt;len;",
        "",
        "  while (first++ != last) { /* Undefined behavior */",
        "    if (*first == (unsigned char)c) {",
        "      return first;",
        "    }",
        "  }",
        "  return NULL;",
        "}",
        "",
        "void g(void) {",
        "  struct S *s = (struct S *)malloc(sizeof(struct S));",
        "  if (s == NULL) {",
        "    /* Handle error */",
        "  }",
        "  s-&gt;len = 0;",
        "  find(s, 'a');",
        "}",
        "",
        "",
        "#include &lt;string.h&gt;",
        "#include &lt;stdlib.h&gt;",
        "",
        "char *init_block(size_t block_size, size_t offset,",
        "                 char *data, size_t data_size) {",
        "  char *buffer = malloc(block_size);",
        "  if (data_size &gt; block_size || block_size - data_size &lt; offset) {",
        "    /* Data won't fit in buffer, handle error */",
        "  }",
        "  memcpy(buffer + offset, data, data_size);",
        "  return buffer;",
        "}",
        "</pre>"
      ]
    }
  },
  "ARR32-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 75", "Likelihood: Probable", "Remediation Cost: High", "Priority: P6", "Level: L2", "Variables" ],
    "name": "Published Standards/SEI Cert Standards/C/Ensure size arguments for variable length arrays are in a valid range",
    "desc": {
      "html": [
        "",
        "<p>Ensure size arguments for variable length arrays are in a valid range</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Failure to properly specify the size of a variable length array may allow arbitrary code execution or result in stack exhaustion.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/ARR32-C.+Ensure+size+arguments+for+variable+length+arrays+are+in+a+valid+range</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;stddef.h&gt;",
        " ",
        "extern void do_work(int *array, size_t size);",
        "  ",
        "void func(size_t size) {",
        "  int vla[size];",
        "  do_work(vla, size);",
        "}",
        "",
        "",
        "#include &lt;stdlib.h&gt;",
        "#include &lt;string.h&gt;",
        "  ",
        "enum { N1 = 4096 };",
        " ",
        "void *func(size_t n2) {",
        "  typedef int A[n2][N1];",
        " ",
        "  A *array = malloc(sizeof(A));",
        "  if (!array) {",
        "    /* Handle error */",
        "    return NULL;",
        "  }",
        " ",
        "  for (size_t i = 0; i != n2; ++i) {",
        "    memset(array[i], 0, N1 * sizeof(int));",
        "  }",
        " ",
        "  return array;",
        "}",
        "</pre>"
      ]
    }
  },
  "ARR38-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 75", "Likelihood: Likely", "Remediation Cost: Medium", "Priority: P18", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/C/Guarantee that library functions do not form invalid pointers",
    "desc": {
      "html": [
        "",
        "<p>Guarantee that library functions do not form invalid pointers</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Depending on the library function called, an attacker may be able to use a heap or stack overflow vulnerability to run arbitrary code.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/ARR38-C.+Guarantee+that+library+functions+do+not+form+invalid+pointers</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;string.h&gt;",
        "#include &lt;wchar.h&gt;",
        "",
        "static const char str[] = \"Hello world\";",
        "static const wchar_t w_str[] = L\"Hello world\";",
        "void func(void) {",
        "  char buffer[32];",
        "  wchar_t w_buffer[32];",
        "  memcpy(buffer, str, sizeof(str)); /* Compliant */",
        "  wmemcpy(w_buffer, w_str, sizeof(w_str)); /* Noncompliant */",
        "}",
        "",
        "",
        "#include &lt;stdlib.h&gt;",
        "#include &lt;string.h&gt;",
        "",
        "void f1(size_t nchars) {",
        "  char *p = (char *)malloc(nchars);",
        "  /* ... */",
        "  const size_t n = nchars + 1;",
        "  /* ... */",
        "  memset(p, 0, n);",
        "}",
        "",
        "",
        "#include &lt;string.h&gt;",
        "",
        "void f2(void) {",
        "  const size_t ARR_SIZE = 4;",
        "  long a[ARR_SIZE];",
        "  const size_t n = sizeof(int) * ARR_SIZE;",
        "  void *p = a;",
        "",
        "  memset(p, 0, n);",
        "}",
        "",
        "",
        "",
        "#include &lt;string.h&gt;",
        "",
        "void f4() {",
        "  char p[40];",
        "  const char *q = \"Too short\";",
        "  size_t n = sizeof(p);",
        "  memcpy(p, q, n);",
        "}",
        "",
        "",
        "",
        "#include &lt;stdint.h&gt;",
        "#include &lt;stdio.h&gt;",
        "",
        "struct obj {",
        "  char c;",
        "  long long i;",
        "};",
        "",
        "void func(FILE *f, struct obj *objs, size_t num_objs) {",
        "  const size_t obj_size = 16;",
        "  if (num_objs &gt; (SIZE_MAX / obj_size) ||",
        "      num_objs != fwrite(objs, obj_size, num_objs, f)) {",
        "    /* Handle error */",
        "  }",
        "}",
        "",
        "",
        "",
        "#include &lt;stddef.h&gt;",
        "#include &lt;stdio.h&gt;",
        "",
        "void f(FILE *file) {",
        "  enum { BUFFER_SIZE = 1024 };",
        "  wchar_t wbuf[BUFFER_SIZE];",
        "",
        "  const size_t size = sizeof(*wbuf);",
        "  const size_t nitems = sizeof(wbuf);",
        "",
        "  size_t nread = fread(wbuf, size, nitems, file);",
        "  /* ... */",
        "}",
        "",
        "",
        "int dtls1_process_heartbeat(SSL *s) {",
        "  unsigned char *p = &s-&gt;s3-&gt;rrec.data[0], *pl;",
        "  unsigned short hbtype;",
        "  unsigned int payload;",
        "  unsigned int padding = 16; /* Use minimum padding */",
        "",
        "  /* Read type and payload length first */",
        "  hbtype = *p++;",
        "  n2s(p, payload);",
        "  pl = p;",
        "",
        "  /* ... More code ... */",
        "",
        "  if (hbtype == TLS1_HB_REQUEST) {",
        "    unsigned char *buffer, *bp;",
        "    int r;",
        "",
        "    /*",
        "     * Allocate memory for the response; size is 1 byte",
        "     * message type, plus 2 bytes payload length, plus",
        "     * payload, plus padding.",
        "     */",
        "    buffer = OPENSSL_malloc(1 + 2 + payload + padding);",
        "    bp = buffer;",
        "",
        "    /* Enter response type, length, and copy payload */",
        "    *bp++ = TLS1_HB_RESPONSE;",
        "    s2n(payload, bp);",
        "    memcpy(bp, pl, payload);",
        "",
        "    /* ... More code ... */",
        "  }",
        "  /* ... More code ... */",
        "}",
        "</pre>"
      ]
    }
  },
  "CON32-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Bit-fields" ],
    "name": "Published Standards/SEI Cert Standards/C/Prevent data races when accessing bit-fields from multiple threads",
    "desc": {
      "html": [
        "",
        "<p>Prevent data races when accessing bit-fields from multiple threads</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Although the race window is narrow, an assignment or an expression can evaluate improperly because of misinterpreted data resulting in a corrupted running state or unintended information disclosure.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/CON32-C.+Prevent+data+races+when+accessing+bit-fields+from+multiple+threads</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "struct multi_threaded_flags {",
        "  unsigned int flag1 : 2;",
        "  unsigned int flag2 : 2;",
        "};",
        " ",
        "struct multi_threaded_flags flags;",
        " ",
        "int thread1(void *arg) {",
        "  flags.flag1 = 1;",
        "  return 0;",
        "}",
        " ",
        "int thread2(void *arg) {",
        "  flags.flag2 = 2;",
        "  return 0;",
        "}",
        "</pre>"
      ]
    }
  },
  "CON34-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Probable", "Remediation Cost: High", "Priority: P4", "Level: L3", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/C/Declare objects shared between threads with appropriate storage durations",
    "desc": {
      "html": [
        "",
        "<p>Declare objects shared between threads with appropriate storage durations</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Threads that reference the stack of other threads can potentially overwrite important information on the stack, such as function pointers and return addresses. The compiler may not generate warnings if the programmer allows one thread to access another thread's local variables, so a programmer may not catch a potential error at compile time. The remediation cost for this error is high because analysis tools have difficulty diagnosing problems with concurrency and race conditions.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/CON34-C.+Declare+objects+shared+between+threads+with+appropriate+storage+durations</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;threads.h&gt;",
        "#include &lt;stdio.h&gt;",
        "",
        "int child_thread(void *val) {",
        "  int *res = (int *)val;",
        "  printf(\"Result: %d",
        "\", *res);",
        "  return 0;",
        "}",
        "",
        "void create_thread(thrd_t *tid) {",
        "  int val = 1;",
        "  if (thrd_success != thrd_create(tid, child_thread, &val)) {",
        "    /* Handle error */",
        "  }",
        "}",
        "",
        "int main(void) {",
        "  thrd_t tid;",
        "  create_thread(&tid);",
        "",
        "  if (thrd_success != thrd_join(tid, NULL)) {",
        "    /* Handle error */",
        "  }",
        "  return 0;",
        "}",
        "",
        "",
        "#include &lt;threads.h&gt;",
        "#include &lt;stdio.h&gt;",
        "",
        "int child_thread(void *val) {",
        "  int *result = (int *)val;",
        "  printf(\"Result: %d",
        "\", *result);  /* Correctly prints 1 */",
        "  return 0;",
        "}",
        "",
        "void create_thread(thrd_t *tid, int *val) {",
        "  if (thrd_success != thrd_create(tid, child_thread, val)) {",
        "    /* Handle error */",
        "  }",
        "}",
        "",
        "int main(void) {",
        "  int val = 1;",
        "  thrd_t tid;",
        "  create_thread(&tid, &val);",
        "  if (thrd_success != thrd_join(tid, NULL)) {",
        "    /* Handle error */",
        "  }",
        "  return 0;",
        "}",
        "",
        "",
        "#include &lt;threads.h&gt;",
        "#include &lt;stdio.h&gt;",
        "#include &lt;stdlib.h&gt;",
        "",
        "static tss_t key;",
        "",
        "int child_thread(void *v) {",
        "  void *result = tss_get(*(tss_t *)v);",
        "  printf(\"Result: %d",
        "\", *(int *)result);",
        "  return 0;",
        "}",
        "",
        "int create_thread(void *thrd) {",
        "  int *val = (int *)malloc(sizeof(int));",
        "  if (val == NULL) {",
        "    /* Handle error */",
        "  }",
        "  *val = 1;",
        "  if (thrd_success != tss_set(key, val)) {",
        "    /* Handle error */",
        "  }",
        "  if (thrd_success != thrd_create((thrd_t *)thrd,",
        "                                  child_thread, &key)) {",
        "    /* Handle error */",
        "  }",
        "  return 0;",
        "}",
        "",
        "int main(void) {",
        "  thrd_t parent_tid, child_tid;",
        "",
        "  if (thrd_success != tss_create(&key, free)) {",
        "    /* Handle error */",
        "  }",
        "  if (thrd_success != thrd_create(&parent_tid, create_thread,",
        "                                  &child_tid)) {",
        "    /* Handle error */",
        "  }",
        "  if (thrd_success != thrd_join(parent_tid, NULL)) {",
        "    /* Handle error */",
        "  }",
        "  if (thrd_success != thrd_join(child_tid, NULL)) {",
        "    /* Handle error */",
        "  }",
        "  tss_delete(key);",
        "  return 0;",
        "}",
        "",
        "",
        "",
        "#include &lt;omp.h&gt;",
        "#include &lt;stdio.h&gt;",
        "",
        "int main(void) {",
        "  int j = 0;",
        "  #pragma omp parallel",
        "  {",
        "    int t = omp_get_thread_num();",
        "    printf(\"Running thread - %d",
        "\", t);",
        "    for (int i = 0; i &lt; 5050; i++) {",
        "    j++; /* j not private; could be a race condition */",
        "    }",
        "    printf(\"Just ran thread - %d",
        "\", t);",
        "    printf(\"loop count %d",
        "\", j);",
        "  }",
        "return 0;",
        "}",
        "</pre>"
      ]
    }
  },
  "CON35-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Control Flow" ],
    "name": "Published Standards/SEI Cert Standards/C/Avoid deadlock by locking in a predefined order",
    "desc": {
      "html": [
        "",
        "<p>Avoid deadlock by locking in a predefined order</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Deadlock prevents multiple threads from progressing, halting program execution. A denial-of-service attack is possible if the attacker can create the conditions for deadlock.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/CON35-C.+Avoid+deadlock+by+locking+in+a+predefined+order</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;stdlib.h&gt;",
        "#include &lt;threads.h&gt;",
        "",
        "typedef struct {",
        "  int balance;",
        "  mtx_t balance_mutex;",
        "} bank_account;",
        "",
        "typedef struct {",
        "  bank_account *from;",
        "  bank_account *to;",
        "  int amount;",
        "} transaction;",
        "",
        "void create_bank_account(bank_account **ba,",
        "                         int initial_amount) {",
        "  bank_account *nba = (bank_account *)malloc(",
        "    sizeof(bank_account)",
        "  );",
        "  if (nba == NULL) {",
        "    /* Handle error */",
        "  }",
        "",
        "  nba-&gt;balance = initial_amount;",
        "  if (thrd_success",
        "      != mtx_init(&nba-&gt;balance_mutex, mtx_plain)) {",
        "    /* Handle error */",
        "  }",
        "",
        "  *ba = nba;",
        "}",
        "",
        "int deposit(void *ptr) {",
        "  transaction *args = (transaction *)ptr;",
        "",
        "  if (thrd_success != mtx_lock(&args-&gt;from-&gt;balance_mutex)) {",
        "    /* Handle error */",
        "  }",
        "",
        "  /* Not enough balance to transfer */",
        "  if (args-&gt;from-&gt;balance &lt; args-&gt;amount) {",
        "    if (thrd_success",
        "        != mtx_unlock(&args-&gt;from-&gt;balance_mutex)) {",
        "      /* Handle error */",
        "    }",
        "    return -1; /* Indicate error */",
        "  }",
        "  if (thrd_success != mtx_lock(&args-&gt;to-&gt;balance_mutex)) {",
        "    /* Handle error */",
        "  }",
        "",
        "  args-&gt;from-&gt;balance -= args-&gt;amount;",
        "  args-&gt;to-&gt;balance += args-&gt;amount;",
        "",
        "  if (thrd_success",
        "      != mtx_unlock(&args-&gt;from-&gt;balance_mutex)) {",
        "    /* Handle error */",
        "  }",
        "",
        "  if (thrd_success",
        "      != mtx_unlock(&args-&gt;to-&gt;balance_mutex)) {",
        "    /* Handle error */",
        "  }",
        "",
        "  free(ptr);",
        "  return 0;",
        "}",
        "",
        "int main(void) {",
        "  thrd_t thr1, thr2;",
        "  transaction *arg1;",
        "  transaction *arg2;",
        "  bank_account *ba1;",
        "  bank_account *ba2;",
        "",
        "  create_bank_account(&ba1, 1000);",
        "  create_bank_account(&ba2, 1000);",
        "",
        "  arg1 = (transaction *)malloc(sizeof(transaction));",
        "  if (arg1 == NULL) {",
        "    /* Handle error */",
        "  }",
        "  arg2 = (transaction *)malloc(sizeof(transaction));",
        "  if (arg2 == NULL) {",
        "    /* Handle error */",
        "  }",
        "  arg1-&gt;from = ba1;",
        "  arg1-&gt;to = ba2;",
        "  arg1-&gt;amount = 100;",
        "",
        "  arg2-&gt;from = ba2;",
        "  arg2-&gt;to = ba1;",
        "  arg2-&gt;amount = 100;",
        "",
        "  /* Perform the deposits */",
        "  if (thrd_success",
        "     != thrd_create(&thr1, deposit, (void *)arg1)) {",
        "    /* Handle error */",
        "  }",
        "  if (thrd_success",
        "      != thrd_create(&thr2, deposit, (void *)arg2)) {",
        "    /* Handle error */",
        "  }",
        "  return 0;",
        "}",
        "</pre>"
      ]
    }
  },
  "CON43-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Probable", "Remediation Cost: High", "Priority: P4", "Level: L3" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not allow data races in multithreaded code",
    "desc": {
      "html": [
        "",
        "<p>Do not allow data races in multithreaded code</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Race conditions caused by multiple threads concurrently accessing and modifying the same data can lead to abnormal termination and denial-of-service attacks or data integrity violations.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/CON43-C.+Do+not+allow+data+races+in+multithreaded+code</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "static volatile int account_balance;",
        "",
        "void debit(int amount) {",
        "  account_balance -= amount;",
        "}",
        "",
        "void credit(int amount) {",
        "  account_balance += amount;",
        "}",
        "",
        "",
        "",
        "#include &lt;stdio.h&gt;",
        "",
        "void doStuff(int *ps) {",
        "  switch (*ps) {",
        "    case 0: { printf(\"0\"); break; }",
        "    case 1: { printf(\"1\"); break; }",
        "    case 2: { printf(\"2\"); break; }",
        "    case 3: { printf(\"3\"); break; }",
        "    case 4: { printf(\"4\"); break; }",
        "    default: { printf(\"default\"); break; }",
        "  }",
        "}",
        "",
        "",
        "#include &lt;stdio.h&gt;",
        "",
        "void doStuff(volatile int *ps) {",
        "  switch (*ps) {",
        "    case 0: { printf(\"0\"); break; }",
        "    case 1: { printf(\"1\"); break; }",
        "    case 2: { printf(\"2\"); break; }",
        "    case 3: { printf(\"3\"); break; }",
        "    case 4: { printf(\"4\"); break; }",
        "    default: { printf(\"default\"); break; }",
        "  }",
        "}",
        "</pre>"
      ]
    }
  },
  "DCL39-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: High", "Priority: P1", "Level: L3", "Structures and Unions" ],
    "name": "Published Standards/SEI Cert Standards/C/Avoid information leakage when passing a structure across a trust boundary",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Avoid information leakage when passing a structure across a trust boundary",
        "</p>"
      ]
    }
  },
  "ERR32-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Low", "Priority: P3", "Level: L3", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not rely on indeterminate values of errno",
    "desc": {
      "html": [
        "",
        "<p><b>Rationale</b></p>",
        "A signal handler is allowed to call signal(); if that fails, signal() returns SIG_ERR and sets errno to a positive value.",
        "However, if the event that caused a signal was external (not the result of the program calling abort() or raise()), the",
        "only functions the signal handler may call are _Exit() or abort(), or it may call signal() on the signal currently being",
        "handled; if signal() fails, the value of errno is indeterminate.",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "Referencing indeterminate values of errno is undefined behavior.",
        "</p>",
        "",
        "<p><b>Example</b></p>",
        "<pre>",
        "#include &lt;signal.h&gt;",
        "#include &lt;stdlib.h&gt;",
        "#include &lt;stdio.h&gt;",
        "",
        "typedef void (*pfv)(int);",
        "",
        "void handler(int signum) {",
        "  pfv old_handler = signal(signum, SIG_DFL);",
        "  if (old_handler == SIG_ERR) {",
        "    perror(\"SIGINT handler\"); /* Undefined behavior */",
        "    /* Handle error */",
        "  }",
        "}",
        "",
        "int main(void) {",
        "  pfv old_handler = signal(SIGINT, handler);",
        "  if (old_handler == SIG_ERR) {",
        "    perror(\"SIGINT handler\");",
        "    /* Handle error */",
        "  }",
        "",
        "  /* Main code loop */",
        "",
        "  return EXIT_SUCCESS;",
        "}",
        "</pre>",
        "",
        "<p>For full standard, see <i>https://wiki.sei.cmu.edu/confluence/display/c/ERR32-C.+Do+not+rely+on+indeterminate+values+of+errno</i></p>"
      ]
    }
  },
  "EXP35-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Identifiers" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not modify objects with temporary lifetime",
    "desc": {
      "html": [
        "",
        "<p><b>Rationale</b></p>",
        "The C11 Standard [ISO/IEC 9899:2011] introduced a new term: temporary lifetime.",
        "Modifying an object with temporary lifetime is undefined behavior. According",
        "to subclause 6.2.4, paragraph 8:",
        "A non-lvalue expression with structure or union type, where the structure or",
        "union contains a member with array type (including, recursively, members of",
        "all contained structures and unions) refers to an object with automatic storage",
        "duration and temporary lifetime. Its lifetime begins when the expression is",
        "evaluated and its initial value is the value of the expression. Its lifetime",
        "ends when the evaluation of the containing full expression or full declarator",
        "ends. Any attempt to modify an object with temporary lifetime results in",
        "undefined behavior.",
        "",
        "This definition differs from the C99 Standard (which defines modifying the",
        "result of a function call or accessing it after the next sequence point as",
        "undefined behavior) because a temporary object's lifetime ends when the",
        "evaluation containing the full expression or full declarator ends, so the",
        "result of a function call can be accessed. This extension to the lifetime of",
        "a temporary also removes a quiet change to C90 and improves compatibility with",
        "C++.",
        "",
        "C functions may not return arrays; however, functions can return a pointer to",
        "an array or a  struct or union that contains arrays. Consequently, in any",
        "version of C, if a function call returns by value a struct or union containing",
        "an array, do not modify those arrays within the expression containing the",
        "function call. In C99 and older, do not access an array returned by a function",
        "after the next sequence point or after the evaluation of the containing full",
        "expression or full declarator ends.",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "Attempting to modify an array or access it after its lifetime expires may result in erroneous program behavior.",
        "</p>",
        "",
        "<p><b>Examples</b></p>",
        "<pre>",
        "// Example 1",
        "#include &lt;stdio.h&gt;",
        "",
        "struct X { char a[8]; };",
        "",
        "struct X salutation(void) {",
        "  struct X result = { \"Hello\" };",
        "  return result;",
        "}",
        "",
        "struct X addressee(void) {",
        "  struct X result = { \"world\" };",
        "  return result;",
        "}",
        "",
        "int main(void) {",
        "  printf(\"%s, %s!",
        "\", salutation().a, addressee().a);",
        "  return 0;",
        "}",
        "</pre>",
        "<pre>",
        "// Example 2",
        "#include &lt;stdio.h&gt;",
        "",
        "struct X { int a[6]; };",
        "",
        "struct X addressee(void) {",
        "  struct X result = { { 1, 2, 3, 4, 5, 6 } };",
        "  return result;",
        "}",
        "",
        "int main(void) {",
        "  printf(\"%x\", ++(addressee().a[0]));",
        "  return 0;",
        "}",
        "</pre>",
        "<pre>",
        "// Example 3",
        "#include &lt;stdio.h&gt;",
        "",
        "struct X { int a[6]; };",
        "",
        "struct X addressee(void) {",
        "  struct X result = { { 1, 2, 3, 4, 5, 6 } };",
        "  return result;",
        "}",
        "",
        "int main(void) {",
        "  int *my_a = addressee().a;",
        "  printf(\"%x\", my_a[0]);",
        "  return 0;",
        "}",
        "</pre>",
        "",
        "<p>For full standard, see <i>https://wiki.sei.cmu.edu/confluence/display/c/EXP35-C.+Do+not+modify+objects+with+temporary+lifetime</i></p>"
      ]
    }
  },
  "EXP40-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Variables" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not modify constant objects",
    "desc": {
      "html": [
        "",
        "<p>Do not modify constant objects</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Modifying constant objects through nonconstant references is undefined behavior.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/EXP40-C.+Do+not+modify+constant+objects</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "const int **ipp;",
        "int *ip;",
        "const int i = 42;",
        "",
        "void func(void) {",
        "  ipp = &ip; /* Constraint violation */",
        "  *ipp = &i; /* Valid */",
        "  *ip = 0;   /* Modifies constant i (was 42) */",
        "}",
        "</pre>"
      ]
    }
  },
  "EXP43-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Probable", "Remediation Cost: High", "Priority: P4", "Level: L3", "Pointers" ],
    "name": "Published Standards/SEI Cert Standards/C/Avoid undefined behavior when using restrict-qualified pointers",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Avoid undefined behavior when using restrict-qualified pointers",
        "</p>"
      ]
    }
  },
  "FIO32-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not perform operations on devices that are only appropriate for files",
    "desc": {
      "html": [
        "",
        "<p>Do not perform operations on devices that are only appropriate for files</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Allowing operations that are appropriate only for regular files to be performed on devices can result in denial-of-service attacks or more serious exploits depending on the platform.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/FIO32-C.+Do+not+perform+operations+on+devices+that+are+only+appropriate+for+files</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;stdio.h&gt;",
        "",
        "void func(const char *file_name) {",
        "  FILE *file;",
        "  if ((file = fopen(file_name, \"wb\")) == NULL) {",
        "    /* Handle error */",
        "  }",
        "",
        "  /* Operate on the file */",
        "",
        "  if (fclose(file) == EOF) {",
        "    /* Handle error */",
        "  }",
        "}",
        "",
        "",
        "#include &lt;Windows.h&gt;",
        "",
        "void func(const TCHAR *file_name) {",
        "  HANDLE hFile = CreateFile(",
        "    file_name,",
        "    GENERIC_READ | GENERIC_WRITE, 0,",
        "    NULL, OPEN_EXISTING,",
        "    FILE_ATTRIBUTE_NORMAL, NULL",
        "  );",
        "  if (hFile == INVALID_HANDLE_VALUE) {",
        "    /* Handle error */",
        "  } else if (GetFileType(hFile) != FILE_TYPE_DISK) {",
        "    /* Handle error */",
        "    CloseHandle(hFile);",
        "  } else {",
        "    /* Operate on the file */",
        "    CloseHandle(hFile);",
        "  }",
        "}",
        "</pre>"
      ]
    }
  },
  "FIO34-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/C/Distinguish between characters read from a file and EOF or WEOF",
    "desc": {
      "html": [
        "",
        "<p>Distinguish between characters read from a file and EOF or WEOF</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Incorrectly assuming characters from a file cannot match EOF or WEOF has resulted in significant vulnerabilities, including command injection attacks. (See the *CA-1996-22 advisory.)</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/FIO34-C.+Distinguish+between+characters+read+from+a+file+and+EOF+or+WEOF</i></p>",
        "<p><b>Exceptions</b></p>",
        "<p><i>FIO34-C-EX1: A number of C functions do not return characters but can return EOF as a status code. These functions include fclose(), fflush(), fputs(), fscanf(), puts(), scanf(), sscanf(), vfscanf(), and vscanf(). These return values can be compared to EOF without validating the result.</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;stdio.h&gt;",
        "  ",
        "void func(void) {",
        "  int c;",
        "  ",
        "  do {",
        "    c = getchar();",
        "  } while (c != EOF);",
        "}",
        "",
        "",
        "",
        "#include &lt;assert.h&gt;",
        "#include &lt;limits.h&gt;",
        "#include &lt;stdio.h&gt;",
        " ",
        "void func(void) {",
        "  char c;",
        "  static_assert(UCHAR_MAX &lt; UINT_MAX, \"FIO34-C violation\");",
        " ",
        "  do {",
        "    c = getchar();",
        "  } while (c != EOF);",
        "}",
        "",
        "",
        "#include &lt;stddef.h&gt;",
        "#include &lt;stdio.h&gt;",
        "#include &lt;wchar.h&gt;",
        " ",
        "enum { BUFFER_SIZE = 32 };",
        " ",
        "void g(void) {",
        "  wchar_t buf[BUFFER_SIZE];",
        "  wchar_t wc;",
        "  size_t i = 0;",
        " ",
        "  while ((wc = getwc(stdin)) != L'\\n' && wc != WEOF) {",
        "    if (i &lt; (BUFFER_SIZE - 1)) {",
        "      buf[i++] = wc;",
        "    }",
        "  }",
        "  buf[i] = L'\\0';",
        "}",
        "</pre>"
      ]
    }
  },
  "FLP32-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Expressions"],
    "name": "Published Standards/SEI Cert Standards/C/Prevent or detect domain and range errors in math functions",
    "desc": {
      "html": [
        "",
        "<p>Prevent or detect domain and range errors in math functions</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Failure to prevent or detect domain and range errors in math functions may cause unexpected results.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/FLP32-C.+Prevent+or+detect+domain+and+range+errors+in+math+functions</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;math.h&gt;",
        "",
        "void func(double x) {",
        "  double result;",
        "  result = sqrt(x);",
        "}",
        "",
        "",
        "",
        "#include &lt;math.h&gt;",
        "",
        "void func(double x) {",
        "  double result;",
        "  result = sinh(x);",
        "}",
        "",
        "",
        "",
        "#include &lt;math.h&gt;",
        "",
        "void func(double x, double y) {",
        "  double result;",
        "  result = pow(x, y);",
        "}",
        "",
        "",
        "",
        "#include &lt;math.h&gt;",
        "",
        "void func(float x) {",
        "  float result = asin(x);",
        "  /* ... */",
        "}",
        "</pre>"
      ]
    }
  },
  "FLP34-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Low", "Priority: P3", "Level: L3" , "Types"],
    "name": "Published Standards/SEI Cert Standards/C/Ensure that floating-point conversions are within range of the new type",
    "desc": {
      "html": [
        "",
        "<p>Ensure that floating-point conversions are within range of the new type</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Converting a floating-point value to a floating-point value of a smaller range and precision or to an integer type, or converting an integer type to a floating-point type, can result in a value that is not representable in the destination type and is undefined behavior on implementations that do not support Annex F.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/FLP34-C.+Ensure+that+floating-point+conversions+are+within+range+of+the+new+type</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "void func(float f_a) {",
        "  int i_a;",
        "",
        "  /* Undefined if the integral part of f_a cannot be represented. */",
        "  i_a = f_a;",
        "}",
        "",
        "",
        "void func(double d_a, long double big_d) {",
        "  double d_b = (float)big_d;",
        "  float f_a = (float)d_a;",
        "  float f_b = (float)big_d;",
        "}",
        "</pre>"
      ]
    }
  },
  "FLP36-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Types" ],
    "name": "Published Standards/SEI Cert Standards/C/Preserve precision when converting integral values to floating-point type",
    "desc": {
      "html": [
        "",
        "<p>Preserve precision when converting integral values to floating-point type</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Conversion from integral types to floating-point types without sufficient precision can lead to loss of precision (loss of least significant bits).</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/FLP36-C.+Preserve+precision+when+converting+integral+values+to+floating-point+type</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;stdio.h&gt;",
        "",
        "int main(void) {",
        "  long int big = 1234567890L;",
        "  float approx = big;",
        "  printf(\"%ld\\n\", (big - (long int)approx));",
        "  return 0;",
        "}",
        "</pre>"
      ]
    }
  },
  "INT32-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 75", "Likelihood: Likely", "Remediation Cost: High", "Priority: P9", "Level: L2", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/C/Ensure that operations on signed integers do not result in overflow",
    "desc": {
      "html": [
        "<p>",
        "Ensure that operations on signed integers do not result in overflow",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "<p>",
        "Integer overflow can lead to buffer overflows and the execution of arbitrary",
        "code by an attacker.",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/c/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "void func(signed int si_a, signed int si_b) {",
        "  signed int sum = si_a + si_b;",
        "  /* ... */",
        "}",
        "</pre>",
        "",
        "<p>",
        "<i>Developer Notes:</i>",
        "This rule cannot be thoroughly implemented because of the complexity of inputs.",
        "</p>",
        "",
        "<ul>",
        "",
        "<li>",
        "There is no mention in the rule for multiple-operation expressions.",
        "</li>",
        "",
        "<li>",
        "There are many ways to check for overflow in the <code>if</code> statements,",
        "most of which also use operators that can overflow.",
        "</li>",
        "",
        "<li>",
        "Other code between the <code>if</code> statements and the operation may",
        "invalidate the check by the <code>if</code> statements.",
        "</li>",
        "",
        "</ul>",
        "",
        "<p>",
        "Thus, the scope of this rule is too broad.",
        "</p>"
      ]
    }
  },
  "INT34-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand",
    "desc": {
      "html": [
        "",
        "<p>Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Although shifting a negative number of bits or shifting a number of bits greater than or equal to the width of the promoted left operand is undefined behavior in C, the risk is generally low because processors frequently reduce the shift amount modulo the width of the type.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/INT34-C.+Do+not+shift+an+expression+by+a+negative+number+of+bits+or+by+greater+than+or+equal+to+the+number+of+bits+that+exist+in+the+operand</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "void func(unsigned int ui_a, unsigned int ui_b) {",
        "  unsigned int uresult = ui_a &lt;&lt; ui_b;",
        "  /* ... */",
        "}",
        "",
        "",
        "",
        "#include &lt;limits.h&gt;",
        "#include &lt;stddef.h&gt;",
        "#include &lt;inttypes.h&gt;",
        "",
        "void func(signed long si_a, signed long si_b) {",
        "  signed long result;",
        "  if (si_a &gt; (LONG_MAX &gt;&gt; si_b)) {",
        "    /* Handle error */",
        "  } else {",
        "    result = si_a &lt;&lt; si_b;",
        "  }",
        "  /* ... */",
        "}",
        "",
        "",
        "",
        "void func(unsigned int ui_a, unsigned int ui_b) {",
        "  unsigned int uresult = ui_a &gt;&gt; ui_b;",
        "  /* ... */",
        "}",
        "</pre>"
      ]
    }
  },
  "INT35-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Types" ],
    "name": "Published Standards/SEI Cert Standards/C/Use correct integer precisions",
    "desc": {
      "html": [
        "",
        "<p>Use correct integer precisions</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Mistaking an integer's size for its precision can permit invalid precision arguments to operations such as bitwise shifts, resulting in undefined behavior.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/INT35-C.+Use+correct+integer+precisions</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;limits.h&gt;",
        "",
        "unsigned int pow2(unsigned int exp) {",
        "  if (exp &gt;= sizeof(unsigned int) * CHAR_BIT) {",
        "    /* Handle error */",
        "  }",
        "  return 1 &lt;&lt; exp;",
        "}",
        "</pre>"
      ]
    }
  },

  "MEM30-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 75", "Likelihood: Likely", "Remediation Cost: Medium", "Priority: P18", "Level: L1", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not access freed memory",
    "desc": {
      "html": [
        "",
        "<p>Do not access freed memory</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Reading memory that has already been freed can lead to abnormal program termination and denial-of-service attacks. Writing memory that has already been freed can additionally lead to the execution of arbitrary code with the permissions of the vulnerable process.</p>",
        "<p>Freeing memory multiple times has similar consequences to accessing memory after it is freed. Reading a pointer to deallocated memory is undefined behavior because the pointer value is indeterminate and might be a trap representation. When reading from or writing to freed memory does not cause a trap, it may corrupt the underlying data structures that manage the heap in a manner that can be exploited to execute arbitrary code. Alternatively, writing to memory after it has been freed might modify memory that has been reallocated.</p>",
        "<p>Programmers should be wary when freeing memory in a loop or conditional statement; if coded incorrectly, these constructs can lead to double-free vulnerabilities. It is also a common error to misuse the realloc() function in a manner that results in double-free vulnerabilities. (See MEM04-C. Beware of zero-length allocations.)</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/MEM30-C.+Do+not+access+freed+memory</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;stdlib.h&gt;",
        "",
        "struct node {",
        "  int value;",
        "  struct node *next;",
        "};",
        "",
        "void free_list(struct node *head) {",
        "  for (struct node *p = head; p != NULL; p = p-&gt;next) {",
        "    free(p);",
        "  }",
        "}",
        "",
        "",
        "#include &lt;stdlib.h&gt;",
        "#include &lt;string.h&gt;",
        "",
        "int main(int argc, char *argv[]) {",
        "  char *return_val = 0;",
        "  const size_t bufsize = strlen(argv[0]) + 1;",
        "  char *buf = (char *)malloc(bufsize);",
        "  if (!buf) {",
        "    return EXIT_FAILURE;",
        "  }",
        "  /* ... */",
        "  free(buf);",
        "  /* ... */",
        "  strcpy(buf, argv[0]);",
        "  /* ... */",
        "  return EXIT_SUCCESS;",
        "}",
        "",
        "",
        "#include &lt;stdlib.h&gt;",
        "",
        "void f(char *c_str1, size_t size) {",
        "  char *c_str2 = (char *)realloc(c_str1, size);",
        "  if (c_str2 == NULL) {",
        "    free(c_str1);",
        "  }",
        "}",
        "",
        "",
        "void gdClipSetAdd(gdImagePtr im, gdClipRectanglePtr rect) {",
        "  gdClipRectanglePtr more;",
        "  if (im-&gt;clip == 0) {",
        "   /* ... */",
        "  }",
        "  if (im-&gt;clip-&gt;count == im-&gt;clip-&gt;max) {",
        "    more = gdRealloc (im-&gt;clip-&gt;list,(im-&gt;clip-&gt;max + 8) *",
        "                      sizeof (gdClipRectangle));",
        "    /*",
        "     * If the realloc fails, then we have not lost the",
        "     * im-&gt;clip-&gt;list value.",
        "     */",
        "    if (more == 0) return;",
        "    im-&gt;clip-&gt;max += 8;",
        "  }",
        "  im-&gt;clip-&gt;list[im-&gt;clip-&gt;count] = *rect;",
        "  im-&gt;clip-&gt;count++;",
        "",
        "}",
        "</pre>"
      ]
    }
  },
  "MEM36-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Probable", "Remediation Cost: High", "Priority: P2", "Level: L3", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not modify the alignment of objects by calling realloc()",
    "desc": {
      "html": [
        "",
        "<p>Do not modify the alignment of objects by calling realloc()</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Improper alignment can lead to arbitrary memory locations being accessed and written to.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152255</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;stdlib.h&gt;",
        "",
        "void func(void) {",
        "  size_t resize = 1024;",
        "  size_t alignment = 1 &lt;&lt; 12;",
        "  int *ptr;",
        "  int *ptr1;",
        "",
        "  if (NULL == (ptr = (int *)aligned_alloc(alignment, sizeof(int)))) {",
        "    /* Handle error */",
        "  }",
        "",
        "  if (NULL == (ptr1 = (int *)realloc(ptr, resize))) {",
        "    /* Handle error */",
        "  }",
        "}",
        "</pre>"
      ]
    }
  },
  "MSC41-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Variables" ],
    "name": "Published Standards/SEI Cert Standards/C/Never hard code sensitive information",
    "desc": {
      "html": [
        "",
        "<p>Never hard code sensitive information</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Hard coding sensitive information exposes that information to attackers. The severity of this rule can vary depending on the kind of information that is disclosed. Frequently, the information disclosed is password or key information, which can lead to remote exploitation. Consequently, a high severity rating is given but may be adjusted downwards according to the nature of the sensitive data.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/MSC41-C.+Never+hard+code+sensitive+information</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "/* Returns nonzero if authenticated */",
        "int authenticate(const char* code);",
        " ",
        "int main() {",
        "  if (!authenticate(\"correct code\")) {",
        "    printf(\"Authentication error",
        "\");",
        "    return -1;",
        "  }",
        " ",
        "  printf(\"Authentication successful",
        "\");",
        "  // ...Work with system...",
        "  return 0;",
        "}",
        "</pre>"
      ]
    }
  },
  "POS49-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/C/When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed",
        "</p>"
      ]
    }
  },
  "SIG35-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: High", "Priority: P1", "Level: L3", "Exception Handling" ],
    "name": "Published Standards/SEI Cert Standards/C/Do not return from a computational exception signal handler",
    "desc": {
      "html": [
        "",
        "<p>Do not return from a computational exception signal handler</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Returning from a computational exception signal handler is undefined behavior.</p>",
        "<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/SIG35-C.+Do+not+return+from+a+computational+exception+signal+handler</i></p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "#include &lt;errno.h&gt;",
        "#include &lt;limits.h&gt;",
        "#include &lt;signal.h&gt;",
        "#include &lt;stdlib.h&gt;",
        " ",
        "volatile sig_atomic_t denom;",
        " ",
        "void sighandle(int s) {",
        "  /* Fix the offending volatile */",
        "  if (denom == 0) {",
        "    denom = 1;",
        "  }",
        "}",
        " ",
        "int main(int argc, char *argv[]) {",
        "  if (argc &lt; 2) {",
        "    return 0;",
        "  }",
        "  ",
        "  char *end = NULL;",
        "  long temp = strtol(argv[1], &end, 10);",
        "  ",
        "  if (end == argv[1] || 0 != *end ||",
        "      ((LONG_MIN == temp || LONG_MAX == temp) && errno == ERANGE)) {",
        "    /* Handle error */",
        "  }",
        "  ",
        "  denom = (sig_atomic_t)temp;",
        "  signal(SIGFPE, sighandle);",
        " ",
        "  long result = 100 / (long)denom;",
        "  return 0;",
        "}",
        "</pre>"
      ]
    }
  },
  "STR34-C": {
    "checked": false,
    "language": "C++",
    "tags": [ "Language: C++", "Language: C", "Standard: SEI CERT C", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Types" ],
    "name": "Published Standards/SEI Cert Standards/C/Cast characters to unsigned char before converting to larger integer sizes",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Cast characters to unsigned char before converting to larger integer sizes",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "<p>",
        "Conversion of character data resulting in a value in excess of",
        "<code>UCHAR_MAX</code> is an often-missed error that can result in a",
        "disturbingly broad range of potentially severe vulnerabilities.",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/c/STR34-C.+Cast+characters+to+unsigned+char+before+converting+to+larger+integer+sizes",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "static int yy_string_get(void) {",
        "  register char *c_str;",
        "  register int c;",
        "",
        "  c_str = bash_input.location.string;",
        "  c = EOF;",
        "",
        "  /* If the string doesn't exist or is empty, EOF found */",
        "  if (c_str && *c_str) {",
        "    c = *c_str++;",
        "    bash_input.location.string = c_str;",
        "  }",
        "  return (c);",
        "}",
        "</pre>",
        "",
        "<p>",
        "<i>Developer Notes:</i>",
        "The examples are incorrect. Two \"compliant\" examples are technically",
        "non-compliant because of implicit conversion to <code>int</code> by the",
        "<code>&&</code> and <code>!=</code> operators.",
        "</p>"
      ]
    }
  },
  "DCL01-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Identifiers" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not reuse public identifiers from the Java Standard Library",
    "desc": {
      "html": [
        "<p><b>Do not reuse public identifiers from the Java Standard Library</b></p>",
        "<p>When a developer uses an identifier that has the same name as a public class,",
        "such as Vector, a subsequent maintainer might be unaware that this identifier",
        "does not actually refer to java.util.Vector and might unintentionally use the",
        "custom Vector rather than the original java.util.Vector class. The custom type",
        "Vector can shadow a class name from java.util.Vector, as specified by The Java",
        "Language Specification (JLS), §6.3.2, \"Obscured Declarations\" [JLS 2005], and",
        "unexpected program behavior can occur.</p>",
        "<p>Well-defined import statements can resolve these issues. However, when reused",
        "name definitions are imported from other packages, use of the",
        "type-import-on-demand declaration (see §7.5.2, \"Type-Import-on-Demand",
        "Declaration\" [JLS 2005]) can complicate a programmer's attempt to determine",
        "which specific definition was intended to be used. Additionally, a common",
        "practice that can lead to errors is to produce the import statements after",
        "writing the code, often via automatic inclusion of import statements by an IDE,",
        "which creates further ambiguity with respect to the names. When a custom type",
        "is found earlier than the intended type in the Java include path, no further",
        "searches are conducted. Consequently, the wrong type is silently adopted.</p>",
        "<p><b>Noncompliant Code Example (Class Name)</b></p>",
        "<p>This noncompliant code example implements a class that reuses the name of the",
        "class java.util.Vector. It attempts to introduce a different condition for the",
        "isEmpty() method for interfacing with native legacy code by overriding the",
        "corresponding method in java.util.Vector. Unexpected behavior can arise if a",
        "maintainer confuses the isEmpty() method with the java.util.Vector.isEmpty()",
        "method.</p>",
        "<pre>",
        "class Vector {",
        "  private int val = 1;",
        "",
        "  public boolean isEmpty() {",
        "    if (val == 1) {   // Compares with 1 instead of 0",
        "      return true;",
        "    } else {",
        "      return false;",
        "    }",
        "  }",
        "  // Other functionality is same as java.util.Vector",
        "}",
        "",
        "// import java.util.Vector; omitted",
        "public class VectorUser {",
        "  public static void main(String[] args) {",
        "    Vector v = new Vector();",
        "    if (v.isEmpty()) {",
        "      System.out.println(\"Vector is empty\");",
        "    }",
        "  }",
        "}",
        "</pre>",
        "<p><b>Compliant Solution (Class Name)</b></p>",
        "<p>This compliant solution uses a different name for the class, preventing any potential shadowing of the class from the Java Standard Library:</p>",
        "<pre>",
        "class MyVector {",
        "  //Other code",
        "}",
        "</pre>",
        "<p>When the developer and organization control the original shadowed class, it",
        "may be preferable to change the design strategy of the original in accordance",
        "with Bloch's Effective Java [Bloch 2008], Item 16, \"Prefer Interfaces to",
        "Abstract Classes.\" Changing the original class into an interface would permit",
        "class MyVector to declare that it implements the hypothetical Vector interface.",
        "With this technique, client code that intended to use MyVector would remain",
        "compatible with code that uses the original implementation of Vector.</p>",
        "<p><b>Risk Assessment</p></b>",
        "<p>Public identifier reuse decreases the readability and maintainability of code</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/DCL01-J.+Do+not+reuse+public+identifiers+from+the+Java+Standard+Library</i>",
        "</p>"
      ]
    }
  },
  "ENV00-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Libaries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not sign code that performs only unprivileged operations",
    "desc": {
      "html": [
        "<p><b>Do not sign code that performs only unprivileged operations</b></p>",
        "<p><b>Rationale</b></p>",
        "<p>Java uses code signing as a requirement for granting elevated privileges to",
        "code. Many security policies permit signed code to operate with elevated",
        "privileges. For example, Java applets can escape the default sandbox",
        "restrictions when signed. Consequently, users can grant explicit permissions",
        "either to a particular codebase or to all code signed by a particular signer.",
        "This approach places control of security in the hands of the user, who can",
        "choose whether to run an application with full or restricted permissions.</p>",
        "<p>Signing code, however, has its own problems. According to Bruce Schneier",
        "[Schneier 2000]:</p>",
        "<p>First, users have no idea how to decide if a particular signer is trusted or",
        "not. Second, just because a component is signed doesn't mean that it is safe.",
        "Third, just because two components are individually signed does not mean that",
        "using them together is safe; lots of accidental harmful interactions can be",
        "exploited. Fourth, \"safe\" is not an all-or-nothing thing; there are degrees of",
        "safety. And fifth, the fact that the evidence of attack (the signature on the",
        "code) is stored on the computer under attack is mostly useless: The attacker",
        "could delete or modify the signature during the attack, or simply reformat the",
        "drive where the signature is stored.</p>",
        "<p>Code signing is designed to authenticate the origin of the code as well as to",
        "verify the integrity of the code. It relies on a certification authority (CA) to",
        "confirm the identity of the principal signer. Naive users should not be expected",
        "to understand how certificates and the public key infrastructure (PKI) work.</p>",
        "<p>Users commonly associate digital signatures with safety of code execution,",
        "trusting the code to cause them no harm. The problem arises when a vulnerability",
        "is discovered in signed code. Because many systems are configured to permanently",
        "trust certain signing organizations, those systems fail to notify their users",
        "when downloading content signed by the trusted organization, even when that",
        "content contains vulnerabilities. An attacker can offer the users legitimately",
        "signed vulnerable content with the intention of exploiting that content.</p>",
        "<p>Consider, for example, signed Java applets. When a certificate is verified,",
        "on widely used platforms, the user is presented with a security dialog in which",
        "the option \"Always trust the content from the publisher\" is selected by default.",
        "The dialog primarily asks whether or not the signed code should be executed.",
        "Unfortunately, if the user confirms the dialog with the check box selected, the",
        "\"Always trust...\" setting overrides any future warning dialogs. An attacker can",
        "take advantage of this mechanism by exploiting vulnerable code signed by the",
        "trusted organization. In this case, the code will execute with the user's",
        "implied permission and can be freely exploited.</p>",
        "<p>An organization that signs its own code should not vouch for code acquired",
        "from a third party without carefully auditing the third-party code. When signing",
        "privileged code, ensure that all of the signed code is confined to a single JAR",
        "file (see ENV01-J. Place all security-sensitive code in a single JAR and sign",
        "and seal it for more information) and also that any code invoked from the",
        "privileged code is also contained in that JAR file. Nonprivileged code must be",
        "left unsigned, restricting it to the sandbox. For example, unsigned applets and",
        "Java Network Launching Protocol (JNLP) applications are granted the minimum set",
        "of privileges and are restricted to the sandbox. Finally, never sign any code",
        "that is incomprehensible or unaudited.</p>",
        "<p><b>Exceptions</b></p>",
        "<p>ENV00-J-EX1: An organization that has an internal PKI and uses code signing",
        "for internal development activities (such as facilitating code check-in and",
        "tracking developer activity) may sign unprivileged code. This codebase should",
        "not be carried forward to a production environment. The keys used for internal",
        "signing must be distinct from those used to sign externally available code.</p>",
        "<p>ENV00-J-EX2: Oracle has deprecated the use of unsigned applets and will soon",
        "cease to support them. Applets that are signed have traditionally been run with",
        "full privileges. Since Java 1.7.0 update 21, Oracle has provided mechanisms to",
        "allow applets to be signed and yet run without full permissions. This enables",
        "applets that are today unsigned to continue to run in a security sandbox despite",
        "being signed. Signing an applet that runs with restricted privileges under",
        "versions of Java at least as recent as update 21 constitutes an exception to",
        "this rule. For more information, see Signed Java Applet Security Improvements on",
        "the CERT/CC blog.</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Signing unprivileged code violates the principle of least privilege because",
        "it can circumvent security restrictions defined by the security policies of",
        "applets and JNLP applications, for example.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/ENV00-J.+Do+not+sign+code+that+performs+only+unprivileged+operations</i>",
        "</p>"
      ]
    }
  },
  "ENV01-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Place all security-sensitive code in a single JAR and sign and seal it",
    "desc": {
      "html": [
        "<p>",
        "Place all security-sensitive code in a single JAR and sign and seal it",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "<p>",
        "Failure to place all privileged code together in one package and seal the",
        "package can lead to mix-and-match attacks.",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/java/ENV01-J.+Place+all+security-sensitive+code+in+a+single+JAR+and+sign+and+seal+it",
        "</i>",
        "</p>",
        "",
        "<p><b>Exceptions</b></p>",
        "<p><i>",
        "ENV01-J-EX0: Independent groups of privileged code and associated",
        "security-sensitive code (a \"group\" hereafter) may be placed in separate sealed",
        "packages and even in separate JAR files, subject to the following enabling",
        "conditions:",
        "</i>",
        "</p>",
        "",
        "<ul>",
        "<i>",
        "<li>",
        "The code in any one of these independent groups must lack any dynamic or static",
        "dependency on any of the code in any of the other groups. This means that code",
        "from one such group cannot invoke code from any of the others, whether directly",
        "or transitively.",
        "</li>",
        "<li>",
        "All code from any single group is contained within one or more sealed packages.",
        "</li>",
        "<li>",
        "All code from any single group is contained within a single signed JAR file.",
        "</li>",
        "</i>",
        "</ul>",
        "",
        "<p><b>Noncompliant Code Example (Privileged Code)</b></p>",
        "<pre>",
        "package trusted;",
        "import untrusted.RetValue;",
        "",
        "public class MixMatch {",
        "  private void privilegedMethod() throws IOException {",
        "    try {",
        "      AccessController.doPrivileged(",
        "        new PrivilegedExceptionAction&lt;Void&gt;() {",
        "          public Void run() throws IOException, FileNotFoundException {",
        "            final FileInputStream fis = new FileInputStream(\"file.txt\");",
        "            try {",
        "              RetValue rt = new RetValue();",
        "",
        "              if (rt.getValue() == 1) {",
        "                // Do something with sensitive file",
        "              }",
        "            } finally {",
        "              fis.close();",
        "            }",
        "            return null; // Nothing to return",
        "          }",
        "        }",
        "      );",
        "    } catch (PrivilegedActionException e) {",
        "      // Forward to handler and log",
        "    }",
        "  }",
        "",
        "  public static void main(String[] args) throws IOException {",
        "    MixMatch mm = new MixMatch();",
        "    mm.privilegedMethod();",
        "  }",
        "}",
        "",
        "// In another JAR file:",
        "package untrusted;",
        "",
        "class RetValue {",
        "  public int getValue() {",
        "    return 1;",
        "  }",
        "}",
        "</pre>",
        "",
        "<p><b>Noncompliant Code Example (Security-Sensitive Code)</b></p>",
        "<pre>",
        "package trusted;",
        "import untrusted.RetValue;",
        "",
        "public class MixMatch {",
        "  private void privilegedMethod() throws IOException {",
        "    try {",
        "      final FileInputStream fis = AccessController.doPrivileged(",
        "        new PrivilegedExceptionAction&lt;FileInputStream&gt;() {",
        "          public FileInputStream run() throws FileNotFoundException {",
        "            return new FileInputStream(\"file.txt\");",
        "          }",
        "        }",
        "      );",
        "      try {",
        "        RetValue rt = new RetValue();",
        "",
        "        if (rt.getValue() == 1) {",
        "          // Do something with sensitive file",
        "        }",
        "      } finally {",
        "        fis.close();",
        "      }",
        "    } catch (PrivilegedActionException e) {",
        "      // Forward to handler and log",
        "    }",
        "  }",
        "",
        "  public static void main(String[] args) throws IOException {",
        "    MixMatch mm = new MixMatch();",
        "    mm.privilegedMethod();",
        "  }",
        "}",
        "",
        "// In another JAR file:",
        "package untrusted;",
        "",
        "class RetValue {",
        "  public int getValue() {",
        "    return 1;",
        "  }",
        "}",
        "</pre>"
      ]
    }
  },
  "ENV04-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Likely", "Remediation Cost: Low", "Priority: P27", "Level: L1", "Control Flow" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not disable bytecode verification",
    "desc": {
      "html": [
        "<p><b>Do not disable bytecode verification</b></p>",
        "<p><b>Rationale</b></p>",
        "<p>When Java source code is compiled, it is converted into bytecode, saved in",
        "one or more class files, and executed by the Java Virtual Machine (JVM). Java",
        "class files may be compiled on one machine and executed on another machine. A",
        "properly generated class file is said to be conforming. When the JVM loads a",
        "class file, it has no way of knowing whether the class file is conforming. The",
        "class file could have been created by some other process, or an attacker may",
        "have tampered with a conforming class file.",
        "</p>",
        "<p>The Java bytecode verifier is an internal component of the JVM that is",
        "responsible for detecting nonconforming Java bytecode. It ensures that the",
        "class file is in the proper Java class format, that illegal type casts are",
        "avoided, that operand stack underflows are impossible, and that each method",
        "eventually removes from the operand stack everything pushed by that method.",
        "</p>",
        "<p>Users often assume that Java class files obtained from a trustworthy source",
        "will be conforming and, consequently, safe for execution. This belief can",
        "erroneously lead them to see bytecode verification as a superfluous activity",
        "for such classes. Consequently, they might disable bytecode verification,",
        "undermining Java's safety and security guarantees. The bytecode verifier must",
        "not be suppressed.",
        "</p>",
        "<p><b>Exceptions</b></p>",
        "<p>ENV04-J-EX0: On Java 2 systems, the primordial class loader is permitted to",
        "omit bytecode verification of classes loaded from the boot class path. These",
        "system classes are protected through platform and file system protections",
        "rather than by the bytecode verification process.</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Bytecode verification ensures that the bytecode contains many of the",
        "security checks mandated by the Java Language Specification. Omitting the",
        "verification step could permit execution of insecure Java code.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/ENV04-J.+Do+not+disable+bytecode+verification</i>",
        "</p>"
      ]
    }
  },
  "ENV05-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Low", "Priority: P18", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not deploy an application that can be remotely monitored",
    "desc": {
      "html": [
        "<p><b>Do not deploy an application that can be remotely monitored</b></p>",
        "<p><b>Rationale</b></p>",
        "<p>",
        "Java provides several APIs that allow external programs to monitor a running",
        "Java program. These APIs also permit the Java program to be monitored remotely",
        "by programs on distinct hosts. Such features are convenient for debugging the",
        "program or fine-tuning its performance. However, if a Java program is deployed",
        "in production with remote monitoring enabled, an attacker can connect to the",
        "Java Virtual Machine (JVM) and inspect its behavior and data, including",
        "potentially sensitive information. An attacker can also exert control over the",
        "program's behavior. Consequently, remote monitoring must be disabled when",
        "running a Java program in production.",
        "</p>",
        "<p><b>Exceptions</b></p>",
        "<p>ENV05-J-EX0: A Java program may be remotely monitored using any of these",
        "technologies if it can be guaranteed that no program outside the local trust",
        "boundary can access the program. For example, if the program lives on a local",
        "network that is both completely trusted and disconnected from any untrusted",
        "networks, including the Internet, remote monitoring is permitted.</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Deploying a Java application with the JVMTI, JPDA, or remote monitoring",
        "enabled can allow an attacker to monitor or modify its behavior.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/ENV05-J.+Do+not+deploy+an+application+that+can+be+remotely+monitored</i>",
        "</p>"
      ]
    }
  },
  "EXP01-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Likely", "Remediation Cost: High", "Priority: P3", "Level: L3", "Control Flow" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not use a null in a case where an object is required",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not use a null in a case where an object is required",
        "</p>"
      ]
    }
  },
  "FIO06-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Unnecessary Constructs" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not create multiple buffered wrappers on a single byte or character stream",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not create multiple buffered wrappers on a single byte or character stream",
        "</p>"
      ]
    }
  },
  "FIO07-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Control Flow" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not let external processes block on IO buffers",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not let external processes block on IO buffers",
        "</p>"
      ]
    }
  },
  "FIO08-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Control Flow" ],
    "name": "Published Standards/SEI Cert Standards/Java/Distinguish between characters or bytes read from a stream and -1",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Distinguish between characters or bytes read from a stream and -1",
        "</p>"
      ]
    }
  },
  "FIO12-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Low", "Priority: P3", "Level: L3", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/Java/Provide methods to read and write little-endian data",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Provide methods to read and write little-endian data",
        "</p>"
      ]
    }
  },
  "FIO15-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Control Flow" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not reset a servlet's output stream after committing it",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not reset a servlet's output stream after committing it",
        "</p>"
      ]
    }
  },
  "FIO16-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Canonicalize path names before validating them",
    "desc": {
      "html": [
        "<p><b>Canonicalize path names before validating them</b></p>",
        "<p>According to the Java API [API 2006] for class java.io.File:</p>",
        "<p><i>A pathname, whether abstract or in string form, may be either absolute or",
        "relative. An absolute pathname is complete in that no other information is",
        "required to locate the file that it denotes. A relative pathname, in contrast,",
        "must be interpreted in terms of information taken from some other pathname.</i>",
        "</p>",
        "<p>Absolute or relative path names may contain file links such as symbolic",
        "(soft) links, hard links, shortcuts, shadows, aliases, and junctions. These file",
        "links must be fully resolved before any file validation operations are",
        "performed. For example, the final target of a symbolic link called trace might",
        "be the path name /home/system/trace. Path names may also contain special file",
        "names that make validation difficult:</p>",
        "<ol type=\"1\"><li>\".\" refers to the directory itself.</li>",
        "<li>Inside a directory, the special file name \"..\" refers to the directory's parent directory.</li></ol>",
        "<p>In addition to these specific issues, a wide variety of operating",
        "system–specific and file system–specific naming conventions make validation",
        "difficult.</p>",
        "<p>Canonicalizing file names makes it easier to validate a path name. More than",
        "one path name can refer to a single directory or file. Further, the textual",
        "representation of a path name may yield little or no information regarding the",
        "directory or file to which it refers. Consequently, all path names must be fully",
        "resolved or canonicalized before validation.</p>",
        "<p>Validation may be necessary, for example, when attempting to restrict user",
        "access to files within a particular directory or to otherwise make security",
        "decisions based on the name of a file name or path name. Frequently, these",
        "restrictions can be circumvented by an attacker by exploiting a directory",
        "traversal or path equivalence vulnerability. A directory traversal vulnerability",
        "allows an I/O operation to escape a specified operating directory. A path",
        "equivalence vulnerability occurs when an attacker provides a different but",
        "equivalent name for a resource to bypass security checks.</p>",
        "<p>Canonicalization contains an inherent race window between the time the",
        "program obtains the canonical path name and the time it opens the file. While",
        "the canonical path name is being validated, the file system may have been",
        "modified and the canonical path name may no longer reference the original valid",
        "file. Fortunately, this race condition can be easily mitigated. The canonical",
        "path name can be used to determine whether the referenced file name is in a",
        "secure directory (see FIO00-J. Do not operate on files in shared directories for",
        "more information). If the referenced file is in a secure directory, then, by",
        "definition, an attacker cannot tamper with it and cannot exploit the race",
        "condition.</p>",
        "<p>This recommendation is a specific instance of IDS01-J. Normalize strings",
        "before validating them.</p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<p>This noncompliant code example allows the user to specify the path of an",
        "image file to open. By prepending /img/ to the directory, this code enforces a",
        "policy that only files in this directory should be opened. The program also uses",
        "the isInSecureDir() method defined in FIO00-J. Do not operate on files in shared",
        "directories.</p>",
        "<p>However, the user can still specify a file outside the intended directory by",
        "entering an argument that contains ../ sequences.  An attacker can also create",
        "a link in the /img directory that refers to a directory or file outside of that",
        "directory. The path name of the link might appear to reside in the /img",
        "directory and consequently pass validation, but the operation will actually be",
        "performed on the final target of the link, which can reside outside the intended",
        "directory.</p>",
        "<pre>",
        "ile file = new File(\"/img/\" + args[0]);",
        "if (!isInSecureDir(file)) {",
        "  throw new IllegalArgumentException();",
        "}",
        "FileOutputStream fis = new FileOutputStream(file);",
        "// ...",
        "</pre>",
        "<p><b>Noncompliant Code Example (getCanonicalPath())</b></p>",
        "<p>This noncompliant code example attempts to mitigate the issue by using the",
        "File.getCanonicalPath() method, introduced in Java 2, which fully resolves the",
        "argument and constructs a canonicalized path. Special file names such as dot",
        "dot (..) are also removed so that the input is reduced to a canonicalized form",
        "before validation is carried out. An attacker cannot use ../ sequences to break",
        "out of the specified directory when the validate() method is present. For",
        "example, the path /img/../etc/passwd resolves to /etc/passwd. The",
        "getCanonicalPath() method throws a security exception when used in applets",
        "because it reveals too much information about the host machine. The",
        "getCanonicalFile() method behaves like getCanonicalPath() but returns a new File",
        "object instead of a String.</p>",
        "<p>Unfortunately, the canonicalization is performed after the validation, which",
        "renders the validation ineffective.</p>",
        "<pre>",
        "File file = new File(\"/img/\" + args[0]);",
        "if (!isInSecureDir(file)) {",
        "  throw new IllegalArgumentException();",
        "}",
        "String canonicalPath = file.getCanonicalPath();",
        "FileOutputStream fis = new FileOutputStream(canonicalPath);",
        "// ...",
        "</pre>",
        "<p><b>Compliant Solution (getCanonicalPath())</p></b>",
        "<p>This compliant solution obtains the file name from the untrusted user input,",
        "canonicalizes it, and then validates it against a list of benign path names. It",
        "operates on the specified file only when validation succeeds, that is, only if",
        "the file is one of the two valid files file1.txt or file2.txt in /img/java.</p>",
        "<pre>",
        "File file = new File(\"/img/\" + args[0]);",
        "if (!isInSecureDir(file)) {",
        "  throw new IllegalArgumentException();",
        "}",
        "String canonicalPath = file.getCanonicalPath();",
        "if (!canonicalPath.equals(\"/img/java/file1.txt\") &&",
        "    !canonicalPath.equals(\"/img/java/file2.txt\")) {",
        "   // Invalid file; handle error",
        "}",
        "",
        "FileInputStream fis = new FileInputStream(f);",
        "</pre>",
        "<p><b>Compliant Solution (Security Manager)</b></p>",
        "<p>A comprehensive way to handle this issue is to grant the application the",
        "permissions to operate only on files present within the intended directory—the",
        "/img directory in this example. This compliant solution specifies the absolute",
        "path of the program in its security policy file and grants",
        "java.io.FilePermission with target /img/java and the read action.</p>",
        "<p>This solution requires that the /img directory is a secure directory, as",
        "described in FIO00-J. Do not operate on files in shared directories.</p>",
        "<pre>",
        "// All files in /img/java can be read",
        "grant codeBase \"file:/home/programpath/\" {",
        "  permission java.io.FilePermission \"/img/java\", \"read\";",
        "};",
        "</pre>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Using path names from untrusted sources without first canonicalizing them and",
        "then validating them can result in directory traversal and path equivalence",
        "vulnerabilities.</p>",
        "",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/FIO16-J.+Canonicalize+path+names+before+validating+them</i>",
        "</p>"
      ]
    }
  },
  "IDS03-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not log unsanitized user input",
    "desc": {
      "html": [
        "<p><b>Do not log unsanitized user input</b></p>",
        "<p>A log injection vulnerability arises when a log entry contains unsanitized",
        "user input. A malicious user can insert fake log data and consequently deceive",
        "system administrators as to the system's behavior [OWASP 2008]. For example, an",
        "attacker might split a legitimate log entry into two log entries by entering a",
        "carriage return and line feed (CRLF) sequence to mislead an auditor. Log",
        "injection attacks can be prevented by sanitizing and validating any untrusted",
        "input sent to a log.</p>",
        "<p>Logging unsanitized user input can also result in leaking sensitive data",
        "across a trust boundary. For example, an attacker might inject a script into a",
        "log file such that when the file is viewed using a web browser, the browser",
        "could provide the attacker with a copy of the administrator's cookie so that the",
        "attacker might gain access as the administrator.</p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<p>This noncompliant code example logs untrusted data from an unauthenticated",
        "user without data sanitization.</p>",
        "<pre>",
        "if (loginSuccessful) {",
        "  logger.severe(\"User login succeeded for: \" + username);",
        "} else {",
        "  logger.severe(\"User login failed for: \" + username);",
        "}",
        "</pre>",
        "<p>Without sanitization, a log injection attack is possible. A standard log",
        "message when username is guest might look like this:</p>",
        "<pre>",
        "May 15, 2011 2:19:10 PM java.util.logging.LogManager$RootLogger log",
        "SEVERE: User login failed for: guest",
        "</pre>",
        "<p>If the username that is used in a log message is not guest but rather a",
        "multiline string like this:</p>",
        "<pre>",
        "guest",
        "May 15, 2011 2:25:52 PM java.util.logging.LogManager$RootLogger log",
        "SEVERE: User login succeeded for: administrator",
        "</pre>",
        "<p>the log would contain the following misleading data:</p>",
        "<pre>",
        "May 15, 2011 2:19:10 PM java.util.logging.LogManager$RootLogger log",
        "SEVERE: User login failed for: guest",
        "May 15, 2011 2:25:52 PM java.util.logging.LogManager log",
        "SEVERE: User login succeeded for: administrator",
        "</pre>",
        "<p><b>Compliant Solution (Sanitized User)</b></p>",
        "<p>This compliant solution sanitizes the username before logging it, preventing",
        "injection attacks.</p>",
        "<pre>",
        "if (loginSuccessful) {",
        "  logger.severe(\"User login succeeded for: \" + sanitizeUser(username));",
        "} else {",
        "  logger.severe(\"User login failed for: \" + sanitizeUser(username));",
        "}",
        "</pre>",
        "<p>The sanitization is done by a dedicated method for sanitizing user names:</p>",
        "<pre>",
        "public String sanitizeUser(String username) {",
        "  return Pattern.matches(\"[A-Za-z0-9_]+\", username))",
        "      ? username : \"unauthorized user\";",
        "}",
        "</pre>",
        "<p><b>Compliant Solution (Sanitized Logger)</b></p>",
        "<p>This compliant solution uses a text logger that automatically sanitizes its",
        "input. A sanitized logger saves the developer from having to worry about",
        "unsanitized log messages.</p>",
        "<pre>",
        "Logger sanLogger = new SanitizedTextLogger(logger);",
        "",
        "if (loginSuccessful) {",
        "  sanLogger.severe(\"User login succeeded for: \" + username);",
        "} else {",
        "  sanLogger.severe(\"User login failed for: \" + username);",
        "}",
        "</pre>",
        "<p>The sanitized text logger takes as delegate an actual logger. We assume the",
        "logger outputs text log messages to a file, network, or the console, and each",
        "log message has no indented lines. The sanitized text logger sanitizes all text",
        "to be logged by indenting every line except the first by two spaces. While a",
        "malicious user can indent text by more, a malicious user cannot create a fake",
        "log entry because all of her output will be indented, except for the real log",
        "output.</p>",
        "<pre>",
        "class SanitizedTextLogger extends Logger {",
        "  Logger delegate;",
        "",
        "  public SanitizedTextLogger(Logger delegate) {",
        "    super(delegate.getName(), delegate.getResourceBundleName());",
        "    this.delegate = delegate;",
        "  }",
        "",
        "  public String sanitize(String msg) {",
        "    Pattern newline = Pattern.compile(\"",
        "\");",
        "    Matcher matcher = newline.matcher(msg);",
        "    return matcher.replaceAll(\"",
        "  \");",
        "  }",
        "",
        "  public void severe(String msg) {",
        "    delegate.severe(sanitize(msg));",
        "  }",
        "",
        "  // .. Other Logger methods which must also sanitize their log messages",
        "}",
        "</pre>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Allowing unvalidated user input to be logged can result in forging of log",
        "entries, leaking secure information, or storing sensitive data in a manner that",
        "violates a local law or regulation.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/IDS03-J.+Do+not+log+unsanitized+user+input</i>",
        "</p>"
      ]
    }
  },
  "IDS07-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Sanitize untrusted data passed to the Runtime.exec() method",
    "desc": {
      "html": [
        "<p><b>Sanitize untrusted data passed to the Runtime.exec() method</b></p>",
        "<p>External programs are commonly invoked to perform a function required by the overall system. This practice is a form of reuse and might even be considered a crude form of component-based software engineering. Command and argument injection vulnerabilities occur when an application fails to sanitize untrusted input and uses it in the execution of external programs.</p>",
        "<p>Every Java application has a single instance of class Runtime that allows the application to interface with the environment in which the application is running. The current runtime can be obtained from the Runtime.getRuntime() method. The semantics of Runtime.exec() are poorly defined, so it is best not to rely on its behavior any more than necessary, but typically it invokes the command directly without a shell. If you want a shell, you can use /bin/sh -c on POSIX or cmd.exe on Windows. The variants of exec() that take the command line as a single string split it using a StringTokenizer. On Windows, these tokens are concatenated back into a single argument string before being executed.</p>",
        "<p>Consequently, command injection attacks cannot succeed unless a command interpreter is explicitly invoked. However, argument injection attacks can occur when arguments have spaces, double quotes, and so forth, or when they start with a - or / to indicate a switch.</p>",
        "<p>Any string data that originates from outside the program's trust boundary must be sanitized before being executed as a command on the current platform.</p>",
        "<p><b>Noncompliant Code Example (Windows)</b></p>",
        "<p>This noncompliant code example provides a directory listing using the dir command. It is implemented using Runtime.exec() to invoke the Windows dir command.</p>",
        "<pre>",
        "class DirList {",
        "  public static void main(String[] args) throws Exception {",
        "    String dir = System.getProperty(\"dir\");",
        "    Runtime rt = Runtime.getRuntime();",
        "    Process proc = rt.exec(\"cmd.exe /C dir \" + dir);",
        "    int result = proc.waitFor();",
        "    if (result != 0) {",
        "      System.out.println(\"process error: \" + result);",
        "    }",
        "    InputStream in = (result == 0) ? proc.getInputStream() :",
        "                                     proc.getErrorStream();",
        "    int c;",
        "    while ((c = in.read()) != -1) {",
        "      System.out.print((char) c);",
        "    }",
        "  }",
        "}",
        "</pre>",
        "<p>Because Runtime.exec() receives unsanitized data originating from the environment, this code is susceptible to a command injection attack.</p>",
        "<p>An attacker can exploit this program using the following command:</p>",
        "<pre>",
        "java -Ddir='dummy & echo bad' Java",
        "</pre>",
        "<p>The command executed is actually two commands:</p>",
        "<pre>",
        "cmd.exe /C dir dummy & echo bad",
        "</pre>",
        "<p>which first attempts to list a nonexistent dummy folder and then prints bad to the console.</p>",
        "<p><b>Noncompliant Code Example (POSIX)</b></p>",
        "<p>This noncompliant code example provides the same functionality but uses the POSIX ls command. The only difference from the Windows version is the argument passed to Runtime.exec().</p>",
        "<pre>",
        "class DirList {",
        "  public static void main(String[] args) throws Exception {",
        "    String dir = System.getProperty(\"dir\");",
        "    Runtime rt = Runtime.getRuntime();",
        "    Process proc = rt.exec(new String[] {\"sh\", \"-c\", \"ls \" + dir});",
        "    int result = proc.waitFor();",
        "    if (result != 0) {",
        "      System.out.println(\"process error: \" + result);",
        "    }",
        "    InputStream in = (result == 0) ? proc.getInputStream() :",
        "                                     proc.getErrorStream();",
        "    int c;",
        "    while ((c = in.read()) != -1) {",
        "      System.out.print((char) c);",
        "    }",
        "  }",
        "}",
        "</pre>",
        "<p>The attacker can supply the same command shown in the previous noncompliant code example with similar effects. The command executed is actually</p>",
        "<pre>",
        "sh -c 'ls dummy & echo bad'",
        "</pre>",
        "<p><b>Compliant Solution (Sanitization)</b></p>",
        "<p>This compliant solution sanitizes the untrusted user input by permitting only a small group of whitelisted characters in the argument that will be passed to Runtime.exec(); all other characters are excluded.</p>",
        "<pre>",
        "// ...",
        "if (!Pattern.matches(\"[0-9A-Za-z@.]+\", dir)) {",
        "  // Handle error",
        "}",
        "// ...",
        "</pre>",
        "<p>Although it is a compliant solution, this sanitization approach rejects valid directories. Also, because the command interpreter invoked is system dependent, it is difficult to establish that this solution prevents command injections on every platform on which a Java program might run.</p>",
        "<p><b>Compliant Solution (Restricted User Choice)</b></p>",
        "<p>This compliant solution prevents command injection by passing only trusted strings to Runtime.exec(). The user has control over which string is used but cannot provide string data directly to Runtime.exec().</p>",
        "<pre>",
        "// ...",
        "String dir = null;",
        "",
        "int number = Integer.parseInt(System.getProperty(\"dir\")); // Only allow integer choices",
        "switch (number) {",
        "  case 1:",
        "    dir = \"data1\";",
        "    break; // Option 1",
        "  case 2:",
        "    dir = \"data2\";",
        "    break; // Option 2",
        "  default: // Invalid",
        "    break;",
        "}",
        "if (dir == null) {",
        "  // Handle error",
        "}",
        "</pre>",
        "<p>This compliant solution hard codes the directories that may be listed.</p>",
        "<p>This solution can quickly become unmanageable if you have many available directories. A more scalable solution is to read all the permitted directories from a properties file into a java.util.Properties object.</p>",
        "<p><b>Compliant Solution (Avoid Runtime.exec())</b></p>",
        "<p>When the task performed by executing a system command can be accomplished by some other means, it is almost always advisable to do so. This compliant solution uses the File.list() method to provide a directory listing, eliminating the possibility of command or argument injection attacks.</p>",
        "<pre>",
        "import java.io.File;",
        "",
        "class DirList {",
        "  public static void main(String[] args) throws Exception {",
        "    File dir = new File(System.getProperty(\"dir\"));",
        "    if (!dir.isDirectory()) {",
        "      System.out.println(\"Not a directory\");",
        "    } else {",
        "      for (String file : dir.list()) {",
        "        System.out.println(file);",
        "      }",
        "    }",
        "  }",
        "}",
        "</pre>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Passing untrusted, unsanitized data to the Runtime.exec() method can result in command and argument injection attacks.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/IDS07-J.+Sanitize+untrusted+data+passed+to+the+Runtime.exec%28%29+method</i>",
        "</p>"
      ]
    }
  },
  "IDS14-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: High", "Priority: P6", "Level: L2", "Variables" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not trust the contents of hidden form fields",
    "desc": {
      "html": [
        "<p><b>Do not trust the contents of hidden form fields</b></p>",
        "<p>HTML allows fields in a web form to be visible or hidden. Hidden fields supply values to a web server but do not provide the user with a mechanism to modify their contents. However, there are techniques that attackers can use to modify these contents anyway. A web servlet that uses a GET form to obtain parameters can also accept these parameters through a URL. URLs allow a user to specify any parameter names and values in the web request. Consequently, hidden form fields should not be considered any more trustworthy than visible form fields.</p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<p>The following noncompliant code example demonstrates a servlet that accepts a visible field and a hidden field, and echoes them back to the user. The visible parameter is sanitized before being passed to the browser, but the hidden field is not.</p>",
        "<pre>",
        "public class SampleServlet extends HttpServlet {",
        "",
        "  public void doGet(HttpServletRequest request, HttpServletResponse response)",
        "    throws IOException, ServletException {",
        "    response.setContentType(\"text/html\");",
        "    PrintWriter out = response.getWriter();",
        "    out.println(\"&lt;html&gt;\");",
        "",
        "    String visible = request.getParameter(\"visible\");",
        "    String hidden = request.getParameter(\"hidden\");",
        "",
        "    if (visible != null || hidden != null) {",
        "      out.println(\"Visible Parameter:\");",
        "      out.println( sanitize(visible));",
        "      out.println(\"&lt;br&gt;Hidden Parameter:\");",
        "      out.println(hidden);",
        "    } else {",
        "      out.println(\"&lt;p&gt;\");",
        "      out.print(\"&lt;form action=\"\");",
        "      out.print(\"SampleServlet\" \");",
        "      out.println(\"method=POST&gt;\");",
        "      out.println(\"Parameter:\");",
        "      out.println(\"&lt;input type=text size=20 name=visible&gt;\");",
        "      out.println(\"&lt;br&gt;\");",
        "",
        "      out.println(\"&lt;input type=hidden name=hidden value='a benign value'&gt;\");",
        "      out.println(\"&lt;input type=submit&gt;\");",
        "      out.println(\"&lt;/form&gt;\");",
        "    }",
        "  }",
        "",
        "  public void doPost(HttpServletRequest request, HttpServletResponse response)",
        "    throws IOException, ServletException {",
        "    doGet(request, response);",
        "  }",
        "",
        "  // Filter the specified message string for characters",
        "  // that are sensitive in HTML.",
        "  public static String sanitize(String message) {",
        "    // ...",
        "  }",
        "}",
        "</pre>",
        "<p>When fed the parameter param1, the web page displays the following:</p>",
        "<pre>",
        "Visible Parameter: param1",
        "Hidden Parameter: a benign value",
        "</pre>",
        "<p>However, an attacker can easily supply a value to the hidden parameter by encoding it in the URL as follows:</p>",
        "<pre>",
        "http://localhost:8080/sample/SampleServlet?visible=dummy&hidden=%3Cfont%20color=red%3ESurprise%3C/font%3E!!!",
        "</pre>",
        "<p>When this URL is provided to the browser, the browser displays:</p>",
        "<pre>",
        "Visible Parameter: dummy",
        "Hidden Parameter: Surprise!!!",
        "</pre>",
        "<p><b>Compliant Solution</b></p>",
        "<p>This compliant solution applies the same sanitization to the hidden parameter as is applied to the visible parameter:</p>",
        "<pre>",
        "public class SampleServlet extends HttpServlet {",
        "  public void doGet(HttpServletRequest request, HttpServletResponse response)",
        "    throws IOException, ServletException {",
        "    response.setContentType(\"text/html\");",
        "    PrintWriter out = response.getWriter();",
        "    out.println(\"&lt;html&gt;\");",
        "",
        "    String visible = request.getParameter(\"visible\");",
        "    String hidden = request.getParameter(\"hidden\");",
        "",
        "    if (visible != null || hidden != null) {",
        "      out.println(\"Visible Parameter:\");",
        "      out.println( sanitize(visible));",
        "      out.println(\"&lt;br&gt;Hidden Parameter:\");",
        "      out.println( sanitize(hidden));          // Hidden variable sanitized",
        "    } else {",
        "      out.println(\"&lt;p&gt;\");",
        "      out.print(\"&lt;form action=\"\");",
        "      out.print(\"SampleServlet\" \");",
        "      out.println(\"method=POST&gt;\");",
        "      out.println(\"Parameter:\");",
        "      out.println(\"&lt;input type=text size=20 name=visible&gt;\");",
        "      out.println(\"&lt;br&gt;\");",
        "",
        "      out.println(\"&lt;input type=hidden name=hidden value='a benign value'&gt;\");",
        "      out.println(\"&lt;input type=submit&gt;\");",
        "      out.println(\"&lt;/form&gt;\");",
        "    }",
        "  }",
        "",
        "  public void doPost(HttpServletRequest request, HttpServletResponse response)",
        "    throws IOException, ServletException {",
        "    doGet(request, response);",
        "  }",
        "",
        "  // Filter the specified message string for characters",
        "  // that are sensitive in HTML.",
        "  public static String sanitize(String message) {",
        "    // ...",
        "  }",
        "}",
        "</pre>",
        "<p>Consequently, when the malicious URL is entered into a browser, the servlet produces the following:</p>",
        "<pre>",
        "Visible Parameter: dummy",
        "Hidden Parameter: &lt;font color=red&gt;Surprise&lt;/font&gt;!!!",
        "</pre>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Trusting the contents of hidden form fields may lead to all sorts of nasty problems.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/IDS14-J.+Do+not+trust+the+contents+of+hidden+form+fields</i>",
        "</p>"
      ]
    }
  },
  "IDS17-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Exception Handling" ],
    "name": "Published Standards/SEI Cert Standards/Java/Prevent XML External Entity Attacks",
    "desc": {
      "html": [
        "<p><b>Prevent XML External Entity Attacks</b></p>",
        "<p>Entity declarations define shortcuts to commonly used text or special",
        "characters. An entity declaration may define either an internal or external",
        "entity. For internal entities, the content of the entity is given in the",
        "declaration. For external entities, the content is specified by a Uniform",
        "Resource Identifier (URI).</p>",
        "<p>Entities may be either parsed or unparsed. The contents of a parsed entity",
        "are called its replacement text. An unparsed entity is a resource whose contents",
        "may or may not be text, and if text, may be other than XML. Parsed entities are",
        "invoked by name using an entity reference; unparsed entities are invoked by",
        "name.</p>",
        "<p>According to XML W3C Recommendation, section 4.4.3, \"Included If Validating\" [W3C 2008]:</p>",
        "<pre>When an XML processor recognizes a reference to a parsed entity, to",
        "validate the document, the processor MUST include its replacement text. If the",
        "entity is external, and the processor is not attempting to validate the XML",
        "document, the processor MAY, but need not, include the entity's replacement",
        "text.</pre>",
        "<p>Because inclusion of replacement text from an external entity is optional,",
        "not all XML processors are vulnerable to external entity attacks during",
        "validation.</p>",
        "<p>An XML external entity (XXE) attack occurs when XML input containing a",
        "reference to an external entity is processed by an improperly configured XML",
        "parser. An attacker might use an XXE attack to gain access to sensitive",
        "information by manipulating the URI of the entity to refer to files on the local",
        "file system containing sensitive data such as passwords and private user data.",
        "An attacker might launch a denial-of-service attack, for example, by specifying",
        "/dev/random or /dev/tty as input URIs, which can crash or indefinitely block a",
        "program.</p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<p>This noncompliant code example attempts to parse the file evil.xml, report",
        "any errors, and exit. However, a SAX (Simple API for XML) or a DOM (Document",
        "Object Model) parser will attempt to access the URI specified by the SYSTEM",
        "attribute, which means it will attempt to read the contents of the local",
        "/dev/tty file. On POSIX systems, reading this file causes the program to block",
        "until input data is supplied to the machine's console. Consequently, an attacker",
        "can use this malicious XML file to cause the program to hang.</p>",
        "<pre>",
        "import java.io.FileInputStream;",
        "import java.io.IOException;",
        "import java.io.InputStream;",
        "",
        "import javax.xml.parsers.ParserConfigurationException;",
        "import javax.xml.parsers.SAXParser;",
        "import javax.xml.parsers.SAXParserFactory;",
        "",
        "import org.xml.sax.SAXException;",
        "import org.xml.sax.helpers.DefaultHandler;",
        "",
        "class XXE {",
        "  private static void receiveXMLStream(InputStream inStream,",
        "                                       DefaultHandler defaultHandler)",
        "      throws ParserConfigurationException, SAXException, IOException {",
        "    SAXParserFactory factory = SAXParserFactory.newInstance();",
        "    SAXParser saxParser = factory.newSAXParser();",
        "    saxParser.parse(inStream, defaultHandler);",
        "  }",
        "",
        "  public static void main(String[] args) throws ParserConfigurationException,",
        "      SAXException, IOException {",
        "    try {",
        "      receiveXMLStream(new FileInputStream(\"evil.xml\"), new DefaultHandler());",
        "    } catch (java.net.MalformedURLException mue) {",
        "      System.err.println(\"Malformed URL Exception: \" + mue);",
        "    }",
        "  }",
        "}</pre>",
        "<p>This program is subject to a remote XXE attack if the evil.xml file contains",
        "the following:</p>",
        "<pre>",
        "&lt;?xml version=\"1.0\"?&gt;",
        "&lt;!DOCTYPE foo SYSTEM \"file:/dev/tty\"&gt;",
        "&lt;foo&gt;bar&lt;/foo&gt;",
        "</pre>",
        "<p><b>Compliant Solution (EntityResolver)</b></p>",
        "<p>This compliant solution defines a CustomResolver class that implements the",
        "interface org.xml.sax.EntityResolver. This interface enables a SAX application",
        "to customize handling of external entities. The customized handler uses a simple",
        "whitelist for external entities. The resolveEntity() method returns an empty",
        "InputSource when an input fails to resolve to any of the specified, safe entity",
        "source paths.</p>",
        "<pre>",
        "import java.io.IOException;",
        "import org.xml.sax.EntityResolver;",
        "import org.xml.sax.InputSource;",
        "import org.xml.sax.SAXException;",
        "",
        "class CustomResolver implements EntityResolver {",
        "  public InputSource resolveEntity(String publicId, String systemId)",
        "      throws SAXException, IOException {",
        "",
        "    // Check for known good entities",
        "    String entityPath = \"file:/Users/onlinestore/good.xml\";",
        "    if (systemId.equals(entityPath)) {",
        "      System.out.println(\"Resolving entity: \" + publicId + \" \" + systemId);",
        "      return new InputSource(entityPath);",
        "    } else {",
        "      // Disallow unknown entities by returning a blank path",
        "      return new InputSource();",
        "    }",
        "  }",
        "}",
        "</pre>",
        "<p>The setEntityResolver() method registers the instance with the corresponding",
        "SAX driver. When parsing malicious input, the empty InputSource returned by the",
        "custom resolver causes a java.net.MalformedURLException to be thrown. Note that",
        "you must create an XMLReader object on which to set the custom entity resolver.",
        "</p>",
        "<pre>",
        "import java.io.FileInputStream;",
        "import java.io.IOException;",
        "import java.io.InputStream;",
        "",
        "import javax.xml.parsers.ParserConfigurationException;",
        "import javax.xml.parsers.SAXParser;",
        "import javax.xml.parsers.SAXParserFactory;",
        "",
        "import org.xml.sax.InputSource;",
        "import org.xml.sax.SAXException;",
        "import org.xml.sax.XMLReader;",
        "import org.xml.sax.helpers.DefaultHandler;",
        "",
        "class XXE {",
        "  private static void receiveXMLStream(InputStream inStream,",
        "      DefaultHandler defaultHandler) throws ParserConfigurationException,",
        "      SAXException, IOException {",
        "    SAXParserFactory factory = SAXParserFactory.newInstance();",
        "    SAXParser saxParser = factory.newSAXParser();",
        "",
        "    // Create an XML reader to set the entity resolver.",
        "    XMLReader reader = saxParser.getXMLReader();",
        "    reader.setEntityResolver(new CustomResolver());",
        "    reader.setContentHandler(defaultHandler);",
        "",
        "    InputSource is = new InputSource(inStream);",
        "    reader.parse(is);",
        "  }",
        "",
        "  public static void main(String[] args) throws ParserConfigurationException,",
        "      SAXException, IOException {",
        "    try {",
        "      receiveXMLStream(new FileInputStream(\"evil.xml\"), new DefaultHandler());",
        "    } catch (java.net.MalformedURLException mue) {",
        "      System.err.println(\"Malformed URL Exception: \" + mue);",
        "    }",
        "  }",
        "}",
        "</pre>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Failure to sanitize user input before processing or storing it can result in",
        "injection attacks.</p>",
        "<p><b>Related Vulnerabilities</b></p>",
        "<p>CVE-2008-2370 describes a vulnerability in Apache Tomcat 4.1.0 through",
        "4.1.37, 5.5.0 through 5.5.26, and 6.0.0 through 6.0.16. When a RequestDispatcher",
        "is used, Tomcat performs path normalization before removing the query string",
        "from the URI, which allows remote attackers to conduct directory traversal",
        "attacks and read arbitrary files via a .. (dot dot) in a request parameter.</p>",
        "<p><b>Android Implementation Details</b></p>",
        "<p>This rule uses Microsoft SQL Server as an example to show a database",
        "connection. However, on Android, DatabaseHelper from SQLite is used for a",
        "database connection. Because Android apps may receive untrusted data via network",
        "connections, the rule is applicable.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/IDS17-J.+Prevent+XML+External+Entity+Attacks</i>",
        "</p>"
      ]
    }
  },
  "LCK03-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not synchronize on the intrinsic locks of high-level concurrency objects",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not synchronize on the intrinsic locks of high-level concurrency objects",
        "</p>"
      ]
    }
  },
  "MET13-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Likely", "Remediation Cost: High", "Priority: P6", "Level: L2", "Declarations and Definitions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not assume that reassigning method arguments modifies the calling environment",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not assume that reassigning method arguments modifies the calling environment",
        "</p>"
      ]
    }
  },
  "MSC03-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Variables" ],
    "name": "Published Standards/SEI Cert Standards/Java/Never hard code sensitive information",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Never hard code sensitive information",
        "</p>"
      ]
    }
  },
  "MSC04-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: High", "Priority: P1", "Level: L3", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not leak memory",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not leak memory",
        "</p>"
      ]
    }
  },
  "MSC05-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not exhaust heap space",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not exhaust heap space",
        "</p>"
      ]
    }
  },
  "MSC06-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not modify the underlying collection when an iteration is in progress",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not modify the underlying collection when an iteration is in progress",
        "</p>"
      ]
    }
  },
  "MSC07-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Variables" ],
    "name": "Published Standards/SEI Cert Standards/Java/Prevent multiple instantiations of singleton objects",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Prevent multiple instantiations of singleton objects",
        "</p>"
      ]
    }
  },
  "NUM01-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not perform bitwise and arithmetic operations on the same data",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not perform bitwise and arithmetic operations on the same data",
        "</p>"
      ]
    }
  },
  "NUM03-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Types" ],
    "name": "Published Standards/SEI Cert Standards/Java/Use integer types that can fully represent the possible range of unsigned data",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Use integer types that can fully represent the possible range of unsigned data",
        "</p>"
      ]
    }
  },
  "NUM04-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: High", "Priority: P2", "Level: L3", "Types" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not use floating-point numbers if precise computation is required",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not use floating-point numbers if precise computation is required",
        "</p>"
      ]
    }
  },
  "NUM08-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Check floating-point inputs for exceptional values",
    "desc": {
      "html": [
        "<p><b>Check floating-point inputs for exceptional values</b></p>",
        "<p>Floating-point numbers can take on three exceptional values: infinity,",
        "-infinity, and NaN (not-a-number). These values are produced as a result of",
        "exceptional or otherwise unresolvable floating-point operations, such as",
        "division by zero. These exceptional values can also be obtained directly from",
        "user input through methods such as Double.valueOf(String s). Failure to detect",
        "and handle such exceptional values can result in inconsistent behavior.</p>",
        "<p>The method Double.valueOf(String s) can return NaN or an infinite double, as",
        "specified by its contract. Programs must ensure that all floating-point inputs",
        "(especially those obtained from the user) are free of unexpected exceptional",
        "values. The methods Double.isNaN(double d) and Double.isInfinite(double d) can",
        "be used for this purpose.</p>",
        "<p>NaN values are particularly problematic because they are unordered. That is,",
        "the expression NaN == NaN always returns false (see NUM07-J. Do not attempt",
        "comparisons with NaN for more information).</p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<p>This noncompliant code example accepts user data without validating it:</p>",
        "<pre>",
        "double currentBalance; // User's cash balance",
        "",
        "void doDeposit(String userInput) {",
        "  double val = 0;",
        "  try {",
        "    val = Double.valueOf(userInput);",
        "  } catch (NumberFormatException e) {",
        "    // Handle input format error",
        "  }",
        "",
        "  if (val &gt;= Double.MAX_VALUE - currentBalance) {",
        "    // Handle range error",
        "  }",
        "",
        "  currentBalance += val;",
        "}</pre>",
        "<p>This code produces unexpected results when an exceptional value is entered",
        "for val and subsequently used in calculations or as control values. The user",
        "could, for example, input the strings infinity or NaN on the command line, which",
        "would be parsed by Double.valueOf(String s) into the floating-point",
        "representations of either infinity or NaN. All subsequent calculations using",
        "these values would be invalid, possibly causing runtime exceptions or enabling",
        "denial-of-service (DoS) attacks.</p>",
        "<p>In this noncompliant example, entering NaN for val would cause currentBalance",
        "to be set to NaN, corrupting its value. If this value were used in other",
        "expressions, every resulting value would also become NaN, possibly corrupting",
        "important data.</p>",
        "<p><b>Compliant Solution</b></p>",
        "<p>This compliant solution validates the floating-point input before using it.",
        "The value is tested to ensure that it is neither infinity, -infinity, nor NaN.",
        "</p>",
        "<pre>",
        "double currentBalance; // User's cash balance",
        "",
        "void doDeposit(String userInput){",
        "  double val = 0;",
        "  try {",
        "    val = Double.valueOf(userInput);",
        "  } catch (NumberFormatException e) {",
        "    // Handle input format error",
        "  }",
        "",
        "  if (Double.isInfinite(val)){",
        "    // Handle infinity error",
        "  }",
        "",
        "  if (Double.isNaN(val)) {",
        "    // Handle NaN error",
        "  }",
        "",
        "  if (val &gt;= Double.MAX_VALUE - currentBalance) {",
        "    // Handle range error",
        "  }",
        "  currentBalance += val;",
        "}</pre>",
        "<p><b>Exceptions</b></p>",
        "<p><b>NUM08-J-EX0:</b> Occasionally, NaN, infinity, or -infinity may be",
        "acceptable as expected inputs to a program. In such cases, explicit checks might",
        "not be necessary. However, such programs must be prepared to handle these",
        "exceptional values gracefully and should prevent propagation of the exceptional",
        "values to other code that fails to handle exceptional values. The choice to",
        "permit input of exceptional values during ordinary operation should be",
        "explicitly documented.</p>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Incorrect or missing validation of floating-point input can result in",
        "miscalculations and unexpected results, possibly leading to inconsistent program",
        "behavior and denial of service.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/NUM08-J.+Check+floating-point+inputs+for+exceptional+values</i>",
        "</p>"
      ]
    }
  },
  "NUM14-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Use shift operators correctly",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Use shift operators correctly",
        "</p>"
      ]
    }
  },
  "OBJ02-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Probable", "Remediation Cost: High", "Priority: P4", "Level: L3", "Control Flow" ],
    "name": "Published Standards/SEI Cert Standards/Java/Preserve dependencies in subclasses when changing superclasses",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Preserve dependencies in subclasses when changing superclasses",
        "</p>"
      ]
    }
  },
  "OBJ03-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P4", "Level: L3", "Structures and Unions"],
    "name": "Published Standards/SEI Cert Standards/Java/Prevent heap pollution",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Prevent heap pollution",
        "</p>"
      ]
    }
  },
  "OBJ06-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Probable", "Remediation Cost: High", "Priority: P4", "Level: L3", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Defensively copy mutable inputs and mutable internal components ",
    "desc": {
      "html": [
        "<p>",
        "Defensively copy mutable inputs and mutable internal components",
        "</p>",
        "",
        "<p><b>Risk Assessment</b></p>",
        "<p>",
        "Failing to create a copy of a mutable input may result in a TOCTOU vulnerability",
        "or expose internal mutable components to untrusted code.",
        "</p>",
        "",
        "<p>",
        "For the full standard:",
        "<i>",
        "https://wiki.sei.cmu.edu/confluence/display/java/OBJ06-J.+Defensively+copy+mutable+inputs+and+mutable+internal+components",
        "</i>",
        "</p>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "public final class MutableDemo {",
        "  // java.net.HttpCookie is mutable",
        "  public void useMutableInput(HttpCookie cookie) {",
        "    if (cookie == null) {",
        "       throw new NullPointerException();",
        "    }",
        "",
        "    // Check whether cookie has expired",
        "    if (cookie.hasExpired()) {",
        "      // Cookie is no longer valid; handle condition by throwing an exception",
        "    }",
        "",
        "    // Cookie may have expired since time of check",
        "    doLogic(cookie);",
        "  }",
        "}",
        "</pre>",
        "",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "// java.util.Collection is an interface",
        "public void copyInterfaceInput(Collection&lt;String&gt; collection) {",
        "  doLogic(collection.clone());",
        "}",
        "</pre>"
      ]
    }
  },
  "SEC00-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Likely", "Remediation Cost: High", "Priority: P6", "Level: L2", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not allow privileged blocks to leak sensitive information across a trust boundary",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not allow privileged blocks to leak sensitive information across a trust boundary",
        "</p>"
      ]
    }
  },
  "SEC02-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not base security checks on untrusted sources",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not base security checks on untrusted sources",
        "</p>"
      ]
    }
  },
  "SEC03-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not load trusted classes after allowing untrusted code to load arbitrary classes",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not load trusted classes after allowing untrusted code to load arbitrary classes",
        "</p>"
      ]
    }
  },
  "SEC04-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Protect sensitive operations with security manager checks",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Protect sensitive operations with security manager checks",
        "</p>"
      ]
    }
  },
  "SEC05-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not use reflection to increase accessibility of classes, methods, or fields",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not use reflection to increase accessibility of classes, methods, or fields",
        "</p>"
      ]
    }
  },
  "SEC06-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P12", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar",
        "</p>"
      ]
    }
  },
  "SER00-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: High", "Priority: P2", "Level: L3", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Enable serialization compatibility during class evolution",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Enable serialization compatibility during class evolution",
        "</p>"
      ]
    }
  },
  "SER02-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Probable", "Remediation Cost: High", "Priority: P4", "Level: L3", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Sign then seal objects before sending them outside a trust boundary",
    "desc": {
      "html": [
        "<p><b>Sign then seal objects before sending them outside a trust boundary</b></p>",
        "<p>",
        "Sensitive data must be protected from eavesdropping. All data that crosses a trust boundary must be protected from malicious tampering. An obfuscated transfer object [Steel 2005] that is strongly encrypted can protect data. This approach is known as sealing the object. To guarantee object integrity, apply a digital signature to the sealed object.<br>",
        "",
        "Sealing and signing objects is the preferred mechanism to secure data when<br><br>",
        "",
        "- Transporting sensitive data or serializing any data.<br>",
        "- A secure communication channel such as Secure Sockets Layer (SSL) is absent or is too costly for limited transactions.<br>",
        "- Sensitive data must persist over an extended period of time (for example, on a hard drive).<br><br>",
        "",
        "Avoid using home-brewed cryptographic algorithms; such algorithms will almost certainly introduce unnecessary vulnerabilities. Applications that apply home-brewed \"cryptography\" in the readObject() and writeObject() methods are prime examples of anti-patterns. However, using existing cryptography libraries inside readObject() and writeObject() is perfrectly warranted.<br>",
        "",
        "This rule applies to the intentional serialization of sensitive information. SER03-J. Do not serialize unencrypted sensitive data is meant to prevent the unintentional serialization of sensitive information.",
        "</p>",
        "<p><b>Noncompliant Code Example</b></p>",
        "<pre>",
        "class SerializableMap&lt;K,V&gt; implements Serializable {",
        "  final static long serialVersionUID = -2648720192864531932L;",
        "  private Map&lt;K,V&gt; map;",
        "",
        "  public SerializableMap() {",
        "    map = new HashMap&lt;K,V&gt;();",
        "  }",
        "",
        "  public Object getData(K key)  {",
        "    return map.get(key);",
        "  }",
        "",
        "  public void setData(K key, V data)  {",
        "    map.put(key, data);",
        "  }",
        "}",
        "",
        "public class MapSerializer {",
        "  public static serializablemap&lt;string, Integer&gt; buildMap() {",
        "    serializablemap&lt;string, Integer&gt; map =",
        "        new serializablemap&lt;string, Integer&gt;();",
        "    map.setData(\"John Doe\", new Integer(123456789));",
        "    map.setData(\"Richard Roe\", new Integer(246813579));",
        "    return map;",
        "  }",
        "",
        "  public static void inspectmap(serializablemap&lt;string, Integer&gt; map) {",
        "    System.out.println(\"John Doe's number is \" + map.getData(\"John Doe\"));",
        "    System.out.println(\"Richard Roe's number is \" +",
        "                       map.getData(\"Richard Roe\"));",
        "  }",
        "",
        "  public static void main(String[] args) {",
        "    // ...",
        "  }",
        "}",
        "",
        "public static void main(String[] args)",
        "                        throws IOException, ClassNotFoundException {",
        "  // Build map",
        "  serializablemap&lt;string, Integer&gt; map = buildMap();",
        "",
        "  // Serialize map",
        "  ObjectOutputStream out =",
        "      new ObjectOutputStream(new FileOutputStream(\"data\"));",
        "  out.writeObject(map);",
        "  out.close();",
        "",
        "  // Deserialize map",
        "  ObjectInputStream in =",
        "      new ObjectInputStream(new FileInputStream(\"data\"));",
        "  map = (serializablemap&lt;string, Integer&gt;) in.readObject();",
        "  in.close();",
        "",
        "  // Inspect map",
        "  InspectMap(map);",
        "}",
        "",
        "// Noncompliant Code Example (Seal)",
        "public static void main(String[] args)",
        "                        throws IOException, GeneralSecurityException,",
        "                               ClassNotFoundException {",
        "  // Build map",
        "  serializablemap&lt;string, Integer&gt; map = buildMap();",
        "",
        "  // Generate sealing key & seal map",
        "  KeyGenerator generator;",
        "  generator = KeyGenerator.getInstance(\"AES\");",
        "  generator.init(new SecureRandom());",
        "  Key key = generator.generateKey();",
        "  Cipher cipher = Cipher.getInstance(\"AES\");",
        "  cipher.init(Cipher.ENCRYPT_MODE, key);",
        "  SealedObject sealedMap = new SealedObject(map, cipher);",
        "",
        "  // Serialize map",
        "  ObjectOutputStream out =",
        "      new ObjectOutputStream(new FileOutputStream(\"data\"));",
        "  out.writeObject(sealedMap);",
        "  out.close();",
        "",
        "  // Deserialize map",
        "  ObjectInputStream in =",
        "      new ObjectInputStream(new FileInputStream(\"data\"));",
        "  sealedMap = (SealedObject) in.readObject();",
        "  in.close();",
        "",
        "  // Unseal map",
        "  cipher = Cipher.getInstance(\"AES\");",
        "  cipher.init(Cipher.DECRYPT_MODE, key);",
        "  map = (serializablemap&lt;string, Integer&gt;) sealedMap.getObject(cipher);",
        "",
        "  // Inspect map",
        "  InspectMap(map);",
        "}",
        "",
        "// Noncompliant Code Example (Seal then Sign)",
        "public static void main(String[] args)",
        "                        throws IOException, GeneralSecurityException,",
        "                               ClassNotFoundException {",
        "  // Build map",
        "  serializablemap&lt;string, Integer&gt; map = buildMap();",
        "",
        "  // Generate sealing key & seal map",
        "  KeyGenerator generator;",
        "  generator = KeyGenerator.getInstance(\"AES\");",
        "  generator.init(new SecureRandom());",
        "  Key key = generator.generateKey();",
        "  Cipher cipher = Cipher.getInstance(\"AES\");",
        "  cipher.init(Cipher.ENCRYPT_MODE, key);",
        "  SealedObject sealedMap = new SealedObject(map, cipher);",
        "",
        "  // Generate signing public/private key pair & sign map",
        "  KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\");",
        "  KeyPair kp = kpg.generateKeyPair();",
        "  Signature sig = Signature.getInstance(\"SHA1withDSA\");",
        "  SignedObject signedMap =",
        "      new SignedObject(sealedMap, kp.getPrivate(), sig);",
        "",
        "  // Serialize map",
        "  ObjectOutputStream out =",
        "      new ObjectOutputStream(new FileOutputStream(\"data\"));",
        "  out.writeObject(signedMap);",
        "  out.close();",
        "",
        "  // Deserialize map",
        "  ObjectInputStream in =",
        "      new ObjectInputStream(new FileInputStream(\"data\"));",
        "  signedMap = (SignedObject) in.readObject();",
        "  in.close();",
        "",
        "  // Verify signature and retrieve map",
        "  if (!signedMap.verify(kp.getPublic(), sig)) {",
        "    throw new GeneralSecurityException(\"Map failed verification\");",
        "  }",
        "  sealedMap = (SealedObject) signedMap.getObject();",
        "",
        "  // Unseal map",
        "  cipher = Cipher.getInstance(\"AES\");",
        "  cipher.init(Cipher.DECRYPT_MODE, key);",
        "  map = (serializablemap&lt;string, Integer&gt;) sealedMap.getObject(cipher);",
        "",
        "  // Inspect map",
        "  InspectMap(map);",
        "}",
        "</pre>",
        "<p><b>Risk Assessment</b></p>",
        "<p>Failure to sign and then seal objects during transit can lead to loss of object integrity or confidentiality.</p>",
        "<p><b>Exceptions</b></p>",
        "<p><i>SER02-J-EX0:</i> A reasonable use for signing a sealed object is to certify the authenticity of a sealed object passed from elsewhere. This use represents a commitment about the sealed object itself rather than about its content [Abadi 1996].</p>",
        "<p><i>SER02-J-EX1:</i> Signing and sealing is required only for objects that must cross a trust boundary. Objects that never leave the trust boundary need not be signed or sealed. For example, when an entire network is contained within a trust boundary, objects that never leave that network need not be signed or sealed. Another example is objects that are only sent down a signed binary stream.</p>",
        "<p>For the full standard:",
        "<i>https://wiki.sei.cmu.edu/confluence/display/java/SER02-J.+Sign+then+seal+objects+before+sending+them+outside+a+trust+boundary</i>",
        "</p>"
      ]
    }
  },
  "SER03-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Likely", "Remediation Cost: High", "Priority: P6", "Level: L2", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Do not serialize unencrypted sensitive data",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Do not serialize unencrypted sensitive data",
        "</p>"
      ]
    }
  },
  "SER08-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 75", "Likelihood: Likely", "Remediation Cost: Medium", "Priority: P18", "Level: L1", "Libraries" ],
    "name": "Published Standards/SEI Cert Standards/Java/Minimize privileges before deserializing from a privileged context",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Minimize privileges before deserializing from a privileged context",
        "</p>"
      ]
    }
  },
  "SER10-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Low", "Priority: P3", "Level: L3", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/Java/Avoid memory and resource leaks during serialization",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Avoid memory and resource leaks during serialization",
        "</p>"
      ]
    }
  },
  "SER11-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Probable", "Remediation Cost: Low", "Priority: P6", "Level: L2", "Memory Allocation" ],
    "name": "Published Standards/SEI Cert Standards/Java/Prevent overwriting of externalizable objects",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Prevent overwriting of externalizable objects",
        "</p>"
      ]
    }
  },
  "STR00-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Types" ],
    "name": "Published Standards/SEI Cert Standards/Java/Don't form strings containing partial characters from variable-width encodings",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Don't form strings containing partial characters from variable-width encodings",
        "</p>"
      ]
    }
  },
  "STR02-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 50", "Likelihood: Probable", "Remediation Cost: Medium", "Priority: P8", "Level: L2", "Expressions" ],
    "name": "Published Standards/SEI Cert Standards/Java/Specify an appropriate locale when comparing locale-dependent data",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Specify an appropriate locale when comparing locale-dependent data",
        "</p>"
      ]
    }
  },
  "STR04-J": {
    "checked": false,
    "language": "Java",
    "tags": [ "Language: Java", "Standard: SEI CERT Java", "Severity: 25", "Likelihood: Unlikely", "Remediation Cost: Medium", "Priority: P2", "Level: L3", "Types" ],
    "name": "Published Standards/SEI Cert Standards/Java/Use compatible character encodings when communicating string data between JVMs",
    "desc": {
      "html": [
        "<b>",
        "This check cannot be automated",
        "</b>",
        "",
        "<p>",
        "Use compatible character encodings when communicating string data between JVMs",
        "</p>"
      ]
    }
  }
}
