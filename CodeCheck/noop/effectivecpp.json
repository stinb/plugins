{
  "EFFECTIVECPP_1": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/1. View C++ as a federation of languages",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "View C++ as a federation of languages",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_5": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/5. Know what functions C++ silently writes and calls",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Know what functions C++ silently writes and calls",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_6": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/6. Explicitly disallow the use of compiler-generated functions you do not want",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Explicitly disallow the use of compiler-generated functions you do not want",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_12": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/12. Copy all parts of an object",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Copy all parts of an object",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_13": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/13. Use objects to manage resources",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Use objects to manage resources",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_14": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/14. Think carefully about copying behavior in resource-managing classes",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Think carefully about copying behavior in resource-managing classes",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_15": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/15. Provide access to raw resources in resource-managing classes",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Provide access to raw resources in resource-managing classes",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_18": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/18. Make interfaces easy to use correctly and hard to use incorrectly",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Make interfaces easy to use correctly and hard to use incorrectly",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_19": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/19. Treat class design as type design",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Treat class design as type design",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_21": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/21. Dont try to return a reference when you must return an object",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Dont try to return a reference when you must return an object",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_23": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/23. Prefer non-member non-friend functions to member functions",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Prefer non-member non-friend functions to member functions",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_28": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/28. Avoid returning “handles” to object internals",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Avoid returning “handles” to object internals",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_29": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/29. Strive for exception-safe code",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Strive for exception-safe code",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_30": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/30. Understand the ins and outs of inlining",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Understand the ins and outs of inlining",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_31": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/31. Minimize compilation dependencies between files",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Minimize compilation dependencies between files",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_24": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/24. Declare non-member functions when type conversions should apply to all parameters",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Declare non-member functions when type conversions should apply to all parameters",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_25": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/25. Consider support for a non-throwing swap",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Consider support for a non-throwing swap",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_32": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/32. Make sure public inheritance models \"is-a\"",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Make sure public inheritance models \"is-a\"",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_34": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/34. Differentiate between inheritance of interface and inheritance of implementation",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Differentiate between inheritance of interface and inheritance of implementation",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_37": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/37. Never redefine a (virtual) functions inherited default parameter value",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Never redefine a (virtual) functions inherited default parameter value",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_38": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/38. Model “has-a” or “is-implemented-in-terms-of” through composition",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Model “has-a” or “is-implemented-in-terms-of” through composition",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_39": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/39. Use private inheritance judiciously",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Use private inheritance judiciously",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_40": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/40. Use multiple inheritance judiciously",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Use multiple inheritance judiciously",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_41": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/41. Understand implicit interfaces and compile-time polymorphism",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Understand implicit interfaces and compile-time polymorphism",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_42": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/42. Understand the two meanings of typename",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Understand the two meanings of typename",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_43": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/43. Know how to access names in templatized base classes",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Know how to access names in templatized base classes",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_44": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/44. Factor parameter-independent code out of templates",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Factor parameter-independent code out of templates",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_45": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/45. Use member function templates to accept \"all compatible types\"",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Use member function templates to accept \"all compatible types\"",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_46": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/46. Define non-member functions inside templates when type conversions are desired",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Define non-member functions inside templates when type conversions are desired",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_47": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/47. Use traits classes for information about types",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Use traits classes for information about types",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_48": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/48. Be aware of template metaprogramming",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Be aware of template metaprogramming",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_49": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/49. Understand the behavior of the new-handler",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Understand the behavior of the new-handler",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_50": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/50. Understand when it makes sense to replace new and delete",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Understand when it makes sense to replace new and delete",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_51": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/51. Adhere to convention when writing new and delete",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Adhere to convention when writing new and delete",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_52": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/52. Write placement delete if you write placement new",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Write placement delete if you write placement new",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_53": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/53. Pay attention to compiler warnings",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Pay attention to compiler warnings",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_54": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/54. Familiarize yourself with the standard library, including TR1",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Familiarize yourself with the standard library, including TR1",
        "</p>"
      ]
    }
  },
  "EFFECTIVECPP_55": {
    "checked": false,
    "language": "C++",
    "tags": [
      "Language: C++",
      "Standard: Effective C++"
    ],
    "name": "Published Standards/Effective C++ (3rd Edition) Scott Meyers/55. Familiarize yourself with Boost",
    "desc": {
      "html": [
        "<b>",
        "<span style=\"color:red\">This check cannot be automated</span>",
        "</b>",
        "",
        "<p>",
        "Familiarize yourself with Boost",
        "</p>"
      ]
    }
  }
}
