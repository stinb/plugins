{
  "CPP_SA_DIV_ZERO": {
    "tags": [ "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter" ],
    "key": "core.DivideZero",
    "name": "All Checks/Division by Zero",
    "desc": {
      "text": "Check for division by zero (C, C++, ObjC)",
      "html": [
        "<p><b>Division by Zero (C, C++, ObjC)</b><br><br>",
        "Deep check for possible divide by zero errors.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p>Examples:",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>void</span> <span class='nf'>test</span><span class='p'>(</span><span class='kt'>int</span> <span class='n'>z</span><span class='p'>)</span> <span class='p'>{</span>",
        "  <span class='k'>if</span> <span class='p'>(</span><span class='n'>z</span> <span class='o'>==</span> <span class='mi'>0</span><span class='p'>)</span>",
        "    <span class='kt'>int</span> <span class='n'>x</span> <span class='o'>=</span> <span class='mi'>1</span> <span class='o'>/</span> <span class='n'>z</span><span class='p'>;</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span>",
        "  <span class='kt'>int</span> <span class='n'>y</span> <span class='o'>=</span> <span class='n'>x</span> <span class='o'>%</span> <span class='mi'>0</span><span class='p'>;</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre></p>"
      ]
    }
  },

  "CPP_SA_NULL_PTR": {
    "tags": [ "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter" ],
    "key": "core.NullDereference",
    "name": "All Checks/Null Pointer Dereference",
    "desc": {
      "text": "Check for dereferences of null pointers (C, C++, ObjC)",
      "html": [
        "<p><b>Null Pointer Dereference (C, C++, ObjC)</b><br><br>",
        "Does a deep check for dereferences of null pointers.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p>Examples:",
        "<pre><div class='highlight'><pre><span></span><span class='c1'>// C</span>",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>(</span><span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span><span class='p'>)</span> <span class='p'>{</span>",
        "  <span class='k'>if</span> <span class='p'>(</span><span class='n'>p</span><span class='p'>)</span>",
        "    <span class='k'>return</span><span class='p'>;</span>",
        "",
        "  <span class='kt'>int</span> <span class='n'>x</span> <span class='o'>=</span> <span class='n'>p</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>];</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='c1'>// C</span>",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>(</span><span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span><span class='p'>)</span> <span class='p'>{</span>",
        "  <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='n'>p</span><span class='p'>)</span>",
        "    <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='c1'>// C++</span>",
        "<span class='k'>class</span> <span class='n'>C</span> <span class='p'>{</span>",
        "<span class='nl'>public</span><span class='p'>:</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span><span class='p'>;</span>",
        "<span class='p'>};</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='n'>C</span> <span class='o'>*</span><span class='n'>pc</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>",
        "  <span class='kt'>int</span> <span class='n'>k</span> <span class='o'>=</span> <span class='n'>pc</span><span class='o'>-&gt;</span><span class='n'>x</span><span class='p'>;</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='c1'>// Objective-C</span>",
        "<span class='k'>@interface</span> <span class='bp'>MyClass</span> <span class='p'>{</span>",
        "<span class='k'>@public</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span><span class='p'>;</span>",
        "<span class='p'>}</span>",
        "<span class='k'>@end</span>",
        "",
        "<span class='kt'>void</span> <span class='n'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='bp'>MyClass</span> <span class='o'>*</span><span class='n'>obj</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>",
        "  <span class='n'>obj</span><span class='o'>-&gt;</span><span class='n'>x</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre></p>"
      ]
    }
  },

  "CPP_SA_UNDEFINED_CALL": {
    "tags": [ "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter" ],
    "key": "core.CallAndMessage",
    "name": "All Checks/Undefined Call",
    "desc": {
      "text": "Check for logical errors in function calls (C, C++, ObjC)",
      "html": [
        "<p><b>Undefined Call (C, C++, ObjC)</b><br><br>",
        "Check for logical errors in function calls and Objective-C message expressions (e.g., uninitialized arguments, null function pointers).</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p>Examples:",
        "<pre><div class='highlight'><pre><span></span><span class='c1'>//C</span>",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "   <span class='kt'>void</span> <span class='p'>(</span><span class='o'>*</span><span class='n'>foo</span><span class='p'>)(</span><span class='kt'>void</span><span class='p'>);</span>",
        "   <span class='n'>foo</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>",
        "   <span class='n'>foo</span><span class='p'>();</span> <span class='c1'>// warn: function pointer is null</span>",
        " <span class='p'>}</span>",
        "",
        " <span class='c1'>// C++</span>",
        " <span class='k'>class</span> <span class='n'>C</span> <span class='p'>{</span>",
        " <span class='nl'>public</span><span class='p'>:</span>",
        "   <span class='kt'>void</span> <span class='n'>f</span><span class='p'>();</span>",
        " <span class='p'>};</span>",
        "",
        " <span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "   <span class='n'>C</span> <span class='o'>*</span><span class='n'>pc</span><span class='p'>;</span>",
        "   <span class='n'>pc</span><span class='o'>-&gt;</span><span class='n'>f</span><span class='p'>();</span> <span class='c1'>// warn: object pointer is uninitialized</span>",
        " <span class='p'>}</span>",
        "",
        " <span class='c1'>// C++</span>",
        " <span class='k'>class</span> <span class='n'>C</span> <span class='p'>{</span>",
        " <span class='nl'>public</span><span class='p'>:</span>",
        "   <span class='kt'>void</span> <span class='n'>f</span><span class='p'>();</span>",
        " <span class='p'>};</span>",
        "",
        " <span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "   <span class='n'>C</span> <span class='o'>*</span><span class='n'>pc</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>",
        "   <span class='n'>pc</span><span class='o'>-&gt;</span><span class='n'>f</span><span class='p'>();</span> <span class='c1'>// warn: object pointer is null</span>",
        " <span class='p'>}</span>",
        "",
        " <span class='c1'>// Objective-C</span>",
        " <span class='k'>@interface</span> <span class='bp'>MyClass</span> : <span class='bp'>NSObject</span>",
        " <span class='k'>@property</span> <span class='p'>(</span><span class='k'>readwrite</span><span class='p'>,</span><span class='k'>assign</span><span class='p'>)</span> <span class='kt'>id</span> <span class='n'>x</span><span class='p'>;</span>",
        " <span class='o'>-</span> <span class='p'>(</span><span class='kt'>long</span> <span class='kt'>double</span><span class='p'>)</span><span class='n'>longDoubleM</span><span class='p'>;</span>",
        " <span class='k'>@end</span>",
        "",
        " <span class='kt'>void</span> <span class='n'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "   <span class='bp'>MyClass</span> <span class='o'>*</span><span class='n'>obj1</span><span class='p'>;</span>",
        "   <span class='kt'>long</span> <span class='kt'>double</span> <span class='n'>ld1</span> <span class='o'>=</span> <span class='p'>[</span><span class='n'>obj1</span> <span class='n'>longDoubleM</span><span class='p'>];</span>",
        "     <span class='c1'>// warn: receiver is uninitialized</span>",
        " <span class='p'>}</span>",
        "",
        " <span class='c1'>// Objective-C</span>",
        " <span class='k'>@interface</span> <span class='bp'>MyClass</span> : <span class='bp'>NSObject</span>",
        " <span class='k'>@property</span> <span class='p'>(</span><span class='k'>readwrite</span><span class='p'>,</span><span class='k'>assign</span><span class='p'>)</span> <span class='kt'>id</span> <span class='n'>x</span><span class='p'>;</span>",
        " <span class='o'>-</span> <span class='p'>(</span><span class='kt'>long</span> <span class='kt'>double</span><span class='p'>)</span><span class='n'>longDoubleM</span><span class='p'>;</span>",
        " <span class='k'>@end</span>",
        "",
        " <span class='kt'>void</span> <span class='n'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "   <span class='bp'>MyClass</span> <span class='o'>*</span><span class='n'>obj1</span><span class='p'>;</span>",
        "   <span class='kt'>id</span> <span class='n'>i</span> <span class='o'>=</span> <span class='n'>obj1</span><span class='p'>.</span><span class='n'>x</span><span class='p'>;</span> <span class='c1'>// warn: uninitialized object pointer</span>",
        " <span class='p'>}</span>",
        "",
        " <span class='c1'>// Objective-C</span>",
        " <span class='k'>@interface</span> <span class='nc'>Subscriptable</span> : <span class='bp'>NSObject</span>",
        " <span class='o'>-</span> <span class='p'>(</span><span class='kt'>id</span><span class='p'>)</span><span class='nl'>objectAtIndexedSubscript</span><span class='p'>:(</span><span class='kt'>unsigned</span> <span class='kt'>int</span><span class='p'>)</span><span class='n'>index</span><span class='p'>;</span>",
        " <span class='k'>@end</span>",
        "",
        " <span class='k'>@interface</span> <span class='bp'>MyClass</span> : <span class='nc'>Subscriptable</span>",
        " <span class='k'>@property</span> <span class='p'>(</span><span class='k'>readwrite</span><span class='p'>,</span><span class='k'>assign</span><span class='p'>)</span> <span class='kt'>id</span> <span class='n'>x</span><span class='p'>;</span>",
        " <span class='o'>-</span> <span class='p'>(</span><span class='kt'>long</span> <span class='kt'>double</span><span class='p'>)</span><span class='n'>longDoubleM</span><span class='p'>;</span>",
        " <span class='k'>@end</span>",
        "",
        " <span class='kt'>void</span> <span class='n'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "   <span class='bp'>MyClass</span> <span class='o'>*</span><span class='n'>obj1</span><span class='p'>;</span>",
        "   <span class='kt'>id</span> <span class='n'>i</span> <span class='o'>=</span> <span class='n'>obj1</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>];</span> <span class='c1'>// warn: uninitialized object pointer</span>",
        " <span class='p'>}</span>",
        "</pre></div></pre></p>"
      ]
    }
  },

  "CPP_SA_STACK_ADDRESS_ESCAPE": {
    "tags": [ "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter" ],
    "key": "core.StackAddressEscape",
    "name": "All Checks/Stack Address Escape",
    "desc": {
      "text": "Check that addresses to stack memory do not escape the function (C)",
      "html": [
        "<p><b>Stack Address Escape (C)</b><br><br>",
        "Check that addresses to stack memory do not escape the function.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p>Examples:",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>char</span> <span class='k'>const</span> <span class='o'>*</span><span class='n'>p</span><span class='p'>;</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>char</span> <span class='k'>const</span> <span class='n'>str</span><span class='p'>[]</span> <span class='o'>=</span> <span class='s'>\"string\"</span><span class='p'>;</span>",
        "  <span class='n'>p</span> <span class='o'>=</span> <span class='n'>str</span><span class='p'>;</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span><span class='o'>*</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "   <span class='k'>return</span> <span class='n'>__builtin_alloca</span><span class='p'>(</span><span class='mi'>12</span><span class='p'>);</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='k'>static</span> <span class='kt'>int</span> <span class='o'>*</span><span class='n'>x</span><span class='p'>;</span>",
        "  <span class='kt'>int</span> <span class='n'>y</span><span class='p'>;</span>",
        "  <span class='n'>x</span> <span class='o'>=</span> <span class='o'>&amp;</span><span class='n'>y</span><span class='p'>;</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre></p>"
      ]
    }
  },

  "CPP_SA_UNINITIALIZED": {
    "tags": [ "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter" ],
    "keys": [
      "core.UndefinedBinaryOperatorResult",
      "core.VLASize",
      "core.uninitialized.ArraySubscript",
      "core.uninitialized.Assign",
      "core.uninitialized.Branch",
      "core.uninitialized.UndefReturn",
      "core.uninitialized.NewArraySize"
    ],
    "name": "All Checks/Uninitialized Value",
    "desc": {
      "text": "Check for uses of uninitialized values (C, C++)",
      "html": [
        "<p><b>Uninitialized (C, C++)</b><br><br>",
        "Check for uses of uninitialized values.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p>Examples:",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span><span class='p'>;</span>",
        "  <span class='kt'>int</span> <span class='n'>y</span> <span class='o'>=</span> <span class='n'>x</span> <span class='o'>+</span> <span class='mi'>1</span><span class='p'>;</span> <span class='c1'>// warn: left operand is garbage</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre>",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span><span class='p'>;</span>",
        "  <span class='kt'>int</span> <span class='n'>vla1</span><span class='p'>[</span><span class='n'>x</span><span class='p'>];</span> <span class='c1'>// warn: garbage as size</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>",
        "  <span class='kt'>int</span> <span class='n'>vla2</span><span class='p'>[</span><span class='n'>x</span><span class='p'>];</span> <span class='c1'>// warn: zero size</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre>",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>i</span><span class='p'>,</span> <span class='n'>a</span><span class='p'>[</span><span class='mi'>10</span><span class='p'>];</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span> <span class='o'>=</span> <span class='n'>a</span><span class='p'>[</span><span class='n'>i</span><span class='p'>];</span> <span class='c1'>// warn: array subscript is undefined</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre>",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span><span class='p'>;</span>",
        "  <span class='n'>x</span> <span class='o'>|=</span> <span class='mi'>1</span><span class='p'>;</span> <span class='c1'>// warn: left expression is uninitialized</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre>",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span><span class='p'>;</span>",
        "  <span class='k'>if</span> <span class='p'>(</span><span class='n'>x</span><span class='p'>)</span> <span class='c1'>// warn</span>",
        "    <span class='k'>return</span><span class='p'>;</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre>",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>int</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>x</span><span class='p'>;</span>",
        "  <span class='k'>return</span> <span class='n'>x</span><span class='p'>;</span> <span class='c1'>// warn</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre></p>"
      ]
    }
  },

  "CPP_SA_DANGLING_POINTERS": {
    "tags": [ "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter" ],
    "keys": [
      "cplusplus.NewDelete",
      "unix.Malloc"
    ],
    "name": "All Checks/Dangling Pointer",
    "desc": {
      "text": "Check for double-free and use-after-free problems (C, C++)",
      "html": [
        "<p><b>Dangling Pointers (C, C++)</b><br><br>",
        "Check for double-free and use-after-free problems. Traces memory managed by new/delete and malloc/free.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p>Examples:",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>void</span> <span class='nf'>f</span><span class='p'>(</span><span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span><span class='p'>);</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>testUseMiddleArgAfterDelete</span><span class='p'>(</span><span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span><span class='p'>)</span> <span class='p'>{</span>",
        "  <span class='k'>delete</span> <span class='n'>p</span><span class='p'>;</span>",
        "  <span class='n'>f</span><span class='p'>(</span><span class='n'>p</span><span class='p'>);</span> <span class='c1'>// warn: use after free</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='k'>class</span> <span class='nc'>SomeClass</span> <span class='p'>{</span>",
        "<span class='k'>public</span><span class='o'>:</span>",
        "  <span class='kt'>void</span> <span class='n'>f</span><span class='p'>();</span>",
        "<span class='p'>};</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='n'>SomeClass</span> <span class='o'>*</span><span class='n'>c</span> <span class='o'>=</span> <span class='k'>new</span> <span class='n'>SomeClass</span><span class='p'>;</span>",
        "  <span class='k'>delete</span> <span class='n'>c</span><span class='p'>;</span>",
        "  <span class='n'>c</span><span class='o'>-&gt;</span><span class='n'>f</span><span class='p'>();</span> <span class='c1'>// warn: use after free</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='p'>(</span><span class='kt'>int</span> <span class='o'>*</span><span class='p'>)</span><span class='n'>__builtin_alloca</span><span class='p'>(</span><span class='k'>sizeof</span><span class='p'>(</span><span class='kt'>int</span><span class='p'>));</span>",
        "  <span class='k'>delete</span> <span class='n'>p</span><span class='p'>;</span> <span class='c1'>// warn: deleting memory allocated by alloca</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='k'>new</span> <span class='kt'>int</span><span class='p'>;</span>",
        "  <span class='k'>delete</span> <span class='n'>p</span><span class='p'>;</span>",
        "  <span class='k'>delete</span> <span class='n'>p</span><span class='p'>;</span> <span class='c1'>// warn: attempt to free released</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>i</span><span class='p'>;</span>",
        "  <span class='k'>delete</span> <span class='o'>&amp;</span><span class='n'>i</span><span class='p'>;</span> <span class='c1'>// warn: delete address of local</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='k'>new</span> <span class='kt'>int</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>];</span>",
        "  <span class='k'>delete</span><span class='p'>[]</span> <span class='p'>(</span><span class='o'>++</span><span class='n'>p</span><span class='p'>);</span>",
        "    <span class='c1'>// warn: argument to 'delete[]' is offset by 4 bytes</span>",
        "    <span class='c1'>// from the start of memory allocated by 'new[]'</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre>",
        "<pre><div class='highlight'><pre><span></span>",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='n'>malloc</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>",
        "  <span class='n'>free</span><span class='p'>(</span><span class='n'>p</span><span class='p'>);</span>",
        "  <span class='n'>free</span><span class='p'>(</span><span class='n'>p</span><span class='p'>);</span> <span class='c1'>// warn: attempt to free released memory</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='n'>malloc</span><span class='p'>(</span><span class='k'>sizeof</span><span class='p'>(</span><span class='kt'>int</span><span class='p'>));</span>",
        "  <span class='n'>free</span><span class='p'>(</span><span class='n'>p</span><span class='p'>);</span>",
        "  <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span> <span class='c1'>// warn: use after free</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='n'>malloc</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>",
        "  <span class='k'>if</span> <span class='p'>(</span><span class='n'>p</span><span class='p'>)</span>",
        "    <span class='k'>return</span><span class='p'>;</span> <span class='c1'>// warn: memory is never released</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='n'>a</span><span class='p'>[]</span> <span class='o'>=</span> <span class='p'>{</span> <span class='mi'>1</span> <span class='p'>};</span>",
        "  <span class='n'>free</span><span class='p'>(</span><span class='n'>a</span><span class='p'>);</span> <span class='c1'>// warn: argument is not allocated by malloc</span>",
        "<span class='p'>}</span>",
        "",
        "<span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='n'>malloc</span><span class='p'>(</span><span class='k'>sizeof</span><span class='p'>(</span><span class='kt'>char</span><span class='p'>));</span>",
        "  <span class='n'>p</span> <span class='o'>=</span> <span class='n'>p</span> <span class='o'>-</span> <span class='mi'>1</span><span class='p'>;</span>",
        "  <span class='n'>free</span><span class='p'>(</span><span class='n'>p</span><span class='p'>);</span> <span class='c1'>// warn: argument to free() is offset by -4 bytes</span>",
        "<span class='p'>}</span>",
        "</pre></div></pre></p>"
      ]
    }
  },

  "CPP_SA_LEAKS": {
    "tags": [ "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter" ],
    "key": "cplusplus.NewDeleteLeaks",
    "name": "All Checks/Memory Leak",
    "desc": {
      "text": "Check for memory leaks (C++)",
      "html": [
        "<p><b>Memory Leaks (C++)</b><br><br>",
        "Check for memory leaks. Traces memory managed by new/delete.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p>Examples:",
        "<pre><div class='highlight'><pre><span></span><span class='kt'>void</span> <span class='nf'>test</span><span class='p'>()</span> <span class='p'>{</span>",
        "  <span class='kt'>int</span> <span class='o'>*</span><span class='n'>p</span> <span class='o'>=</span> <span class='k'>new</span> <span class='kt'>int</span><span class='p'>;</span>",
        "<span class='p'>}</span> <span class='c1'>// warn</span>",
        "</pre></div></pre></p>"
      ]
    }
  },

  "CPP_SA_VIRTUAL_CALLS": {
    "tags": [ "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter" ],
    "key": "optin.cplusplus.VirtualCall",
    "name": "All Checks/Virtual Call",
    "desc": {
      "text": "Check virtual function calls during construction or destruction (C++)",
      "html": [
        "<p><b>Virtual Calls (C++)</b><br><br>",
        "Check virtual function calls during construction or destruction.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p>Examples:",
        "<pre><div class='highlight'><pre><span></span><span class='k'>class</span> <span class='nc'>A</span> <span class='p'>{</span>",
        "<span class='k'>public</span><span class='o'>:</span>",
        "  <span class='n'>A</span><span class='p'>()</span> <span class='p'>{</span>",
        "    <span class='n'>f</span><span class='p'>();</span> <span class='c1'>// warn</span>",
        "  <span class='p'>}</span>",
        "  <span class='k'>virtual</span> <span class='kt'>void</span> <span class='n'>f</span><span class='p'>();</span>",
        "<span class='p'>};</span>",
        "",
        "<span class='k'>class</span> <span class='nc'>A</span> <span class='p'>{</span>",
        "<span class='k'>public</span><span class='o'>:</span>",
        "  <span class='o'>~</span><span class='n'>A</span><span class='p'>()</span> <span class='p'>{</span>",
        "    <span class='k'>this</span><span class='o'>-&gt;</span><span class='n'>f</span><span class='p'>();</span> <span class='c1'>// warn</span>",
        "  <span class='p'>}</span>",
        "  <span class='k'>virtual</span> <span class='kt'>void</span> <span class='n'>f</span><span class='p'>();</span>",
        "<span class='p'>};</span>",
        "</pre></div></pre></p>"
      ]
    }
  }
}
