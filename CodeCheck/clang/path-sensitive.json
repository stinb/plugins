{
  "CPP_SA_DIV_ZERO": {
    "tags": [ "Language: C", "Language: C++", "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter", "Standard: Bug Hunter", "Standard:"],
    "key": "core.DivideZero",
    "name": "All Checks/Division by Zero",
    "desc": {
      "text": "Check for division by zero (C, C++, ObjC)",
      "html": [
        "<p><b>Division by Zero (C, C++, ObjC)</b></p><p>",
        "Deep check for possible divide by zero errors.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p><b>Examples:</b></p>",
        "<pre><code language=\"C++\">void test(int z) {",
        "  if (z == 0)",
        "    int x = 1 / z; // warn",
        "}",
        "",
        "void test() {",
        "  int x = 1;",
        "  int y = x % 0; // warn",
        "}",
        "</code></pre>"
      ]
    }
  },

  "CPP_SA_NULL_PTR": {
    "tags": [ "Language: C", "Language: C++", "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter", "Standard: Bug Hunter", "Standard:"],
    "key": "core.NullDereference",
    "name": "All Checks/Null Pointer Dereference",
    "desc": {
      "text": "Check for dereferences of null pointers (C, C++, ObjC)",
      "html": [
        "<p><b>Null Pointer Dereference (C, C++, ObjC)</b></p><p>",
        "Does a deep check for dereferences of null pointers.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p><b>Examples:</b></p>",
        "<pre><code language=\"C++\">// C",
        "void test(int *p) {",
        "  if (p)",
        "    return;",
        "",
        "  int x = p[0]; // warn",
        "}",
        "",
        "// C",
        "void test(int *p) {",
        "  if (!p)",
        "    *p = 0; // warn",
        "}",
        "",
        "// C++",
        "class C {",
        "public:",
        "  int x;",
        "};",
        "",
        "void test() {",
        "  C *pc = 0;",
        "  int k = pc-&gt;x; // warn",
        "}",
        "</code></pre>",
        "<pre><code language=\"Objective-C\">// Objective-C",
        "@interface MyClass {",
        "@public",
        "  int x;",
        "}",
        "@end",
        "",
        "void test() {",
        "  MyClass *obj = 0;",
        "  obj-&gt;x = 1; // warn",
        "}",
        "</code></pre>"
      ]
    }
  },

  "CPP_SA_UNDEFINED_CALL": {
    "tags": [ "Language: C", "Language: C++", "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter", "Standard: Bug Hunter", "Standard:"],
    "key": "core.CallAndMessage",
    "name": "All Checks/Undefined Call",
    "desc": {
      "text": "Check for logical errors in function calls (C, C++, ObjC)",
      "html": [
        "<p><b>Undefined Call (C, C++, ObjC)</b></p><p>",
        "Check for logical errors in function calls and Objective-C message expressions (e.g., uninitialized arguments, null function pointers).</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p><b>Examples:</b></p>",
        "<pre><code language=\"C++\">// C",
        "void test() {",
        "  void (*foo)(void);",
        "  foo = 0;",
        "  foo(); // warn: function pointer is null",
        "}",
        "",
        "// C++",
        "class C {",
        "public:",
        "  void f();",
        "};",
        "",
        "void test() {",
        "  C *pc;",
        "  pc-&gt;f(); // warn: object pointer is uninitialized",
        "}",
        "",
        "// C++",
        "class C {",
        "public:",
        "  void f();",
        "};",
        "",
        "void test() {",
        "  C *pc = 0;",
        "  pc-&gt;f(); // warn: object pointer is null",
        "}",
        "</code></pre>",
        "<pre><code language=\"Objective-C\">// Objective-C",
        "@interface MyClass : NSObject",
        "@property (readwrite,assign) id x;",
        "- (long double)longDoubleM;",
        "@end",
        "",
        "void test() {",
        "  MyClass *obj1;",
        "  long double ld1 = [obj1 longDoubleM];",
        "    // warn: receiver is uninitialized",
        "}",
        "",
        "@interface MyClass : NSObject",
        "@property (readwrite,assign) id x;",
        "- (long double)longDoubleM;",
        "@end",
        "",
        "void test() {",
        "  MyClass *obj1;",
        "  id i = obj1.x; // warn: uninitialized object pointer",
        "}",
        "",
        "@interface Subscriptable : NSObject",
        "- (id)objectAtIndexedSubscript:(unsigned int)index;",
        "@end",
        "",
        "@interface MyClass : Subscriptable",
        "@property (readwrite,assign) id x;",
        "- (long double)longDoubleM;",
        "@end",
        "",
        "void test() {",
        "  MyClass *obj1;",
        "  id i = obj1[0]; // warn: uninitialized object pointer",
        "}",
        "</code></pre>"
      ]
    }
  },

  "CPP_SA_STACK_ADDRESS_ESCAPE": {
    "tags": [ "Language: C", "Language: C++", "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter", "Standard: Bug Hunter", "Standard:"],
    "key": "core.StackAddressEscape",
    "name": "All Checks/Stack Address Escape",
    "desc": {
      "text": "Check that addresses to stack memory do not escape the function (C)",
      "html": [
        "<p><b>Stack Address Escape (C)</b></p><p>",
        "Check that addresses to stack memory do not escape the function.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p><b>Examples:</b></p>",
        "<pre><code language=\"C++\">char const *p;",
        "",
        "void test() {",
        "  char const str[] = \"string\";",
        "  p = str; // warn",
        "}",
        "",
        "void* test() {",
        "   return __builtin_alloca(12); // warn",
        "}",
        "",
        "void test() {",
        "  static int *x;",
        "  int y;",
        "  x = &amp;y; // warn",
        "}",
        "</code></pre>"
      ]
    }
  },

  "CPP_SA_UNINITIALIZED": {
    "tags": [ "Language: C", "Language: C++", "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter", "Standard: Bug Hunter", "Standard:"],
    "keys": [
      "core.UndefinedBinaryOperatorResult",
      "core.VLASize",
      "core.uninitialized.ArraySubscript",
      "core.uninitialized.Assign",
      "core.uninitialized.Branch",
      "core.uninitialized.UndefReturn",
      "core.uninitialized.NewArraySize"
    ],
    "name": "All Checks/Uninitialized Value",
    "desc": {
      "text": "Check for uses of uninitialized values (C, C++)",
      "html": [
        "<p><b>Uninitialized (C, C++)</b></p><p>",
        "Check for uses of uninitialized values.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p><b>Examples:</b></p>",
        "<pre><code language=\"C++\">void test() {",
        "  int x;",
        "  int y = x + 1; // warn: left operand is garbage",
        "}",
        "</code></pre>",
        "<pre><code language=\"C++\">void test() {",
        "  int x;",
        "  int vla1[x]; // warn: garbage as size",
        "}",
        "",
        "void test() {",
        "  int x = 0;",
        "  int vla2[x]; // warn: zero size",
        "}",
        "</code></pre>",
        "<pre><code language=\"C++\">void test() {",
        "  int i, a[10];",
        "  int x = a[i]; // warn: array subscript is undefined",
        "}",
        "</code></pre>",
        "<pre><code language=\"C++\">void test() {",
        "  int x;",
        "  x |= 1; // warn: left expression is uninitialized",
        "}",
        "</code></pre>",
        "<pre><code language=\"C++\">void test() {",
        "  int x;",
        "  if (x) // warn",
        "    return;",
        "}",
        "</code></pre>",
        "<pre><code language=\"C++\">int test() {",
        "  int x;",
        "  return x; // warn",
        "}",
        "</code></pre>"
      ]
    }
  },

  "CPP_SA_DANGLING_POINTERS": {
    "tags": [ "Language: C", "Language: C++", "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter", "Standard: Bug Hunter", "Standard:"],
    "keys": [
      "cplusplus.NewDelete",
      "unix.Malloc"
    ],
    "name": "All Checks/Dangling Pointer",
    "desc": {
      "text": "Check for double-free and use-after-free problems (C, C++)",
      "html": [
        "<p><b>Dangling Pointers (C, C++)</b></p><p>",
        "Check for double-free and use-after-free problems. Traces memory managed by new/delete and malloc/free.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p><b>Examples:</b></p>",
        "<pre><code language=\"C++\">void f(int *p);",
        "",
        "void testUseMiddleArgAfterDelete(int *p) {",
        "  delete p;",
        "  f(p); // warn: use after free",
        "}",
        "",
        "class SomeClass {",
        "public:",
        "  void f();",
        "};",
        "",
        "void test() {",
        "  SomeClass *c = new SomeClass;",
        "  delete c;",
        "  c-&gt;f(); // warn: use after free",
        "}",
        "",
        "void test() {",
        "  int *p = (int *)__builtin_alloca(sizeof(int));",
        "  delete p; // warn: deleting memory allocated by alloca",
        "}",
        "",
        "void test() {",
        "  int *p = new int;",
        "  delete p;",
        "  delete p; // warn: attempt to free released",
        "}",
        "",
        "void test() {",
        "  int i;",
        "  delete &amp;i; // warn: delete address of local",
        "}",
        "",
        "void test() {",
        "  int *p = new int[1];",
        "  delete[] (++p);",
        "    // warn: argument to 'delete[]' is offset by 4 bytes",
        "    // from the start of memory allocated by 'new[]'",
        "}",
        "</code></pre>",
        "<pre><code language=\"C++\">",
        "void test() {",
        "  int *p = malloc(1);",
        "  free(p);",
        "  free(p); // warn: attempt to free released memory",
        "}",
        "",
        "void test() {",
        "  int *p = malloc(sizeof(int));",
        "  free(p);",
        "  *p = 1; // warn: use after free",
        "}",
        "",
        "void test() {",
        "  int *p = malloc(1);",
        "  if (p)",
        "    return; // warn: memory is never released",
        "}",
        "",
        "void test() {",
        "  int a[] = { 1 };",
        "  free(a); // warn: argument is not allocated by malloc",
        "}",
        "",
        "void test() {",
        "  int *p = malloc(sizeof(char));",
        "  p = p - 1;",
        "  free(p); // warn: argument to free() is offset by -4 bytes",
        "}",
        "</code></pre>"
      ]
    }
  },

  "CPP_SA_LEAKS": {
    "tags": [ "Language: C", "Language: C++", "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter", "Standard: Bug Hunter", "Standard:"],
    "key": "cplusplus.NewDeleteLeaks",
    "name": "All Checks/Memory Leak",
    "desc": {
      "text": "Check for memory leaks (C++)",
      "html": [
        "<p><b>Memory Leaks (C++)</b></p><p>",
        "Check for memory leaks. Traces memory managed by new/delete.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p><b>Examples:</b></p>",
        "<pre><code language=\"C++\">void test() {",
        "  int *p = new int;",
        "} // warn",
        "</code></pre>"
      ]
    }
  },

  "CPP_SA_VIRTUAL_CALLS": {
    "tags": [ "Language: C", "Language: C++", "Expensive", "Path-sensitive", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75", "Bug Hunter", "Standard: Bug Hunter", "Standard:"],
    "key": "optin.cplusplus.VirtualCall",
    "name": "All Checks/Virtual Call",
    "desc": {
      "text": "Check virtual function calls during construction or destruction (C++)",
      "html": [
        "<p><b>Virtual Calls (C++)</b></p><p>",
        "Check virtual function calls during construction or destruction.</p>",
        "<p>For extra accuracy, make sure to enable the AST Cache under Project - Configure Project - C++</p>",
        "<p><b>Examples:</b></p>",
        "<pre><code language=\"C++\">class A {",
        "public:",
        "  A() {",
        "    f(); // warn",
        "  }",
        "  virtual void f();",
        "};",
        "",
        "class A {",
        "public:",
        "  ~A() {",
        "    this-&gt;f(); // warn",
        "  }",
        "  virtual void f();",
        "};",
        "</code></pre>"
      ]
    }
  }
}
