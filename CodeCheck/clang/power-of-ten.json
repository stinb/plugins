{
  "POWER_OF_TEN_07_A": {
    "tags": [ "Language: C", "Language: C++", "Standard: The Power of Ten", "Functions" ],
    "key": "sti.IgnoredReturnValues",
    "name": "Published Standards/The Power of 10/7A Check Parameters and Return Values - Ignored Return Values",
    "desc": {
      "html": [
        "<p>Each calling function must check the return value of non-void functions, and each called function must check the validity of all parameters provided by the caller.</p>",
        "<p><b>Rationale</b></p>",
        "<p>This is possibly the most frequently violated rule, and therefore it is somewhat more suspect for inclusion as a general rule. In its strictest form, this rule means that even the return value of <code>printf</code> statements and file <code>close</code> statements must be checked. Yet, if the response to an error would be no different than the response to success, there is little point in explicitly checking a return value. This is often the case with calls to <code>printf</code> and <code>close</code>. In cases like these, explicitly casting the function return value to <code>(void)</code> can be acceptable, thereby indicating that the programmer explicitly and not accidentally decided to ignore a return value.</p>",
        "<p>In more dubious cases, a comment should be offered to explain why a return value can be considered irrelevant. In most cases, though, a function's return value should not be ignored, especially if the function should propagate an error return value up the function call chain.</p>",
        "<p><b>Example</b></p>",
        "<pre>",
        "static void nothing(void) {",
        "",
        "}",
        "",
        "static int two(void) {",
        "  return 2;",
        "}",
        "",
        "static void ignored_call_expressions(void) {",
        "  int six;",
        "",
        "  two(); // Violation",
        "  (void) two();",
        "  two() + 4;",
        "  six = two() * 3;",
        "}",
        "</pre>",
        "<p><b>Developer's Notes</b></p>",
        "<p>In C++, non-void operators are allowed. This is to allow for many common operators, such as an assignment operator. Also, a <code>new</code> expression that is ignored is counted as a violation.</p>"
      ]
    }
  },

  "POWER_OF_TEN_09_A": {
    "tags": [ "Language: C", "Language: C++", "Standard: The Power of Ten", "Pointers" ],
    "key": "sti.MultipleDereferences",
    "name": "Published Standards/The Power of 10/9A Restrict Pointer Usage - Multiple Dereferences",
    "desc": {
      "html": [
        "<p>The use of pointers must be restricted. Specifically, no more than one level of dereferencing should be used. Pointer dereference operations may not be hidden in macro definitions or inside <code>typedef</code> declarations. Function pointers are not permitted.</p>",
        "<p><b>Rationale</b></p>",
        "<p>Pointers are easily misused, even by experienced programmers. They can make it hard to follow or analyze the flow of data in a program, especially by tool-based analyzers. Similarly, function pointers should be used only if there is a very strong justification for doing so because they can seriously restrict the types of automated checks that code checkers can perform. For example, if function pointers are used, it can become impossible for a tool to prove the absence of recursion, requiring alternate guarantees to make up for this loss in checking power.</p>",
        "<p><b>Example</b></p>",
        "<pre>",
        "typedef struct {",
        "  int x;",
        "  int y;",
        "} point_t;",
        "",
        "// Multiple dereferences at once",
        "char hello[6] = \"Hello\";",
        "char **hello_ptr = (char **) &hello;",
        "void fn(void)",
        "{",
        "  char first_char = **hello_ptr;",
        "}",
        "",
        "// Pointer in type definition",
        "typedef point_t* point_ptr_t;",
        "",
        "// Dereference in macro definition",
        "#define RESET_POINT_PTR(point_ptr) { point_ptr-&gt;x = 0; point_ptr-&gt;y = 0; }",
        "",
        "// Function pointer",
        "void (*function_ptr) (void);",
        "</pre>",
        "<p><b>Developer's Notes</b></p>",
        "<p>\"No more than one level of dereferencing should be used\" can be enforced in 2 ways:</p>",
        "<ul>",
        "<li>Do not declare multi-pointer or multi-pointer/array types (Option in Part B)</li>",
        "<li>Do not perform multiple dereferences in one expression (Part A)</li>",
        "</ul>",
        "<p>In C++, dereferencing <code>this</code> for a member and then dereferencing that member is allowed. Thus, a member function is allowed to dereference a member.</p>"
      ]
    }
  }
}
