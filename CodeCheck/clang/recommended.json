{
  "RECOMMENDED_03": {
    "tags": ["Language: C", "Language: C++","Expressions"],
    "keys": ["float-equal","sti.FloatingEqualityTest"],
    "name": "All Checks/Floating Equality Test",
    "desc": {
      "text": "Floating Equality Test",
      "html": [
        "<p>Floating-point expressions shall not be directly or indirectly tested for",
        "equality or inequality</p>",
        "<p><b>Rationale</b></p><p>",
        "The inherent nature of floating-point types is such that comparisons of equality",
        "will often not evaluate to true, even when they are expected to. Also, the",
        "behavior of such a comparison cannot be predicted before execution, and may",
        "well vary from one implementation to another.</p>",
        "<p>The recommended method for achieving deterministic floating-point comparisons",
        "is to write a library that implements the comparison operations. The library",
        "should take into account the floating-point granularity",
        "(<code>std::numeric_limits<float>::epsilon()</code>) and the magnitude of the",
        "numbers being compared.</p>",
        "<p><b>Example</b></p>",
        "<pre><code language=\"C++\">// The result of the test in the following code is unpredictable:",
        "float32_t x, y;",
        "if ( x == y )     // Non-compliant",
        "if ( x == 0.0f )  // Non-compliant",
        "// An indirect test is equally problematic and is also prohibited by this rule:",
        "if ( ( x &lt;= y ) && ( x &gt;= y ) )   // Non-compliant",
        "if ( ( x &lt; y ) || ( x &gt; y ) )     // Non-compliant",
        "// The following is better, but only if the magnitudes are appropriate:",
        "if ( fabs ( x - y ) &lt;= std::numeric_limits&lt;float&gt;::epsilon( ) ) //Compliant",
        "</code></pre>"
      ]
    }
  },
  "RECOMMENDED_14": {
    "tags": ["Language: C", "Language: C++", "Variables"],
    "keys": ["unused-variable","unused-const-variable"],
    "name": "All Checks/Unused C and C++ Local Variables",
    "desc": {
      "text": "Check for variables that are unused (C, C++, ObjC)",
      "html": [
        "<p><b>Unused Variables (C, C++, ObjC)</b></p><p>",
        "Local variables that are defined but not used can lead to memory management",
        "issues as well as making code more difficult to follow. They can also be",
        "indicative of an error where a programmer meant to use one variable and",
        "accidentally used another. This check ignores references inside inactive code",
        "(ie #if 0...#endif).</p>"
      ]
    }
  }
}
