{
  "RECOMMENDED_CPP_WARN_ADDRESS_OF_TEMPORARY": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "address-of-temporary",
    "name": "Published Standards/SciTools' Recommended Checks/Do Not Take the Address of Temporary Objects",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Waddress-of-temporary</p>",
        "<p><b>Summary</b></p>",
        "<p>Taking the address of a temporary object may result in a bad address.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>taking the address of a temporary object of type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-temporary'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_ARRAY_BOUNDS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "array-bounds",
    "name": "Published Standards/SciTools' Recommended Checks/Array Bounds",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Warray-bounds</p>",
        "<p><b>Summary</b></p>",
        "<p>Array index or array size is outside of the specified range.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 87%'><col style='width: 7%'><col style='width: 6%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array index</span>&nbsp;<em>A</em>&nbsp;<span>is past the end of the array (which contains</span>&nbsp;<em>B</em>&nbsp;<span>element</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 93%'><col style='width: 4%'><col style='width: 3%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array index</span>&nbsp;<em>A</em>&nbsp;<span>refers past the last possible element for an array in</span>&nbsp;<em>B</em><span>-bit address space containing</span>&nbsp;<em>C</em><span>-bit (</span><em>D</em><span>-byte) elements (max possible</span>&nbsp;<em>E</em>&nbsp;<span>element</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array index</span>&nbsp;<em>A</em>&nbsp;<span>is before the beginning of the array</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 93%'><col style='width: 4%'><col style='width: 3%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the pointer incremented by</span>&nbsp;<em>A</em>&nbsp;<span>refers past the last possible element for an array in</span>&nbsp;<em>B</em><span>-bit address space containing</span>&nbsp;<em>C</em><span>-bit (</span><em>D</em><span>-byte) elements (max possible</span>&nbsp;<em>E</em>&nbsp;<span>element</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 35%'><col style='width: 36%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array argument is too small;</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>contains</span>&nbsp;<em>A</em>&nbsp;<span>elements</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>is of size</span>&nbsp;<em>A</em></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>, callee requires at least</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_AVAILABILITY": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "availability",
    "name": "Published Standards/SciTools' Recommended Checks/Availability Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wavailability</p>",
        "<p><b>Summary</b></p>",
        "<p>Creates a warning if a declaration used with the availability attribute is unavailable. The availability attribute can be placed on declarations to describe the lifecycle of that declaration relative to operating system versions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘unavailable’ availability overrides all other availability information</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Fuchsia API Level prohibits specifying a minor or sub-minor version</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 66%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring availability attribute</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>on ‘+load’ method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>with constructor attribute</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>with destructor attribute</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>only ‘unavailable’ and ‘deprecated’ are supported for Swift availability</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown platform</span>&nbsp;<em>A</em>&nbsp;<span>in availability macro</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 19%'><col style='width: 7%'><col style='width: 41%'><col style='width: 7%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>feature cannot be</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introduced</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>deprecated</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>obsoleted</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in</span>&nbsp;<em>B</em>&nbsp;<span>version</span>&nbsp;<em>C</em>&nbsp;<span>before it was</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introduced</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>deprecated</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>obsoleted</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in version</span>&nbsp;<em>E</em><span>; attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use same version number separators ‘_’ or ‘.’; as in ‘major[.minor[.subminor]]’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>availability does not match previous declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 9%'><col style='width: 10%'><col style='width: 8%'><col style='width: 10%'><col style='width: 3%'><col style='width: 15%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>overriding</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>method</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introduced after</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>deprecated before</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>obsoleted before</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>the protocol method it implements</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>overridden method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>on</span>&nbsp;<em>B</em>&nbsp;<span>(</span><em>C</em>&nbsp;<span>vs.</span>&nbsp;<em>D</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 14%'><col style='width: 42%'><col style='width: 20%'><col style='width: 14%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>overriding</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>method cannot be unavailable on</span>&nbsp;<em>A</em>&nbsp;<span>when</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>the protocol method it implements</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>its overridden method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is available</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wavailability'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_BACKSLASH_NEWLINE_ESCAPE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "backslash-newline-escape",
    "name": "Published Standards/SciTools' Recommended Checks/Backslash Newline Escape",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbackslash-newline-escape</p>",
        "<p><b>Summary</b></p>",
        "<p>As a result of adding a space between a backslash, and a newline, the next line is interpreted as code, when it might have been intendted to be a comment.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>backslash and newline separated by space</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbackslash-newline-escape'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_BITFIELD_CONSTANT_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "bitfield-constant-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Bitfield Constant Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbitfield-constant-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>In a struct, truncation occurs when assigning a value too large for the bit-field width constraint.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit truncation from</span>&nbsp;<em>C</em>&nbsp;<span>to bit-field changes value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-constant-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_BITFIELD_WIDTH": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "bitfield-width",
    "name": "Published Standards/SciTools' Recommended Checks/Do Not Exceed Bit-Field Width",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbitfield-width</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks that the width of a bit-field does not exceed the width of its type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 94%'><col style='width: 6%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>width of bit-field</span>&nbsp;<em>A</em>&nbsp;<span>(</span><em>B</em>&nbsp;<span>bits) exceeds the width of its type; value will be truncated to</span>&nbsp;<em>C</em>&nbsp;<span>bit</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-width'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_BOOL_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "bool-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Bool Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbool-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert a boolean to a pointer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialization of pointer of type</span>&nbsp;<em>A</em>&nbsp;<span>to null from a constant boolean expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbool-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_BUILTIN_MACRO_REDEFINED": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "builtin-macro-redefined",
    "name": "Published Standards/SciTools' Recommended Checks/Builtin Macro Redefined",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbuiltin-macro-redefined</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning when redefining with <code>#define</code> or undefining with <code>#undef</code> a builtin macro.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redefining builtin macro</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>undefining builtin macro</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-macro-redefined'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_BUILTIN_MEMCPY_CHK_SIZE": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "builtin-memcpy-chk-size",
    "name": "Published Standards/SciTools' Recommended Checks/Builtin Memcpy Check Size",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbuiltin-memcpy-chk-size</p>",
        "<p><b>Summary</b></p>",
        "<p>When setting a buffer of memory where the destination is too small, the new data will overflow.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always overflow; destination buffer has size</span>&nbsp;<em>B</em><span>, but size argument is</span>&nbsp;<em>C</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-memcpy-chk-size'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_CPP11_COMPAT_DEPRECATED_WRITABLE_STRINGS": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "c++11-compat-deprecated-writable-strings",
    "name": "Published Standards/SciTools' Recommended Checks/C++11 Compatibility Deprecated Writable Strings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-compat-deprecated-writable-strings</p>",
        "<p><b>Summary</b></p>",
        "<p>Conversion from a string literal to types like <code>char *</code> is deprecated.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conversion from string literal to</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-deprecated-writable-strings'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_CALL_TO_PURE_VIRTUAL_FROM_CTOR_DTOR": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "call-to-pure-virtual-from-ctor-dtor",
    "name": "Published Standards/SciTools' Recommended Checks/Call to Pure Virtual from Constructor or Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcall-to-pure-virtual-from-ctor-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>A call to pure virtual member function has undefined behavior; Overrides of a pure virtual member function in subclasses are not available in constructors or destructors.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 78%'><col style='width: 8%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>call to pure virtual member function</span>&nbsp;<em>A</em>&nbsp;<span>has undefined behavior; overrides of</span>&nbsp;<em>A</em>&nbsp;<span>in subclasses are not available in the</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of</span>&nbsp;<em>C</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcall-to-pure-virtual-from-ctor-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_CAST_QUAL_UNRELATED": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "cast-qual-unrelated",
    "name": "Published Standards/SciTools' Recommended Checks/Cast Qualifiers Unrelated",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcast-qual-unrelated</p>",
        "<p><b>Summary</b></p>",
        "<p>ISO C++ does not allow certain casts between certain types which drop qualifiers.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 22%'><col style='width: 11%'><col style='width: 66%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ does not allow</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>const_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>static_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reinterpret_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>dynamic_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>C-style cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functional-style cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>from</span>&nbsp;<em>B</em>&nbsp;<span>to</span>&nbsp;<em>C</em>&nbsp;<span>because it casts away qualifiers, even though the source and destination types are unrelated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual-unrelated'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_CLASS_CONVERSION": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "class-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Class Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wclass-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Unused class conversion functions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conversion function converting</span>&nbsp;<em>A</em>&nbsp;<span>to its base class</span>&nbsp;<em>B</em>&nbsp;<span>will never be used</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conversion function converting</span>&nbsp;<em>A</em>&nbsp;<span>to itself will never be used</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conversion function converting</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>will never be used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wclass-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_COMPARE_DISTINCT_POINTER_TYPES": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "compare-distinct-pointer-types",
    "name": "Published Standards/SciTools' Recommended Checks/Compare Distinct Pointer Types",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcompare-distinct-pointer-types</p>",
        "<p><b>Summary</b></p>",
        "<p>Comparing a pointer of one type to a pointer of another type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 43%'><col style='width: 57%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of distinct pointer types</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompare-distinct-pointer-types'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_COMPOUND_TOKEN_SPLIT_BY_MACRO": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "compound-token-split-by-macro",
    "name": "Published Standards/SciTools' Recommended Checks/Compound Token Split by Macro",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcompound-token-split-by-macro</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not split certain compound tokens (multiple tokens which have a meaning together) by inserting a macro in between them.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 11%'><col style='width: 21%'><col style='width: 21%'><col style='width: 19%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em>&nbsp;<span>and</span>&nbsp;</p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>C</em>&nbsp;<span>tokens</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introducing statement expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>terminating statement expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>introducing attribute</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>terminating attribute</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>forming pointer to member type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>appear in different macro expansion contexts</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-macro'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_CONDITIONAL_TYPE_MISMATCH": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "conditional-type-mismatch",
    "name": "Published Standards/SciTools' Recommended Checks/Conditional Type Mismatch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconditional-type-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>Mismatch between pointer and integer types in the 2 conditional (ternary) expressions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 48%'><col style='width: 52%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pointer/integer type mismatch in conditional expression</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconditional-type-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_CONSTANT_CONVERSION": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "constant-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Constant Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconstant-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When a value is implicitly converted to another type, the value may change. If this value change is intended, then perform an explicit cast.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em>&nbsp;<span>changes value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_CONSTANT_LOGICAL_OPERAND": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "constant-logical-operand",
    "name": "Published Standards/SciTools' Recommended Checks/Constant Logical Operand",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconstant-logical-operand</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of logical operator with a constant non-boolean operand.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of logical ‘</span><em>A</em><span>’ with constant operand</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-logical-operand'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DANGLING": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dangling",
    "name": "Published Standards/SciTools' Recommended Checks/Dangling Pointers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling</p>",
        "<p><b>Summary</b></p>",
        "<p>Instead of initializing things in expressions, initialize them in a previous statement. If they are initialized in the expression, then they become dangling pointers.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 9%'><col style='width: 58%'><col style='width: 3%'><col style='width: 9%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 17%'><col style='width: 34%'><col style='width: 5%'><col style='width: 43%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>temporary</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>whose address is used as value of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 62%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>implicitly</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>bound to</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 46%'><col style='width: 54%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>member of local variable</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 52%'><col style='width: 48%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>local</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 36%'><col style='width: 64%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>array backing</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializer list subobject of local variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>local initializer list</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>D</em>&nbsp;</p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>will be destroyed at the end of the full-expression</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 22%'><col style='width: 14%'><col style='width: 37%'><col style='width: 8%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>sorry, lifetime extension of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>temporary</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>backing array of initializer list</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>created by aggregate initialization using default member initializer is not supported; lifetime of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>temporary</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>backing array</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will end at the end of the full-expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DANGLING_FIELD": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dangling-field",
    "name": "Published Standards/SciTools' Recommended Checks/Dangling Field",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling-field</p>",
        "<p><b>Summary</b></p>",
        "<p>When a data member field is on the stack and its address is used, a dangling field is the result.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 74%'><col style='width: 13%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>binding reference member</span>&nbsp;<em>A</em>&nbsp;<span>to stack allocated</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 9%'><col style='width: 18%'><col style='width: 3%'><col style='width: 11%'><col style='width: 16%'><col style='width: 7%'><col style='width: 35%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reference</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>backing array for ‘std::initializer_list’</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>subobject of</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>member</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>binds to</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>is</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>a temporary object whose lifetime is shorter than the lifetime of the constructed object</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 75%'><col style='width: 12%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializing pointer member</span>&nbsp;<em>A</em>&nbsp;<span>with the stack address of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>temporary bound to reference member of allocated object will be destroyed at the end of the full-expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-field'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DANGLING_GSL": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dangling-gsl",
    "name": "Published Standards/SciTools' Recommended Checks/Dangling Pointers Found by Guidelines Support Library",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling-gsl</p>",
        "<p><b>Summary</b></p>",
        "<p>Dangling pointers occur when a pointer is removed before the object it is pointing to.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>object backing the pointer will be destroyed at the end of the full-expression</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializing pointer member</span>&nbsp;<em>A</em>&nbsp;<span>to point to a temporary object whose lifetime is shorter than the lifetime of the constructed object</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-gsl'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DANGLING_INITIALIZER_LIST": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dangling-initializer-list",
    "name": "Published Standards/SciTools' Recommended Checks/Dangling Initializer List",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling-initializer-list</p>",
        "<p><b>Summary</b></p>",
        "<p>The values in an <code>initializer_list</code> must be used in the same full expression of its creation - before it's destroyed.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 31%'><col style='width: 33%'><col style='width: 36%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array backing</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializer list subobject of the allocated object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>the allocated initializer list</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will be destroyed at the end of the full-expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-initializer-list'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DEFAULTED_FUNCTION_DELETED": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "defaulted-function-deleted",
    "name": "Published Standards/SciTools' Recommended Checks/Defaulted Function Deleted",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdefaulted-function-deleted</p>",
        "<p><b>Summary</b></p>",
        "<p>When a class/struct/union explicitly defines an operator, constructor, or destructor to be default and it is already default, then the compiler implicitly deletes this definition.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 14%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicitly defaulted</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&lt;ERROR&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>equality</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>three-way</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>equality</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>relational</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>comparison operator</span>&nbsp;<span>is implicitly deleted</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 46%'><col style='width: 26%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicitly defaulted</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>default constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copy constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>move constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copy assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>move assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is implicitly deleted</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdefaulted-function-deleted'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DELEGATING_CTOR_CYCLES": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "delegating-ctor-cycles",
    "name": "Published Standards/SciTools' Recommended Checks/Delegating Constructor Cycles",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdelegating-ctor-cycles</p>",
        "<p><b>Summary</b></p>",
        "<p>When a constructor is defined to eventually delegate itself, the result is a delegation cycle.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>constructor for</span>&nbsp;<em>A</em>&nbsp;<span>creates a delegation cycle</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelegating-ctor-cycles'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DELETE_ABSTRACT_NON_VIRTUAL_DTOR": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "delete-abstract-non-virtual-dtor",
    "name": "Published Standards/SciTools' Recommended Checks/Delete Abstract Non-Virtual Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdelete-abstract-non-virtual-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>When a class/struct/union has a virtual method, then it becomes virtual. If its destructor is non-virtual and <code>delete</code> is attempted on a derived object, then only the virtual base destructor is called.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 16%'><col style='width: 14%'><col style='width: 70%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>delete</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>called on</span>&nbsp;<em>B</em>&nbsp;<span>that is abstract but has non-virtual destructor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-abstract-non-virtual-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DELETE_INCOMPLETE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "delete-incomplete",
    "name": "Published Standards/SciTools' Recommended Checks/Delete Incomplete",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdelete-incomplete</p>",
        "<p><b>Summary</b></p>",
        "<p>When a type is not defined or it is a <code>void *</code> it does not have a defined destructor. Do not try to delete it.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot delete expression with pointer-to-‘void’ type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>deleting pointer to incomplete type</span>&nbsp;<em>A</em>&nbsp;<span>may cause undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-incomplete'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DEPRECATED_BUILTINS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-builtins",
    "name": "Published Standards/SciTools' Recommended Checks/Deprecated Builtins",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-builtins</p>",
        "<p><b>Summary</b></p>",
        "<p>When a builtin macro/function provided by the compiler is deprecated, use the replacement instead.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>builtin</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated; use</span>&nbsp;<em>B</em>&nbsp;<span>instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-builtins'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DEPRECATED_DECLARATIONS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-declarations",
    "name": "Published Standards/SciTools' Recommended Checks/Deprecated Declarations",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-declarations</p>",
        "<p><b>Summary</b></p>",
        "<p>Various kinds of declarations which are deprecated.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>specifying ‘uuid’ as an ATL attribute is deprecated; use __declspec instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of C-style parameters in Objective-C method declarations is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>may be deprecated because the receiver type is unknown</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property access is using</span>&nbsp;<em>A</em>&nbsp;<span>method which is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-declarations'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DEPRECATED_INCREMENT_BOOL": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-increment-bool",
    "name": "Published Standards/SciTools' Recommended Checks/Deprecated Increment Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-increment-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>Incrementing expressions of type bool should be avoided, as it is a deprecated action and incompatible with C++17</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incrementing expression of type bool is deprecated and incompatible with C++17</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-increment-bool'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DEPRECATED_NON_PROTOTYPE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-non-prototype",
    "name": "Published Standards/SciTools' Recommended Checks/Deprecated Non-Prototype",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-non-prototype</p>",
        "<p><b>Summary</b></p>",
        "<p>When a function is called and there is no prototype in that context, then the parameter/return types are unknown.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 18%'><col style='width: 8%'><col style='width: 26%'><col style='width: 49%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>a function</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>declaration</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>definition</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>without a prototype is deprecated in all versions of C</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>and is not supported in C2x</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 61%'><col style='width: 16%'><col style='width: 5%'><col style='width: 17%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>and is treated as a zero-parameter prototype in C2x, conflicting with a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>previous</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>subsequent</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>declaration</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>definition</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 35%'><col style='width: 12%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing arguments to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>B</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>without a prototype is deprecated in all versions of C and is not supported in C2x</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-non-prototype'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DEPRECATED_REGISTER": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-register",
    "name": "Published Standards/SciTools' Recommended Checks/Deprecated Register",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-register</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>register</code> storage class specifier is deprecated because its effects are already implicit.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘register’ storage class specifier is deprecated and incompatible with C++17</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-register'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DEPRECATED_VOLATILE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-volatile",
    "name": "Published Standards/SciTools' Recommended Checks/Deprecated Volatile",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-volatile</p>",
        "<p><b>Summary</b></p>",
        "<p>There are various usages of the type qualifier <code>volatile</code> which were deprecated because of ambiguity.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>compound assignment to object of volatile-qualified type</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 17%'><col style='width: 14%'><col style='width: 69%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>decrement</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>increment</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of object of volatile-qualified type</span>&nbsp;<em>B</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of result of assignment to object of volatile-qualified type</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>volatile-qualified parameter type</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>volatile-qualified return type</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>volatile qualifier in structured binding declaration is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-volatile'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DIVISION_BY_ZERO": {
    "tags": [ "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "division-by-zero",
    "name": "Published Standards/SciTools' Recommended Checks/Division by Zero",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdivision-by-zero</p>",
        "<p><b>Summary</b></p>",
        "<p>Performing division by zero is an undefined behavior and should be avoided</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 30%'><col style='width: 26%'><col style='width: 44%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>remainder</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>division</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>by zero is undefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdivision-by-zero'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_DYNAMIC_CLASS_MEMACCESS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dynamic-class-memaccess",
    "name": "Published Standards/SciTools' Recommended Checks/Dynamic Class Memory Access",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdynamic-class-memaccess</p>",
        "<p><b>Summary</b></p>",
        "<p>When memory is accessed with functions like <code>memcmp</code>, if a dynamic class is used, then the vtable pointer will be used as well.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 9%'><col style='width: 10%'><col style='width: 31%'><col style='width: 13%'><col style='width: 30%'><col style='width: 8%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>destination for</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>source of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>first operand of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>second operand of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>this</span>&nbsp;<em>B</em>&nbsp;<span>call is a pointer to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class containing a</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>dynamic class</span>&nbsp;<em>D</em><span>; vtable pointer will be</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>overwritten</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copied</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>moved</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compared</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-class-memaccess'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_ENUM_COMPARE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "enum-compare",
    "name": "Published Standards/SciTools' Recommended Checks/Enum Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>When 2 enumerators are from different enumeration types in the same operation, consider combining the enumeration type definitions or explicitly converting them.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 20%'><col style='width: 21%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>arithmetic between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operation between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>comparison of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>conditional expression between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compound assignment of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>different enumeration types</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_ENUM_COMPARE_SWITCH": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "enum-compare-switch",
    "name": "Published Standards/SciTools' Recommended Checks/Enum Compare Switch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-compare-switch</p>",
        "<p><b>Summary</b></p>",
        "<p>In a switch statement, do not compare enumerators from different enumeration types.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 50%'><col style='width: 50%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of different enumeration types in switch statement</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-switch'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_EXCEPTIONS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "exceptions",
    "name": "Published Standards/SciTools' Recommended Checks/Exceptions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wexceptions</p>",
        "<p><b>Summary</b></p>",
        "<p>Cannot refer to a non-static member from the handler of a constructor, destructor, and function try block</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 62%'><col style='width: 15%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot refer to a non-static member from the handler of a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>function try block</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception of type</span>&nbsp;<em>A</em>&nbsp;<span>will be caught by earlier handler</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has a non-throwing exception specification but can still throw</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexceptions'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_EXTERN_C_COMPAT": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "extern-c-compat",
    "name": "Published Standards/SciTools' Recommended Checks/Extern C Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextern-c-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>A struct/union which has a size 0 in C has a non-zero size in C++.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 16%'><col style='width: 16%'><col style='width: 12%'><col style='width: 26%'><col style='width: 16%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>empty</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>has size 0 in C,</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>size 1</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-zero size</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in C++</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextern-c-compat'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_EXTERN_INITIALIZER": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "extern-initializer",
    "name": "Published Standards/SciTools' Recommended Checks/Extern Initializer",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextern-initializer</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not initialize <code>extern</code> variables.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘extern’ variable has an initializer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextern-initializer'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_EXTRA_QUALIFICATION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "extra-qualification",
    "name": "Published Standards/SciTools' Recommended Checks/Extra Qualification",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextra-qualification</p>",
        "<p><b>Summary</b></p>",
        "<p>If a member is in the block of its scope, do not precede it with the scope resolution operator <code>::</code> and its scope name.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra qualification on member</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-qualification'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FIXED_POINT_OVERFLOW": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "fixed-point-overflow",
    "name": "Published Standards/SciTools' Recommended Checks/Fixed Point Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfixed-point-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning if an expression is evaluated at compilation time and it overflows.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overflow in expression; result is</span>&nbsp;<em>A</em>&nbsp;<span>with type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfixed-point-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FLAG_ENUM": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "flag-enum",
    "name": "Published Standards/SciTools' Recommended Checks/Flag Enum",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wflag-enum</p>",
        "<p><b>Summary</b></p>",
        "<p>If an enumeration type has a flag attribute, then the expected values are powers of 2.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration value</span>&nbsp;<em>A</em>&nbsp;<span>is out of range of flags in enumeration type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wflag-enum'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FORMAT": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format",
    "name": "Published Standards/SciTools' Recommended Checks/Format String",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat</p>",
        "<p><b>Summary</b></p>",
        "<p>Various problems from using a format string incorrectly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using ‘%%P’ format specifier without precision</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 19%'><col style='width: 69%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>values of type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum values with underlying type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>A</em><span>’ should not be used as format arguments; add an explicit cast to</span>&nbsp;<em>B</em>&nbsp;<span>instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using ‘</span><em>A</em><span>’ format specifier, but argument has boolean value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 71%'><col style='width: 16%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format specifies type</span>&nbsp;<em>A</em>&nbsp;<span>but the argument has</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>underlying type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using ‘</span><em>A</em><span>’ format specifier annotation outside of os_log()/os_trace()</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 73%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid position specified for</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field width</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>field precision</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot mix positional and non-positional arguments in format string</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>length modifier ‘</span><em>A</em><span>’ results in undefined behavior or no effect with ‘</span><em>B</em><span>’ conversion specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string should not be a wide string</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>position arguments in format strings start counting at 1 (not 0)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string missing</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>object format flags cannot be used with ‘</span><em>A</em><span>’ conversion specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 23%'><col style='width: 10%'><col style='width: 21%'><col style='width: 13%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>*</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>.*</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ specified field</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>width</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>precision</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is missing a matching ‘int’ argument</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 27%'><col style='width: 12%'><col style='width: 61%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>field</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>width</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>precision</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>should have type</span>&nbsp;<em>B</em><span>, but argument has type</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing object format flag</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string contains ‘\\0’ within the string body</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string is not null-terminated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flag ‘</span><em>A</em><span>’ is ignored when flag ‘</span><em>B</em><span>’ is present</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incomplete format specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not a valid object format flag</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’%%n’ specifier not supported on this platform</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flag ‘</span><em>A</em><span>’ results in undefined behavior with ‘</span><em>B</em><span>’ conversion specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 16%'><col style='width: 15%'><col style='width: 69%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field width</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>precision</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>used with ‘</span><em>B</em><span>’ conversion specifier, resulting in undefined behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>data argument position ‘</span><em>A</em><span>’ exceeds the number of data arguments (</span><em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>zero field width in scanf format string is unused</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no closing ‘]’ for ‘%%[‘ in scanf format string</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FORMAT_EXTRA_ARGS": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-extra-args",
    "name": "Published Standards/SciTools' Recommended Checks/Format Extra Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-extra-args</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for data argumets not used by format strings</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>data argument not used by format string</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-extra-args'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FORMAT_INSUFFICIENT_ARGS": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-insufficient-args",
    "name": "Published Standards/SciTools' Recommended Checks/Format Insufficient Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-insufficient-args</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for insuficient arguments</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>more ‘%%’ conversions than data arguments</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-insufficient-args'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FORMAT_INVALID_SPECIFIER": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-invalid-specifier",
    "name": "Published Standards/SciTools' Recommended Checks/Format Invalid Specifier",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-invalid-specifier</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for invalid conversion specifiers</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid conversion specifier ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-invalid-specifier'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FORMAT_SECURITY": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-security",
    "name": "Published Standards/SciTools' Recommended Checks/Format Security",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-security</p>",
        "<p><b>Summary</b></p>",
        "<p>When a format string is an expected parameter, use a literal string instead of other kinds of expressions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string is not a string literal (potentially insecure)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-security'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FORMAT_ZERO_LENGTH": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-zero-length",
    "name": "Published Standards/SciTools' Recommended Checks/Format Zero Length",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-zero-length</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for empty format strings</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string is empty</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-zero-length'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FORTIFY_SOURCE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "fortify-source",
    "name": "Published Standards/SciTools' Recommended Checks/Fortify Source",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfortify-source</p>",
        "<p><b>Summary</b></p>",
        "<p>In a function call, do not let the source buffer be potentially larger than a destination buffer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ may overflow; destination buffer in argument</span>&nbsp;<em>B</em>&nbsp;<span>has size</span>&nbsp;<em>C</em><span>, but the corresponding specifier may require size</span>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always overflow; destination buffer has size</span>&nbsp;<em>B</em><span>, but format string expands to at least</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always overflow; destination buffer has size</span>&nbsp;<em>B</em><span>, but size argument is</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ size argument is too large; destination buffer has size</span>&nbsp;<em>B</em><span>, but size argument is</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always overflow; destination buffer has size</span>&nbsp;<em>B</em><span>, but the source string has length</span>&nbsp;<em>C</em>&nbsp;<span>(including NUL byte)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfortify-source'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_FREE_NONHEAP_OBJECT": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "free-nonheap-object",
    "name": "Published Standards/SciTools' Recommended Checks/Free Non-Heap Object",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfree-nonheap-object</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not call functions like <code>free</code> on anything except for objects allocated on the heap.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 66%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attempt to call</span>&nbsp;<em>A</em>&nbsp;<span>on non-heap</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>object</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>object: block expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>object: lambda-to-function-pointer conversion</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfree-nonheap-object'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_HEADER_GUARD": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "header-guard",
    "name": "Published Standards/SciTools' Recommended Checks/Header Guard",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wheader-guard</p>",
        "<p><b>Summary</b></p>",
        "<p>If a header guard checks for an undefined macro, it should then define that macro and not only some other macro.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is used as a header guard here, followed by #define of a different macro</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wheader-guard'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_IGNORED_ATTRIBUTES": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "ignored-attributes",
    "name": "Published Standards/SciTools' Recommended Checks/Ignored Attributes",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wignored-attributes</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings if the compiler will ignore an <code>__attribute__</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘trivial_abi’ cannot be applied to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 13%'><col style='width: 9%'><col style='width: 79%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>alias</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>ifunc</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will always resolve to</span>&nbsp;<em>A</em>&nbsp;<span>even if weak definition of</span>&nbsp;<em>B</em>&nbsp;<span>is overridden</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 15%'><col style='width: 11%'><col style='width: 62%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>alias</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>ifunc</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will not be in section ‘</span><em>A</em><span>’ but in the same section as the</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>aliasee</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>resolver</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>requested alignment is less than minimum alignment of</span>&nbsp;<em>B</em>&nbsp;<span>for type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 53%'><col style='width: 18%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘abi_tag’ attribute on</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>non-inline</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>anonymous</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>namespace ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>after definition is ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘cmse_nonsecure_entry’ cannot be applied to functions with internal linkage</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘dllexport’ attribute ignored on explicit instantiation definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 75%'><col style='width: 13%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>has no effect when annotating an ‘if</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constexpr</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>consteval</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ statement</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>has no effect when annotating an infinite loop</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute can only be applied to instance variables or properties</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored for field of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute is ignored because there exists no call expression inside the statement</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored on inline function</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored on a non-definition declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ attribute cannot be specified on a definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>ignored, because it is not attached to a declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nonnull’ attribute applied to function with no pointer arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nonnull’ attribute when used on parameters takes no arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored when parsing type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to a pointer or reference (</span><em>B</em>&nbsp;<span>is invalid)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 57%'><col style='width: 19%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>constant</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>pointer arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute declaration must precede definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to return values that are pointers</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to return values that are pointers or references</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘sentinel’ attribute requires named arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 81%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘sentinel’ attribute only supported for variadic</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>blocks</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute argument not supported:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown visibility</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 63%'><col style='width: 17%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>cannot be applied to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>Objective-C method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>without return value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__weak attribute cannot be specified on a field declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__weak attribute cannot be specified on an automatic variable when ARC is not enabled</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 65%'><col style='width: 35%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables and functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functions and methods</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functions, methods and blocks</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functions, methods, and parameters</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables and fields</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables, data members and tag types</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>types and namespaces</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables, functions and classes</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>kernel functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-K&amp;R-style functions</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conflicting attributes</span>&nbsp;<em>A</em>&nbsp;<span>are ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>ignored, because it cannot be applied to omitted return type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 73%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>calling convention is not supported</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>for this target</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>on variadic function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>on constructor/destructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>on builtin function</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>ignored, because it cannot be applied to a type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring __declspec(allocator) because the function return type</span>&nbsp;<em>A</em>&nbsp;<span>is not a pointer or reference type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 62%'><col style='width: 12%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>is ignored, place it after “</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>” to apply attribute to type declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘deprecated’ attribute on anonymous namespace ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>currently has no effect on a using declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>redeclared inline;</span>&nbsp;<em>B</em>&nbsp;<span>attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>is already applied with different arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>is already applied</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute is ignored on this statement as it only applies to functions; use ‘</span><em>A</em><span>’ on statements</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 78%'><col style='width: 15%'><col style='width: 7%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>statement attribute</span>&nbsp;<em>A</em>&nbsp;<span>has higher precedence than function attribute ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>always_inline</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>flatten</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>noinline</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Objective-C GC does not allow weak variables on the stack</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘gnu_inline’ attribute requires function to be marked ‘inline’, attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 68%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inheritance model ignored on</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>primary template</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>partial specialization</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 77%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘objc_externally_retained’ can only be applied to local variables</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>of retainable type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>with strong ownership</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 37%'><col style='width: 14%'><col style='width: 49%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>import</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>module</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>name</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>cannot be applied to a function with a definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘internal_linkage’ attribute on a non-static local variable is ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 16%'><col style='width: 12%'><col style='width: 51%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>MIPS</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>MSP430</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>RISC-V</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>‘interrupt’ attribute only applies to functions that have</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>no parameters</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a ‘void’ return type</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>qualifiers after comma in declarator list are ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘mig_server_routine’ attribute only applies to routines that return a kern_return_t</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 21%'><col style='width: 8%'><col style='width: 33%'><col style='width: 8%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>import</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>module</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>name</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>B</em><span>) does not match the import</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>module</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>name</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>C</em><span>) of the previous declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown attribute ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nocf_check’ attribute ignored; use -fcf-protection to enable the attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘noderef’ can only be used on an array or pointer type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nothrow’ attribute conflicts with exception specification; attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 54%'><col style='width: 29%'><col style='width: 17%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>Objective-C object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer-to-CF-pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer/reference-to-OSObject-pointer</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>parameters</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 49%'><col style='width: 12%'><col style='width: 20%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>methods</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>properties</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>that return</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>an Objective-C object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a non-retainable pointer</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute isn’t implemented by this Objective-C runtime</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>direct attribute on property</span>&nbsp;<em>A</em>&nbsp;<span>ignored (not implemented by this Objective-C runtime)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute is deprecated and ignored in</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘require_constant_initialization’ attribute added after initialization of variable</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>repeated RISC-V ‘interrupt’ attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template parameter of a function template with the ‘sycl_kernel’ attribute cannot be a non-type template parameter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function template with ‘sycl_kernel’ attribute must have a single parameter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘sycl_kernel’ attribute only applies to a function template with at least two template parameters</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function template with ‘sycl_kernel’ attribute must have a ‘void’ return type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 9%'><col style='width: 7%'><col style='width: 45%'><col style='width: 7%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>alignment</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>size</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of field</span>&nbsp;<em>B</em>&nbsp;<span>(</span><em>C</em>&nbsp;<span>bits) does not match the</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>alignment</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>size</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of the first field in transparent union; transparent_union attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 42%'><col style='width: 13%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>first field of a transparent union cannot have</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>floating point</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>vector</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>B</em><span>; transparent_union attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>transparent_union attribute can only be applied to a union definition; attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>transparent union definition must contain at least one field; transparent_union attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 45%'><col style='width: 24%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ only applies to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>Objective-C object or block pointer</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>types; type here is</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__declspec attribute</span>&nbsp;<em>A</em>&nbsp;<span>is not supported</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 10%'><col style='width: 9%'><col style='width: 13%'><col style='width: 22%'><col style='width: 11%'><col style='width: 12%'><col style='width: 11%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>unsupported</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>duplicate</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unknown</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>architecture</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>tune CPU</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>C</em><span>’ in the ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>target</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>target_clones</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ attribute string; ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>target</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>target_clones</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 17%'><col style='width: 15%'><col style='width: 67%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’[[</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>nodiscard</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>gnu::warn_unused_result</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>]]’ attribute ignored when applied to a typedef; consider using ‘__attribute__((warn_unused_result))’ or ‘[[clang::warn_unused_result]]’ instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘__clang__’ is a predefined macro name, not an attribute scope specifier; did you mean ‘_Clang’ instead?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-attributes'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_IGNORED_REFERENCE_QUALIFIERS": {
    "tags": [ "Compiler: Extra", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "ignored-reference-qualifiers",
    "name": "Published Standards/SciTools' Recommended Checks/Ignored Reference Qualifiers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wignored-reference-qualifiers</p>",
        "<p><b>Summary</b></p>",
        "<p>In C++, certain qualifiers have no effect on certain reference types.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ qualifier on reference type</span>&nbsp;<em>B</em>&nbsp;<span>has no effect</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-reference-qualifiers'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_IMPLICIT_CONST_INT_FLOAT_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicit-const-int-float-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Implicit Const Int Float Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-const-int-float-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When implicitly converting a constant integer type to a floating point type, a warning will show the exact value of the change.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em>&nbsp;<span>changes value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-const-int-float-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_IMPLICIT_CONVERSION_FLOATING_POINT_TO_BOOL": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicit-conversion-floating-point-to-bool",
    "name": "Published Standards/SciTools' Recommended Checks/Implicit Conversion Floating Point to Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-conversion-floating-point-to-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert a floating point type to a boolean type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion turns floating-point number into bool:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-conversion-floating-point-to-bool'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_IMPLICIT_EXCEPTION_SPEC_MISMATCH": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicit-exception-spec-mismatch",
    "name": "Published Standards/SciTools' Recommended Checks/Implicit Exception Spec Mismatch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-exception-spec-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent with adding <code>noexcept</code> specification to the end of a function declaration.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 35%'><col style='width: 9%'><col style='width: 29%'><col style='width: 9%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function previously declared with an</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>explicit</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>implicit</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>exception specification redeclared with an</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>implicit</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>explicit</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>exception specification</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-exception-spec-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_IMPLICIT_FIXED_POINT_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicit-fixed-point-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Implicit Fixed Point Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-fixed-point-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert from a fixed point type to a smaller type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>A</em>&nbsp;<span>cannot fit within the range of values for</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fixed-point-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_IMPLICITLY_UNSIGNED_LITERAL": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicitly-unsigned-literal",
    "name": "Published Standards/SciTools' Recommended Checks/Implicitly Unsigned Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicitly-unsigned-literal</p>",
        "<p><b>Summary</b></p>",
        "<p>Integer literals are signed by default, unless the value is too large, in which case it is unsigned. To clarify the type of a large integer literal, add a suffix such as <code>u</code>, <code>ul</code>, or <code>ull</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>integer literal is too large to be represented in a signed integer type, interpreting as unsigned</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicitly-unsigned-literal'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INACCESSIBLE_BASE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "inaccessible-base",
    "name": "Published Standards/SciTools' Recommended Checks/Inaccessible Base",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winaccessible-base</p>",
        "<p><b>Summary</b></p>",
        "<p>When a derived class/struct explicitly derives from a base class and an intermediate class, the base class is not accessible. Instead, only derive from the intermediate class. Alternatively, if the intermediate class is a virtual derivation of the base class, then derive from the intermediate class and derive virtually from the base class.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>direct base</span>&nbsp;<em>A</em>&nbsp;<span>is inaccessible due to ambiguity:</span><em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winaccessible-base'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INCOMPATIBLE_EXCEPTION_SPEC": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "incompatible-exception-spec",
    "name": "Published Standards/SciTools' Recommended Checks/Incompatible Exception Spec",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-exception-spec</p>",
        "<p><b>Summary</b></p>",
        "<p>When a function A is used as a value for a variable B, the <code>noexcept</code> specification of B should be a superset of that of A.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 58%'><col style='width: 17%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception specifications of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>return</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>argument</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>types differ</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>target exception specification is not superset of source</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-exception-spec'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INCOMPATIBLE_LIBRARY_REDECLARATION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "incompatible-library-redeclaration",
    "name": "Published Standards/SciTools' Recommended Checks/Incompatible Library Redeclaration",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-library-redeclaration</p>",
        "<p><b>Summary</b></p>",
        "<p>When redeclaring a library function, the type should be the same as the original library function.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incompatible redeclaration of library function</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-library-redeclaration'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INCOMPATIBLE_POINTER_TYPES": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "incompatible-pointer-types",
    "name": "Published Standards/SciTools' Recommended Checks/Incompatible Pointer Types",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-pointer-types</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert from one pointer type to a different pointer type that is a fundamentally different type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 31%'><col style='width: 53%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incompatible pointer types</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; dereference with *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; take the address with &amp;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove &amp;</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INCOMPATIBLE_POINTER_TYPES_DISCARDS_QUALIFIERS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "incompatible-pointer-types-discards-qualifiers",
    "name": "Published Standards/SciTools' Recommended Checks/Incompatible Pointer Types Discards Qualifiers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-pointer-types-discards-qualifiers</p>",
        "<p><b>Summary</b></p>",
        "<p>In type conversion or nested pointers, qualifiers like <code>const</code> may be discarded.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 59%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>discards qualifiers in nested pointer types</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 14%'><col style='width: 66%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>discards qualifiers</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 13%'><col style='width: 15%'><col style='width: 73%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reinterpret_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>C-style cast</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>from</span>&nbsp;<em>B</em>&nbsp;<span>to</span>&nbsp;<em>C</em>&nbsp;<span>changes address space of nested pointers</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types-discards-qualifiers'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INCONSISTENT_MISSING_OVERRIDE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "inconsistent-missing-override",
    "name": "Published Standards/SciTools' Recommended Checks/Inconsistent Missing Override",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winconsistent-missing-override</p>",
        "<p><b>Summary</b></p>",
        "<p>Member function overrides should be marked 'override'</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>overrides a member function but is not marked ‘override’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-override'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INCREMENT_BOOL": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "increment-bool",
    "name": "Published Standards/SciTools' Recommended Checks/Increment Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincrement-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not increment a boolean with the <code>++</code> operator.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>ISO C++17 does not allow incrementing expression of type bool</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincrement-bool'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INJECTED_CLASS_NAME": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "injected-class-name",
    "name": "Published Standards/SciTools' Recommended Checks/Injected Class Name",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winjected-class-name</p>",
        "<p><b>Summary</b></p>",
        "<p>When declaring an object instance, appending <code>::TemplateName</code> or <code>::TypeName</code> refers to the constructor, according to the ISO C++ standard. This is true even when preceding the declaration with a <code>typename</code> or <code>template</code> keyword. Therefore, remove this appended part.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 55%'><col style='width: 9%'><col style='width: 20%'><col style='width: 8%'><col style='width: 9%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ specifies that qualified reference to</span>&nbsp;<em>A</em>&nbsp;<span>is a constructor name rather than a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>template name</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in this context, despite preceding</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘typename’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>‘template’</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>keyword</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winjected-class-name'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INLINE_NAMESPACE_REOPENED_NONINLINE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "inline-namespace-reopened-noninline",
    "name": "Published Standards/SciTools' Recommended Checks/Inline Namespace Reopened Non-Inline",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winline-namespace-reopened-noninline</p>",
        "<p><b>Summary</b></p>",
        "<p>If a namespace is opened with <code>inline</code>, then all other openings of that namespace should also have the <code>inline</code> keyword.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline namespace reopened as a non-inline namespace</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winline-namespace-reopened-noninline'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INSTANTIATION_AFTER_SPECIALIZATION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "instantiation-after-specialization",
    "name": "Published Standards/SciTools' Recommended Checks/Instantiation After Specialization",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winstantiation-after-specialization</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not declare the specific declaration (explicit instantiation) after the general declaration (template specialization.)</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit instantiation of</span>&nbsp;<em>A</em>&nbsp;<span>that occurs after an explicit specialization has no effect</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winstantiation-after-specialization'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INT_TO_POINTER_CAST": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "int-to-pointer-cast",
    "name": "Published Standards/SciTools' Recommended Checks/Int to Pointer Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wint-to-pointer-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert an integer to a pointer if the integer size is smaller.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to</span>&nbsp;<em>B</em>&nbsp;<span>from smaller integer type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-to-pointer-cast'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INT_TO_VOID_POINTER_CAST": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "int-to-void-pointer-cast",
    "name": "Published Standards/SciTools' Recommended Checks/Int to Void Pointer Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wint-to-void-pointer-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert an integer to a pointer if the integer size is smaller.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to</span>&nbsp;<em>B</em>&nbsp;<span>from smaller integer type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-to-void-pointer-cast'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INTEGER_OVERFLOW": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "integer-overflow",
    "name": "Published Standards/SciTools' Recommended Checks/Integer Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winteger-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>When creating an expression for a large number, make sure that the integers are large enough to prevent overflow. This can be accomplished with suffixes or explicit casts.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overflow in expression; result is</span>&nbsp;<em>A</em>&nbsp;<span>with type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winteger-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INVALID_NO_BUILTIN_NAMES": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "invalid-no-builtin-names",
    "name": "Published Standards/SciTools' Recommended Checks/Invalid No Builtin Names",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-no-builtin-names</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for invalid builtin names</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not a valid builtin name for</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-no-builtin-names'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INVALID_NORETURN": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "invalid-noreturn",
    "name": "Published Standards/SciTools' Recommended Checks/Invalid Noreturn Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-noreturn</p>",
        "<p><b>Summary</b></p>",
        "<p>Functions declared 'noreturn' should not return</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function declared ‘noreturn’ should not return</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function</span>&nbsp;<em>A</em>&nbsp;<span>declared ‘noreturn’ should not return</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-noreturn'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INVALID_OFFSETOF": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "invalid-offsetof",
    "name": "Published Standards/SciTools' Recommended Checks/Invalid Offsetof",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-offsetof</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for offsets of non-POD types or non-standard-layout types</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>offset of on non-POD type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>offset of on non-standard-layout type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-offsetof'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_INVALID_PP_TOKEN": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "invalid-pp-token",
    "name": "Published Standards/SciTools' Recommended Checks/Invalid Preprocessor Token",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-pp-token</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for empty character constants and missing terminating characters</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty character constant</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 59%'><col style='width: 15%'><col style='width: 26%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing terminating</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>‘”’</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>character</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-pp-token'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_LARGE_BY_VALUE_COPY": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "large-by-value-copy",
    "name": "Published Standards/SciTools' Recommended Checks/Large by Value Copy",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlarge-by-value-copy</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function receives or returns something large, use a reference or a pointer instead.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is a large (</span><em>B</em>&nbsp;<span>bytes) pass-by-value argument; pass it by reference instead ?</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>return value of</span>&nbsp;<em>A</em>&nbsp;<span>is a large (</span><em>B</em>&nbsp;<span>bytes) pass-by-value object; pass it by reference instead ?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlarge-by-value-copy'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_LITERAL_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "literal-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Literal Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wliteral-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When writing a literal, write it with the intended type, which may have to be accomplished with literal suffixes.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>changes value from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion of out of range value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>is undefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wliteral-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_LITERAL_RANGE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "literal-range",
    "name": "Published Standards/SciTools' Recommended Checks/Literal Range",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wliteral-range</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not compare with a float literal using the <code>==</code> or <code>!=</code> operators. Do not make a float literal with a magnitude that is too small for the type, unless adding a suffix for the appropriate size is possible.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 44%'><col style='width: 10%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>floating-point comparison is always</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; constant cannot be represented exactly in type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>magnitude of floating-point constant too large for type</span>&nbsp;<em>A</em><span>; maximum is</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>magnitude of floating-point constant too small for type</span>&nbsp;<em>A</em><span>; minimum is</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wliteral-range'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_LOGICAL_NOT_PARENTHESES": {
    "tags": [ "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "logical-not-parentheses",
    "name": "Published Standards/SciTools' Recommended Checks/Logical Not Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlogical-not-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning to clarify what the not-operator does on the left operand of a comparison.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 78%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>logical not is only applied to the left hand side of this</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>comparison</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operator</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlogical-not-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MACRO_REDEFINED": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "macro-redefined",
    "name": "Published Standards/SciTools' Recommended Checks/Macro Redefined",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmacro-redefined</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not define macros that are already defined. This can lead to unintended behavior if the macro value is different, especially considering the order of the <code>#include</code> directives.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>macro redefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmacro-redefined'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MAIN_RETURN_TYPE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "main-return-type",
    "name": "Published Standards/SciTools' Recommended Checks/Main Return Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmain-return-type</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>main</code> function should return an <code>int</code> type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>return type of ‘main’ is not ‘int’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmain-return-type'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MANY_BRACES_AROUND_SCALAR_INIT": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "many-braces-around-scalar-init",
    "name": "Published Standards/SciTools' Recommended Checks/Many Braces Around Scalar Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmany-braces-around-scalar-init</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not type too many curly braces around the value when initializing something.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 58%'><col style='width: 23%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>too many braces around</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>scalar</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>initializer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmany-braces-around-scalar-init'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MAX_UNSIGNED_ZERO": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "max-unsigned-zero",
    "name": "Published Standards/SciTools' Recommended Checks/Max Unsigned Zero",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmax-unsigned-zero</p>",
        "<p><b>Summary</b></p>",
        "<p>When calling <code>max</code> on 0u and another value, the non-zero value is always the result. Remove the u suffix from 0u to treat it as signed zero.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 41%'><col style='width: 25%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>taking the max of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a value and unsigned zero</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unsigned zero and a value</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always equal to the other value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmax-unsigned-zero'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MEMSET_TRANSPOSED_ARGS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "memset-transposed-args",
    "name": "Published Standards/SciTools' Recommended Checks/Memset Transposed Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmemset-transposed-args</p>",
        "<p><b>Summary</b></p>",
        "<p>For the <code>memset</code> function do not put the <code>int ch</code> and <code>size_t count</code> parameters in the wrong argument positions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 19%'><col style='width: 37%'><col style='width: 44%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘size’ argument to memset is ‘0’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>setting buffer to a ‘sizeof’ expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; did you mean to transpose the last two arguments?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmemset-transposed-args'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MEMSIZE_COMPARISON": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "memsize-comparison",
    "name": "Published Standards/SciTools' Recommended Checks/Memsize Comparison",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmemsize-comparison</p>",
        "<p><b>Summary</b></p>",
        "<p>Certain functions require a <code>size_t</code> type, which can result from the <code>sizeof</code> operator, rather than a boolean-like <code>int</code> type that results from a comparison operator.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>size argument in</span>&nbsp;<em>A</em>&nbsp;<span>call is a comparison</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmemsize-comparison'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MISMATCHED_NEW_DELETE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "mismatched-new-delete",
    "name": "Published Standards/SciTools' Recommended Checks/Mismatched New Delete",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmismatched-new-delete</p>",
        "<p><b>Summary</b></p>",
        "<p>After allocating with the <code>new</code> or <code>new[]</code> operator, be consistent by deleting with the <code>delete</code> or <code>delete[]</code> operator, respectively.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 22%'><col style='width: 8%'><col style='width: 30%'><col style='width: 8%'><col style='width: 17%'><col style='width: 8%'><col style='width: 7%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘delete</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>[]</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ applied to a pointer that was allocated with ‘new</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>[]</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘; did you mean ‘delete</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>[]</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-new-delete'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MISSING_DECLARATIONS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "missing-declarations",
    "name": "Published Standards/SciTools' Recommended Checks/Missing Declarations",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-declarations</p>",
        "<p><b>Summary</b></p>",
        "<p>When something is declared, it should have a valid identifier and correct keywords.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration does not declare anything</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not permitted on a declaration of a type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>typedef requires a name</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ ignored on this declaration</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-declarations'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MISSING_EXCEPTION_SPEC": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "missing-exception-spec",
    "name": "Published Standards/SciTools' Recommended Checks/Missing Exception Spec",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-exception-spec</p>",
        "<p><b>Summary</b></p>",
        "<p>Declarations should be consistent with exception specification, which can be shown with attributes or the <code>throw</code> and <code>noexcept</code> keywords.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is missing exception specification ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-exception-spec'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MULTICHAR": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "multichar",
    "name": "Published Standards/SciTools' Recommended Checks/Multiple Characters in Character Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmultichar</p>",
        "<p><b>Summary</b></p>",
        "<p>A character literal should have one character, in constrast to a string literal.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multi-character character constant</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmultichar'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_MULTIPLE_MOVE_VBASE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "multiple-move-vbase",
    "name": "Published Standards/SciTools' Recommended Checks/Multiple Move Virtual Base",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmultiple-move-vbase</p>",
        "<p><b>Summary</b></p>",
        "<p>When certain criteria are met for virtual inheritance, the move operator will move the virutal base class multiple times. See the notes of -Wmultiple-move-vbase for more information.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>defaulted move assignment operator of</span>&nbsp;<em>A</em>&nbsp;<span>will move assign virtual base class</span>&nbsp;<em>B</em>&nbsp;<span>multiple times</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmultiple-move-vbase'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NEW_RETURNS_NULL": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "new-returns-null",
    "name": "Published Standards/SciTools' Recommended Checks/New Returns Null",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnew-returns-null</p>",
        "<p><b>Summary</b></p>",
        "<p>When defining a <code>new</code> or <code>new[]</code> operator which can return a null pointer, add <code>throw()</code> or <code>noexcept</code> to the declaration.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 78%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>should not return a null pointer unless it is declared ‘throw()’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>or ‘noexcept’</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnew-returns-null'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NODEREF": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "noderef",
    "name": "Published Standards/SciTools' Recommended Checks/Noderef Attirbute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnoderef</p>",
        "<p><b>Summary</b></p>",
        "<p>If something is declared with the <code>noderef</code> attribute, then do not dereference it or cast it to a type without that attribute.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dereferencing</span>&nbsp;<em>A</em><span>; was declared with a ‘noderef’ type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dereferencing expression marked as ‘noderef’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>casting to dereferenceable pointer removes ‘noderef’ attribute</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnoderef'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NON_C_TYPEDEF_FOR_LINKAGE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "non-c-typedef-for-linkage",
    "name": "Published Standards/SciTools' Recommended Checks/Non-C Typedef for Linkage",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-c-typedef-for-linkage</p>",
        "<p><b>Summary</b></p>",
        "<p>Add a tag name to <code>typedef</code> definitions immediately before the curly brace.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 61%'><col style='width: 11%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>anonymous non-C-compatible type given name for linkage purposes by</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>typedef</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>alias</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration; add a tag name here</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-c-typedef-for-linkage'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NON_LITERAL_NULL_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "non-literal-null-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Non-Literal Null Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-literal-null-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert an expression with the value of zero to a pointer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression which evaluates to zero treated as a null pointer constant of type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-literal-null-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NON_POD_VARARGS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "non-pod-varargs",
    "name": "Published Standards/SciTools' Recommended Checks/Non-POD (Plain Old Data) Variadic Arguments",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-pod-varargs</p>",
        "<p><b>Summary</b></p>",
        "<p>Variadic arguments should be simple types.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 26%'><col style='width: 10%'><col style='width: 37%'><col style='width: 10%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>cannot pass object of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>non-POD</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-trivial</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>B</em>&nbsp;<span>through variadic</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; call will abort at runtime</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 20%'><col style='width: 9%'><col style='width: 35%'><col style='width: 9%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>cannot pass</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>non-POD</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-trivial</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>object of type</span>&nbsp;<em>B</em>&nbsp;<span>to variadic</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; expected type from format string was</span>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>second argument to ‘va_arg’ is of non-POD type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>second argument to ‘va_arg’ is of ARC ownership-qualified type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-pod-varargs'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NON_POWER_OF_TWO_ALIGNMENT": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "non-power-of-two-alignment",
    "name": "Published Standards/SciTools' Recommended Checks/Non-Power of Two Alignment",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-power-of-two-alignment</p>",
        "<p><b>Summary</b></p>",
        "<p>When specifying the alignment, it should be a power of 2.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>requested alignment is not a power of 2</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-power-of-two-alignment'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NONNULL": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "nonnull",
    "name": "Published Standards/SciTools' Recommended Checks/Null as an Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnonnull</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function receives a pointer, do not give it null. Likewise, if a function returns a pointer, do not return null.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>null passed to a callee that requires a non-null argument</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 45%'><col style='width: 15%'><col style='width: 40%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>null returned from</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>that requires a non-null return value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonnull'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NONPORTABLE_INCLUDE_PATH": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "nonportable-include-path",
    "name": "Published Standards/SciTools' Recommended Checks/Non-Portable Include Path",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnonportable-include-path</p>",
        "<p><b>Summary</b></p>",
        "<p>Make sure that includes are correct for different systems, even the capitalization.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-portable path to file ‘</span><em>A</em><span>’; specified path differs in case from file name on disk</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-include-path'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NONTRIVIAL_MEMACCESS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "nontrivial-memaccess",
    "name": "Published Standards/SciTools' Recommended Checks/Nontrivial Memory Access",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnontrivial-memaccess</p>",
        "<p><b>Summary</b></p>",
        "<p>When something is non-trivial to initialize or copy, keep these operations to a minimum. If this is not desired, then explicitly cast its pointer to the expected type, which is <code>void *</code> usually.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 10%'><col style='width: 12%'><col style='width: 63%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>destination for</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>source of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>first operand of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>second operand of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>this</span>&nbsp;<em>B</em>&nbsp;<span>call is a pointer to record</span>&nbsp;<em>C</em>&nbsp;<span>that is not trivial to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>primitive-default-initialize</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>primitive-copy</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnontrivial-memaccess'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NULL_ARITHMETIC": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "null-arithmetic",
    "name": "Published Standards/SciTools' Recommended Checks/Null Arithmetic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-arithmetic</p>",
        "<p><b>Summary</b></p>",
        "<p>Instead of <code>NULL</code>, use the integer literal for zero in arithmetic expressions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of NULL in arithmetic operation</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 58%'><col style='width: 42%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison between NULL and non-pointer</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>(</span><em>B</em>&nbsp;<span>and NULL)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>(NULL and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-arithmetic'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NULL_CHARACTER": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "null-character",
    "name": "Published Standards/SciTools' Recommended Checks/Null Character",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-character</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for using the null character, which may be invisible, in code or in a string literal. In code, it is ignored. In a string literal, it is not ignored, so it ends the string.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 62%'><col style='width: 16%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>null character(s) preserved in</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>char</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>string</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>literal</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>null character ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-character'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NULL_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "null-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Null Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert from <code>NULL</code> or <code>nullptr</code> to another type. Instead, explicitly convert the type or convert from 0.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 48%'><col style='width: 14%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>NULL</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>nullptr</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>constant to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_NULL_DEREFERENCE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "null-dereference",
    "name": "Published Standards/SciTools' Recommended Checks/Null Dereference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-dereference</p>",
        "<p><b>Summary</b></p>",
        "<p>If something is a reference type, then do not assign it a value of null. If a pointer is null, and it's not volatile, then do not dereference it.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>binding dereferenced null pointer to reference has undefined behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>indirection of non-volatile null pointer will be deleted, not trap</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-dereference'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_ODR": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "odr",
    "name": "Published Standards/SciTools' Recommended Checks/One Definition Rule",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wodr</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings to ensure that declarations/definitions are consistent</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template parameter lists have a different number of parameters (</span><em>A</em>&nbsp;<span>vs</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template parameter has different kinds in different translation units</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>field</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>external function</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>instance variable</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template parameter declared with incompatible types in different translation units (</span><em>A</em>&nbsp;<span>vs.</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 10%'><col style='width: 8%'><col style='width: 81%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>method</span>&nbsp;<em>B</em>&nbsp;<span>has a different number of parameters in different translation units (</span><em>C</em>&nbsp;<span>vs.</span>&nbsp;<em>D</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 10%'><col style='width: 8%'><col style='width: 82%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>method</span>&nbsp;<em>B</em>&nbsp;<span>has a parameter with a different types in different translation units (</span><em>C</em>&nbsp;<span>vs.</span>&nbsp;<em>D</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 9%'><col style='width: 81%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>method</span>&nbsp;<em>B</em>&nbsp;<span>has incompatible result types in different translation units (</span><em>C</em>&nbsp;<span>vs.</span>&nbsp;<em>D</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 15%'><col style='width: 12%'><col style='width: 73%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>method</span>&nbsp;<em>B</em>&nbsp;<span>is variadic in one translation unit and not variadic in another</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 45%'><col style='width: 9%'><col style='width: 19%'><col style='width: 9%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property</span>&nbsp;<em>A</em>&nbsp;<span>is implemented with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>@synthesize</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@dynamic</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in one translation but</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>@dynamic</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@synthesize</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in another translation unit</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>class</span>&nbsp;<em>A</em>&nbsp;<span>has incompatible superclasses</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property</span>&nbsp;<em>A</em>&nbsp;<span>is synthesized to different ivars in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 61%'><col style='width: 14%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parameter kind mismatch; parameter is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>not a</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>parameter pack</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type</span>&nbsp;<em>A</em>&nbsp;<span>has incompatible definitions in different translation units</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>external variable</span>&nbsp;<em>A</em>&nbsp;<span>defined in multiple translation units</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>external variable</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wodr'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_ORDERED_COMPARE_FUNCTION_POINTERS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "ordered-compare-function-pointers",
    "name": "Published Standards/SciTools' Recommended Checks/Ordered Compare Function Pointers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wordered-compare-function-pointers</p>",
        "<p><b>Summary</b></p>",
        "<p>Other than the equality operators <code>==</code> and <code>!=</code>, do not compare functions with the comparison operators.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ordered comparison of function pointers (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ordered comparison of function pointers (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wordered-compare-function-pointers'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_OUT_OF_SCOPE_FUNCTION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "out-of-scope-function",
    "name": "Published Standards/SciTools' Recommended Checks/Out of Scope Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wout-of-scope-function</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not declare an identifier out of the scope. If it is already properly declared in scope, it is because it appears in the same curly brace block, or any surrounding block.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 53%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of out-of-scope declaration of</span>&nbsp;<em>A</em></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>whose type is not compatible with that of an implicit declaration</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wout-of-scope-function'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_OVERLOADED_SHIFT_OP_PARENTHESES": {
    "tags": [ "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "overloaded-shift-op-parentheses",
    "name": "Published Standards/SciTools' Recommended Checks/Overloaded Shift Operator Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Woverloaded-shift-op-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>Overloaded operators have the same precedence as non-overloaded operators. When using overloaded <code>&lt;&lt;</code> or <code>&gt;&gt;</code> operators near comparison operators, clarify the order by adding parentheses.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 45%'><col style='width: 11%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overloaded operator</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&gt;&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>&lt;&lt;</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>has higher precedence than comparison operator</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-shift-op-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_PARENTHESES_EQUALITY": {
    "tags": [ "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "parentheses-equality",
    "name": "Published Standards/SciTools' Recommended Checks/Parentheses Equality",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wparentheses-equality</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not include parentheses around an equality comparison if they are not necessary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>equality comparison with extraneous parentheses</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wparentheses-equality'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POINTER_ARITH": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-arith",
    "name": "Published Standards/SciTools' Recommended Checks/Pointer Arithmetic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-arith</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not get or use the size of functions, void, or anything with a size of zero.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid application of ‘</span><em>A</em><span>’ to a function type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid application of ‘</span><em>A</em><span>’ to a void type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>subtraction of pointers to type</span>&nbsp;<em>A</em>&nbsp;<span>of zero size has undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-arith'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POINTER_BOOL_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-bool-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Pointer Bool Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-bool-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Nonnull function call and parameter pointers will evaluate to 'true' on first encounter. Address of function and array pointers will always evaluate to 'true'.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 31%'><col style='width: 16%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>nonnull</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function call</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’ will evaluate to ‘true’ on first encounter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 31%'><col style='width: 19%'><col style='width: 51%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>address of</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>array</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’ will always evaluate to ‘true’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-bool-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POINTER_COMPARE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-compare",
    "name": "Published Standards/SciTools' Recommended Checks/Pointer Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>When attempting to compare a pointer to null or (void*)0, the result may unintentionally end up comparing to a null pointer constant.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 77%'><col style='width: 15%'><col style='width: 8%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparing a pointer to a null character constant; did you mean to compare to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>NULL</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>(void *)0</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-compare'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POINTER_INTEGER_COMPARE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-integer-compare",
    "name": "Published Standards/SciTools' Recommended Checks/Pointer Integer Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-integer-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Warns when a comparison between a pointer and integer occurs.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison between pointer and integer (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-integer-compare'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POINTER_SIGN": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-sign",
    "name": "Published Standards/SciTools' Recommended Checks/Pointer Sign",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-sign</p>",
        "<p><b>Summary</b></p>",
        "<p>Assigning, passing, returning, converting, initializing, sending, and casting parameters, expressions, types, etc. converts between pointers to integer types either with a different sign or where one is of the unique plain 'char' type and the other is not.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 9%'><col style='width: 42%'><col style='width: 23%'><col style='width: 26%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>converts between pointers to integer types</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>with different sign</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>where one is of the unique plain ‘char’ type and the other is not</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-sign'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POINTER_TO_ENUM_CAST": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-to-enum-cast",
    "name": "Published Standards/SciTools' Recommended Checks/Pointer to Enum Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-to-enum-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Cast to smaller integer from type to type in enum.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to smaller integer type</span>&nbsp;<em>B</em>&nbsp;<span>from</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-enum-cast'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POINTER_TO_INT_CAST": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-to-int-cast",
    "name": "Published Standards/SciTools' Recommended Checks/Pointer to Int Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-to-int-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Cast to smaller integer from type to type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to smaller integer type</span>&nbsp;<em>B</em>&nbsp;<span>from</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-int-cast'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POINTER_TYPE_MISMATCH": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-type-mismatch",
    "name": "Published Standards/SciTools' Recommended Checks/Pointer Type Mismatch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-type-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>In a conditional ternary operator, be consistent with the types of the 2 possible resulting expressions when at least one is a pointer. This may be done by type casting.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 37%'><col style='width: 63%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pointer type mismatch</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-type-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_POTENTIALLY_EVALUATED_EXPRESSION": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "potentially-evaluated-expression",
    "name": "Published Standards/SciTools' Recommended Checks/Potentially Evaluated Expression",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpotentially-evaluated-expression</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have side effects in the expression of the <code>typeid</code> operator. This could be directly changing memory or calling a function that does so.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression with side effects will be evaluated despite being used as an operand to ‘typeid’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpotentially-evaluated-expression'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_PRAGMA_ONCE_OUTSIDE_HEADER": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pragma-once-outside-header",
    "name": "Published Standards/SciTools' Recommended Checks/Pragma once Outside Header",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpragma-once-outside-header</p>",
        "<p><b>Summary</b></p>",
        "<p>A main file shouldn't be included, so <code>#pragma once</code> shouldn't be necessary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma once in main file</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-once-outside-header'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_QUALIFIED_VOID_RETURN_TYPE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "qualified-void-return-type",
    "name": "Published Standards/SciTools' Recommended Checks/Qualified Void Return Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wqualified-void-return-type</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>void</code> type should not have qualifiers like <code>const</code>, <code>volatile</code>, or <code>strict</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function cannot return qualified void type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wqualified-void-return-type'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_REDECLARED_CLASS_MEMBER": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "redeclared-class-member",
    "name": "Published Standards/SciTools' Recommended Checks/Re-Declared Class Member",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wredeclared-class-member</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not declare members of a class multiple times.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>class member cannot be redeclared</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredeclared-class-member'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_REDUNDANT_CONSTEVAL_IF": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "redundant-consteval-if",
    "name": "Published Standards/SciTools' Recommended Checks/Redundant Consteval If",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wredundant-consteval-if</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>if consteval</code> statement is used to see if a <code>constexpr</code> function is being called in a constant expression context. There is no need for nesting them within each other, or within a <code>consteval</code> function.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 61%'><col style='width: 19%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>consteval if is always true in an</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>unevaluated</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>immediate</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>context</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-consteval-if'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_REINTERPRET_BASE_CLASS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "reinterpret-base-class",
    "name": "Published Standards/SciTools' Recommended Checks/Reinterpret Base Class",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreinterpret-base-class</p>",
        "<p><b>Summary</b></p>",
        "<p>Casting with <code>reinterpret_cast</code> to/from a base class works differently from <code>static_cast</code> and the class instance may not work as intended.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 21%'><col style='width: 6%'><col style='width: 18%'><col style='width: 6%'><col style='width: 10%'><col style='width: 12%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘reinterpret_cast’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>from</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>to</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>class</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>to</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>from</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>its</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>virtual base</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>base at non-zero offset</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>behaves differently from ‘static_cast’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreinterpret-base-class'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_REORDER_INIT_LIST": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "reorder-init-list",
    "name": "Published Standards/SciTools' Recommended Checks/Reorder Initializer List",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreorder-init-list</p>",
        "<p><b>Summary</b></p>",
        "<p>The order of data members in the initializer list and declarations should be consistent. They are initialized in the order of the declarations, so the initializer list should show this.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ requires field designators to be specified in declaration order; field</span>&nbsp;<em>B</em>&nbsp;<span>will be initialized after field</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder-init-list'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_RETURN_STACK_ADDRESS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "return-stack-address",
    "name": "Published Standards/SciTools' Recommended Checks/Return Stack Address",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreturn-stack-address</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not return an address/reference to something that is local/temporary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>returning address of label, which is local</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 45%'><col style='width: 21%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>returning</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>address of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference to</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>local temporary object</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 14%'><col style='width: 14%'><col style='width: 30%'><col style='width: 15%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>address of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference to</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>stack memory associated with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>local variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>returned</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-stack-address'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_RETURN_TYPE": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "return-type",
    "name": "Published Standards/SciTools' Recommended Checks/Return Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreturn-type</p>",
        "<p><b>Summary</b></p>",
        "<p>Non-void functions should always return something of the expected type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 19%'><col style='width: 23%'><col style='width: 58%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>void function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>void method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;<span>should not return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 37%'><col style='width: 16%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>non-void</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;<span>should return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void coroutine does not return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void function does not return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void lambda does not return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void coroutine does not return a value in all control paths</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void function does not return a value in all control paths</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void lambda does not return a value in all control paths</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 37%'><col style='width: 16%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>non-void</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;<span>should return a value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_RETURN_TYPE_C_LINKAGE": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "return-type-c-linkage",
    "name": "Published Standards/SciTools' Recommended Checks/Return Type C Linkage",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreturn-type-c-linkage</p>",
        "<p><b>Summary</b></p>",
        "<p>Functions that have C-linkage should return complete types which do not have methods.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has C-linkage specified, but returns user-defined type</span>&nbsp;<em>B</em>&nbsp;<span>which is incompatible with C</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has C-linkage specified, but returns incomplete type</span>&nbsp;<em>B</em>&nbsp;<span>which could be incompatible with C</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type-c-linkage'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SELF_ASSIGN_FIELD": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "self-assign-field",
    "name": "Published Standards/SciTools' Recommended Checks/Self Assign Field",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wself-assign-field</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not assign a data member to itself.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 48%'><col style='width: 27%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>assigning</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to itself</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-field'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SHIFT_COUNT_NEGATIVE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-count-negative",
    "name": "Published Standards/SciTools' Recommended Checks/Shift Count Negative",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-count-negative</p>",
        "<p><b>Summary</b></p>",
        "<p>The right operand of a bitshift operation should not be negative</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>shift count is negative</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-negative'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SHIFT_COUNT_OVERFLOW": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-count-overflow",
    "name": "Published Standards/SciTools' Recommended Checks/Shift Count Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-count-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>The right operand of a bitshift operation should be less than the width of the type of the left operand</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>shift count &gt;= width of type</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SHIFT_NEGATIVE_VALUE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-negative-value",
    "name": "Published Standards/SciTools' Recommended Checks/Shift Negative Value",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-negative-value</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not bitshift if the left operand is negative</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>shifting a negative signed value is undefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-negative-value'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SHIFT_OP_PARENTHESES": {
    "tags": [ "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-op-parentheses",
    "name": "Published Standards/SciTools' Recommended Checks/Shift Operator Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-op-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>When using a bitshift opereator near other operators, use parentheses for clarity</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>operator ‘</span><em>A</em><span>’ has lower precedence than ‘</span><em>B</em><span>’; ‘</span><em>B</em><span>’ will be evaluated first</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-op-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SHIFT_OVERFLOW": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-overflow",
    "name": "Published Standards/SciTools' Recommended Checks/Shift Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not bitshift too much (right operand) when the size of the left operand is too small</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>signed shift result (</span><em>A</em><span>) requires</span>&nbsp;<em>B</em>&nbsp;<span>bits to represent, but</span>&nbsp;<em>C</em>&nbsp;<span>only has</span>&nbsp;<em>D</em>&nbsp;<span>bits</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SINGLE_BIT_BITFIELD_CONSTANT_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "single-bit-bitfield-constant-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Single Bit Bitfield Constant Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsingle-bit-bitfield-constant-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>In a struct, truncation occurs when assigning a value too large for the bit-field width constraint.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit truncation from</span>&nbsp;<em>C</em>&nbsp;<span>to bit-field changes value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-constant-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SIZEOF_ARRAY_ARGUMENT": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-array-argument",
    "name": "Published Standards/SciTools' Recommended Checks/Sizeof Array Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-array-argument</p>",
        "<p><b>Summary</b></p>",
        "<p>Sizeof on array function parameter may return unexpected value</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>sizeof on array function parameter will return size of</span>&nbsp;<em>A</em>&nbsp;<span>instead of</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-argument'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SIZEOF_ARRAY_DECAY": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-array-decay",
    "name": "Published Standards/SciTools' Recommended Checks/Sizeof Array Decay",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-array-decay</p>",
        "<p><b>Summary</b></p>",
        "<p>Sizeof on pointer operation may return unexpected value</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>sizeof on pointer operation will return size of</span>&nbsp;<em>A</em>&nbsp;<span>instead of</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-decay'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SIZEOF_ARRAY_DIV": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-array-div",
    "name": "Published Standards/SciTools' Recommended Checks/Sizeof Array Division",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-array-div</p>",
        "<p><b>Summary</b></p>",
        "<p>Expression does not compute the number of elements in this array</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression does not compute the number of elements in this array; element type is</span>&nbsp;<em>A</em><span>, not</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-div'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SIZEOF_POINTER_DIV": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-pointer-div",
    "name": "Published Standards/SciTools' Recommended Checks/Sizeof Pointer Division",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-pointer-div</p>",
        "<p><b>Summary</b></p>",
        "<p>Size of the pointer will be returned, not the size of the array itself</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will return the size of the pointer, not the array itself</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-div'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SIZEOF_POINTER_MEMACCESS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-pointer-memaccess",
    "name": "Published Standards/SciTools' Recommended Checks/Sizeof Pointer Memory Access",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-pointer-memaccess</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use <code>sizeof</code> on a pointer when you should size of the entire struct, array, etc.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ call operates on objects of type</span>&nbsp;<em>B</em>&nbsp;<span>while the size is based on a different type</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 63%'><col style='width: 8%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument to ‘sizeof’ in</span>&nbsp;<em>A</em>&nbsp;<span>call is the same pointer type</span>&nbsp;<em>B</em>&nbsp;<span>as the</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>destination</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>source</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; expected</span>&nbsp;<em>D</em>&nbsp;<span>or an explicit length</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-memaccess'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_STATIC_INLINE_EXPLICIT_INSTANTIATION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "static-inline-explicit-instantiation",
    "name": "Published Standards/SciTools' Recommended Checks/Static Inline Explicit Instantiation",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstatic-inline-explicit-instantiation</p>",
        "<p><b>Summary</b></p>",
        "<p>Static inline explicit instantiation</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 16%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>static</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>inline</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ keyword on explicit template instantiation</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-inline-explicit-instantiation'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_STATIC_LOCAL_IN_INLINE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "static-local-in-inline",
    "name": "Published Standards/SciTools' Recommended Checks/Static Local in Inline",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstatic-local-in-inline</p>",
        "<p><b>Summary</b></p>",
        "<p>Non-constant static local variable in inline function may be different in different files</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-constant static local variable in inline function may be different in different files</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-local-in-inline'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_STATIC_SELF_INIT": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "static-self-init",
    "name": "Published Standards/SciTools' Recommended Checks/Static Self Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstatic-self-init</p>",
        "<p><b>Summary</b></p>",
        "<p>Static variable suspiciously used within its own initialization</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>static variable</span>&nbsp;<em>A</em>&nbsp;<span>is suspiciously used within its own initialization</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-self-init'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_STRING_COMPARE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "string-compare",
    "name": "Published Standards/SciTools' Recommended Checks/String Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstring-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Result of the string comparison is unspecified</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 16%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison against</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a string literal</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@encode</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is unspecified (use an explicit string comparison function instead)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-compare'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_STRING_PLUS_CHAR": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "string-plus-char",
    "name": "Published Standards/SciTools' Recommended Checks/String Plus Char",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstring-plus-char</p>",
        "<p><b>Summary</b></p>",
        "<p>Adding char to a string pointer does not append to the string</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>adding</span>&nbsp;<em>A</em>&nbsp;<span>to a string pointer does not append to the string</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-char'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_STRING_PLUS_INT": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "string-plus-int",
    "name": "Published Standards/SciTools' Recommended Checks/String Plus Int",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstring-plus-int</p>",
        "<p><b>Summary</b></p>",
        "<p>Adding int to a string does not append to the string</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>adding</span>&nbsp;<em>A</em>&nbsp;<span>to a string does not append to the string</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-int'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_STRLCPY_STRLCAT_SIZE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "strlcpy-strlcat-size",
    "name": "Published Standards/SciTools' Recommended Checks/Strlcpy Strlcat Size",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstrlcpy-strlcat-size</p>",
        "<p><b>Summary</b></p>",
        "<p>Size argument in strlcpy or strlcat should be size of the destination, not size of the source</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>size argument in</span>&nbsp;<em>A</em>&nbsp;<span>call appears to be size of the source; expected the size of the destination</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrlcpy-strlcat-size'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_STRNCAT_SIZE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "strncat-size",
    "name": "Published Standards/SciTools' Recommended Checks/Strncat Size",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstrncat-size</p>",
        "<p><b>Summary</b></p>",
        "<p>Incorrect values to the size argument to strncat</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the value of the size argument in ‘strncat’ is too large, might lead to a buffer overflow</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>size argument in ‘strncat’ call appears to be size of the source</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the value of the size argument to ‘strncat’ is wrong</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrncat-size'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SWITCH": {
    "tags": [ "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "switch",
    "name": "Published Standards/SciTools' Recommended Checks/Switch Statements",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wswitch</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have a number in a case statement that is too large for the switch condition type. If the switch type is an enum, then list all of the enumerator values and not invalid values.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overflow converting case value to switch condition type (</span><em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 12%'><col style='width: 88%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration value</span>&nbsp;<em>B</em>&nbsp;<span>not handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration values</span>&nbsp;<em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em>&nbsp;<span>not handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration values</span>&nbsp;<em>B</em><span>,</span>&nbsp;<em>C</em><span>, and</span>&nbsp;<em>D</em>&nbsp;<span>not handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>A</em>&nbsp;<span>enumeration values not handled in switch:</span>&nbsp;<em>B</em><span>,</span>&nbsp;<em>C</em><span>,</span>&nbsp;<em>D</em><span>…</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>case value not in enumerated type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_SWITCH_BOOL": {
    "tags": [ "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "switch-bool",
    "name": "Published Standards/SciTools' Recommended Checks/Switch Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wswitch-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have a boolean in a switch condition. Instead, use the boolean in an if condition.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>switch condition has boolean value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch-bool'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TAUTOLOGICAL_CONSTANT_COMPARE": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tautological-constant-compare",
    "name": "Published Standards/SciTools' Recommended Checks/Tautological Constant Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-constant-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert types or compare if the result is always the same</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>converting the result of ‘?:’ with integer constants to a boolean always evaluates to ‘true’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 85%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>converting the result of ‘&lt;&lt;’ to a boolean always evaluates to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>false</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 27%'><col style='width: 18%'><col style='width: 12%'><col style='width: 22%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constant</span>&nbsp;<em>A</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>expression of type</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>boolean expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>E</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-compare'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TAUTOLOGICAL_CONSTANT_OUT_OF_RANGE_COMPARE": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tautological-constant-out-of-range-compare",
    "name": "Published Standards/SciTools' Recommended Checks/Tautological Constant Out of Range Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-constant-out-of-range-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not do a range comparison (less-than, greater-than, etc.) if the result is always the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 27%'><col style='width: 18%'><col style='width: 12%'><col style='width: 22%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constant</span>&nbsp;<em>A</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>expression of type</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>boolean expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>E</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-out-of-range-compare'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TAUTOLOGICAL_POINTER_COMPARE": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tautological-pointer-compare",
    "name": "Published Standards/SciTools' Recommended Checks/Tautological Pointer Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-pointer-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of attributes like <code>nonnull</code> and <code>returns_nonnull</code>, it is not necessary to compare these expressions with the null pointer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 25%'><col style='width: 10%'><col style='width: 22%'><col style='width: 9%'><col style='width: 15%'><col style='width: 7%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of nonnull</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function call</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>not</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>equal to a null pointer is ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ on first encounter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 25%'><col style='width: 10%'><col style='width: 24%'><col style='width: 10%'><col style='width: 22%'><col style='width: 8%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>address of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>array</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>not</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>equal to a null pointer is always</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-pointer-compare'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TAUTOLOGICAL_UNDEFINED_COMPARE": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tautological-undefined-compare",
    "name": "Published Standards/SciTools' Recommended Checks/Tautological Undefined Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-undefined-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>References and <code>this</code> cannot be null in well-defined C++ code, so do not compare them with null.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 90%'><col style='width: 10%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 89%'><col style='width: 11%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘this’ pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-undefined-compare'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TENTATIVE_DEFINITION_INCOMPLETE_TYPE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tentative-definition-incomplete-type",
    "name": "Published Standards/SciTools' Recommended Checks/Tentative Definition Incomplete Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtentative-definition-incomplete-type</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not define a variable before the type is completely defined</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>tentative definition of variable with internal linkage has incomplete non-array type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtentative-definition-incomplete-type'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TRIGRAPHS": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "trigraphs",
    "name": "Published Standards/SciTools' Recommended Checks/Trigraphs",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtrigraphs</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use trigraphs, which are certain combinations of 3 characters that start with 2 question marks</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>trigraph converted to ‘</span><em>A</em><span>’ character</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>trigraph ends block comment</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>trigraph ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignored trigraph would end block comment</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtrigraphs'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TYPE_SAFETY": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "type-safety",
    "name": "Published Standards/SciTools' Recommended Checks/Type Safety",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtype-safety</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function has a type tag attribute, then use it properly. Type tags allow for type safety checks that can't be enforced by the C type system.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>specified</span>&nbsp;<em>A</em>&nbsp;<span>type tag requires a null pointer</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 77%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument type</span>&nbsp;<em>A</em>&nbsp;<span>doesn’t match specified</span>&nbsp;<em>B</em>&nbsp;<span>type tag</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>that requires</span>&nbsp;<em>D</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>this type tag was not designed to be used with this function</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtype-safety'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TYPEDEF_REDEFINITION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "typedef-redefinition",
    "name": "Published Standards/SciTools' Recommended Checks/Typedef Redefinition",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtypedef-redefinition</p>",
        "<p><b>Summary</b></p>",
        "<p>Redefinition of a typedef is a C11 feature.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redefinition of typedef</span>&nbsp;<em>A</em>&nbsp;<span>is a C11 feature</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtypedef-redefinition'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_TYPENAME_MISSING": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "typename-missing",
    "name": "Published Standards/SciTools' Recommended Checks/Typename Missing",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtypename-missing</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of the ambiguity of templates, place the <code>typename</code> keyword before types when referring to a type of a template</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing ‘typename’ prior to dependent type name ‘</span><em>A</em><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtypename-missing'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNDEFINED_BOOL_CONVERSION": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "undefined-bool-conversion",
    "name": "Published Standards/SciTools' Recommended Checks/Undefined Bool Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-bool-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not compare a reference to null, because it cannot be null in well-defined C++ code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘this’ pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-bool-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNDEFINED_INLINE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "undefined-inline",
    "name": "Published Standards/SciTools' Recommended Checks/Undefined Inline",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-inline</p>",
        "<p><b>Summary</b></p>",
        "<p>If an inline function is called, then it should be defined.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline function</span>&nbsp;<em>A</em>&nbsp;<span>is not defined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-inline'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNDEFINED_INTERNAL": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "undefined-internal",
    "name": "Published Standards/SciTools' Recommended Checks/Undefined Internal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-internal</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function/variable with internal linkage is called/used, then it should be defined</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 20%'><col style='width: 17%'><col style='width: 63%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>has internal linkage but is not defined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNDEFINED_VAR_TEMPLATE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "undefined-var-template",
    "name": "Published Standards/SciTools' Recommended Checks/Undefined Var Template",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-var-template</p>",
        "<p><b>Summary</b></p>",
        "<p>A member variable template should have a definition.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>instantiation of variable</span>&nbsp;<em>A</em>&nbsp;<span>required here, but no definition is available</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-var-template'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNEVALUATED_EXPRESSION": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unevaluated-expression",
    "name": "Published Standards/SciTools' Recommended Checks/Unevaluated Expression",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunevaluated-expression</p>",
        "<p><b>Summary</b></p>",
        "<p>If an expression may not be evaluated, then do not have side effects, such as assignments or modifications of a variable</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression with side effects has no effect in an unevaluated context</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunevaluated-expression'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNGUARDED_AVAILABILITY_NEW": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unguarded-availability-new",
    "name": "Published Standards/SciTools' Recommended Checks/Unguarded Availability New",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunguarded-availability-new</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of the <code>availability</code> attribute, do not use things that are unavailable for the target system</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is only available on</span>&nbsp;<em>B</em>&nbsp;<em>C</em>&nbsp;<span>or newer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability-new'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNICODE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unicode",
    "name": "Published Standards/SciTools' Recommended Checks/Unicode Escape Sequences",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunicode</p>",
        "<p><b>Summary</b></p>",
        "<p>When using universal character names, escape sequences correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty delimited universal character name; treating as ‘' ‘</span><em>A</em><span>’ ‘{‘ ‘}’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incomplete delimited universal character name; treating as ‘' ‘</span><em>A</em><span>’ ‘{‘ identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incomplete universal character name; treating as ‘' followed by identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>\\</span><em>A</em>&nbsp;<span>used with no following hex digits; treating as ‘' followed by identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>universal character name refers to a surrogate character</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>universal character names are only valid in C99 or C++; treating as ‘' followed by identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>universal character names are only valid in C99 or C++</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNICODE_HOMOGLYPH": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unicode-homoglyph",
    "name": "Published Standards/SciTools' Recommended Checks/Unicode Homoglyph",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunicode-homoglyph</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for Unicode character homoglyphs being treated as identifier characters rather than symbols</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>treating Unicode character &lt;U+</span><em>A</em><span>&gt; as identifier character rather than as ‘</span><em>B</em><span>’ symbol</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-homoglyph'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNICODE_WHITESPACE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unicode-whitespace",
    "name": "Published Standards/SciTools' Recommended Checks/Unicode Whitespace",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunicode-whitespace</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for Unicode characters being treated as whitespace</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>treating Unicode character as whitespace</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-whitespace'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNICODE_ZERO_WIDTH": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unicode-zero-width",
    "name": "Published Standards/SciTools' Recommended Checks/Unicode Zero Width",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunicode-zero-width</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have identifiers with zero-width unicode characters. They may not show in some editors.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>identifier contains Unicode character &lt;U+</span><em>A</em><span>&gt; that is invisible in some environments</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-zero-width'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNKNOWN_DIRECTIVES": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unknown-directives",
    "name": "Published Standards/SciTools' Recommended Checks/Unknown Directives",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-directives</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use preprocessing directives that are available and spelled correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 53%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid preprocessing directive</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>, did you mean ‘#</span><em>B</em><span>’?</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-directives'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNKNOWN_ESCAPE_SEQUENCE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unknown-escape-sequence",
    "name": "Published Standards/SciTools' Recommended Checks/Unknown Escape Sequence",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-escape-sequence</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use escape sequences that are available</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown escape sequence ‘\\</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-escape-sequence'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNQUALIFIED_STD_CAST_CALL": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unqualified-std-cast-call",
    "name": "Published Standards/SciTools' Recommended Checks/Unqualified Standard Cast Call",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunqualified-std-cast-call</p>",
        "<p><b>Summary</b></p>",
        "<p>When calling functions like <code>std::move</code>, remember to do something with the result, such as an assignment</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unqualified call to ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunqualified-std-cast-call'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNSEQUENCED": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unsequenced",
    "name": "Published Standards/SciTools' Recommended Checks/Unsequenced Modifications",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsequenced</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unsequenced modification(s)</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple unsequenced modifications to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unsequenced modification and access to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsequenced'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNSUPPORTED_AVAILABILITY_GUARD": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unsupported-availability-guard",
    "name": "Published Standards/SciTools' Recommended Checks/Unsupported Availability Guard",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-availability-guard</p>",
        "<p><b>Summary</b></p>",
        "<p>Use the correct keyword for your build system when using <code>@available</code> or <code>__builtin_available</code></p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 15%'><col style='width: 20%'><col style='width: 34%'><col style='width: 20%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>@available</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>__builtin_available</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>does not guard availability here; use if (</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>@available</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>__builtin_available</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>) instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-availability-guard'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNSUPPORTED_FRIEND": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unsupported-friend",
    "name": "Published Standards/SciTools' Recommended Checks/Unsupported Friend",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-friend</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not make friend declarations that are unsupported</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dependent nested name specifier ‘</span><em>A</em><span>’ for friend template declaration is not supported; ignoring this friend declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dependent nested name specifier ‘</span><em>A</em><span>’ for friend class declaration is not supported; turning off access control for</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-friend'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNUSED_COMPARISON": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unused-comparison",
    "name": "Published Standards/SciTools' Recommended Checks/Unused Comparison",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-comparison</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused comparison result</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 28%'><col style='width: 25%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>equality</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>inequality</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>relational</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>three-way</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>comparison result unused</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-comparison'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNUSED_RESULT": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unused-result",
    "name": "Published Standards/SciTools' Recommended Checks/Unused Result",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-result</p>",
        "<p><b>Summary</b></p>",
        "<p>Result is unused.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring return value of function declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring return value of function declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-result'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNUSED_VALUE": {
    "tags": [ "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unused-value",
    "name": "Published Standards/SciTools' Recommended Checks/Unused Value",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-value</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused value</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring return value of function declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>left operand of comma operator has no effect</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring temporary created by a constructor declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring temporary created by a constructor declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>container access result unused - container access should not be used for side effects</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression result unused</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression result unused; should this cast be to ‘void’?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-value'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_UNUSED_VOLATILE_LVALUE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unused-volatile-lvalue",
    "name": "Published Standards/SciTools' Recommended Checks/Unused Volatile Lvalue",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-volatile-lvalue</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused volatile lvalues</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression result unused; assign into a variable to force a volatile load</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-volatile-lvalue'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_USER_DEFINED_LITERALS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "user-defined-literals",
    "name": "Published Standards/SciTools' Recommended Checks/User Defined Literals",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wuser-defined-literals</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for user-defined literals</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 67%'><col style='width: 33%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>user-defined literal suffixes not starting with ‘_’ are reserved</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; no literal will invoke this operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-literals'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_VARARGS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "varargs",
    "name": "Published Standards/SciTools' Recommended Checks/Variadic Arguments",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvarargs</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks validity of arguments given to 'va_start' and 'va_arg'</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>second argument to ‘va_start’ is not the last named parameter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>second argument to ‘va_arg’ is of promotable type</span>&nbsp;<em>A</em><span>; this va_arg has undefined behavior because arguments will be promoted to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 31%'><col style='width: 37%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>an object that undergoes default argument promotion</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an object of reference type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a parameter declared with the ‘register’ keyword</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to ‘va_start’ has undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvarargs'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_VEXING_PARSE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "vexing-parse",
    "name": "Published Standards/SciTools' Recommended Checks/Vexing Parse Occurrences",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvexing-parse</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for ambiguous/vexing parse occurrences</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty parentheses interpreted as a function declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parentheses were disambiguated as a function declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parentheses were disambiguated as redundant parentheses around declaration of variable named</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvexing-parse'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_VISIBILITY": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "visibility",
    "name": "Published Standards/SciTools' Recommended Checks/Visibility of Declarations",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvisibility</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks that a declaration or redeclaration will be visible outside a given function</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration of</span>&nbsp;<em>A</em>&nbsp;<span>will not be visible outside of this function</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redefinition of</span>&nbsp;<em>A</em>&nbsp;<span>will not be visible outside of this function</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvisibility'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_VOID_POINTER_TO_ENUM_CAST": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "void-pointer-to-enum-cast",
    "name": "Published Standards/SciTools' Recommended Checks/Void Pointer to Enum Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvoid-pointer-to-enum-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not cast from a pointer to an enum</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to smaller integer type</span>&nbsp;<em>B</em>&nbsp;<span>from</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-enum-cast'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_VOID_POINTER_TO_INT_CAST": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "void-pointer-to-int-cast",
    "name": "Published Standards/SciTools' Recommended Checks/Void Pointer to Int Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvoid-pointer-to-int-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not cast from a pointer to an int</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to smaller integer type</span>&nbsp;<em>B</em>&nbsp;<span>from</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-int-cast'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_VOID_PTR_DEREFERENCE": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "void-ptr-dereference",
    "name": "Published Standards/SciTools' Recommended Checks/Void Pointer Dereference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvoid-ptr-dereference</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not dereference a void pointer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ does not allow indirection on operand of type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-ptr-dereference'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_WRITABLE_STRINGS": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "writable-strings",
    "name": "Published Standards/SciTools' Recommended Checks/Writable Strings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wwritable-strings</p>",
        "<p><b>Summary</b></p>",
        "<p>Avoid conversion from string literal per ISO C++11</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++11 does not allow conversion from string literal to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wwritable-strings'>LLVM Documentation</a></p>"
      ]
    }
  },

  "RECOMMENDED_CPP_WARN_XOR_USED_AS_POW": {
    "tags": [ "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "xor-used-as-pow",
    "name": "Published Standards/SciTools' Recommended Checks/Xor Used as Power",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wxor-used-as-pow</p>",
        "<p><b>Summary</b></p>",
        "<p>XOR and Pow use the same symbol '^' and the intended use can be ambiguous.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of ‘</span><em>A</em><span>’ is</span>&nbsp;<em>B</em><span>; did you mean exponentiation?</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of ‘</span><em>A</em><span>’ is</span>&nbsp;<em>B</em><span>; did you mean ‘</span><em>C</em><span>’?</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of ‘</span><em>A</em><span>’ is</span>&nbsp;<em>B</em><span>; did you mean ‘</span><em>C</em><span>’ (</span><em>D</em><span>)?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wxor-used-as-pow'>LLVM Documentation</a></p>"
      ]
    }
  }
}
