{
  "CPP_WARN_PRAGMA_MESSAGES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "#pragma-messages",
    "name": "Published Standards/Compiler Warnings/Preprocessor #Pragma Messages",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -W#pragma-messages</p>",
        "<p><b>Summary</b></p>",
        "<p>Custom message from the developer with the #pragma preprocessor directive.</p>",
        "<p>Unlike the #warning and #error directives, these pragmas can be embedded in preprocessor macros using _Pragma</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<p>The text of this diagnostic is not controlled by Clang.</p>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#w-pragma-messages'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_WARNINGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "#warnings",
    "name": "Published Standards/Compiler Warnings/Preprocessor #Warnings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -W#warnings</p>",
        "<p><b>Summary</b></p>",
        "<p>Custom message from the developer with the #warning preprocessor directive.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<p>The text of this diagnostic is not controlled by Clang.</p>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#w-warnings'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ABSOLUTE_VALUE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "absolute-value",
    "name": "Published Standards/Compiler Warnings/Absolute Value Proper Usage",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wabsolute-value</p>",
        "<p><b>Summary</b></p>",
        "<p>Type of argument is checked for absolute value function.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>absolute value function</span>&nbsp;<em>A</em>&nbsp;<span>given an argument of type</span>&nbsp;<em>B</em>&nbsp;<span>but has parameter of type</span>&nbsp;<em>C</em>&nbsp;<span>which may cause truncation of value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 42%'><col style='width: 12%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>taking the absolute value of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>array</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>B</em>&nbsp;<span>is suspicious</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>taking the absolute value of unsigned type</span>&nbsp;<em>A</em>&nbsp;<span>has no effect</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 21%'><col style='width: 11%'><col style='width: 46%'><col style='width: 11%'><col style='width: 10%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>integer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>floating point</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>complex</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>absolute value function</span>&nbsp;<em>A</em>&nbsp;<span>when argument is of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>integer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>floating point</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>complex</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wabsolute-value'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ABSTRACT_FINAL_CLASS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "abstract-final-class",
    "name": "Published Standards/Compiler Warnings/Abstract Classes Should Not Be Final or Sealed",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wabstract-final-class</p>",
        "<p><b>Summary</b></p>",
        "<p>Abstract classes should not also be final or sealed.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 66%'><col style='width: 20%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>abstract class is marked ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>final</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sealed</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wabstract-final-class'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ABSTRACT_VBASE_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "abstract-vbase-init",
    "name": "Published Standards/Compiler Warnings/No Useless Init for Abstract Virtual Base",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wabstract-vbase-init</p>",
        "<p><b>Summary</b></p>",
        "<p>Initializer for virtual base class A of abstract class B will never be used.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializer for virtual base class</span>&nbsp;<em>A</em>&nbsp;<span>of abstract class</span>&nbsp;<em>B</em>&nbsp;<span>will never be used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wabstract-vbase-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ADDRESS_OF_PACKED_MEMBER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "address-of-packed-member",
    "name": "Published Standards/Compiler Warnings/Do Not Take the Address of Packed Members",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Waddress-of-packed-member</p>",
        "<p><b>Summary</b></p>",
        "<p>Taking address of packed member A of class or structure B may result in an unaligned pointer value.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>taking address of packed member</span>&nbsp;<em>A</em>&nbsp;<span>of class or structure</span>&nbsp;<em>B</em>&nbsp;<span>may result in an unaligned pointer value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-packed-member'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ADDRESS_OF_TEMPORARY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "address-of-temporary",
    "name": "Published Standards/Compiler Warnings/Do Not Take the Address of Temporary Objects",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Waddress-of-temporary</p>",
        "<p><b>Summary</b></p>",
        "<p>Taking the address of a temporary object may result in a bad address.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>taking the address of a temporary object of type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-temporary'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AIX_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "aix-compat",
    "name": "Published Standards/Compiler Warnings/IBM AIX Compatibility with Byte Alignment",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Waix-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Ensure compatability with IBM AIX systems with proper byte alignment.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>alignment of 16 bytes for a struct member is not binary compatible with IBM XL C/C++ for AIX 16.1.0 or older</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma align(packed) may not be compatible with objects generated with AIX XL C/C++</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#waix-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ALIGN_MISMATCH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "align-mismatch",
    "name": "Published Standards/Compiler Warnings/Match Byte Alignment of Arguments",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Walign-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>Match byte alignment of arguments to that of parameters.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 63%'><col style='width: 17%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing</span>&nbsp;<em>A</em><span>-byte aligned argument to</span>&nbsp;<em>B</em><span>-byte aligned parameter</span>&nbsp;<em>C</em></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of</span>&nbsp;<em>E</em></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>may result in an unaligned pointer access</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#walign-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ALLOCA": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "alloca",
    "name": "Published Standards/Compiler Warnings/Do Not Use Certain Allocation Functions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Walloca</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not allocate memory that is automatically freed with certain alloca functions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of function</span>&nbsp;<em>A</em>&nbsp;<span>is discouraged; there is no way to check for failure but failure may still occur, resulting in a possibly exploitable security vulnerability</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#walloca'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ALLOCA_WITH_ALIGN_ALIGNOF": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "alloca-with-align-alignof",
    "name": "Published Standards/Compiler Warnings/Correct Usage of Second Argument of Certain Allocation Functions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Walloca-with-align-alignof</p>",
        "<p><b>Summary</b></p>",
        "<p>The second argument of __builtin_alloca_with_align should be the alignment constraint, as a power of 2 in bits.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>second argument to __builtin_alloca_with_align is supposed to be in bits</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#walloca-with-align-alignof'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ALWAYS_INLINE_COROUTINE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "always-inline-coroutine",
    "name": "Published Standards/Compiler Warnings/Always Inline Coroutine Functions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Walways-inline-coroutine</p>",
        "<p><b>Summary</b></p>",
        "<p>Coroutine functions shall always be inlined.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>this coroutine may be split into pieces; not every piece is guaranteed to be inlined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#walways-inline-coroutine'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AMBIGUOUS_DELETE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "ambiguous-delete",
    "name": "Published Standards/Compiler Warnings/Ambiguous Delete",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wambiguous-delete</p>",
        "<p><b>Summary</b></p>",
        "<p>No 'operator delete' function will be invoked if initialization throws an exception.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple suitable</span>&nbsp;<em>A</em>&nbsp;<span>functions for</span>&nbsp;<em>B</em><span>; no ‘operator delete’ function will be invoked if initialization throws an exception</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-delete'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AMBIGUOUS_ELLIPSIS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "ambiguous-ellipsis",
    "name": "Published Standards/Compiler Warnings/Ambiguous Ellipsis",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wambiguous-ellipsis</p>",
        "<p><b>Summary</b></p>",
        "<p>…' in certain locations create a C-style varargs function.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 68%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’…’ in this location creates a C-style varargs function</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>, not a function parameter pack</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-ellipsis'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AMBIGUOUS_MACRO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "ambiguous-macro",
    "name": "Published Standards/Compiler Warnings/Ambiguous Macro",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wambiguous-macro</p>",
        "<p><b>Summary</b></p>",
        "<p>The result of the expansion of the macro may result in ambiguous code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ambiguous expansion of macro</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-macro'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AMBIGUOUS_MEMBER_TEMPLATE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "ambiguous-member-template",
    "name": "Published Standards/Compiler Warnings/Ambiguous Member Template",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wambiguous-member-template</p>",
        "<p><b>Summary</b></p>",
        "<p>When looking up a template member, use the class or struct name.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>lookup of</span>&nbsp;<em>A</em>&nbsp;<span>in member access expression is ambiguous; using member of</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-member-template'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AMBIGUOUS_REVERSED_OPERATOR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "ambiguous-reversed-operator",
    "name": "Published Standards/Compiler Warnings/Ambiguous Reversed Operator",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wambiguous-reversed-operator</p>",
        "<p><b>Summary</b></p>",
        "<p>ISO C++20 considers use of an overloaded operator (with other operand types) to be ambiguous despite there being a unique best viable function with non-reversed arguments</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 85%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++20 considers use of overloaded operator ‘</span><em>A</em><span>’ (with operand types</span>&nbsp;<em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em><span>) to be ambiguous despite there being a unique best viable function</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>with non-reversed arguments</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-reversed-operator'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ANALYZER_INCOMPATIBLE_PLUGIN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "analyzer-incompatible-plugin",
    "name": "Published Standards/Compiler Warnings/Analyzer Incompatible Plugin",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wanalyzer-incompatible-plugin</p>",
        "<p><b>Summary</b></p>",
        "<p>Checker plugins may not be compatible with the version of the analyzer</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>checker plugin ‘</span><em>A</em><span>’ is not compatible with this version of the analyzer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wanalyzer-incompatible-plugin'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ANON_ENUM_ENUM_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "anon-enum-enum-conversion",
    "name": "Published Standards/Compiler Warnings/Anon-Enum Enum Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wanon-enum-enum-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>In operations and expressions, be consistent with enum types</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 20%'><col style='width: 21%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>arithmetic between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operation between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>comparison of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>conditional expression between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compound assignment of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>different enumeration types</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wanon-enum-enum-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ANONYMOUS_PACK_PARENS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "anonymous-pack-parens",
    "name": "Published Standards/Compiler Warnings/Anonymous Pack Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wanonymous-pack-parens</p>",
        "<p><b>Summary</b></p>",
        "<p>ISO C++11 requires a parenthesized pack declaration to have a name.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++11 requires a parenthesized pack declaration to have a name</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wanonymous-pack-parens'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARC_BRIDGE_CASTS_DISALLOWED_IN_NONARC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "arc-bridge-casts-disallowed-in-nonarc",
    "name": "Published Standards/Compiler Warnings/ARC (Automatic Reference Counting) Bridge Casts Disallowed in Non-ARC",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Warc-bridge-casts-disallowed-in-nonarc</p>",
        "<p><b>Summary</b></p>",
        "<p>Bridge casts have no effect when not using ARC.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ casts have no effect when not using ARC</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-bridge-casts-disallowed-in-nonarc'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARC_MAYBE_REPEATED_USE_OF_WEAK": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "arc-maybe-repeated-use-of-weak",
    "name": "Published Standards/Compiler Warnings/ARC Maybe Repeated Use of Weak",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Warc-maybe-repeated-use-of-weak</p>",
        "<p><b>Summary</b></p>",
        "<p>Weak variables, property, implicit property, or instance variables should not be accessed multiple times in a function, method, block, or lambda or it may be unpredictably set to nil; assign to a strong variable to keep the object alive.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 17%'><col style='width: 10%'><col style='width: 30%'><col style='width: 7%'><col style='width: 36%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>weak</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>property</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>implicit property</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>may be accessed multiple times in this</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>lambda</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>and may be unpredictably set to nil; assign to a strong variable to keep the object alive</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-maybe-repeated-use-of-weak'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARC_RETAIN_CYCLES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "arc-retain-cycles",
    "name": "Published Standards/Compiler Warnings/ARC Retain Cycles",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Warc-retain-cycles</p>",
        "<p><b>Summary</b></p>",
        "<p>Capturing an item strongly in this block is likely to lead to a retain cycle.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>capturing</span>&nbsp;<em>A</em>&nbsp;<span>strongly in this block is likely to lead to a retain cycle</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-retain-cycles'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARC_UNSAFE_RETAINED_ASSIGN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "arc-unsafe-retained-assign",
    "name": "Published Standards/Compiler Warnings/ARC Unsafe Retained Assign",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Warc-unsafe-retained-assign</p>",
        "<p><b>Summary</b></p>",
        "<p>This warning flags three different scenarios: 1. Assigning an array literal, dictionary literal, numeric literal, boxed expression, or block literal to a weak property or variable; object will be released after assignment. 2. Assigning retained object to a weak,or unsafe_unretained property or variable; object will be released after assignment. 3. assigning retained object to unsafe property; object will be released after assignment.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 28%'><col style='width: 16%'><col style='width: 18%'><col style='width: 11%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>assigning</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>array literal</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>dictionary literal</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>numeric literal</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>boxed expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>&lt;should not happen&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block literal</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to a weak</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>property</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; object will be released after assignment</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 39%'><col style='width: 17%'><col style='width: 4%'><col style='width: 12%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>assigning retained object to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>weak</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unsafe_unretained</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>property</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; object will be released after assignment</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>assigning retained object to unsafe property; object will be released after assignment</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warc-unsafe-retained-assign'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARGUMENT_OUTSIDE_RANGE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "argument-outside-range",
    "name": "Published Standards/Compiler Warnings/Argument Outside Range",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wargument-outside-range</p>",
        "<p><b>Summary</b></p>",
        "<p>Argument value outside of specified range of preprocessor function.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>argument value</span>&nbsp;<em>A</em>&nbsp;<span>is outside the valid range [</span><em>B</em><span>,</span>&nbsp;<em>C</em><span>]</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wargument-outside-range'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARGUMENT_UNDEFINED_BEHAVIOUR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "argument-undefined-behaviour",
    "name": "Published Standards/Compiler Warnings/Argument Undefined Behaviour",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wargument-undefined-behaviour</p>",
        "<p><b>Summary</b></p>",
        "<p>Argument value of preprocessor function will result in undefined behavior.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument value</span>&nbsp;<em>A</em>&nbsp;<span>will result in undefined behaviour</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wargument-undefined-behaviour'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARRAY_BOUNDS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "array-bounds",
    "name": "Published Standards/Compiler Warnings/Array Bounds",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Warray-bounds</p>",
        "<p><b>Summary</b></p>",
        "<p>Array index or array size is outside of the specified range.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 87%'><col style='width: 7%'><col style='width: 6%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array index</span>&nbsp;<em>A</em>&nbsp;<span>is past the end of the array (which contains</span>&nbsp;<em>B</em>&nbsp;<span>element</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 93%'><col style='width: 4%'><col style='width: 3%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array index</span>&nbsp;<em>A</em>&nbsp;<span>refers past the last possible element for an array in</span>&nbsp;<em>B</em><span>-bit address space containing</span>&nbsp;<em>C</em><span>-bit (</span><em>D</em><span>-byte) elements (max possible</span>&nbsp;<em>E</em>&nbsp;<span>element</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array index</span>&nbsp;<em>A</em>&nbsp;<span>is before the beginning of the array</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 93%'><col style='width: 4%'><col style='width: 3%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the pointer incremented by</span>&nbsp;<em>A</em>&nbsp;<span>refers past the last possible element for an array in</span>&nbsp;<em>B</em><span>-bit address space containing</span>&nbsp;<em>C</em><span>-bit (</span><em>D</em><span>-byte) elements (max possible</span>&nbsp;<em>E</em>&nbsp;<span>element</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 35%'><col style='width: 36%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array argument is too small;</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>contains</span>&nbsp;<em>A</em>&nbsp;<span>elements</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>is of size</span>&nbsp;<em>A</em></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>, callee requires at least</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARRAY_BOUNDS_POINTER_ARITHMETIC": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "array-bounds-pointer-arithmetic",
    "name": "Published Standards/Compiler Warnings/Array Bounds Pointer Arithmetic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Warray-bounds-pointer-arithmetic</p>",
        "<p><b>Summary</b></p>",
        "<p>Pointer arithmetic that results in a position outside of the array.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 88%'><col style='width: 6%'><col style='width: 6%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the pointer incremented by</span>&nbsp;<em>A</em>&nbsp;<span>refers past the end of the array (that contains</span>&nbsp;<em>B</em>&nbsp;<span>element</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the pointer decremented by</span>&nbsp;<em>A</em>&nbsp;<span>refers before the beginning of the array</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds-pointer-arithmetic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ARRAY_PARAMETER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings" ],
    "key": "array-parameter",
    "name": "Published Standards/Compiler Warnings/Array Parameter",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Warray-parameter</p>",
        "<p><b>Summary</b></p>",
        "<p>Size of array parameter is inconsistent.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument</span>&nbsp;<em>A</em>&nbsp;<span>of type</span>&nbsp;<em>B</em>&nbsp;<span>with mismatched bound</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#warray-parameter'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ASM_OPERAND_WIDTHS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "asm-operand-widths",
    "name": "Published Standards/Compiler Warnings/Assembly Operand Widths",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wasm-operand-widths</p>",
        "<p><b>Summary</b></p>",
        "<p>Value size is wider than the assembly operand width.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>value size does not match register size specified by the constraint and modifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wasm-operand-widths'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ASSIGN_ENUM": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "assign-enum",
    "name": "Published Standards/Compiler Warnings/Assign Enum",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wassign-enum</p>",
        "<p><b>Summary</b></p>",
        "<p>Value of enumerator constant outside of range of enumerator type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>integer constant not in range of enumerated type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wassign-enum'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ASSUME": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "assume",
    "name": "Published Standards/Compiler Warnings/Discarded Side Effects to __assume Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wassume</p>",
        "<p><b>Summary</b></p>",
        "<p>Side effects in arguments to functions like __assume are discarded.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the argument to</span>&nbsp;<em>A</em>&nbsp;<span>has side effects that will be discarded</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wassume'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ATOMIC_ACCESS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "atomic-access",
    "name": "Published Standards/Compiler Warnings/Atomic Access",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Watomic-access</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not read or write to members of an atomic struct or union.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>accessing a member of an atomic structure or union is undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-access'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ATOMIC_ALIGNMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "atomic-alignment",
    "name": "Published Standards/Compiler Warnings/Atomic Alignment",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Watomic-alignment</p>",
        "<p><b>Summary</b></p>",
        "<p>Atomic operation is misaligned or too large.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>misaligned atomic operation may incur significant performance penalty; the expected alignment (</span><em>A</em>&nbsp;<span>bytes) exceeds the actual alignment (</span><em>B</em>&nbsp;<span>bytes)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>large atomic operation may incur significant performance penalty; the access size (</span><em>A</em>&nbsp;<span>bytes) exceeds the max lock-free size (</span><em>B</em>&nbsp;&nbsp;<span>bytes)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-alignment'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ATOMIC_IMPLICIT_SEQ_CST": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "atomic-implicit-seq-cst",
    "name": "Published Standards/Compiler Warnings/Atomic Implicitly Sequentially-Consistent",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Watomic-implicit-seq-cst</p>",
        "<p><b>Summary</b></p>",
        "<p>Atomic operation is implicitly sequentially-consistent.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit use of sequentially-consistent atomic may incur stronger memory barriers than necessary</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-implicit-seq-cst'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ATOMIC_MEMORY_ORDERING": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "atomic-memory-ordering",
    "name": "Published Standards/Compiler Warnings/Atomic Memory Ordering",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Watomic-memory-ordering</p>",
        "<p><b>Summary</b></p>",
        "<p>Atomic operation requires a different memory order argument.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>memory order argument to atomic operation is invalid</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-memory-ordering'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AUTO_DISABLE_VPTR_SANITIZER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "auto-disable-vptr-sanitizer",
    "name": "Published Standards/Compiler Warnings/Auto Disable Virtual Pointer Sanitizer",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wauto-disable-vptr-sanitizer</p>",
        "<p><b>Summary</b></p>",
        "<p>If run-time type information isn't specificially enabled when compiling, vptr sanitization is also disabled.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicitly disabling vptr sanitizer because rtti wasn’t enabled</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-disable-vptr-sanitizer'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AUTO_STORAGE_CLASS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "auto-storage-class",
    "name": "Published Standards/Compiler Warnings/Auto Storage Class",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wauto-storage-class</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use the <code>auto</code> keyword</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘auto’ storage class specifier is not permitted in C++11, and will not be supported in future releases</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-storage-class'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AVAILABILITY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "availability",
    "name": "Published Standards/Compiler Warnings/Availability Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wavailability</p>",
        "<p><b>Summary</b></p>",
        "<p>Creates a warning if a declaration used with the availability attribute is unavailable. The availability attribute can be placed on declarations to describe the lifecycle of that declaration relative to operating system versions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘unavailable’ availability overrides all other availability information</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Fuchsia API Level prohibits specifying a minor or sub-minor version</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 66%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring availability attribute</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>on ‘+load’ method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>with constructor attribute</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>with destructor attribute</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>only ‘unavailable’ and ‘deprecated’ are supported for Swift availability</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown platform</span>&nbsp;<em>A</em>&nbsp;<span>in availability macro</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 19%'><col style='width: 7%'><col style='width: 41%'><col style='width: 7%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>feature cannot be</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introduced</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>deprecated</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>obsoleted</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in</span>&nbsp;<em>B</em>&nbsp;<span>version</span>&nbsp;<em>C</em>&nbsp;<span>before it was</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introduced</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>deprecated</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>obsoleted</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in version</span>&nbsp;<em>E</em><span>; attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use same version number separators ‘_’ or ‘.’; as in ‘major[.minor[.subminor]]’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>availability does not match previous declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 9%'><col style='width: 10%'><col style='width: 8%'><col style='width: 10%'><col style='width: 3%'><col style='width: 15%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>overriding</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>method</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introduced after</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>deprecated before</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>obsoleted before</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>the protocol method it implements</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>overridden method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>on</span>&nbsp;<em>B</em>&nbsp;<span>(</span><em>C</em>&nbsp;<span>vs.</span>&nbsp;<em>D</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 14%'><col style='width: 42%'><col style='width: 20%'><col style='width: 14%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>overriding</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>method cannot be unavailable on</span>&nbsp;<em>A</em>&nbsp;<span>when</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>the protocol method it implements</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>its overridden method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is available</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wavailability'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_AVR_RTLIB_LINKING_QUIRKS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "avr-rtlib-linking-quirks",
    "name": "Published Standards/Compiler Warnings/AVR RTLIB (Real-Time Library) Linking Quirks",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wavr-rtlib-linking-quirks</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings when when linking the real-time library rtlib for AVR microcontroller systems.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>support for linking stdlibs for microcontroller ‘</span><em>A</em><span>’ is not implemented</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no avr-libc installation can be found on the system, cannot link standard libraries</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>support for passing the data section address to the linker for microcontroller ‘</span><em>A</em><span>’ is not implemented</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no target microcontroller specified on command line, cannot link standard libraries, please pass -mmcu=&lt;mcu name&gt;</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>standard library not linked and so no interrupt vector table or compiler runtime routines will be linked</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wavr-rtlib-linking-quirks'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BACKEND_PLUGIN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "backend-plugin",
    "name": "Published Standards/Compiler Warnings/Backend Plugin",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbackend-plugin</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings from the compiler backend, often as a result of problematic profile-guided optimization.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<p>The text of this diagnostic is not controlled by Clang.</p>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbackend-plugin'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BACKSLASH_NEWLINE_ESCAPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "backslash-newline-escape",
    "name": "Published Standards/Compiler Warnings/Backslash Newline Escape",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbackslash-newline-escape</p>",
        "<p><b>Summary</b></p>",
        "<p>As a result of adding a space between a backslash, and a newline, the next line is interpreted as code, when it might have been intendted to be a comment.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>backslash and newline separated by space</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbackslash-newline-escape'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BAD_FUNCTION_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "bad-function-cast",
    "name": "Published Standards/Compiler Warnings/Do Not Cast from Function Call of One Type to Another",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbad-function-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for casts from function calls of one type to another non-matching type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast from function call of type</span>&nbsp;<em>A</em>&nbsp;<span>to non-matching type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbad-function-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BIND_TO_TEMPORARY_COPY": {
    "tags": [ "Standard: Compiler Warnings", "Warnings" ],
    "key": "bind-to-temporary-copy",
    "name": "Published Standards/Compiler Warnings/Bind to Temporary Copy",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbind-to-temporary-copy</p>",
        "<p><b>Summary</b></p>",
        "<p>A copy constructor should be defined and public.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 89%'><col style='width: 11%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>C++98 requires an accessible copy constructor for class</span>&nbsp;<em>C</em>&nbsp;<span>when binding a reference to a temporary; was</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>private</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>protected</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 26%'><col style='width: 21%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no viable constructor</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>copying variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying parameter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing template parameter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing statement expression result</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>throwing object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying member subobject</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying array element</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>allocating object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying temporary</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing base subobject</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing vector element</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>capturing value</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of type</span>&nbsp;<em>B</em><span>; C++98 requires a copy constructor when binding a reference to a temporary</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbind-to-temporary-copy'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BINDING_IN_CONDITION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings" ],
    "key": "binding-in-condition",
    "name": "Published Standards/Compiler Warnings/Binding in Condition",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbinding-in-condition</p>",
        "<p><b>Summary</b></p>",
        "<p>Declaring structures, such as arrays, tuple-like types, or data members is not permitted.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++17 does not permit structured binding declaration in a condition</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbinding-in-condition'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BIT_INT_EXTENSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings" ],
    "key": "bit-int-extension",
    "name": "Published Standards/Compiler Warnings/Bit Int Extension",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbit-int-extension</p>",
        "<p><b>Summary</b></p>",
        "<p>The extended integer type _BitInt is a Clang extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 47%'><col style='width: 22%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘_BitInt’ in</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>C17 and earlier</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>C++</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a Clang extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbit-int-extension'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BITFIELD_CONSTANT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "bitfield-constant-conversion",
    "name": "Published Standards/Compiler Warnings/Bitfield Constant Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbitfield-constant-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>In a struct, truncation occurs when assigning a value too large for the bit-field width constraint.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit truncation from</span>&nbsp;<em>C</em>&nbsp;<span>to bit-field changes value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-constant-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BITFIELD_ENUM_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "bitfield-enum-conversion",
    "name": "Published Standards/Compiler Warnings/Bitfield Enum Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbitfield-enum-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>In a struct, truncation occurs when converting an enumerator too large for the bit-field width constraint.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>bit-field</span>&nbsp;<em>A</em>&nbsp;<span>is not wide enough to store all enumerators of</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>signed bit-field</span>&nbsp;<em>A</em>&nbsp;<span>needs an extra bit to represent the largest positive enumerators of</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>assigning value of signed enum type</span>&nbsp;<em>B</em>&nbsp;<span>to unsigned bit-field</span>&nbsp;<em>A</em><span>; negative enumerators of enum</span>&nbsp;<em>B</em>&nbsp;<span>will be converted to positive values</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-enum-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BITFIELD_WIDTH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "bitfield-width",
    "name": "Published Standards/Compiler Warnings/Do Not Exceed Bit-Field Width",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbitfield-width</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks that the width of a bit-field does not exceed the width of its type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 94%'><col style='width: 6%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>width of bit-field</span>&nbsp;<em>A</em>&nbsp;<span>(</span><em>B</em>&nbsp;<span>bits) exceeds the width of its type; value will be truncated to</span>&nbsp;<em>C</em>&nbsp;<span>bit</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-width'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BITWISE_CONDITIONAL_PARENTHESES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Default", "Warnings" ],
    "key": "bitwise-conditional-parentheses",
    "name": "Published Standards/Compiler Warnings/Bitwise Conditional Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbitwise-conditional-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>The conditional/ternary operator has lower precendence than most other operators. Increase specificity by placing parentheses.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>operator ‘?:’ has lower precedence than ‘</span><em>A</em><span>’; ‘</span><em>A</em><span>’ will be evaluated first</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-conditional-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BITWISE_INSTEAD_OF_LOGICAL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings" ],
    "key": "bitwise-instead-of-logical",
    "name": "Published Standards/Compiler Warnings/Bitwise Instead of Logical",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbitwise-instead-of-logical</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of the bitwise operators <code>&</code> or </code>|</code> instead of the logical operators <code>&&</code> or </code>||</code> on boolean operands may result in type confusion.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of bitwise ‘</span><em>A</em><span>’ with boolean operands</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-instead-of-logical'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BITWISE_OP_PARENTHESES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Warnings" ],
    "key": "bitwise-op-parentheses",
    "name": "Published Standards/Compiler Warnings/Bitwise Operator Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbitwise-op-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of the bitwise operators <code>&</code> and </code>|</code> in the same expression may lead to precedence confusion.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ within ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-op-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BOOL_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "bool-conversion",
    "name": "Published Standards/Compiler Warnings/Bool Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbool-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert a boolean to a pointer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialization of pointer of type</span>&nbsp;<em>A</em>&nbsp;<span>to null from a constant boolean expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbool-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BOOL_OPERATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings" ],
    "key": "bool-operation",
    "name": "Published Standards/Compiler Warnings/Bool Operation",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbool-operation</p>",
        "<p><b>Summary</b></p>",
        "<p>Instead of a bitwise negation of a boolean expression with the <code>~</code> symbol, do a logical negation with the <code>!</code> symbol.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 44%'><col style='width: 28%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>bitwise negation of a boolean expression</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>always evaluates to ‘true’;</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>did you mean logical negation?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbool-operation'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BRACED_SCALAR_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "braced-scalar-init",
    "name": "Published Standards/Compiler Warnings/Braced Scalar Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbraced-scalar-init</p>",
        "<p><b>Summary</b></p>",
        "<p>To improve readability and clarity, do not surround the initial value of a scalar with braces.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 54%'><col style='width: 25%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>braces around</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>scalar</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>initializer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbraced-scalar-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BRANCH_PROTECTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "branch-protection",
    "name": "Published Standards/Compiler Warnings/Branch Protection",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbranch-protection</p>",
        "<p><b>Summary</b></p>",
        "<p>Branch protection - protection again jumps or return attacks, can be enabled with <code>__attribute</code> or compiler options. There are various warnings to ensure that it is supported and enabled.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’-mbranch-protection=’ option is incompatible with the ‘</span><em>A</em><span>’ architecture</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring the ‘branch-protection’ attribute because the ‘</span><em>A</em><span>’ architecture does not support it</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid branch protection option ‘</span><em>A</em><span>’ in ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unsupported branch protection specification ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbranch-protection'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BUILTIN_ASSUME_ALIGNED_ALIGNMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "builtin-assume-aligned-alignment",
    "name": "Published Standards/Compiler Warnings/Builtin Assume Aligned Alignment",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbuiltin-assume-aligned-alignment</p>",
        "<p><b>Summary</b></p>",
        "<p>When requesting a memory alignment that is too large in bytes, the maximum is assumed instead.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>requested alignment must be</span>&nbsp;<em>A</em>&nbsp;<span>bytes or smaller; maximum alignment assumed</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-assume-aligned-alignment'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BUILTIN_MACRO_REDEFINED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "builtin-macro-redefined",
    "name": "Published Standards/Compiler Warnings/Builtin Macro Redefined",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbuiltin-macro-redefined</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning when redefining with <code>#define</code> or undefining with <code>#undef</code> a builtin macro.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redefining builtin macro</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>undefining builtin macro</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-macro-redefined'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BUILTIN_MEMCPY_CHK_SIZE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "builtin-memcpy-chk-size",
    "name": "Published Standards/Compiler Warnings/Builtin Memcpy Check Size",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbuiltin-memcpy-chk-size</p>",
        "<p><b>Summary</b></p>",
        "<p>When setting a buffer of memory where the destination is too small, the new data will overflow.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always overflow; destination buffer has size</span>&nbsp;<em>B</em><span>, but size argument is</span>&nbsp;<em>C</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-memcpy-chk-size'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_BUILTIN_REQUIRES_HEADER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "builtin-requires-header",
    "name": "Published Standards/Compiler Warnings/Builtin Requires Header",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wbuiltin-requires-header</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning when a built-in function is declared, but #include is not used on its header.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration of built-in function ‘</span><em>B</em><span>’ requires inclusion of the header &lt;</span><em>A</em><span>&gt;</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-requires-header'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP_COMPAT": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++-compat",
    "name": "Published Standards/Compiler Warnings/C++ Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Structs and empty unions have different sizes in C and C++.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 16%'><col style='width: 16%'><col style='width: 12%'><col style='width: 26%'><col style='width: 16%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>empty</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>has size 0 in C,</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>size 1</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-zero size</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in C++</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP11_COMPAT": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++11-compat",
    "name": "Published Standards/Compiler Warnings/C++11 Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using features that are incompatible with C++11</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 75%'><col style='width: 13%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>integer literal is too large to be represented in type ‘long’ and is subject to undefined behavior under C++98, interpreting as ‘unsigned long’; this literal will</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>have type ‘long long’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>be ill-formed</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in C++11 onwards</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘auto’ storage class specifier is redundant and incompatible with C++11</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>identifier after literal will be treated as a user-defined literal suffix in C++11</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is a keyword in C++11</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of right-shift operator (‘&gt;&gt;’) in template argument will require parentheses in C++11</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit instantiation cannot be ‘inline’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit instantiation of</span>&nbsp;<em>A</em>&nbsp;<span>must occur at global scope</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit instantiation of</span>&nbsp;<em>A</em>&nbsp;<span>not in a namespace enclosing</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit instantiation of</span>&nbsp;<em>A</em>&nbsp;<span>must occur in namespace</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 71%'><col style='width: 15%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>integer literal is too large to be represented in type ‘long’, interpreting as ‘unsigned long’ per C++98; this literal will</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>have type ‘long long’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>be ill-formed</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in C++11 onwards</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP11_COMPAT_DEPRECATED_WRITABLE_STRINGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "c++11-compat-deprecated-writable-strings",
    "name": "Published Standards/Compiler Warnings/C++11 Compatibility Deprecated Writable Strings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-compat-deprecated-writable-strings</p>",
        "<p><b>Summary</b></p>",
        "<p>Conversion from a string literal to types like <code>char *</code> is deprecated.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conversion from string literal to</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-deprecated-writable-strings'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP11_COMPAT_RESERVED_USER_DEFINED_LITERAL": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++11-compat-reserved-user-defined-literal",
    "name": "Published Standards/Compiler Warnings/C++11 Compatibility Reserved User Defined Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-compat-reserved-user-defined-literal</p>",
        "<p><b>Summary</b></p>",
        "<p>An identifier after a literal is treated as a reserved user-defined literal suffix in C++11.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>identifier after literal will be treated as a reserved user-defined literal suffix in C++11</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-reserved-user-defined-literal'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP11_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++11-extensions",
    "name": "Published Standards/Compiler Warnings/C++11 Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using extensions of C++11</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>alias declarations are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 57%'><col style='width: 10%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from array size expression of type</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>integral</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enumeration</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>C</em>&nbsp;<span>is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘auto’ type specifier is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration types with a fixed underlying type are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 24%'><col style='width: 21%'><col style='width: 55%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>defaulted</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>deleted</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>function definitions are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>befriending enumeration type</span>&nbsp;<em>A</em>&nbsp;<span>is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>commas at the end of enumerator lists are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit conversion functions are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extern templates are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>range-based for loop is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>generalized initializer lists are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of enumeration in a nested name specifier is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-class friend type</span>&nbsp;<em>A</em>&nbsp;<span>is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default member initializer for non-static data member is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ keyword is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference qualifiers on functions are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>rvalue references are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>scoped enumerations are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>static data member</span>&nbsp;<em>A</em>&nbsp;<span>in union is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 44%'><col style='width: 11%'><col style='width: 44%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template argument referring to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>object</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>with internal linkage is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘template’ keyword outside of a template</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default template arguments for a function template are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘typename’ occurs outside of a template</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 59%'><col style='width: 13%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unelaborated friend declaration is a C++11 extension; specify ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ to befriend</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variadic templates are a C++11 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP11_EXTRA_SEMI": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "c++11-extra-semi",
    "name": "Published Standards/Compiler Warnings/C++11 Extra Semicolon",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-extra-semi</p>",
        "<p><b>Summary</b></p>",
        "<p>An extra <code>;</code> outside of a function is a C++11 extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra ‘;’ outside of a function is a C++11 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-extra-semi'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP11_INLINE_NAMESPACE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "c++11-inline-namespace",
    "name": "Published Standards/Compiler Warnings/C++11 Inline Namespace",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-inline-namespace</p>",
        "<p><b>Summary</b></p>",
        "<p>An <code>inline namespace</code> is a C++11 feature.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline namespaces are a C++11 feature</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-inline-namespace'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP11_LONG_LONG": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "c++11-long-long",
    "name": "Published Standards/Compiler Warnings/C++11 Long Long",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-long-long</p>",
        "<p><b>Summary</b></p>",
        "<p>The type <code>long long</code> is a C++11 extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘long long’ is a C++11 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-long-long'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP11_NARROWING": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++11-narrowing",
    "name": "Published Standards/Compiler Warnings/C++11 Narrowing",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++11-narrowing</p>",
        "<p><b>Summary</b></p>",
        "<p>Various types and values cannot be narrowed in C++11.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 21%'><col style='width: 4%'><col style='width: 63%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>case value</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enumerator value</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-type template argument</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>array size</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>explicit specifier argument</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>noexcept specifier argument</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>cannot be narrowed from type</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>evaluates to</span>&nbsp;<em>C</em><span>, which cannot be narrowed to type</span>&nbsp;<em>D</em></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>constant expression evaluates to</span>&nbsp;<em>A</em>&nbsp;<span>which cannot be narrowed to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>type</span>&nbsp;<em>A</em>&nbsp;<span>cannot be narrowed to</span>&nbsp;<em>B</em>&nbsp;<span>in initializer list</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>non-constant-expression cannot be narrowed from type</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>in initializer list</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constant expression evaluates to</span>&nbsp;<em>A</em>&nbsp;<span>which cannot be narrowed to type</span>&nbsp;<em>B</em>&nbsp;<span>in C++11</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type</span>&nbsp;<em>A</em>&nbsp;<span>cannot be narrowed to</span>&nbsp;<em>B</em>&nbsp;<span>in initializer list in C++11</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-constant-expression cannot be narrowed from type</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>in initializer list in C++11</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-narrowing'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP14_ATTRIBUTE_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "c++14-attribute-extensions",
    "name": "Published Standards/Compiler Warnings/C++14 Attribute Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++14-attribute-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of certain attributes such as <code>[[deprecated]]</code> is a C++14 extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of the</span>&nbsp;<em>A</em>&nbsp;<span>attribute is a C++14 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-attribute-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP14_BINARY_LITERAL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "c++14-binary-literal",
    "name": "Published Standards/Compiler Warnings/C++14 Binary Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++14-binary-literal</p>",
        "<p><b>Summary</b></p>",
        "<p>Binary integer literals such as <code>0b11</code> are a C++14 extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>binary integer literals are a C++14 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-binary-literal'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP14_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++14-extensions",
    "name": "Published Standards/Compiler Warnings/C++14 Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++14-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using extensions of C++14</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 56%'><col style='width: 17%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of this statement in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++14 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple return statements in constexpr function is a C++14 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 56%'><col style='width: 17%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable declaration in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++14 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 54%'><col style='width: 18%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type definition in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++14 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘decltype(auto)’ type specifier is a C++14 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialized lambda captures are a C++14 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable templates are a C++14 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP17_ATTRIBUTE_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "c++17-attribute-extensions",
    "name": "Published Standards/Compiler Warnings/C++17 Attribute Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++17-attribute-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of certain attributes such as <code>[[using]]</code> is a C++17 extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of the</span>&nbsp;<em>A</em>&nbsp;<span>attribute is a C++17 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-attribute-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP17_COMPAT_MANGLING": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "c++17-compat-mangling",
    "name": "Published Standards/Compiler Warnings/C++17 Compatibility Mangling",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++17-compat-mangling</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function name is mangled with another symbol and the function signature includes <code>noexcept</code> or <code>throw</code>, then the mangled name is changed in C++17.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>mangled name of</span>&nbsp;<em>A</em>&nbsp;<span>will change in C++17 due to non-throwing exception specification in function signature</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat-mangling'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP17_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++17-extensions",
    "name": "Published Standards/Compiler Warnings/C++17 Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++17-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using extensions of C++17</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ standards before C++17 do not allow new expression for type</span>&nbsp;<em>A</em>&nbsp;<span>to use list-initialization</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constexpr if is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘constexpr’ on lambda expressions is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘static_assert’ with no message is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>decomposition declarations are a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pack fold expression is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘begin’ and ‘end’ returning different types (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>) is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>hexadecimal floating literals are a C++17 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 33%'><col style='width: 17%'><col style='width: 50%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>if</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>switch</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ initialization statements are a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline variables are a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of multiple declarators in a single using declaration is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>nested namespace definition is a C++17 extension; define each namespace separately</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 43%'><col style='width: 19%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attributes on</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a namespace</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an enumerator</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration are a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>capture of ‘*this’ by copy is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template template parameter using ‘typename’ is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default scope specifier for attributes is a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pack expansion of using declaration is a C++17 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP20_ATTRIBUTE_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "c++20-attribute-extensions",
    "name": "Published Standards/Compiler Warnings/C++20 Attribute Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++20-attribute-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of certain attributes such as <code>[[no_unique_address]]</code> is a C++20 extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of the</span>&nbsp;<em>A</em>&nbsp;<span>attribute is a C++20 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-attribute-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP20_COMPAT": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++20-compat",
    "name": "Published Standards/Compiler Warnings/C++20 Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++20-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for maintaining compatibility with C++20</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>aggregate initialization of type</span>&nbsp;<em>A</em>&nbsp;<span>with user-declared constructors is incompatible with C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘consteval’ specifier is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘constinit’ specifier is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>this expression will be parsed as explicit(bool) in C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’&lt;=&gt;’ is a single token in C++20; add a space to avoid a change in behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>taking address of non-addressable standard library function is incompatible with C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is a keyword in C++20</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP20_DESIGNATOR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "c++20-designator",
    "name": "Published Standards/Compiler Warnings/C++20 Designator",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++20-designator</p>",
        "<p><b>Summary</b></p>",
        "<p>Designed initializers- initializers which use a key and value syntax - are a C++20 extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>designated initializers are a C++20 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-designator'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP20_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++20-extensions",
    "name": "Published Standards/Compiler Warnings/C++20 Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++20-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using extensions of C++20</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of function template name with no prior declaration in function call with explicit template arguments is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default member initializer for bit-field is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 56%'><col style='width: 17%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of this statement in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constexpr constructor that does not initialize all members is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 55%'><col style='width: 17%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function try block in constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 56%'><col style='width: 17%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>uninitialized variable in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constexpr union constructor that does not initialize any member is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 44%'><col style='width: 34%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>decomposition declaration declared</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>B</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>with ‘</span><em>B</em><span>’ specifiers</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>defaulted comparison operators are a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit capture of ‘this’ with a capture default of ‘=’ is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit(bool) is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>range-based for loop initialization statements are a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialized lambda pack captures are a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline nested namespace definition is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit template parameter list for lambdas is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invoking a pointer to a ‘const &amp;’ member function on an rvalue is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using declaration naming a scoped enumerator is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using enum declaration is a C++20 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP2B_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "c++2b-extensions",
    "name": "Published Standards/Compiler Warnings/C++2B Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++2b-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using C++2b extensions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>alias declaration in this context is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>consteval if is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 56%'><col style='width: 17%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of this statement in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 30%'><col style='width: 13%'><col style='width: 25%'><col style='width: 12%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>definition of a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>static</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>thread_local</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>variable in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 41%'><col style='width: 22%'><col style='width: 36%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of a ‘#</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&lt;BUG IF SEEN&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>elifdef</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>elifndef</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ directive is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘size_t’ suffix for literals is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>an attribute specifier sequence in this position is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>lambda without a parameter clause is a C++2b extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-2b-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP98_CPP11_COMPAT_BINARY_LITERAL": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++98-c++11-compat-binary-literal",
    "name": "Published Standards/Compiler Warnings/C++98 C++11 Compatibility Binary Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++98-c++11-compat-binary-literal</p>",
        "<p><b>Summary</b></p>",
        "<p>Binary integer literals such as <code>0b11</code> are incompatible with C++ standards before C++14</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>binary integer literals are incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat-binary-literal'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP98_COMPAT": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++98-compat",
    "name": "Published Standards/Compiler Warnings/C++98 Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++98-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using features that are incompatible with C++98</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>alias declarations are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘alignas’ is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>alignof expressions are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>C++11 attribute syntax is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘auto’ type specifier is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘constexpr’ specifier is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constructor call from initializer list is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘decltype’ type specifier is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 23%'><col style='width: 19%'><col style='width: 58%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>defaulted</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>deleted</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>function definitions are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>delegating constructors are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>scalar initialized from empty initializer list is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>from an empty initializer list is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration types with a fixed underlying type are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>befriending enumeration type</span>&nbsp;<em>A</em>&nbsp;<span>is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration type in nested name specifier is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit conversion functions are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>range-based for loop is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>friend declaration naming a member of the declaring class is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>generalized initializer lists are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>jump from this goto statement to its label is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 35%'><col style='width: 13%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>jump from this</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>indirect</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>asm</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>goto statement to one of its possible targets is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialization of initializer_list object is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline namespaces are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>lambda expressions are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’&lt;::’ is treated as digraph ‘&lt;:’ (aka ‘[‘) followed by ‘:’ in C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>literal operators are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>universal character name referring to a control character is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>specifying character ‘</span><em>A</em><span>’ with a universal character name is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>noexcept specifications are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>noexcept expressions are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of non-static data member</span>&nbsp;<em>A</em>&nbsp;<span>in an unevaluated context is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-class friend type</span>&nbsp;<em>A</em>&nbsp;<span>is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default member initializer for non-static data members is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 13%'><col style='width: 41%'><col style='width: 16%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>anonymous struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>member</span>&nbsp;<em>B</em>&nbsp;<span>with a non-trivial</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>default constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copy constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>move constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copy assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>move assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nullptr’ is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ keyword is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 68%'><col style='width: 11%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing object of trivial but non-POD type</span>&nbsp;<em>A</em>&nbsp;<span>through variadic</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>raw string literals are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference qualifiers on functions are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference initialized from initializer list is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>rvalue references are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>scoped enumerations are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>substitution failure due to access control is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘static_assert’ declarations are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>static data member</span>&nbsp;<em>A</em>&nbsp;<span>in union is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>jump from switch statement to this case label is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redundant parentheses surrounding address non-type template argument are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of null pointer as non-type template argument is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 43%'><col style='width: 11%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template argument referring to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>object</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>with internal linkage is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of ‘template’ keyword outside of a template is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default template arguments for a function template are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>trailing return types are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>consecutive right angle brackets are incompatible with C++98 (use ‘&gt; &gt;’)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of ‘typename’ outside of a template is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 59%'><col style='width: 13%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>befriending</span>&nbsp;<em>B</em>&nbsp;<span>without ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ keyword is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unicode literals are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ type specifier is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inheriting constructors are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variadic templates are incompatible with C++98</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP98_COMPAT_BIND_TO_TEMPORARY_COPY": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++98-compat-bind-to-temporary-copy",
    "name": "Published Standards/Compiler Warnings/C++98 Compatibility Bind to Temporary Copy",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++98-compat-bind-to-temporary-copy</p>",
        "<p><b>Summary</b></p>",
        "<p>Any of (copying variable, copying parameter, initializing template parameter, returning object, initializing statement expression result, throwing object, copying member subobject, copying array element, allocating object, copying temporary, initializing base subobject, initializing vector element, capturing value) of type C when binding a reference to a temporary would any of (invoke an inaccessible constructor, find no viable constructor, find ambiguous constructors, invoke a deleted constructor) in C++98.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 10%'><col style='width: 19%'><col style='width: 44%'><col style='width: 17%'><col style='width: 10%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>copying variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying parameter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing template parameter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing statement expression result</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>throwing object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying member subobject</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying array element</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>allocating object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying temporary</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing base subobject</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing vector element</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>capturing value</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of type</span>&nbsp;<em>C</em>&nbsp;<span>when binding a reference to a temporary would</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>invoke an inaccessible constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>find no viable constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>find ambiguous constructors</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>invoke a deleted constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in C++98</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-bind-to-temporary-copy'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP98_COMPAT_EXTRA_SEMI": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++98-compat-extra-semi",
    "name": "Published Standards/Compiler Warnings/C++98 Compatibility Extra Semicolon",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++98-compat-extra-semi</p>",
        "<p><b>Summary</b></p>",
        "<p>An extra ';' outside of a function is incompatible with C++98</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra ‘;’ outside of a function is incompatible with C++98</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-extra-semi'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP98_COMPAT_LOCAL_TYPE_TEMPLATE_ARGS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++98-compat-local-type-template-args",
    "name": "Published Standards/Compiler Warnings/C++98 Compatibility Local Type Template Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++98-compat-local-type-template-args</p>",
        "<p><b>Summary</b></p>",
        "<p>Local types as template argument are incompatible with C++98</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>local type</span>&nbsp;<em>A</em>&nbsp;<span>as template argument is incompatible with C++98</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-local-type-template-args'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP98_COMPAT_PEDANTIC": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++98-compat-pedantic",
    "name": "Published Standards/Compiler Warnings/C++98 Compatibility Pedantic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++98-compat-pedantic</p>",
        "<p><b>Summary</b></p>",
        "<p>Pedantic warnings for using features that are incompatible with C++98</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 55%'><col style='width: 9%'><col style='width: 35%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from array size expression of type</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>integral</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enumeration</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>C</em>&nbsp;<span>is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast between pointer-to-function and pointer-to-object is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty macro arguments are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>commas at the end of enumerator lists are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extern templates are incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘long long’ is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>C++98 requires newline at end of file</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#line number greater than 32767 is incompatible with C++98</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variadic macros are incompatible with C++98</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-pedantic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CPP98_COMPAT_UNNAMED_TYPE_TEMPLATE_ARGS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c++98-compat-unnamed-type-template-args",
    "name": "Published Standards/Compiler Warnings/C++98 Compatibility Unnamed Type Template Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc++98-compat-unnamed-type-template-args</p>",
        "<p><b>Summary</b></p>",
        "<p>Unnamed types as template argument are incompatible with C++98</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unnamed type as template argument is incompatible with C++98</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-unnamed-type-template-args'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_C11_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "c11-extensions",
    "name": "Published Standards/Compiler Warnings/C11 Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc11-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using C11 extensions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>anonymous unions are a C11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>anonymous structs are a C11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is a C11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 58%'><col style='width: 5%'><col style='width: 25%'><col style='width: 5%'><col style='width: 6%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pointer comparisons before C11 need to be between two complete or two incomplete types;</span>&nbsp;<em>A</em>&nbsp;<span>is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>in</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>complete and</span>&nbsp;<em>B</em>&nbsp;<span>is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>in</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>complete</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc11-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_C2X_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings" ],
    "key": "c2x-extensions",
    "name": "Published Standards/Compiler Warnings/C2X Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc2x-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using C2x extensions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘_BitInt’ suffix for literals is a C2x extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 42%'><col style='width: 23%'><col style='width: 35%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of a ‘#</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&lt;BUG IF SEEN&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>elifdef</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>elifndef</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ directive is a C2x extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘_Static_assert’ with no message is a C2x extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>omitting the parameter name in a function definition is a C2x extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc2x-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_C99_COMPAT": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c99-compat",
    "name": "Published Standards/Compiler Warnings/C99 Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc99-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using features that are incompatible with C99</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 21%'><col style='width: 44%'><col style='width: 35%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>using this character in an identifier</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>starting an identifier with this character</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C99</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unicode literals are incompatible with C99</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 71%'><col style='width: 15%'><col style='width: 14%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>integer literal is too large to be represented in type ‘long’, interpreting as ‘unsigned long’ per C89; this literal will</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>have type ‘long long’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>be ill-formed</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in C99 onwards</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_C99_DESIGNATOR": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c99-designator",
    "name": "Published Standards/Compiler Warnings/C99 Designator",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc99-designator</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using features and extensions of initializers of C99</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>designated initializers are a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array designators are a C99 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>brace elision for designated initializer is a C99 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>mixture of designated and non-designated initializers in the same initializer list is a C99 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>nested designators are a C99 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-designator'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_C99_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "c99-extensions",
    "name": "Published Standards/Compiler Warnings/C99 Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wc99-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for using C99 extensions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializer for aggregate is not a compile-time constant</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 19%'><col style='width: 24%'><col style='width: 21%'><col style='width: 16%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>qualifier in</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>static</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>array size</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>‘[*] ‘</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>is a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>compound literals are a C99-specific feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is a C99 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flexible array members are a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable declaration in for loop is a C99-specific feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C99 requires whitespace after the macro name</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty macro arguments are a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>commas at the end of enumerator lists are a C99-specific feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>hexadecimal floating constants are a C99 feature</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CALL_TO_PURE_VIRTUAL_FROM_CTOR_DTOR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "call-to-pure-virtual-from-ctor-dtor",
    "name": "Published Standards/Compiler Warnings/Call to Pure Virtual from Constructor or Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcall-to-pure-virtual-from-ctor-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>A call to pure virtual member function has undefined behavior; Overrides of a pure virtual member function in subclasses are not available in constructors or destructors.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 78%'><col style='width: 8%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>call to pure virtual member function</span>&nbsp;<em>A</em>&nbsp;<span>has undefined behavior; overrides of</span>&nbsp;<em>A</em>&nbsp;<span>in subclasses are not available in the</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of</span>&nbsp;<em>C</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcall-to-pure-virtual-from-ctor-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CALLED_ONCE_PARAMETER": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "called-once-parameter",
    "name": "Published Standards/Compiler Warnings/Called once Parameter",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcalled-once-parameter</p>",
        "<p><b>Summary</b></p>",
        "<p>When a parameter is marked with the 'called_once' flag it should be used once.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>parameter marked ‘called_once’ is called twice</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 19%'><col style='width: 21%'><col style='width: 59%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>captured</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>A</em>&nbsp;<span>parameter marked ‘called_once’ is never called</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 55%'><col style='width: 10%'><col style='width: 16%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>parameter marked ‘called_once’ is never</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>used</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>called</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>when</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>taking true branch</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>taking false branch</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>handling this case</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>none of the cases applies</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>entering the loop</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>skipping the loop</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>taking one of the branches</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcalled-once-parameter'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CAST_ALIGN": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "cast-align",
    "name": "Published Standards/Compiler Warnings/Cast Align",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcast-align</p>",
        "<p><b>Summary</b></p>",
        "<p>Casting to a larger type increases the required alignment.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>increases required alignment from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-align'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CAST_CALLING_CONVENTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "cast-calling-convention",
    "name": "Published Standards/Compiler Warnings/Cast Calling Convention",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcast-calling-convention</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for casting from one function with a certain calling convention to another, which is incompatible.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast between incompatible calling conventions ‘</span><em>A</em><span>’ and ‘</span><em>B</em><span>’; calls through this pointer may abort at runtime</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-calling-convention'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CAST_FUNCTION_TYPE": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "cast-function-type",
    "name": "Published Standards/Compiler Warnings/Cast Function Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcast-function-type</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for casting from one function type to another, which is incompatible.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 26%'><col style='width: 49%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;</p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>converts to incompatible function type</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-function-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CAST_QUAL": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "cast-qual",
    "name": "Published Standards/Compiler Warnings/Cast Qualifiers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcast-qual</p>",
        "<p><b>Summary</b></p>",
        "<p>Casting from one type to another which drops qualifiers directly, or drops qualifiers with intermediate pointers.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 78%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>drops</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>const and volatile qualifiers</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>const qualifier</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>volatile qualifier</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>must have all intermediate pointers const qualified to be safe</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CAST_QUAL_UNRELATED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "cast-qual-unrelated",
    "name": "Published Standards/Compiler Warnings/Cast Qualifiers Unrelated",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcast-qual-unrelated</p>",
        "<p><b>Summary</b></p>",
        "<p>ISO C++ does not allow certain casts between certain types which drop qualifiers.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 22%'><col style='width: 11%'><col style='width: 66%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ does not allow</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>const_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>static_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reinterpret_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>dynamic_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>C-style cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functional-style cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>from</span>&nbsp;<em>B</em>&nbsp;<span>to</span>&nbsp;<em>C</em>&nbsp;<span>because it casts away qualifiers, even though the source and destination types are unrelated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual-unrelated'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CHAR_SUBSCRIPTS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most" , "Warnings"],
    "key": "char-subscripts",
    "name": "Published Standards/Compiler Warnings/Char Subscripts",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wchar-subscripts</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for using a <code>char</code> as an array subscript or array section.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 49%'><col style='width: 20%'><col style='width: 30%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array section</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>lower bound</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>length</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is of type ‘char’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array subscript is of type ‘char’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wchar-subscripts'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CLANG_CL_PCH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "clang-cl-pch",
    "name": "Published Standards/Compiler Warnings/Clang-CL Precompiled Headers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wclang-cl-pch</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for unimplemented options, changing names of precompiled headers with <code>hdrstop</code>, or changing macros of precompiled headers in <code>clang-cl</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>support for ‘/Yc’ with more than one source file not implemented yet; flag ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>support for ‘/Yc’ and ‘/Yu’ with different filenames not implemented yet; flags ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma hdrstop filename not supported, /Fp can be used to specify precompiled header filename</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>definition of macro</span>&nbsp;<em>A</em>&nbsp;<span>does not match definition in precompiled header</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wclang-cl-pch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CLASS_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "class-conversion",
    "name": "Published Standards/Compiler Warnings/Class Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wclass-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Unused class conversion functions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conversion function converting</span>&nbsp;<em>A</em>&nbsp;<span>to its base class</span>&nbsp;<em>B</em>&nbsp;<span>will never be used</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conversion function converting</span>&nbsp;<em>A</em>&nbsp;<span>to itself will never be used</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conversion function converting</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>will never be used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wclass-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CLASS_VARARGS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "class-varargs",
    "name": "Published Standards/Compiler Warnings/Class Variadic Arguments",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wclass-varargs</p>",
        "<p><b>Summary</b></p>",
        "<p>Support for class types as variadic arguments is implementation-defined for certain kinds of classes.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 59%'><col style='width: 11%'><col style='width: 30%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing object of class type</span>&nbsp;<em>A</em>&nbsp;<span>through variadic</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; did you mean to call ‘</span><em>D</em><span>’?</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wclass-varargs'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CMSE_UNION_LEAK": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "cmse-union-leak",
    "name": "Published Standards/Compiler Warnings/CMSE (Cortex-M Support for Security Extension) Union Leak",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcmse-union-leak</p>",
        "<p><b>Summary</b></p>",
        "<p>Letting a union be visible beyond its scope passes it across its security boundary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 50%'><col style='width: 28%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing union across security boundary via</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>parameter</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>return value</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>may leak information</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcmse-union-leak'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COMMA": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "comma",
    "name": "Published Standards/Compiler Warnings/Comma Operator Misuse",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcomma</p>",
        "<p><b>Summary</b></p>",
        "<p>Other than after a few specific kinds of expressions, the comma operator produces a warning.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>possible misuse of comma operator here</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcomma'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COMMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most" , "Warnings"],
    "key": "comment",
    "name": "Published Standards/Compiler Warnings/Comment Misuse",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcomment</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of line comments when not allowed by the language and various warnings of unconventional comment usage.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>escaped newline between */ characters at block comment end</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>// comments are not allowed in this language</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multi-line // comment</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’/*’ within block comment</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcomment'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COMPARE_DISTINCT_POINTER_TYPES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "compare-distinct-pointer-types",
    "name": "Published Standards/Compiler Warnings/Compare Distinct Pointer Types",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcompare-distinct-pointer-types</p>",
        "<p><b>Summary</b></p>",
        "<p>Comparing a pointer of one type to a pointer of another type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 43%'><col style='width: 57%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of distinct pointer types</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompare-distinct-pointer-types'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COMPLEX_COMPONENT_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic" , "Warnings"],
    "key": "complex-component-init",
    "name": "Published Standards/Compiler Warnings/Complex Component Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcomplex-component-init</p>",
        "<p><b>Summary</b></p>",
        "<p>Initializing a value like <code>{1.0f, 1.0f}</code> as a real or imaginary number is an extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>complex initialization specifying real and imaginary components is an extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcomplex-component-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COMPOUND_TOKEN_SPLIT_BY_MACRO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "compound-token-split-by-macro",
    "name": "Published Standards/Compiler Warnings/Compound Token Split by Macro",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcompound-token-split-by-macro</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not split certain compound tokens (multiple tokens which have a meaning together) by inserting a macro in between them.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 11%'><col style='width: 21%'><col style='width: 21%'><col style='width: 19%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em>&nbsp;<span>and</span>&nbsp;</p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>C</em>&nbsp;<span>tokens</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introducing statement expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>terminating statement expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>introducing attribute</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>terminating attribute</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>forming pointer to member type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>appear in different macro expansion contexts</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-macro'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COMPOUND_TOKEN_SPLIT_BY_SPACE": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "compound-token-split-by-space",
    "name": "Published Standards/Compiler Warnings/Compound Token Split by Space",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcompound-token-split-by-space</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not split certain compound tokens (multiple tokens which have a meaning together) by inserting whitespace between them.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 23%'><col style='width: 23%'><col style='width: 21%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em>&nbsp;<span>and</span>&nbsp;</p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>C</em>&nbsp;<span>tokens</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>introducing statement expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>terminating statement expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>introducing attribute</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>terminating attribute</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>forming pointer to member type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>are separated by whitespace</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-space'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CONDITIONAL_TYPE_MISMATCH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "conditional-type-mismatch",
    "name": "Published Standards/Compiler Warnings/Conditional Type Mismatch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconditional-type-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>Mismatch between pointer and integer types in the 2 conditional (ternary) expressions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 48%'><col style='width: 52%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pointer/integer type mismatch in conditional expression</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconditional-type-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CONDITIONAL_UNINITIALIZED": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "conditional-uninitialized",
    "name": "Published Standards/Compiler Warnings/Conditional Uninitialized",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconditional-uninitialized</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for a variable usage after it is initialized in control-flow, or used in a capture block.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 80%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable</span>&nbsp;<em>A</em>&nbsp;<span>may be uninitialized when</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>used here</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>captured by block</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconditional-uninitialized'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CONSTANT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "constant-conversion",
    "name": "Published Standards/Compiler Warnings/Constant Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconstant-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When a value is implicitly converted to another type, the value may change. If this value change is intended, then perform an explicit cast.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em>&nbsp;<span>changes value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CONSTANT_EVALUATED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "constant-evaluated",
    "name": "Published Standards/Compiler Warnings/Constant Evaluated",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconstant-evaluated</p>",
        "<p><b>Summary</b></p>",
        "<p>Calling a function like <code>is_constant_evaluated</code> always evaluates to <code>true</code> with <code>static_assert</code> or a <code>constexpr</code> <code>if</code> statement.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always evaluate to ‘true’ in a manifestly constant-evaluated expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-evaluated'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CONSTANT_LOGICAL_OPERAND": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "constant-logical-operand",
    "name": "Published Standards/Compiler Warnings/Constant Logical Operand",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconstant-logical-operand</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of logical operator with a constant non-boolean operand.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of logical ‘</span><em>A</em><span>’ with constant operand</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-logical-operand'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CONSTEXPR_NOT_CONST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "constexpr-not-const",
    "name": "Published Standards/Compiler Warnings/Constexpr Not Const",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconstexpr-not-const</p>",
        "<p><b>Summary</b></p>",
        "<p>Prior to C++14, a <code>constexpr</code> non-static member function is implicitly <code>const</code> and therefore does not have data member write permission. This is no longer implicit in C++14.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘constexpr’ non-static member function will not be implicitly ‘const’ in C++14; add ‘const’ to avoid a change in behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconstexpr-not-const'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CONSUMED": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "consumed",
    "name": "Published Standards/Compiler Warnings/Consumable Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconsumed</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings associated with the <code>__attribute__</code> <code>consumable</code></p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>consumed analysis attribute is attached to member of class</span>&nbsp;<em>A</em>&nbsp;<span>which isn’t marked as consumable</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>state of variable ‘</span><em>A</em><span>’ must match at the entry and exit of loop</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parameter ‘</span><em>A</em><span>’ not in expected state when the function returns: expected ‘</span><em>B</em><span>’, observed ‘</span><em>C</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument not in expected state; expected ‘</span><em>A</em><span>’, observed ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>return state set for an unconsumable type ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>return value not in expected state; expected ‘</span><em>A</em><span>’, observed ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid invocation of method ‘</span><em>A</em><span>’ on object ‘</span><em>B</em><span>’ while it is in the ‘</span><em>C</em><span>’ state</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid invocation of method ‘</span><em>A</em><span>’ on a temporary object while it is in the ‘</span><em>B</em><span>’ state</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconsumed'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "conversion",
    "name": "Published Standards/Compiler Warnings/Type Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wconversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Some conversions can lead to loss of data.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion discards imaginary component:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion turns vector to scalar:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing non-generic address space pointer to</span>&nbsp;<em>A</em>&nbsp;<span>may cause dynamic conversion affecting performance</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template argument with value ‘</span><em>A</em><span>’ converted to ‘</span><em>B</em><span>’ for unsigned template parameter of type</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template argument value ‘</span><em>A</em><span>’ truncated to ‘</span><em>B</em><span>’ for template parameter of type</span>&nbsp;<em>C</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wconversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COROUTINE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "coroutine",
    "name": "Published Standards/Compiler Warnings/Coroutine Return Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcoroutine</p>",
        "<p><b>Summary</b></p>",
        "<p>The C++ standard specifies that in a <code>coroutine_handle<Promise></code> class/struct, <code>void *</code> should be the return type of the <code>address</code> function.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>return type of ‘coroutine_handle&lt;&gt;::address should be ‘void*’ (have</span>&nbsp;<em>A</em><span>) in order to get capability with existing async C API.</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcoroutine'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COROUTINE_MISSING_UNHANDLED_EXCEPTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "coroutine-missing-unhandled-exception",
    "name": "Published Standards/Compiler Warnings/Coroutine Missing Unhandled Exception",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcoroutine-missing-unhandled-exception</p>",
        "<p><b>Summary</b></p>",
        "<p>The promise object of a coroutine needs to declare a member function named <code>unhandled_exception</code> when the exceptions feature is enabled.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is required to declare the member ‘unhandled_exception()’ when exceptions are enabled</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcoroutine-missing-unhandled-exception'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_COVERED_SWITCH_DEFAULT": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "covered-switch-default",
    "name": "Published Standards/Compiler Warnings/Covered Switch Default",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcovered-switch-default</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>default</code> label of a switch statement cannot be reached if all the possible values of an <code>enum</code> are listed in the <code>case</code> labels.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default label in switch which covers all enumeration values</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcovered-switch-default'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CTAD_MAYBE_UNSUPPORTED": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "ctad-maybe-unsupported",
    "name": "Published Standards/Compiler Warnings/CTAD (Class Template Argument Deduction) Maybe Unsupported",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wctad-maybe-unsupported</p>",
        "<p><b>Summary</b></p>",
        "<p>Creating a template arguments which are specifically class templates providing non-classes may lead to unintended type deduction. User-defined deduction guides can help with this problem.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>may not intend to support class template argument deduction</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wctad-maybe-unsupported'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_CXX_ATTRIBUTE_EXTENSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "cxx-attribute-extension",
    "name": "Published Standards/Compiler Warnings/C++ Attribute Extension",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wcxx-attribute-extension</p>",
        "<p><b>Summary</b></p>",
        "<p>An attribute specifier sequence is not allowed to be placed in certain parts of code.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ does not allow an attribute list to appear here</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wcxx-attribute-extension'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DANGLING": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dangling",
    "name": "Published Standards/Compiler Warnings/Dangling Pointers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling</p>",
        "<p><b>Summary</b></p>",
        "<p>Instead of initializing things in expressions, initialize them in a previous statement. If they are initialized in the expression, then they become dangling pointers.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 9%'><col style='width: 58%'><col style='width: 3%'><col style='width: 9%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 17%'><col style='width: 34%'><col style='width: 5%'><col style='width: 43%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>temporary</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>whose address is used as value of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 62%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>implicitly</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>bound to</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 46%'><col style='width: 54%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>member of local variable</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 52%'><col style='width: 48%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>local</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 36%'><col style='width: 64%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>array backing</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializer list subobject of local variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>local initializer list</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>D</em>&nbsp;</p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>will be destroyed at the end of the full-expression</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 22%'><col style='width: 14%'><col style='width: 37%'><col style='width: 8%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>sorry, lifetime extension of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>temporary</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>backing array of initializer list</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>created by aggregate initialization using default member initializer is not supported; lifetime of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>temporary</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>backing array</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will end at the end of the full-expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DANGLING_ELSE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Default" , "Warnings"],
    "key": "dangling-else",
    "name": "Published Standards/Compiler Warnings/Dangling Else",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling-else</p>",
        "<p><b>Summary</b></p>",
        "<p>When there is a one-liner <code>if</code> statement, another <code>if</code> statement, and a one-liner <code>else</code> statement, the dangling <code>else</code> statement is ambigous.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>add explicit braces to avoid dangling else</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-else'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DANGLING_FIELD": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dangling-field",
    "name": "Published Standards/Compiler Warnings/Dangling Field",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling-field</p>",
        "<p><b>Summary</b></p>",
        "<p>When a data member field is on the stack and its address is used, a dangling field is the result.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 74%'><col style='width: 13%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>binding reference member</span>&nbsp;<em>A</em>&nbsp;<span>to stack allocated</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 9%'><col style='width: 18%'><col style='width: 3%'><col style='width: 11%'><col style='width: 16%'><col style='width: 7%'><col style='width: 35%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reference</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>backing array for ‘std::initializer_list’</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>subobject of</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>member</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>binds to</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>is</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>a temporary object whose lifetime is shorter than the lifetime of the constructed object</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 75%'><col style='width: 12%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializing pointer member</span>&nbsp;<em>A</em>&nbsp;<span>with the stack address of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>temporary bound to reference member of allocated object will be destroyed at the end of the full-expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-field'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DANGLING_GSL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dangling-gsl",
    "name": "Published Standards/Compiler Warnings/Dangling Pointers Found by Guidelines Support Library",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling-gsl</p>",
        "<p><b>Summary</b></p>",
        "<p>Dangling pointers occur when a pointer is removed before the object it is pointing to.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>object backing the pointer will be destroyed at the end of the full-expression</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializing pointer member</span>&nbsp;<em>A</em>&nbsp;<span>to point to a temporary object whose lifetime is shorter than the lifetime of the constructed object</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-gsl'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DANGLING_INITIALIZER_LIST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dangling-initializer-list",
    "name": "Published Standards/Compiler Warnings/Dangling Initializer List",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdangling-initializer-list</p>",
        "<p><b>Summary</b></p>",
        "<p>The values in an <code>initializer_list</code> must be used in the same full expression of its creation - before it's destroyed.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 31%'><col style='width: 33%'><col style='width: 36%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>array backing</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializer list subobject of the allocated object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>the allocated initializer list</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will be destroyed at the end of the full-expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-initializer-list'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DARWIN_SDK_SETTINGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "darwin-sdk-settings",
    "name": "Published Standards/Compiler Warnings/Darwin SDK Settings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdarwin-sdk-settings</p>",
        "<p><b>Summary</b></p>",
        "<p>For compiling for the the Darwin operating system and using SDKSettings.json, it should be formatted correctly.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>SDK settings were ignored as ‘SDKSettings.json’ could not be parsed</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdarwin-sdk-settings'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DATE_TIME": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "date-time",
    "name": "Published Standards/Compiler Warnings/Date and Time Macros",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdate-time</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks that date and time macros can be expanded</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expansion of date or time macro is not reproducible</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdate-time'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEALLOC_IN_CATEGORY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "dealloc-in-category",
    "name": "Published Standards/Compiler Warnings/Dealloc in Category",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdealloc-in-category</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for dealloc being overridden in a category</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>-dealloc is being overridden in a category</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdealloc-in-category'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEBUG_COMPRESSION_UNAVAILABLE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "debug-compression-unavailable",
    "name": "Published Standards/Compiler Warnings/Debug Compression Unavailable",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdebug-compression-unavailable</p>",
        "<p><b>Summary</b></p>",
        "<p>Determine whether debug sections can be compressed</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot compress debug sections (zlib not enabled)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdebug-compression-unavailable'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DECLARATION_AFTER_STATEMENT": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "declaration-after-statement",
    "name": "Published Standards/Compiler Warnings/Declaration After Statement",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeclaration-after-statement</p>",
        "<p><b>Summary</b></p>",
        "<p>Prior to C99, in a block of code, declarations had to be before other statements of code.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>mixing declarations and code is a C99 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>mixing declarations and code is incompatible with standards before C99</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeclaration-after-statement'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEFAULTED_FUNCTION_DELETED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "defaulted-function-deleted",
    "name": "Published Standards/Compiler Warnings/Defaulted Function Deleted",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdefaulted-function-deleted</p>",
        "<p><b>Summary</b></p>",
        "<p>When a class/struct/union explicitly defines an operator, constructor, or destructor to be default and it is already default, then the compiler implicitly deletes this definition.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 14%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicitly defaulted</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&lt;ERROR&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>equality</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>three-way</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>equality</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>relational</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>comparison operator</span>&nbsp;<span>is implicitly deleted</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 46%'><col style='width: 26%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicitly defaulted</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>default constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copy constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>move constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copy assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>move assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is implicitly deleted</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdefaulted-function-deleted'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DELEGATING_CTOR_CYCLES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "delegating-ctor-cycles",
    "name": "Published Standards/Compiler Warnings/Delegating Constructor Cycles",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdelegating-ctor-cycles</p>",
        "<p><b>Summary</b></p>",
        "<p>When a constructor is defined to eventually delegate itself, the result is a delegation cycle.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>constructor for</span>&nbsp;<em>A</em>&nbsp;<span>creates a delegation cycle</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelegating-ctor-cycles'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DELETE_ABSTRACT_NON_VIRTUAL_DTOR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "delete-abstract-non-virtual-dtor",
    "name": "Published Standards/Compiler Warnings/Delete Abstract Non-Virtual Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdelete-abstract-non-virtual-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>When a class/struct/union has a virtual method, then it becomes virtual. If its destructor is non-virtual and <code>delete</code> is attempted on a derived object, then only the virtual base destructor is called.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 16%'><col style='width: 14%'><col style='width: 70%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>delete</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>called on</span>&nbsp;<em>B</em>&nbsp;<span>that is abstract but has non-virtual destructor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-abstract-non-virtual-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DELETE_INCOMPLETE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "delete-incomplete",
    "name": "Published Standards/Compiler Warnings/Delete Incomplete",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdelete-incomplete</p>",
        "<p><b>Summary</b></p>",
        "<p>When a type is not defined or it is a <code>void *</code> it does not have a defined destructor. Do not try to delete it.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot delete expression with pointer-to-‘void’ type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>deleting pointer to incomplete type</span>&nbsp;<em>A</em>&nbsp;<span>may cause undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-incomplete'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DELETE_NON_ABSTRACT_NON_VIRTUAL_DTOR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most" , "Warnings"],
    "key": "delete-non-abstract-non-virtual-dtor",
    "name": "Published Standards/Compiler Warnings/Delete Non-Abstract Non-Virtual Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdelete-non-abstract-non-virtual-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>When a class/struct/union has a defined non-zero non-final virtual method, then it becomes virtual and non-final. If its destructor is non-virtual and <code>delete</code> is attempted on a derived object, then only the virtual base destructor is called.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 14%'><col style='width: 13%'><col style='width: 73%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>delete</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>called on non-final</span>&nbsp;<em>B</em>&nbsp;<span>that has virtual functions but non-virtual destructor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-non-abstract-non-virtual-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "deprecated",
    "name": "Published Standards/Compiler Warnings/Deprecated",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use language features or compiler flags that are deprecated, as they may be removed.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>-O4 is equivalent to -O3</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>access declarations are deprecated; use using declarations instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>out-of-line definition of constexpr static data member is redundant in C++17 and is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument ‘</span><em>A</em><span>’ is deprecated, use ‘</span><em>B</em><span>’ instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>treating ‘</span><em>A</em><span>’ input as ‘</span><em>B</em><span>’ when in C++ mode, this behavior is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>-fconcepts-ts is deprecated - use ‘-std=c++20’ for Concepts support</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>does not support the option ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Use of ‘long’ with ‘__vector’ is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_ALTIVEC_SRC_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "deprecated-altivec-src-compat",
    "name": "Published Standards/Compiler Warnings/Deprecated AltiVec Instruction Set Source Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-altivec-src-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>When the target uses the AltiVec instruction set, using the type <code>vector bool</code> or <code>vector pixel</code> is deprecated in certain contexts, unless the option  <code>-altivec-compat=xl</code> is used.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Current handling of vector bool and vector pixel types in this context are deprecated. The default behaviour will soon change to that implied by the ‘-altivec-compat=xl’ option</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-altivec-src-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_ANON_ENUM_ENUM_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "deprecated-anon-enum-enum-conversion",
    "name": "Published Standards/Compiler Warnings/Deprecated Anon-Enum, Enum Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-anon-enum-enum-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Arithmetic between, bitwise operation between, comparison of, conditional expression between, and compound assignment of different enumeration types is deprecated and should be avoided.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 11%'><col style='width: 17%'><col style='width: 19%'><col style='width: 40%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>arithmetic between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operation between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>comparison of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>conditional expression between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compound assignment of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>different enumeration types</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-anon-enum-enum-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_ARRAY_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "deprecated-array-compare",
    "name": "Published Standards/Compiler Warnings/Deprecated Array Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-array-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>When comparison between two arrays is deprecated, use unary '+' instead to decay operands to pointers.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison between two arrays is deprecated; to compare array addresses, use unary ‘+’ to decay operands to pointers</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-array-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_ATTRIBUTES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "deprecated-attributes",
    "name": "Published Standards/Compiler Warnings/Deprecated Attributes",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-attributes</p>",
        "<p><b>Summary</b></p>",
        "<p>The '[[_Noreturn]]' attribute spelling is deprecated in C2x. Use '[[noreturn]]' instead. When applying attribute A to a declaration is deprecated, apply it to the type instead. When specifying vector types with the 'mode' attribute is deprecated, use the 'vector_size' attribute instead.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the ‘[[_Noreturn]]’ attribute spelling is deprecated in C2x; use ‘[[noreturn]]’ instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>applying attribute</span>&nbsp;<em>A</em>&nbsp;<span>to a declaration is deprecated; apply it to the type instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>specifying vector types with the ‘mode’ attribute is deprecated; use the ‘vector_size’ attribute instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-attributes'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_BUILTINS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-builtins",
    "name": "Published Standards/Compiler Warnings/Deprecated Builtins",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-builtins</p>",
        "<p><b>Summary</b></p>",
        "<p>When a builtin macro/function provided by the compiler is deprecated, use the replacement instead.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>builtin</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated; use</span>&nbsp;<em>B</em>&nbsp;<span>instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-builtins'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_COMMA_SUBSCRIPT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "deprecated-comma-subscript",
    "name": "Published Standards/Compiler Warnings/Deprecated Comma Subscript",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-comma-subscript</p>",
        "<p><b>Summary</b></p>",
        "<p>After C++20, a comma in the brackets of an array subscript is treated as a comma separator instead of a comma expression.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>top-level comma expression in array subscript is deprecated in C++20 and unsupported in C++2b</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-comma-subscript'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_COPY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra" , "Warnings"],
    "key": "deprecated-copy",
    "name": "Published Standards/Compiler Warnings/Deprecated Copy",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-copy</p>",
        "<p><b>Summary</b></p>",
        "<p>When the definition of an implicit copy is deprecated because it has a user-declared copy.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 28%'><col style='width: 13%'><col style='width: 47%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>definition of implicit copy</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assignment operator</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>for</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated because it has a user-declared copy</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_COPY_WITH_DTOR": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "deprecated-copy-with-dtor",
    "name": "Published Standards/Compiler Warnings/Deprecated Copy with Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-copy-with-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>When the definition of an implicit copy is deprecated because it has a user-declared destructor.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 32%'><col style='width: 14%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>definition of implicit copy</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assignment operator</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>for</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated because it has a user-declared destructor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings" ],
    "key": "deprecated-copy-with-user-provided-copy",
    "name": "Published Standards/Compiler Warnings/Deprecated Copy with User Provided Copy",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-copy-with-user-provided-copy</p>",
        "<p><b>Summary</b></p>",
        "<p>When a copy constructor is explicitly defined, also explicitly define the copy assignment operator, and vice-versa.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 28%'><col style='width: 13%'><col style='width: 47%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>definition of implicit copy</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assignment operator</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>for</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated because it has a user-provided copy</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-copy'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_COPY_WITH_USER_PROVIDED_DTOR": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "deprecated-copy-with-user-provided-dtor",
    "name": "Published Standards/Compiler Warnings/Deprecated Copy with User Provided Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-copy-with-user-provided-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>When a destructor is explicitly defined, also explicitly define the copy constructor and copy assignment operator.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 32%'><col style='width: 14%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>definition of implicit copy</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assignment operator</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>for</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated because it has a user-provided destructor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_COROUTINE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "deprecated-coroutine",
    "name": "Published Standards/Compiler Warnings/Deprecated Coroutine",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-coroutine</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use <code>for co_await</code> because it is a deprecated experimental feature of the Coroutines TS (technical specification) and not a standard feature.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘for co_await’ belongs to CoroutineTS instead of C++20, which is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-coroutine'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_DECLARATIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-declarations",
    "name": "Published Standards/Compiler Warnings/Deprecated Declarations",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-declarations</p>",
        "<p><b>Summary</b></p>",
        "<p>Various kinds of declarations which are deprecated.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>specifying ‘uuid’ as an ATL attribute is deprecated; use __declspec instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of C-style parameters in Objective-C method declarations is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>may be deprecated because the receiver type is unknown</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property access is using</span>&nbsp;<em>A</em>&nbsp;<span>method which is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-declarations'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_DYNAMIC_EXCEPTION_SPEC": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "deprecated-dynamic-exception-spec",
    "name": "Published Standards/Compiler Warnings/Deprecated Dynamic Exception Spec",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-dynamic-exception-spec</p>",
        "<p><b>Summary</b></p>",
        "<p>Instead of listing the exceptions of a function with <code>throw</code>, use <code>noexcept(false)</code> for exceptions and <noexcept> for zero exceptions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dynamic exception specifications are deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-dynamic-exception-spec'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_EXPERIMENTAL_COROUTINE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "deprecated-experimental-coroutine",
    "name": "Published Standards/Compiler Warnings/Deprecated Experimental Coroutine",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-experimental-coroutine</p>",
        "<p><b>Summary</b></p>",
        "<p>Experimental coroutines are deprecated and their use should be avoided</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>support for std::experimental::</span><em>A</em>&nbsp;<span>will be removed in LLVM 15; use std::</span><em>A</em>&nbsp;<span>instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-experimental-coroutine'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_IMPLEMENTATIONS": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "deprecated-implementations",
    "name": "Published Standards/Compiler Warnings/Deprecated Implementations",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-implementations</p>",
        "<p><b>Summary</b></p>",
        "<p>Implementing deprecated or unavailable methods should be avoided</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 76%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implementing deprecated</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>category</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implementing unavailable method</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-implementations'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_INCREMENT_BOOL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-increment-bool",
    "name": "Published Standards/Compiler Warnings/Deprecated Increment Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-increment-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>Incrementing expressions of type bool should be avoided, as it is a deprecated action and incompatible with C++17</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incrementing expression of type bool is deprecated and incompatible with C++17</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-increment-bool'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_NON_PROTOTYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-non-prototype",
    "name": "Published Standards/Compiler Warnings/Deprecated Non-Prototype",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-non-prototype</p>",
        "<p><b>Summary</b></p>",
        "<p>When a function is called and there is no prototype in that context, then the parameter/return types are unknown.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 18%'><col style='width: 8%'><col style='width: 26%'><col style='width: 49%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>a function</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>declaration</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>definition</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>without a prototype is deprecated in all versions of C</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>and is not supported in C2x</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 61%'><col style='width: 16%'><col style='width: 5%'><col style='width: 17%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>and is treated as a zero-parameter prototype in C2x, conflicting with a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>previous</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>subsequent</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>declaration</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>definition</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 35%'><col style='width: 12%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing arguments to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>B</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>without a prototype is deprecated in all versions of C and is not supported in C2x</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-non-prototype'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_REGISTER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-register",
    "name": "Published Standards/Compiler Warnings/Deprecated Register",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-register</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>register</code> storage class specifier is deprecated because its effects are already implicit.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘register’ storage class specifier is deprecated and incompatible with C++17</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-register'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_STATIC_ANALYZER_FLAG": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "deprecated-static-analyzer-flag",
    "name": "Published Standards/Compiler Warnings/Deprecated Static Analyzer Flag",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-static-analyzer-flag</p>",
        "<p><b>Summary</b></p>",
        "<p>When using a flag to run the static analyzer, certain flags may be deprecated.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>analyzer option ‘</span><em>A</em><span>’ is deprecated. This flag will be removed in</span>&nbsp;<em>B</em><span>, and passing this option will be an error.</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-static-analyzer-flag'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_THIS_CAPTURE": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "deprecated-this-capture",
    "name": "Published Standards/Compiler Warnings/Deprecated This Capture",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-this-capture</p>",
        "<p><b>Summary</b></p>",
        "<p>For lambda expressions, using a by-copy capture with <code>[=]</code> to implicitly capture <code>this</code> is deprecated.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit capture of ‘this’ with a capture default of ‘=’ is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-this-capture'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_TYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings"],
    "key": "deprecated-type",
    "name": "Published Standards/Compiler Warnings/Deprecated Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-type</p>",
        "<p><b>Summary</b></p>",
        "<p>As a language extension, the type <code>_ExtInt</code> was added, but later renamed to <code>_BitInt</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘_ExtInt’ is deprecated; use ‘_BitInt’ instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DEPRECATED_VOLATILE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "deprecated-volatile",
    "name": "Published Standards/Compiler Warnings/Deprecated Volatile",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdeprecated-volatile</p>",
        "<p><b>Summary</b></p>",
        "<p>There are various usages of the type qualifier <code>volatile</code> which were deprecated because of ambiguity.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>compound assignment to object of volatile-qualified type</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 17%'><col style='width: 14%'><col style='width: 69%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>decrement</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>increment</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of object of volatile-qualified type</span>&nbsp;<em>B</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of result of assignment to object of volatile-qualified type</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>volatile-qualified parameter type</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>volatile-qualified return type</span>&nbsp;<em>A</em>&nbsp;<span>is deprecated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>volatile qualifier in structured binding declaration is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-volatile'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DISABLED_MACRO_EXPANSION": {
    "tags": [ "Standard: Compiler Warnings" , "Warnings"],
    "key": "disabled-macro-expansion",
    "name": "Published Standards/Compiler Warnings/Disabled Macro Expansion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdisabled-macro-expansion</p>",
        "<p><b>Summary</b></p>",
        "<p>Macros which recursively expand are disabled by the preprocessor.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>disabled expansion of recursive macro</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdisabled-macro-expansion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DIVISION_BY_ZERO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default" , "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "division-by-zero",
    "name": "Published Standards/Compiler Warnings/Division by Zero",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdivision-by-zero</p>",
        "<p><b>Summary</b></p>",
        "<p>Performing division by zero is an undefined behavior and should be avoided</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 30%'><col style='width: 26%'><col style='width: 44%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>remainder</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>division</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>by zero is undefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdivision-by-zero'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DLL_ATTRIBUTE_ON_REDECLARATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "dll-attribute-on-redeclaration",
    "name": "Published Standards/Compiler Warnings/DLL Attribute on Re-Declaration",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdll-attribute-on-redeclaration</p>",
        "<p><b>Summary</b></p>",
        "<p>When declaring something again, do not add a new dll attribute such as <code>dllimport</code> or <code>dllexport</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redeclaration of</span>&nbsp;<em>A</em>&nbsp;<span>should not add</span>&nbsp;<em>B</em>&nbsp;<span>attribute</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdll-attribute-on-redeclaration'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DLLEXPORT_EXPLICIT_INSTANTIATION_DECL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "dllexport-explicit-instantiation-decl",
    "name": "Published Standards/Compiler Warnings/DLLexport Explicit Instantiation Decl",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdllexport-explicit-instantiation-decl</p>",
        "<p><b>Summary</b></p>",
        "<p>For class templates, use the attribute <code>__declspec(dllexport)</code> on the class template declaration instead of the explicit instantiation declaration..</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit instantiation declaration should not be ‘dllexport’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdllexport-explicit-instantiation-decl'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DLLIMPORT_STATIC_FIELD_DEF": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "dllimport-static-field-def",
    "name": "Published Standards/Compiler Warnings/DLLimport Static Field Def",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdllimport-static-field-def</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use the storage-class attribute <code>dllimport</code> to define a constant/variable which is already static.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>definition of dllimport static field</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdllimport-static-field-def'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DOCUMENTATION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "documentation",
    "name": "Published Standards/Compiler Warnings/Documentation Warnings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdocumentation</p>",
        "<p><b>Summary</b></p>",
        "<p>When using documenation tools like Doxygen comment commands or Objective-C <code>@</code> directives, use them properly.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 20%'><col style='width: 8%'><col style='width: 11%'><col style='width: 35%'><col style='width: 11%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>protocol</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ command should not be used in a comment attached to a non-</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>protocol</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 57%'><col style='width: 15%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicated command ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 55%'><col style='width: 13%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty paragraph passed to ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em><span>’ command</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 23%'><col style='width: 9%'><col style='width: 15%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>classdesign</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>coclass</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>dependency</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>helper</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>helperclass</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>helps</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instancesize</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>ownership</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>performance</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>security</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>superclass</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ command should not be used in a comment attached to a non-container declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 18%'><col style='width: 7%'><col style='width: 12%'><col style='width: 32%'><col style='width: 16%'><col style='width: 14%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functiongroup</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>methodgroup</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>callback</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ command should be used in a comment attached to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an Objective-C method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an Objective-C method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a pointer to function</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>HTML start tag prematurely ended, expected attribute name or ‘&gt;’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected quoted string after equals sign</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 18%'><col style='width: 7%'><col style='width: 23%'><col style='width: 8%'><col style='width: 15%'><col style='width: 7%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em><span>’ command has</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>no</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>C</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>word argument</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>, expected</span>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parameter ‘</span><em>A</em><span>’ is already documented</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unrecognized parameter passing direction, valid directions are ‘[in]’, ‘[out]’ and ‘[in,out]’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 27%'><col style='width: 11%'><col style='width: 62%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>param’ command used in a comment that is not attached to a function declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parameter ‘</span><em>A</em><span>’ not found in the function declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 22%'><col style='width: 9%'><col style='width: 48%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em><span>’ command used in a comment that is attached to a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function returning void</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method returning void</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 24%'><col style='width: 10%'><col style='width: 67%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em><span>’ command used in a comment that is not attached to a function or method declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template parameter ‘</span><em>A</em><span>’ is already documented</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 27%'><col style='width: 11%'><col style='width: 62%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>tparam’ command used in a comment that is not attached to a template declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template parameter ‘</span><em>A</em><span>’ not found in the template declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>not a Doxygen trailing comment</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 30%'><col style='width: 12%'><col style='width: 58%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em><span>’ command does not terminate a verbatim text block</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DOCUMENTATION_DEPRECATED_SYNC": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "documentation-deprecated-sync",
    "name": "Published Standards/Compiler Warnings/Documentation Deprecated Sync",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdocumentation-deprecated-sync</p>",
        "<p><b>Summary</b></p>",
        "<p>When a comment has <code>@deprecated</code> or <code>\\deprecated</code>, it should also use a <code>[[deprecated]]</code> attribute.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 43%'><col style='width: 10%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration is marked with ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>\\</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>deprecated’ command but does not have a deprecation attribute</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-deprecated-sync'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DOCUMENTATION_HTML": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "documentation-html",
    "name": "Published Standards/Compiler Warnings/Documentation Html",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdocumentation-html</p>",
        "<p><b>Summary</b></p>",
        "<p>When using HTML tags in comments, open and close them in the proper order. Do not use forbidden HTML tags.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>HTML end tag ‘</span><em>A</em><span>’ is forbidden</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>HTML end tag does not match any start tag</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>HTML tag ‘</span><em>A</em><span>’ requires an end tag</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>HTML start tag ‘</span><em>A</em><span>’ closed by ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-html'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DOCUMENTATION_PEDANTIC": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "documentation-pedantic",
    "name": "Published Standards/Compiler Warnings/Documentation Pedantic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdocumentation-pedantic</p>",
        "<p><b>Summary</b></p>",
        "<p>Whitespace is not allowed in parameter passing direction.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>whitespace is not allowed in parameter passing direction</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-pedantic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DOCUMENTATION_UNKNOWN_COMMAND": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "documentation-unknown-command",
    "name": "Published Standards/Compiler Warnings/Documentation Unknown Command",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdocumentation-unknown-command</p>",
        "<p><b>Summary</b></p>",
        "<p>In a comment, when a word is preceded with <code>\\</code> or <code>@</code>, it should be a known command tag name.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown command tag name ‘</span><em>A</em><span>’; did you mean ‘</span><em>B</em><span>’?</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown command tag name</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-unknown-command'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DOLLAR_IN_IDENTIFIER_EXTENSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "dollar-in-identifier-extension",
    "name": "Published Standards/Compiler Warnings/Dollar in Identifier Extension",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdollar-in-identifier-extension</p>",
        "<p><b>Summary</b></p>",
        "<p>Dollar signs should not be part of an identifier extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’$’ in identifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdollar-in-identifier-extension'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DOUBLE_PROMOTION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "double-promotion",
    "name": "Published Standards/Compiler Warnings/Double Promotion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdouble-promotion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert a floating-point value from a smaller bit-width type to a larger bit-width type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion increases floating-point precision:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdouble-promotion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DTOR_NAME": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "dtor-name",
    "name": "Published Standards/Compiler Warnings/Destructor Name",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdtor-name</p>",
        "<p><b>Summary</b></p>",
        "<p>The name of a destructor should be unambiguous. The name after <code>::~</code> should be declared in the same scope as the name before it. The destructor of the name after <code>::~</code> should be declared in its appropriate scope.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ considers this destructor name lookup to be ambiguous</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ requires the name after ‘::~’ to be found in the same scope as the name before ‘::~’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>qualified destructor name only found in lexical scope; omit the qualifier to find this type name by unqualified lookup</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdtor-name'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DTOR_TYPEDEF": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "dtor-typedef",
    "name": "Published Standards/Compiler Warnings/Destructor Typedef",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdtor-typedef</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use a typedef or type alias for the name of a destructor.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 48%'><col style='width: 15%'><col style='width: 37%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>destructor cannot be declared using a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>typedef</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>type alias</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;<span>of the class name</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdtor-typedef'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DUPLICATE_DECL_SPECIFIER": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "duplicate-decl-specifier",
    "name": "Published Standards/Compiler Warnings/Duplicate Decl Specifier",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wduplicate-decl-specifier</p>",
        "<p><b>Summary</b></p>",
        "<p>When declaraing a type, do not repeat the same keyword/identifier.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicate ‘</span><em>A</em><span>’ declaration specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicate ‘</span><em>A</em><span>’ declaration specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple identical address spaces specified for type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicate ‘</span><em>A</em><span>’ declaration specifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-decl-specifier'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DUPLICATE_ENUM": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "duplicate-enum",
    "name": "Published Standards/Compiler Warnings/Duplicate Enum",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wduplicate-enum</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for the duplication of enums, which may implicitly reassign objects that have already been assigned</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>element</span>&nbsp;<em>A</em>&nbsp;<span>has been implicitly assigned</span>&nbsp;<em>B</em>&nbsp;<span>which another element has been assigned</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-enum'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DUPLICATE_METHOD_ARG": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "duplicate-method-arg",
    "name": "Published Standards/Compiler Warnings/Duplicate Method Arg",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wduplicate-method-arg</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for the redeclaration of method parameters</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redeclaration of method parameter</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-method-arg'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DUPLICATE_METHOD_MATCH": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "duplicate-method-match",
    "name": "Published Standards/Compiler Warnings/Duplicate Method Match",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wduplicate-method-match</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for the duplication of method declarations</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple declarations of method</span>&nbsp;<em>A</em>&nbsp;<span>found and ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-method-match'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DUPLICATE_PROTOCOL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "duplicate-protocol",
    "name": "Published Standards/Compiler Warnings/Duplicate Protocol",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wduplicate-protocol</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for duplicate protocol definitions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicate protocol definition of</span>&nbsp;<em>A</em>&nbsp;<span>is ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-protocol'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DYNAMIC_CLASS_MEMACCESS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "dynamic-class-memaccess",
    "name": "Published Standards/Compiler Warnings/Dynamic Class Memory Access",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdynamic-class-memaccess</p>",
        "<p><b>Summary</b></p>",
        "<p>When memory is accessed with functions like <code>memcmp</code>, if a dynamic class is used, then the vtable pointer will be used as well.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 9%'><col style='width: 10%'><col style='width: 31%'><col style='width: 13%'><col style='width: 30%'><col style='width: 8%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>destination for</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>source of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>first operand of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>second operand of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>this</span>&nbsp;<em>B</em>&nbsp;<span>call is a pointer to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class containing a</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>dynamic class</span>&nbsp;<em>D</em><span>; vtable pointer will be</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>overwritten</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copied</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>moved</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compared</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-class-memaccess'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_DYNAMIC_EXCEPTION_SPEC": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "dynamic-exception-spec",
    "name": "Published Standards/Compiler Warnings/Dynamic Exception Spec",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wdynamic-exception-spec</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not specify if a function throws with the <code>throw</code> keyword. Instead, use <code>noexcept(false)</code> if it throws and <code>noexcept</code> if it does not.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>ISO C++17 does not allow dynamic exception specifications</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-exception-spec'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ELABORATED_ENUM_BASE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "elaborated-enum-base",
    "name": "Published Standards/Compiler Warnings/Elaborated Enum Base",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Welaborated-enum-base</p>",
        "<p><b>Summary</b></p>",
        "<p>When using an <code>enum</code>, do not specify the underlying type. Instead, do this at the <code>enum</code> declaration.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 77%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>non-defining declaration of enumeration with a fixed underlying type is only permitted as a standalone declaration</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; missing list of enumerators?</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#welaborated-enum-base'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ELABORATED_ENUM_CLASS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "elaborated-enum-class",
    "name": "Published Standards/Compiler Warnings/Elaborated Enum Class",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Welaborated-enum-class</p>",
        "<p><b>Summary</b></p>",
        "<p>When using an <code>enum</code>, do not type <code>enum struct</code> or <code>enum class</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 74%'><col style='width: 16%'><col style='width: 10%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>reference to enumeration must use ‘enum’ not ‘enum</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#welaborated-enum-class'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EMBEDDED_DIRECTIVE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "embedded-directive",
    "name": "Published Standards/Compiler Warnings/Embedded Directive",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wembedded-directive</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not put preprocessor directives inside of macro arguments.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>embedding a directive within macro arguments has undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wembedded-directive'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EMPTY_BODY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "empty-body",
    "name": "Published Standards/Compiler Warnings/Control Loop Shall Not Have Empty Body",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wempty-body</p>",
        "<p><b>Summary</b></p>",
        "<p>Control loops (if, for, while) and switch statements shall not have empty bodies</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>for loop has empty body</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>if statement has empty body</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>range-based for loop has empty body</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>switch statement has empty body</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>while loop has empty body</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-body'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EMPTY_DECOMPOSITION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "empty-decomposition",
    "name": "Published Standards/Compiler Warnings/Decomposition Group Shall Not Be Empty",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wempty-decomposition</p>",
        "<p><b>Summary</b></p>",
        "<p>Decomposition groups shall not be empty, per ISO C++17</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++17 does not allow a decomposition group to be empty</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-decomposition'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EMPTY_INIT_STMT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "empty-init-stmt",
    "name": "Published Standards/Compiler Warnings/No Empty Initialization Statements",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wempty-init-stmt</p>",
        "<p><b>Summary</b></p>",
        "<p>Empty initialization of 'if', 'switch', or 'range-based for' statements has no effect</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 57%'><col style='width: 22%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty initialization statement of ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>if</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>switch</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>range-based for</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ has no effect</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-init-stmt'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EMPTY_TRANSLATION_UNIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "empty-translation-unit",
    "name": "Published Standards/Compiler Warnings/Empty Translation Unit",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wempty-translation-unit</p>",
        "<p><b>Summary</b></p>",
        "<p>A translation should contain at least one declaration.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C requires a translation unit to contain at least one declaration</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-translation-unit'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ENUM_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "enum-compare",
    "name": "Published Standards/Compiler Warnings/Enum Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>When 2 enumerators are from different enumeration types in the same operation, consider combining the enumeration type definitions or explicitly converting them.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 20%'><col style='width: 21%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>arithmetic between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operation between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>comparison of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>conditional expression between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compound assignment of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>different enumeration types</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ENUM_COMPARE_CONDITIONAL": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "enum-compare-conditional",
    "name": "Published Standards/Compiler Warnings/Enum Compare Conditional",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-compare-conditional</p>",
        "<p><b>Summary</b></p>",
        "<p>When 2 enumerators are from different enumeration types in the same operation, consider combining the enumeration type definitions or explicitly converting them.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 20%'><col style='width: 21%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>arithmetic between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operation between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>comparison of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>conditional expression between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compound assignment of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>different enumeration types</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-conditional'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ENUM_COMPARE_SWITCH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "enum-compare-switch",
    "name": "Published Standards/Compiler Warnings/Enum Compare Switch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-compare-switch</p>",
        "<p><b>Summary</b></p>",
        "<p>In a switch statement, do not compare enumerators from different enumeration types.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 50%'><col style='width: 50%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of different enumeration types in switch statement</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-switch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ENUM_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "enum-conversion",
    "name": "Published Standards/Compiler Warnings/Enum Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Implicit conversion from enumeration type may cause a change of enumeration type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from enumeration type</span>&nbsp;<em>A</em>&nbsp;<span>to different enumeration type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ENUM_ENUM_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "enum-enum-conversion",
    "name": "Published Standards/Compiler Warnings/Enum Enum Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-enum-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Different enum types.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 20%'><col style='width: 21%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>arithmetic between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operation between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>comparison of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>conditional expression between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compound assignment of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>different enumeration types</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-enum-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ENUM_FLOAT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "enum-float-conversion",
    "name": "Published Standards/Compiler Warnings/Enum Float Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-float-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When performing an operation between a floating type and an enum type, explicitly convert one of them.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 10%'><col style='width: 17%'><col style='width: 3%'><col style='width: 11%'><col style='width: 21%'><col style='width: 7%'><col style='width: 3%'><col style='width: 11%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>arithmetic between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operation between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>comparison of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>conditional expression between</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>compound assignment of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>floating-point</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enumeration</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>C</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>with</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>from</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>and</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>floating-point</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>D</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-float-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ENUM_TOO_LARGE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "enum-too-large",
    "name": "Published Standards/Compiler Warnings/Enum Too Large",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wenum-too-large</p>",
        "<p><b>Summary</b></p>",
        "<p>Enumeration values shall not exceed range of largest integer. Incremented enumerators shall not exceed the size of the largest integer type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration values exceed range of largest integer</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incremented enumerator value</span>&nbsp;<em>A</em>&nbsp;<span>is not representable in the largest integer type</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-too-large'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXCEPTIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "exceptions",
    "name": "Published Standards/Compiler Warnings/Exceptions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wexceptions</p>",
        "<p><b>Summary</b></p>",
        "<p>Cannot refer to a non-static member from the handler of a constructor, destructor, and function try block</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 62%'><col style='width: 15%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot refer to a non-static member from the handler of a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>function try block</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception of type</span>&nbsp;<em>A</em>&nbsp;<span>will be caught by earlier handler</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has a non-throwing exception specification but can still throw</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexceptions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXCESS_INITIALIZERS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "excess-initializers",
    "name": "Published Standards/Compiler Warnings/Excess Initializers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wexcess-initializers</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use too many elements to initialize an array, vector, scalar, union, struct, etc.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 56%'><col style='width: 17%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>excess elements in</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>array</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>vector</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>scalar</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>struct</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>initializer</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>excess elements in initializer for indivisible sizeless type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>excess elements in char array initializer</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializer-string for char array is too long</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexcess-initializers'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXIT_TIME_DESTRUCTORS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "exit-time-destructors",
    "name": "Published Standards/Compiler Warnings/Exit Time Destructors",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wexit-time-destructors</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not run destructors of global or static object at exit-time. This can be done by removing the destructor or using the attribute <code>[[clang::no_destroy]]</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration requires an exit-time destructor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexit-time-destructors'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXPANSION_TO_DEFINED": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "expansion-to-defined",
    "name": "Published Standards/Compiler Warnings/Expansion to Defined",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wexpansion-to-defined</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not define macros which expand and produce the <code>defined</code> directive.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>macro expansion producing ‘defined’ has undefined behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>macro expansion producing ‘defined’ has undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexpansion-to-defined'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXPORT_UNNAMED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "export-unnamed",
    "name": "Published Standards/Compiler Warnings/Export Unnamed",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wexport-unnamed</p>",
        "<p><b>Summary</b></p>",
        "<p>In an <code>export</code> block, there should be at least one identifier introduced and also no empty statements.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 44%'><col style='width: 19%'><col style='width: 37%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++20 does not permit</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>an empty</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a static_assert</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration to appear in an export block</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++20 does not permit a declaration that does not introduce any names to be exported</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexport-unnamed'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXPORT_USING_DIRECTIVE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "export-using-directive",
    "name": "Published Standards/Compiler Warnings/Export Using Directive",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wexport-using-directive</p>",
        "<p><b>Summary</b></p>",
        "<p>In an <code>export</code> block, do not use preprocessor directives.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++20 does not permit using directive to be exported</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wexport-using-directive'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXTERN_C_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "extern-c-compat",
    "name": "Published Standards/Compiler Warnings/Extern C Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextern-c-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>A struct/union which has a size 0 in C has a non-zero size in C++.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 16%'><col style='width: 16%'><col style='width: 12%'><col style='width: 26%'><col style='width: 16%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>empty</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>has size 0 in C,</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>size 1</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-zero size</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in C++</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextern-c-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXTERN_INITIALIZER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "extern-initializer",
    "name": "Published Standards/Compiler Warnings/Extern Initializer",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextern-initializer</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not initialize <code>extern</code> variables.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘extern’ variable has an initializer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextern-initializer'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXTRA": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "extra",
    "name": "Published Standards/Compiler Warnings/Extra Warnings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextra</p>",
        "<p><b>Summary</b></p>",
        "<p>Call to function without interrupt attribute could clobber interruptee's VFP registers.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>call to function without interrupt attribute could clobber interruptee’s VFP registers</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXTRA_QUALIFICATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "extra-qualification",
    "name": "Published Standards/Compiler Warnings/Extra Qualification",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextra-qualification</p>",
        "<p><b>Summary</b></p>",
        "<p>If a member is in the block of its scope, do not precede it with the scope resolution operator <code>::</code> and its scope name.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra qualification on member</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-qualification'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXTRA_SEMI": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "extra-semi",
    "name": "Published Standards/Compiler Warnings/Extra Semicolon",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextra-semi</p>",
        "<p><b>Summary</b></p>",
        "<p>If an extra semi-colon exists outside of a function, inside instance variable list, after member function definition, etc.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 54%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra ‘;’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>outside of a function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>inside a</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>inside instance variable list</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>after member function definition</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra ‘;’ after member function definition</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-semi'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXTRA_SEMI_STMT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "extra-semi-stmt",
    "name": "Published Standards/Compiler Warnings/Extra Semicolon in Empty Expression Statement",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextra-semi-stmt</p>",
        "<p><b>Summary</b></p>",
        "<p>Extra semi-colon in empty expression statement.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty expression statement has no effect; remove unnecessary ‘;’ to silence this warning</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-semi-stmt'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_EXTRA_TOKENS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "extra-tokens",
    "name": "Published Standards/Compiler Warnings/Extra Tokens",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wextra-tokens</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not type tokens after the end of a preprocessor directive and its arguments.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra tokens at end of #</span><em>A</em>&nbsp;<span>directive</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra tokens at the end of ‘#pragma omp</span>&nbsp;<em>A</em><span>’ are ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-tokens'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FINAL_DTOR_NON_FINAL_CLASS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "final-dtor-non-final-class",
    "name": "Published Standards/Compiler Warnings/Final Destructor Non-Final Class",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfinal-dtor-non-final-class</p>",
        "<p><b>Summary</b></p>",
        "<p>Only classses with non-final destructors can be inherited from.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 54%'><col style='width: 16%'><col style='width: 30%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>class with destructor marked ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>final</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sealed</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ cannot be inherited from</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfinal-dtor-non-final-class'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FINAL_MACRO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "final-macro",
    "name": "Published Standards/Compiler Warnings/Final Macros Should Not Be Redefined",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfinal-macro</p>",
        "<p><b>Summary</b></p>",
        "<p>Macros that have been marked 'final' should not be undefined or redefined</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 86%'><col style='width: 14%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>macro</span>&nbsp;<em>A</em>&nbsp;<span>has been marked as final and should not be</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>undefined</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>redefined</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfinal-macro'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FIXED_ENUM_EXTENSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "fixed-enum-extension",
    "name": "Published Standards/Compiler Warnings/Fixed Enum Extension",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfixed-enum-extension</p>",
        "<p><b>Summary</b></p>",
        "<p>Enumeration types with specific fixed underlying types are only supported by some compilers/standards.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration types with a fixed underlying type are a Clang extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfixed-enum-extension'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FIXED_POINT_OVERFLOW": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "fixed-point-overflow",
    "name": "Published Standards/Compiler Warnings/Fixed Point Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfixed-point-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning if an expression is evaluated at compilation time and it overflows.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overflow in expression; result is</span>&nbsp;<em>A</em>&nbsp;<span>with type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfixed-point-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FLAG_ENUM": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "flag-enum",
    "name": "Published Standards/Compiler Warnings/Flag Enum",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wflag-enum</p>",
        "<p><b>Summary</b></p>",
        "<p>If an enumeration type has a flag attribute, then the expected values are powers of 2.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration value</span>&nbsp;<em>A</em>&nbsp;<span>is out of range of flags in enumeration type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wflag-enum'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FLEXIBLE_ARRAY_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "flexible-array-extensions",
    "name": "Published Standards/Compiler Warnings/Flexible Array Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wflexible-array-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>If a struct has an array as its last member, then do not use it in arrays or nested structs.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>may not be used as an array element due to flexible array member</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>may not be nested in a struct due to flexible array member</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wflexible-array-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FLOAT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "float-conversion",
    "name": "Published Standards/Compiler Warnings/Float Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfloat-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Implicit conversion turns floating-point number into integer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion turns floating-point number into integer:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FLOAT_EQUAL": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "float-equal",
    "name": "Published Standards/Compiler Warnings/Float Equal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfloat-equal</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of imprecision, do not use <code>==</code> or <code>!=</code> to compare floating points.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparing floating point with == or != is unsafe</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-equal'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FLOAT_OVERFLOW_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "float-overflow-conversion",
    "name": "Published Standards/Compiler Warnings/Float Overflow Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfloat-overflow-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When an expression is implicitly converted to another type, the value may change due to overflow.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>changes value from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion of out of range value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>is undefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-overflow-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FLOAT_ZERO_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "float-zero-conversion",
    "name": "Published Standards/Compiler Warnings/Float Zero Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfloat-zero-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When a float expression is implicitly converted to a non-float type, the value may change to zero.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>changes non-zero value from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-zero-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FOR_LOOP_ANALYSIS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "for-loop-analysis",
    "name": "Published Standards/Compiler Warnings/For Loop Analysis",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfor-loop-analysis</p>",
        "<p><b>Summary</b></p>",
        "<p>With <code>for</code> loops, control variables should be modified exclusively in the control statement or the body.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 53%'><col style='width: 13%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable</span>&nbsp;<em>A</em>&nbsp;<span>is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>decremented</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>incremented</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>both in the loop header and in the loop body</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 17%'><col style='width: 58%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>s</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>s</span>&nbsp;<em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>s</span>&nbsp;<em>B</em><span>,</span>&nbsp;<em>C</em><span>, and</span>&nbsp;<em>D</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>s</span>&nbsp;<em>B</em><span>,</span>&nbsp;<em>C</em><span>,</span>&nbsp;<em>D</em><span>, and</span>&nbsp;<em>E</em></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>used in loop condition not modified in loop body</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfor-loop-analysis'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format",
    "name": "Published Standards/Compiler Warnings/Format String",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat</p>",
        "<p><b>Summary</b></p>",
        "<p>Various problems from using a format string incorrectly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using ‘%%P’ format specifier without precision</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 19%'><col style='width: 69%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>values of type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum values with underlying type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>A</em><span>’ should not be used as format arguments; add an explicit cast to</span>&nbsp;<em>B</em>&nbsp;<span>instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using ‘</span><em>A</em><span>’ format specifier, but argument has boolean value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 71%'><col style='width: 16%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format specifies type</span>&nbsp;<em>A</em>&nbsp;<span>but the argument has</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>underlying type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using ‘</span><em>A</em><span>’ format specifier annotation outside of os_log()/os_trace()</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 73%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid position specified for</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field width</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>field precision</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot mix positional and non-positional arguments in format string</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>length modifier ‘</span><em>A</em><span>’ results in undefined behavior or no effect with ‘</span><em>B</em><span>’ conversion specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string should not be a wide string</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>position arguments in format strings start counting at 1 (not 0)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string missing</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>object format flags cannot be used with ‘</span><em>A</em><span>’ conversion specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 23%'><col style='width: 10%'><col style='width: 21%'><col style='width: 13%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>*</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>.*</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ specified field</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>width</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>precision</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is missing a matching ‘int’ argument</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 27%'><col style='width: 12%'><col style='width: 61%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>field</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>width</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>precision</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>should have type</span>&nbsp;<em>B</em><span>, but argument has type</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing object format flag</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string contains ‘\\0’ within the string body</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string is not null-terminated</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flag ‘</span><em>A</em><span>’ is ignored when flag ‘</span><em>B</em><span>’ is present</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incomplete format specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not a valid object format flag</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’%%n’ specifier not supported on this platform</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flag ‘</span><em>A</em><span>’ results in undefined behavior with ‘</span><em>B</em><span>’ conversion specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 16%'><col style='width: 15%'><col style='width: 69%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field width</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>precision</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>used with ‘</span><em>B</em><span>’ conversion specifier, resulting in undefined behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>data argument position ‘</span><em>A</em><span>’ exceeds the number of data arguments (</span><em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>zero field width in scanf format string is unused</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no closing ‘]’ for ‘%%[‘ in scanf format string</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_EXTRA_ARGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-extra-args",
    "name": "Published Standards/Compiler Warnings/Format Extra Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-extra-args</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for data argumets not used by format strings</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>data argument not used by format string</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-extra-args'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_INSUFFICIENT_ARGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-insufficient-args",
    "name": "Published Standards/Compiler Warnings/Format Insufficient Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-insufficient-args</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for insuficient arguments</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>more ‘%%’ conversions than data arguments</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-insufficient-args'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_INVALID_SPECIFIER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-invalid-specifier",
    "name": "Published Standards/Compiler Warnings/Format Invalid Specifier",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-invalid-specifier</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for invalid conversion specifiers</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid conversion specifier ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-invalid-specifier'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_NON_ISO": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "format-non-iso",
    "name": "Published Standards/Compiler Warnings/Format Non-ISO",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-non-iso</p>",
        "<p><b>Summary</b></p>",
        "<p>In a formatted string, some <code>%</code> specifiers are not supported by ISO C.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 49%'><col style='width: 22%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>length modifier</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>conversion specifier</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is not supported by ISO C</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using length modifier ‘</span><em>A</em><span>’ with conversion specifier ‘</span><em>B</em><span>’ is not supported by ISO C</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>positional arguments are not supported by ISO C</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-non-iso'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_NONLITERAL": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "format-nonliteral",
    "name": "Published Standards/Compiler Warnings/Format Non-Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-nonliteral</p>",
        "<p><b>Summary</b></p>",
        "<p>For a format string function, use a string literal instead of other kinds of expressions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string is not a string literal</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-nonliteral'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_PEDANTIC": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "format-pedantic",
    "name": "Published Standards/Compiler Warnings/Format Pedantic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-pedantic</p>",
        "<p><b>Summary</b></p>",
        "<p>Explicitly cast types and enumeration types which are arguments in format strings.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 11%'><col style='width: 19%'><col style='width: 69%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>values of type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum values with underlying type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>A</em><span>’ should not be used as format arguments; add an explicit cast to</span>&nbsp;<em>B</em>&nbsp;<span>instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 71%'><col style='width: 16%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format specifies type</span>&nbsp;<em>A</em>&nbsp;<span>but the argument has</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>underlying type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-pedantic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_SECURITY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-security",
    "name": "Published Standards/Compiler Warnings/Format Security",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-security</p>",
        "<p><b>Summary</b></p>",
        "<p>When a format string is an expected parameter, use a literal string instead of other kinds of expressions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string is not a string literal (potentially insecure)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-security'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_TYPE_CONFUSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "format-type-confusion",
    "name": "Published Standards/Compiler Warnings/Format Type Confusion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-type-confusion</p>",
        "<p><b>Summary</b></p>",
        "<p>Explicitly cast types which are arguments in format strings.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 71%'><col style='width: 16%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format specifies type</span>&nbsp;<em>A</em>&nbsp;<span>but the argument has</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>underlying type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-type-confusion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORMAT_ZERO_LENGTH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "format-zero-length",
    "name": "Published Standards/Compiler Warnings/Format Zero Length",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wformat-zero-length</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for empty format strings</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format string is empty</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-zero-length'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FORTIFY_SOURCE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "fortify-source",
    "name": "Published Standards/Compiler Warnings/Fortify Source",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfortify-source</p>",
        "<p><b>Summary</b></p>",
        "<p>In a function call, do not let the source buffer be potentially larger than a destination buffer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ may overflow; destination buffer in argument</span>&nbsp;<em>B</em>&nbsp;<span>has size</span>&nbsp;<em>C</em><span>, but the corresponding specifier may require size</span>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always overflow; destination buffer has size</span>&nbsp;<em>B</em><span>, but format string expands to at least</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always overflow; destination buffer has size</span>&nbsp;<em>B</em><span>, but size argument is</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ size argument is too large; destination buffer has size</span>&nbsp;<em>B</em><span>, but size argument is</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will always overflow; destination buffer has size</span>&nbsp;<em>B</em><span>, but the source string has length</span>&nbsp;<em>C</em>&nbsp;<span>(including NUL byte)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfortify-source'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FOUR_CHAR_CONSTANTS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "four-char-constants",
    "name": "Published Standards/Compiler Warnings/Four Char Constants",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfour-char-constants</p>",
        "<p><b>Summary</b></p>",
        "<p>In a character literal, only have one character.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multi-character character constant</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfour-char-constants'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FRAME_ADDRESS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "frame-address",
    "name": "Published Standards/Compiler Warnings/Frame Address",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wframe-address</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of compiler optimization, calling functions like <code>__builtin_return_address</code> may result in unexpected results.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>calling ‘</span><em>A</em><span>’ with a nonzero argument is unsafe</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wframe-address'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FREE_NONHEAP_OBJECT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "free-nonheap-object",
    "name": "Published Standards/Compiler Warnings/Free Non-Heap Object",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfree-nonheap-object</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not call functions like <code>free</code> on anything except for objects allocated on the heap.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 66%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attempt to call</span>&nbsp;<em>A</em>&nbsp;<span>on non-heap</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>object</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>object: block expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>object: lambda-to-function-pointer conversion</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfree-nonheap-object'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FUNCTION_MULTIVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "function-multiversion",
    "name": "Published Standards/Compiler Warnings/Function Multi-Version",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfunction-multiversion</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>cpu_dispatch</code> attribute expects a function declaration without a body, and all similar attributes expect no duplicates.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>body of cpu_dispatch function will be ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>CPU list contains duplicate entries; attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>version list contains duplicate entries</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfunction-multiversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_FUSE_LD_PATH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "fuse-ld-path",
    "name": "Published Standards/Compiler Warnings/Fuse LD Path",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wfuse-ld-path</p>",
        "<p><b>Summary</b></p>",
        "<p>Because the compiler warning <code>-fuse-ld=</code> is deprecated, use <code>-ld-path=</code> instead.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’-fuse-ld=’ taking a path is deprecated; use ‘–ld-path=’ instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wfuse-ld-path'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GCC_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "gcc-compat",
    "name": "Published Standards/Compiler Warnings/GCC Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgcc-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings which helps code be compatible with the GCC compiler.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘diagnose_if’ is a clang extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘enable_if’ is a clang extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__final is a GNU extension, consider using C++11 final</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>GCC does not allow</span>&nbsp;<em>A</em>&nbsp;<span>attribute in this position on a function definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘break’ is bound to loop, GCC binds it to switch</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>GCC does not allow the ‘cleanup’ attribute argument to be anything other than a simple identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>GCC does not allow an attribute in this position on a function declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>GCC does not allow the</span>&nbsp;<em>A</em>&nbsp;<span>attribute to be written on a type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>GCC requires a function with the</span>&nbsp;<em>A</em>&nbsp;<span>attribute to be variadic</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>GCC does not allow variable declarations in for loop initializers before C99</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is bound to current loop, GCC binds it to the enclosing loop</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgcc-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GLOBAL_CONSTRUCTORS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "global-constructors",
    "name": "Published Standards/Compiler Warnings/Global Constructors",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wglobal-constructors</p>",
        "<p><b>Summary</b></p>",
        "<p>Declarations require global constructors and destructors</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration requires a global constructor</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration requires a global destructor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wglobal-constructors'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GLOBAL_ISEL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "global-isel",
    "name": "Published Standards/Compiler Warnings/GlobalISel (Global Instruction Selection) Framework",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wglobal-isel</p>",
        "<p><b>Summary</b></p>",
        "<p>The GlobalISel framework is not fully supported.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>-fglobal-isel support for the ‘</span><em>A</em><span>’ architecture is incomplete</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>-fglobal-isel support is incomplete for this architecture at the current optimization level</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wglobal-isel'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_ALIGNOF_EXPRESSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "gnu-alignof-expression",
    "name": "Published Standards/Compiler Warnings/GNU Alignof Expression",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-alignof-expression</p>",
        "<p><b>Summary</b></p>",
        "<p> </p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>applied to an expression is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-alignof-expression'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_ANONYMOUS_STRUCT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-anonymous-struct",
    "name": "Published Standards/Compiler Warnings/GNU Anonymous Struct",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-anonymous-struct</p>",
        "<p><b>Summary</b></p>",
        "<p>Anonymous structs are a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>anonymous structs are a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-anonymous-struct'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_ARRAY_MEMBER_PAREN_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "gnu-array-member-paren-init",
    "name": "Published Standards/Compiler Warnings/GNU Array Member Parentheses Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-array-member-paren-init</p>",
        "<p><b>Summary</b></p>",
        "<p>Parenthesized initialization of a member array is a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>parenthesized initialization of a member array is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-array-member-paren-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_AUTO_TYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-auto-type",
    "name": "Published Standards/Compiler Warnings/GNU Auto Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-auto-type</p>",
        "<p><b>Summary</b></p>",
        "<p>'__auto_type' is a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘__auto_type’ is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-auto-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_BINARY_LITERAL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-binary-literal",
    "name": "Published Standards/Compiler Warnings/GNU Binary Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-binary-literal</p>",
        "<p><b>Summary</b></p>",
        "<p>Binary integer literals are a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>binary integer literals are a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-binary-literal'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_CASE_RANGE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-case-range",
    "name": "Published Standards/Compiler Warnings/GNU Case Range",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-case-range</p>",
        "<p><b>Summary</b></p>",
        "<p>Use of GNU case range extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU case range extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-case-range'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_COMPLEX_INTEGER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-complex-integer",
    "name": "Published Standards/Compiler Warnings/GNU Complex Integer",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-complex-integer</p>",
        "<p><b>Summary</b></p>",
        "<p>Complex integer types are a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>complex integer types are a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-complex-integer'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_COMPOUND_LITERAL_INITIALIZER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-compound-literal-initializer",
    "name": "Published Standards/Compiler Warnings/GNU Compound Literal Initializer",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-compound-literal-initializer</p>",
        "<p><b>Summary</b></p>",
        "<p>Initialization of an array (VARIOUS TEXT) is a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 31%'><col style='width: 52%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialization of an array</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>of type</span>&nbsp;<em>A</em>&nbsp;<span>from a compound literal of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>from a compound literal</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-compound-literal-initializer'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_CONDITIONAL_OMITTED_OPERAND": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-conditional-omitted-operand",
    "name": "Published Standards/Compiler Warnings/GNU Conditional Omitted Operand",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-conditional-omitted-operand</p>",
        "<p><b>Summary</b></p>",
        "<p>Use of GNU '?':conditional expression extension, omitting middle operand</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU ?: conditional expression extension, omitting middle operand</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-conditional-omitted-operand'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_DESIGNATOR": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "gnu-designator",
    "name": "Published Standards/Compiler Warnings/GNU Designator",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-designator</p>",
        "<p><b>Summary</b></p>",
        "<p>Use of GNU array range, 'missing =', or old-style field designator extensions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU array range extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU ‘missing =’ extension in designator</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU old-style field designator extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-designator'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_EMPTY_INITIALIZER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-empty-initializer",
    "name": "Published Standards/Compiler Warnings/GNU Empty Initializer",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-empty-initializer</p>",
        "<p><b>Summary</b></p>",
        "<p>Use of GNU empty initializer extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU empty initializer extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-empty-initializer'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_EMPTY_STRUCT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-empty-struct",
    "name": "Published Standards/Compiler Warnings/GNU Empty Struct",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-empty-struct</p>",
        "<p><b>Summary</b></p>",
        "<p>Empty (VARIOUS TEXT), flexible array member in otherwise empty (VARIOUS TEXT), and (VARIOUS TEXT) without named members are GNU extensions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 47%'><col style='width: 18%'><col style='width: 35%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 68%'><col style='width: 12%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flexible array member</span>&nbsp;<em>A</em>&nbsp;<span>in otherwise empty</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 25%'><col style='width: 19%'><col style='width: 56%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>without named members is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-empty-struct'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_FLEXIBLE_ARRAY_INITIALIZER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-flexible-array-initializer",
    "name": "Published Standards/Compiler Warnings/GNU Flexible Array Initializer",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-flexible-array-initializer</p>",
        "<p><b>Summary</b></p>",
        "<p>Flexible array initialization is a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flexible array initialization is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-flexible-array-initializer'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_FLEXIBLE_ARRAY_UNION_MEMBER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-flexible-array-union-member",
    "name": "Published Standards/Compiler Warnings/GNU Flexible Array Union Member",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-flexible-array-union-member</p>",
        "<p><b>Summary</b></p>",
        "<p>Flexible array members in a union is a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flexible array member</span>&nbsp;<em>A</em>&nbsp;<span>in a union is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-flexible-array-union-member'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_FOLDING_CONSTANT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "gnu-folding-constant",
    "name": "Published Standards/Compiler Warnings/GNU Folding Constant",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-folding-constant</p>",
        "<p><b>Summary</b></p>",
        "<p>When the type of an expression is <code>const</code> or non-constant instead of <code>constexpr</code>, it may not be initialized at compile time. Folding these to <code>constexpr</code> is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 13%'><col style='width: 49%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression is not an</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>integer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>integral</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>constant expression; folding it to a constant is a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable length array folded to constant array as an extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-folding-constant'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_IMAGINARY_CONSTANT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-imaginary-constant",
    "name": "Published Standards/Compiler Warnings/GNU Imaginary Constant",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-imaginary-constant</p>",
        "<p><b>Summary</b></p>",
        "<p>Imaginary constants are a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>imaginary constants are a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-imaginary-constant'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_INCLUDE_NEXT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-include-next",
    "name": "Published Standards/Compiler Warnings/GNU Include Next",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-include-next</p>",
        "<p><b>Summary</b></p>",
        "<p>#include_next is a language extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#include_next is a language extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-include-next'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_INLINE_CPP_WITHOUT_EXTERN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "gnu-inline-cpp-without-extern",
    "name": "Published Standards/Compiler Warnings/GNU Inline Cpp Without Extern",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-inline-cpp-without-extern</p>",
        "<p><b>Summary</b></p>",
        "<p>gnu_inline' attribute without 'extern' in C++ treated as externally available</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘gnu_inline’ attribute without ‘extern’ in C++ treated as externally available, this changed in Clang 10</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-inline-cpp-without-extern'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_LABEL_AS_VALUE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-label-as-value",
    "name": "Published Standards/Compiler Warnings/GNU Label as Value",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-label-as-value</p>",
        "<p><b>Summary</b></p>",
        "<p>use of GNU address-of-label or indirect-goto extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU address-of-label extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU indirect-goto extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-label-as-value'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_LINE_MARKER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-line-marker",
    "name": "Published Standards/Compiler Warnings/GNU Line Marker",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-line-marker</p>",
        "<p><b>Summary</b></p>",
        "<p>The preprocessor directive <code>#n</code> where n is a number is a GNU extension. Instead, use the <code>#line</code> directive.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>this style of line directive is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-line-marker'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_NULL_POINTER_ARITHMETIC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-null-pointer-arithmetic",
    "name": "Published Standards/Compiler Warnings/GNU Null Pointer Arithmetic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-null-pointer-arithmetic</p>",
        "<p><b>Summary</b></p>",
        "<p>Casting null from an integer to a pointer followed by arithmetic is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-null-pointer-arithmetic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_POINTER_ARITH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-pointer-arith",
    "name": "Published Standards/Compiler Warnings/GNU Pointer Arithmetic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-pointer-arith</p>",
        "<p><b>Summary</b></p>",
        "<p>Arithmetric/subscript of certain kinds of pointers is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 16%'><col style='width: 7%'><col style='width: 8%'><col style='width: 5%'><col style='width: 7%'><col style='width: 8%'><col style='width: 10%'><col style='width: 5%'><col style='width: 7%'><col style='width: 16%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>arithmetic on</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>a</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>pointer</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>the</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>function type</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>and</span>&nbsp;<em>D</em></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>subscript of a pointer to void is a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 32%'><col style='width: 14%'><col style='width: 17%'><col style='width: 9%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>arithmetic on</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>a</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>pointer</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to void is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-pointer-arith'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_REDECLARED_ENUM": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-redeclared-enum",
    "name": "Published Standards/Compiler Warnings/GNU Re-Declared Enum",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-redeclared-enum</p>",
        "<p><b>Summary</b></p>",
        "<p>Redeclaration of an enum is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redeclaration of already-defined enum</span>&nbsp;<em>A</em>&nbsp;<span>is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-redeclared-enum'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_STATEMENT_EXPRESSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-statement-expression",
    "name": "Published Standards/Compiler Warnings/GNU Statement Expression",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-statement-expression</p>",
        "<p><b>Summary</b></p>",
        "<p>Statement expressions - a block of code in braces where an expression is expected - is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU statement expression extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-statement-expression'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_STATEMENT_EXPRESSION_FROM_MACRO_EXPANSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-statement-expression-from-macro-expansion",
    "name": "Published Standards/Compiler Warnings/GNU Statement Expression from Macro Expansion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-statement-expression-from-macro-expansion</p>",
        "<p><b>Summary</b></p>",
        "<p>Statement expressions - a block of code in braces where an expression is expected - is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU statement expression extension from macro expansion</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-statement-expression-from-macro-expansion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_STATIC_FLOAT_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "gnu-static-float-init",
    "name": "Published Standards/Compiler Warnings/GNU Static Float Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-static-float-init</p>",
        "<p><b>Summary</b></p>",
        "<p>In-class initialization of a static data member of certain types is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>in-class initializer for static data member of type</span>&nbsp;<em>A</em>&nbsp;<span>is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-static-float-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_STRING_LITERAL_OPERATOR_TEMPLATE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "gnu-string-literal-operator-template",
    "name": "Published Standards/Compiler Warnings/GNU String Literal Operator Template",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-string-literal-operator-template</p>",
        "<p><b>Summary</b></p>",
        "<p>User-defined literals for templates (made with the <code>operator\"\"</code> syntax) are a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>string literal operator templates are a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-string-literal-operator-template'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_UNION_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-union-cast",
    "name": "Published Standards/Compiler Warnings/GNU Union Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-union-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>cast to union type is a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to union type is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-union-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_VARIABLE_SIZED_TYPE_NOT_AT_END": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "gnu-variable-sized-type-not-at-end",
    "name": "Published Standards/Compiler Warnings/GNU Variable Sized Type Not at End",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-variable-sized-type-not-at-end</p>",
        "<p><b>Summary</b></p>",
        "<p>A field with a variable size not at the end of a struct/class is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>field</span>&nbsp;<em>A</em>&nbsp;<span>with variable sized type</span>&nbsp;<em>B</em>&nbsp;<span>not at the end of a struct or class is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-variable-sized-type-not-at-end'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_ZERO_LINE_DIRECTIVE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-zero-line-directive",
    "name": "Published Standards/Compiler Warnings/GNU Zero Line Directive",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-zero-line-directive</p>",
        "<p><b>Summary</b></p>",
        "<p>#line directive with zero argument is a GNU extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#line directive with zero argument is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-zero-line-directive'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_GNU_ZERO_VARIADIC_MACRO_ARGUMENTS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "gnu-zero-variadic-macro-arguments",
    "name": "Published Standards/Compiler Warnings/GNU Zero Variadic Macro Arguments",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wgnu-zero-variadic-macro-arguments</p>",
        "<p><b>Summary</b></p>",
        "<p>Variadic macro functions require at least 1 argument for the defined <code>...</code> parameter.</p>",
        "<p>Using the <code>##__VA_ARGS__</code> macro instead of <code>__VA_ARGS__</code> is a GNU extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>must specify at least one argument for ‘…’ parameter of variadic macro</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>token pasting of ‘,’ and __VA_ARGS__ is a GNU extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-zero-variadic-macro-arguments'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_HEADER_GUARD": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "header-guard",
    "name": "Published Standards/Compiler Warnings/Header Guard",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wheader-guard</p>",
        "<p><b>Summary</b></p>",
        "<p>If a header guard checks for an undefined macro, it should then define that macro and not only some other macro.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is used as a header guard here, followed by #define of a different macro</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wheader-guard'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_HEADER_HYGIENE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "header-hygiene",
    "name": "Published Standards/Compiler Warnings/Header Hygiene",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wheader-hygiene</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for use of namespace directive in global context in header</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using namespace directive in global context in header</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wheader-hygiene'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IDIOMATIC_PARENTHESES": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "idiomatic-parentheses",
    "name": "Published Standards/Compiler Warnings/Idiomatic Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Widiomatic-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>If an assignment is used in the condition of control flow, then surround it with extra parentheses to clarify that there is no mistake.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using the result of an assignment as a condition without parentheses</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#widiomatic-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IGNORED_ATTRIBUTES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "ignored-attributes",
    "name": "Published Standards/Compiler Warnings/Ignored Attributes",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wignored-attributes</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings if the compiler will ignore an <code>__attribute__</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘trivial_abi’ cannot be applied to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 13%'><col style='width: 9%'><col style='width: 79%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>alias</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>ifunc</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will always resolve to</span>&nbsp;<em>A</em>&nbsp;<span>even if weak definition of</span>&nbsp;<em>B</em>&nbsp;<span>is overridden</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 15%'><col style='width: 11%'><col style='width: 62%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>alias</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>ifunc</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will not be in section ‘</span><em>A</em><span>’ but in the same section as the</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>aliasee</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>resolver</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>requested alignment is less than minimum alignment of</span>&nbsp;<em>B</em>&nbsp;<span>for type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 53%'><col style='width: 18%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘abi_tag’ attribute on</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>non-inline</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>anonymous</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>namespace ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>after definition is ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘cmse_nonsecure_entry’ cannot be applied to functions with internal linkage</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘dllexport’ attribute ignored on explicit instantiation definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 75%'><col style='width: 13%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>has no effect when annotating an ‘if</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constexpr</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>consteval</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ statement</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>has no effect when annotating an infinite loop</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute can only be applied to instance variables or properties</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored for field of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute is ignored because there exists no call expression inside the statement</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored on inline function</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored on a non-definition declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ attribute cannot be specified on a definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>ignored, because it is not attached to a declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nonnull’ attribute applied to function with no pointer arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nonnull’ attribute when used on parameters takes no arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute ignored when parsing type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to a pointer or reference (</span><em>B</em>&nbsp;<span>is invalid)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 57%'><col style='width: 19%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>constant</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>pointer arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute declaration must precede definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to return values that are pointers</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to return values that are pointers or references</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘sentinel’ attribute requires named arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 81%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘sentinel’ attribute only supported for variadic</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>blocks</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute argument not supported:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown visibility</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 63%'><col style='width: 17%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>cannot be applied to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>Objective-C method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>without return value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__weak attribute cannot be specified on a field declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__weak attribute cannot be specified on an automatic variable when ARC is not enabled</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 65%'><col style='width: 35%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables and functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functions and methods</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functions, methods and blocks</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functions, methods, and parameters</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables and fields</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables, data members and tag types</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>types and namespaces</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variables, functions and classes</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>kernel functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-K&amp;R-style functions</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>conflicting attributes</span>&nbsp;<em>A</em>&nbsp;<span>are ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>ignored, because it cannot be applied to omitted return type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 73%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>calling convention is not supported</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>for this target</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>on variadic function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>on constructor/destructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>on builtin function</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>ignored, because it cannot be applied to a type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring __declspec(allocator) because the function return type</span>&nbsp;<em>A</em>&nbsp;<span>is not a pointer or reference type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 62%'><col style='width: 12%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>is ignored, place it after “</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>” to apply attribute to type declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘deprecated’ attribute on anonymous namespace ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>currently has no effect on a using declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>redeclared inline;</span>&nbsp;<em>B</em>&nbsp;<span>attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>is already applied with different arguments</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute</span>&nbsp;<em>A</em>&nbsp;<span>is already applied</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attribute is ignored on this statement as it only applies to functions; use ‘</span><em>A</em><span>’ on statements</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 78%'><col style='width: 15%'><col style='width: 7%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>statement attribute</span>&nbsp;<em>A</em>&nbsp;<span>has higher precedence than function attribute ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>always_inline</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>flatten</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>noinline</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Objective-C GC does not allow weak variables on the stack</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘gnu_inline’ attribute requires function to be marked ‘inline’, attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 68%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inheritance model ignored on</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>primary template</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>partial specialization</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 77%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘objc_externally_retained’ can only be applied to local variables</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>of retainable type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>with strong ownership</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 37%'><col style='width: 14%'><col style='width: 49%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>import</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>module</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>name</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>cannot be applied to a function with a definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘internal_linkage’ attribute on a non-static local variable is ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 16%'><col style='width: 12%'><col style='width: 51%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>MIPS</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>MSP430</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>RISC-V</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>‘interrupt’ attribute only applies to functions that have</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>no parameters</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a ‘void’ return type</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>qualifiers after comma in declarator list are ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘mig_server_routine’ attribute only applies to routines that return a kern_return_t</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 21%'><col style='width: 8%'><col style='width: 33%'><col style='width: 8%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>import</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>module</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>name</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>B</em><span>) does not match the import</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>module</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>name</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>C</em><span>) of the previous declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown attribute ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nocf_check’ attribute ignored; use -fcf-protection to enable the attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘noderef’ can only be used on an array or pointer type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘nothrow’ attribute conflicts with exception specification; attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 54%'><col style='width: 29%'><col style='width: 17%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>Objective-C object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer-to-CF-pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer/reference-to-OSObject-pointer</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>parameters</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 49%'><col style='width: 12%'><col style='width: 20%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute only applies to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>functions</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>methods</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>properties</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>that return</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>an Objective-C object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a non-retainable pointer</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute isn’t implemented by this Objective-C runtime</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>direct attribute on property</span>&nbsp;<em>A</em>&nbsp;<span>ignored (not implemented by this Objective-C runtime)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute is deprecated and ignored in</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘require_constant_initialization’ attribute added after initialization of variable</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>repeated RISC-V ‘interrupt’ attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template parameter of a function template with the ‘sycl_kernel’ attribute cannot be a non-type template parameter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function template with ‘sycl_kernel’ attribute must have a single parameter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘sycl_kernel’ attribute only applies to a function template with at least two template parameters</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function template with ‘sycl_kernel’ attribute must have a ‘void’ return type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 9%'><col style='width: 7%'><col style='width: 45%'><col style='width: 7%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>alignment</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>size</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of field</span>&nbsp;<em>B</em>&nbsp;<span>(</span><em>C</em>&nbsp;<span>bits) does not match the</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>alignment</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>size</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of the first field in transparent union; transparent_union attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 42%'><col style='width: 13%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>first field of a transparent union cannot have</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>floating point</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>vector</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>B</em><span>; transparent_union attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>transparent_union attribute can only be applied to a union definition; attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>transparent union definition must contain at least one field; transparent_union attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 45%'><col style='width: 24%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ only applies to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>Objective-C object or block pointer</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>types; type here is</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__declspec attribute</span>&nbsp;<em>A</em>&nbsp;<span>is not supported</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 10%'><col style='width: 9%'><col style='width: 13%'><col style='width: 22%'><col style='width: 11%'><col style='width: 12%'><col style='width: 11%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>unsupported</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>duplicate</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unknown</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>architecture</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>tune CPU</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>C</em><span>’ in the ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>target</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>target_clones</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ attribute string; ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>target</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>target_clones</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ attribute ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 17%'><col style='width: 15%'><col style='width: 67%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’[[</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>nodiscard</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>gnu::warn_unused_result</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>]]’ attribute ignored when applied to a typedef; consider using ‘__attribute__((warn_unused_result))’ or ‘[[clang::warn_unused_result]]’ instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘__clang__’ is a predefined macro name, not an attribute scope specifier; did you mean ‘_Clang’ instead?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-attributes'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IGNORED_AVAILABILITY_WITHOUT_SDK_SETTINGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "ignored-availability-without-sdk-settings",
    "name": "Published Standards/Compiler Warnings/Ignored Availability Without Sdk Settings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wignored-availability-without-sdk-settings</p>",
        "<p><b>Summary</b></p>",
        "<p>When using the <code>availability</code> <code>__attribute__</code> for a specific operating system, the software development kit should have SDKSettings.json, indicating support.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>availability is ignored without a valid ‘SDKSettings.json’ in the SDK</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-availability-without-sdk-settings'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IGNORED_OPTIMIZATION_ARGUMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "ignored-optimization-argument",
    "name": "Published Standards/Compiler Warnings/Ignored Optimization Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wignored-optimization-argument</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for when an optimization flag is used and it is not supported.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>optimization flag ‘</span><em>A</em><span>’ is not supported for target ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>optimization flag ‘</span><em>A</em><span>’ is not supported</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-optimization-argument'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IGNORED_PRAGMA_INTRINSIC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "ignored-pragma-intrinsic",
    "name": "Published Standards/Compiler Warnings/Ignored Pragma Intrinsic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wignored-pragma-intrinsic</p>",
        "<p><b>Summary</b></p>",
        "<p>When a function is declared to use the compiler builtin intrinsic version, make sure it is defined by the compiler.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 54%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is not a recognized builtin</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; consider including &lt;intrin.h&gt; to access non-builtin intrinsics</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragma-intrinsic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IGNORED_PRAGMAS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "ignored-pragmas",
    "name": "Published Standards/Compiler Warnings/Ignored Pragmas",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wignored-pragmas</p>",
        "<p><b>Summary</b></p>",
        "<p>Use pragmas correctly in order for them to function correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 61%'><col style='width: 21%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘=’ following ‘#pragma</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>align</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>options align</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 62%'><col style='width: 20%'><col style='width: 17%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid alignment option in ‘#pragma</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>align</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>options align</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’#pragma comment</span>&nbsp;<em>A</em><span>’ ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing argument to debug command ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unexpected debug command ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown module ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected action or ‘)’ in ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing ‘:’ after</span>&nbsp;<em>A</em>&nbsp;<span>- ignoring</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing ‘:’ or ‘)’ after</span>&nbsp;<em>A</em>&nbsp;<span>- ignoring</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘,’ in ‘#pragma</span>&nbsp;<em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected identifier in ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘compiler’, ‘lib’, ‘user’, or a string literal for the section name in ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected integer between</span>&nbsp;<em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em>&nbsp;<span>inclusive in ‘#pragma</span>&nbsp;<em>C</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing ‘(‘ after ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignoring</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected non-wide string literal in ‘#pragma</span>&nbsp;<em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 40%'><col style='width: 38%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘enable’, ‘disable’, ‘begin’ or ‘end’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>‘disable’</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>- ignoring</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘)’ or ‘,’ in ‘#pragma</span>&nbsp;<em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing ‘)’ after ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignoring</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected a stack label or a string literal for the section name in ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected a string literal for the section name in ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected push, pop or a string literal for the section name in ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected string literal in ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignoring</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra tokens at end of ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incorrect use of #pragma clang force_cuda_host_device begin|end</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’#pragma</span>&nbsp;<em>A</em><span>’ is not supported on this target - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’#pragma init_seg’ is only supported when targeting a Microsoft environment</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown action for ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 73%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unexpected argument ‘</span><em>A</em><span>’ to ‘#pragma</span>&nbsp;<em>B</em><span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; expected</span>&nbsp;<em>D</em></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown action ‘</span><em>B</em><span>’ for ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 68%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing argument to ‘#pragma</span>&nbsp;<em>A</em><span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; expected</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incorrect use of ‘#pragma fenv_access (on|off)’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incorrect use of ‘#pragma ms_struct on|off’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma options align=reset failed:</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘align’ following ‘#pragma options’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected #pragma pack parameter to be ‘1’, ‘2’, ‘4’, ‘8’, or ‘16’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected integer or identifier in ‘#pragma pack’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma</span>&nbsp;<em>A</em><span>(pop, …) failed:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pragma pop_macro could not pop ‘</span><em>A</em><span>’, no matching push_macro</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>OpenCL extension</span>&nbsp;<em>A</em>&nbsp;<span>unknown or does not require pragma - ignoring</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>known but unsupported action ‘</span><em>B</em><span>’ for ‘#pragma</span>&nbsp;<em>A</em><span>’ - ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unsupported OpenCL extension</span>&nbsp;<em>A</em>&nbsp;<span>- ignoring</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘#pragma unused’ argument to be a variable name</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>only variables can be arguments to ‘#pragma unused’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>undeclared variable</span>&nbsp;<em>A</em>&nbsp;<span>used as an argument for ‘#pragma unused’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid or unsupported rounding mode in ‘#pragma STDC FENV_ROUND’ - ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragmas'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IGNORED_REFERENCE_QUALIFIERS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "ignored-reference-qualifiers",
    "name": "Published Standards/Compiler Warnings/Ignored Reference Qualifiers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wignored-reference-qualifiers</p>",
        "<p><b>Summary</b></p>",
        "<p>In C++, certain qualifiers have no effect on certain reference types.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ qualifier on reference type</span>&nbsp;<em>B</em>&nbsp;<span>has no effect</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-reference-qualifiers'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_CONST_INT_FLOAT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicit-const-int-float-conversion",
    "name": "Published Standards/Compiler Warnings/Implicit Const Int Float Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-const-int-float-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When implicitly converting a constant integer type to a floating point type, a warning will show the exact value of the change.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em>&nbsp;<span>changes value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-const-int-float-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_CONVERSION_FLOATING_POINT_TO_BOOL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicit-conversion-floating-point-to-bool",
    "name": "Published Standards/Compiler Warnings/Implicit Conversion Floating Point to Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-conversion-floating-point-to-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert a floating point type to a boolean type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion turns floating-point number into bool:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-conversion-floating-point-to-bool'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_EXCEPTION_SPEC_MISMATCH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicit-exception-spec-mismatch",
    "name": "Published Standards/Compiler Warnings/Implicit Exception Spec Mismatch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-exception-spec-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent with adding <code>noexcept</code> specification to the end of a function declaration.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 35%'><col style='width: 9%'><col style='width: 29%'><col style='width: 9%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function previously declared with an</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>explicit</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>implicit</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>exception specification redeclared with an</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>implicit</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>explicit</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>exception specification</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-exception-spec-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_FALLTHROUGH": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "implicit-fallthrough",
    "name": "Published Standards/Compiler Warnings/Implicit Fallthrough",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-fallthrough</p>",
        "<p><b>Summary</b></p>",
        "<p>You may have forgotten a <code>break</code> statement for a <code>case</code>. If not, then show your intention by adding the <code>fallthrough</code> attribute.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unannotated fall-through between switch labels</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fallthrough'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_FALLTHROUGH_PER_FUNCTION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "implicit-fallthrough-per-function",
    "name": "Published Standards/Compiler Warnings/Implicit Fallthrough Per Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-fallthrough-per-function</p>",
        "<p><b>Summary</b></p>",
        "<p>When using a fallthrough attribute in a function, all other switch labels with fallthrough in the function should use the attribute.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unannotated fall-through between switch labels in partly-annotated function</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fallthrough-per-function'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_FIXED_POINT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicit-fixed-point-conversion",
    "name": "Published Standards/Compiler Warnings/Implicit Fixed Point Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-fixed-point-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert from a fixed point type to a smaller type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>A</em>&nbsp;<span>cannot fit within the range of values for</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fixed-point-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_FLOAT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "implicit-float-conversion",
    "name": "Published Standards/Compiler Warnings/Implicit Float Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-float-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert from a floating-point type to a smaller type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion loses floating-point precision:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion when assigning computation result loses floating-point precision:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-float-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_FUNCTION_DECLARATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "implicit-function-declaration",
    "name": "Published Standards/Compiler Warnings/Implicit Function Declaration",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-function-declaration</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not call functions if they do not have an explicit declaration.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>call to undeclared function</span>&nbsp;<em>A</em><span>; ISO C99 and later do not support implicit function declarations</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicitly declaring library function ‘</span><em>A</em><span>’ with type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>call to undeclared library function ‘</span><em>A</em><span>’ with type</span>&nbsp;<em>B</em><span>; ISO C99 and later do not support implicit function declarations</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>use of unknown builtin</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit declaration of function</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-function-declaration'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_INT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "implicit-int",
    "name": "Published Standards/Compiler Warnings/Implicit Int",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-int</p>",
        "<p><b>Summary</b></p>",
        "<p>When the type is missing, it defaults to 'int'. Parameters that were not declared, also default to 'int'; ISO C99 and later do not support implicit int.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>type specifier missing, defaults to ‘int’; ISO C99 and later do not support implicit int</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>parameter</span>&nbsp;<em>A</em>&nbsp;<span>was not declared, defaults to ‘int’; ISO C99 and later do not support implicit int</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type specifier missing, defaults to ‘int’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_INT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "implicit-int-conversion",
    "name": "Published Standards/Compiler Warnings/Implicit Int Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-int-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert from a integer type to a smaller type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>higher order bits are zeroes after implicit conversion</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion loses integer precision:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_INT_FLOAT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "implicit-int-float-conversion",
    "name": "Published Standards/Compiler Warnings/Implicit Int Float Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-int-float-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert from a integer type to a smaller floating-point type or from a floating-point type to a smaller integer type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>may lose precision</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int-float-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICIT_RETAIN_SELF": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "implicit-retain-self",
    "name": "Published Standards/Compiler Warnings/Implicit Retain Self",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicit-retain-self</p>",
        "<p><b>Summary</b></p>",
        "<p>Block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>block implicitly retains ‘self’; explicitly mention ‘self’ to indicate this is intended behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-retain-self'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPLICITLY_UNSIGNED_LITERAL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "implicitly-unsigned-literal",
    "name": "Published Standards/Compiler Warnings/Implicitly Unsigned Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimplicitly-unsigned-literal</p>",
        "<p><b>Summary</b></p>",
        "<p>Integer literals are signed by default, unless the value is too large, in which case it is unsigned. To clarify the type of a large integer literal, add a suffix such as <code>u</code>, <code>ul</code>, or <code>ull</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>integer literal is too large to be represented in a signed integer type, interpreting as unsigned</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicitly-unsigned-literal'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_IMPORT_PREPROCESSOR_DIRECTIVE_PEDANTIC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "import-preprocessor-directive-pedantic",
    "name": "Published Standards/Compiler Warnings/Import Preprocessor Directive Pedantic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wimport-preprocessor-directive-pedantic</p>",
        "<p><b>Summary</b></p>",
        "<p>The preprocessor directive <code>#import</code> is a language extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#import is a language extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wimport-preprocessor-directive-pedantic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INACCESSIBLE_BASE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "inaccessible-base",
    "name": "Published Standards/Compiler Warnings/Inaccessible Base",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winaccessible-base</p>",
        "<p><b>Summary</b></p>",
        "<p>When a derived class/struct explicitly derives from a base class and an intermediate class, the base class is not accessible. Instead, only derive from the intermediate class. Alternatively, if the intermediate class is a virtual derivation of the base class, then derive from the intermediate class and derive virtually from the base class.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>direct base</span>&nbsp;<em>A</em>&nbsp;<span>is inaccessible due to ambiguity:</span><em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winaccessible-base'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCLUDE_NEXT_ABSOLUTE_PATH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "include-next-absolute-path",
    "name": "Published Standards/Compiler Warnings/Include Next Absolute Path",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winclude-next-absolute-path</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use the preprocessor directive <code>#include_next</code> in a source file.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#include_next in file found relative to primary source file or found by absolute path; will search from start of include path</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winclude-next-absolute-path'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCLUDE_NEXT_OUTSIDE_HEADER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "include-next-outside-header",
    "name": "Published Standards/Compiler Warnings/Include Next Outside Header",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winclude-next-outside-header</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use the preprocessor directive <code>#include_next</code> in a header file.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#include_next in primary source file; will search from start of include path</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winclude-next-outside-header'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPATIBLE_EXCEPTION_SPEC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "incompatible-exception-spec",
    "name": "Published Standards/Compiler Warnings/Incompatible Exception Spec",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-exception-spec</p>",
        "<p><b>Summary</b></p>",
        "<p>When a function A is used as a value for a variable B, the <code>noexcept</code> specification of B should be a superset of that of A.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 58%'><col style='width: 17%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception specifications of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>return</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>argument</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>types differ</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>target exception specification is not superset of source</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-exception-spec'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPATIBLE_FUNCTION_POINTER_TYPES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "incompatible-function-pointer-types",
    "name": "Published Standards/Compiler Warnings/Incompatible Function Pointer Types",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-function-pointer-types</p>",
        "<p><b>Summary</b></p>",
        "<p>When a certain function pointer type is expected, the actual type should be exactly the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 33%'><col style='width: 51%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incompatible function pointer types</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; dereference with *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; take the address with &amp;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove &amp;</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-function-pointer-types'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPATIBLE_LIBRARY_REDECLARATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "incompatible-library-redeclaration",
    "name": "Published Standards/Compiler Warnings/Incompatible Library Redeclaration",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-library-redeclaration</p>",
        "<p><b>Summary</b></p>",
        "<p>When redeclaring a library function, the type should be the same as the original library function.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incompatible redeclaration of library function</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-library-redeclaration'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPATIBLE_MS_STRUCT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "incompatible-ms-struct",
    "name": "Published Standards/Compiler Warnings/Incompatible Microsoft Struct",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-ms-struct</p>",
        "<p><b>Summary</b></p>",
        "<p>If the <code>ms_struct</code> attribute is used, then structs should have the same alignment as in the Microsoft Visual compiler. This can be done with the <code>-mms-bitfields</code> compiler flag.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>ms_struct may not produce Microsoft-compatible layouts for classes with base classes or virtual functions</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>ms_struct may not produce Microsoft-compatible layouts with fundamental data types with sizes that aren’t a power of two</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-ms-struct'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPATIBLE_POINTER_TYPES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "incompatible-pointer-types",
    "name": "Published Standards/Compiler Warnings/Incompatible Pointer Types",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-pointer-types</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert from one pointer type to a different pointer type that is a fundamentally different type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 31%'><col style='width: 53%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incompatible pointer types</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; dereference with *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; take the address with &amp;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove &amp;</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPATIBLE_POINTER_TYPES_DISCARDS_QUALIFIERS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "incompatible-pointer-types-discards-qualifiers",
    "name": "Published Standards/Compiler Warnings/Incompatible Pointer Types Discards Qualifiers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-pointer-types-discards-qualifiers</p>",
        "<p><b>Summary</b></p>",
        "<p>In type conversion or nested pointers, qualifiers like <code>const</code> may be discarded.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 59%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>discards qualifiers in nested pointer types</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 14%'><col style='width: 66%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>discards qualifiers</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 13%'><col style='width: 15%'><col style='width: 73%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reinterpret_cast</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>C-style cast</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>from</span>&nbsp;<em>B</em>&nbsp;<span>to</span>&nbsp;<em>C</em>&nbsp;<span>changes address space of nested pointers</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types-discards-qualifiers'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPATIBLE_SYSROOT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "incompatible-sysroot",
    "name": "Published Standards/Compiler Warnings/Incompatible Sysroot",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincompatible-sysroot</p>",
        "<p><b>Summary</b></p>",
        "<p>In the compiler arguments, do not give an incorrect sysroot. The sysroot can be specified with <code>-isysroot</code> for a relocatable precompiled header file or with <code>--sysroot</code> for a file.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using sysroot for ‘</span><em>A</em><span>’ but targeting ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-sysroot'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPLETE_IMPLEMENTATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "incomplete-implementation",
    "name": "Published Standards/Compiler Warnings/Incomplete Implementation",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincomplete-implementation</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for missing method definitions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>method definition for</span>&nbsp;<em>A</em>&nbsp;<span>not found</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-implementation'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCOMPLETE_SETJMP_DECLARATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "incomplete-setjmp-declaration",
    "name": "Published Standards/Compiler Warnings/Incomplete Setjmp Declaration",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincomplete-setjmp-declaration</p>",
        "<p><b>Summary</b></p>",
        "<p>To use some bulit-in functions, define the <code>jmp_buf</code> type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration of built-in function ‘</span><em>A</em><span>’ requires the declaration of the ‘jmp_buf’ type, commonly provided in the header &lt;setjmp.h&gt;.</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-setjmp-declaration'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCONSISTENT_DLLIMPORT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "inconsistent-dllimport",
    "name": "Published Standards/Compiler Warnings/Inconsistent DLLimport",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winconsistent-dllimport</p>",
        "<p><b>Summary</b></p>",
        "<p>When redeclaring something, be consistent with the attributes. For example, if one declaration has a <code>dllimport</code> attribute, then all others should as well.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>redeclared without</span>&nbsp;<em>B</em>&nbsp;<span>attribute: previous</span>&nbsp;<em>B</em>&nbsp;<span>ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>redeclared without ‘dllimport’ attribute: ‘dllexport’ attribute added</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-dllimport'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCONSISTENT_MISSING_DESTRUCTOR_OVERRIDE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "inconsistent-missing-destructor-override",
    "name": "Published Standards/Compiler Warnings/Inconsistent Missing Destructor Override",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winconsistent-missing-destructor-override</p>",
        "<p><b>Summary</b></p>",
        "<p>Destructor overrides should be marked 'override'</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>overrides a destructor but is not marked ‘override’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-destructor-override'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCONSISTENT_MISSING_OVERRIDE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "inconsistent-missing-override",
    "name": "Published Standards/Compiler Warnings/Inconsistent Missing Override",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winconsistent-missing-override</p>",
        "<p><b>Summary</b></p>",
        "<p>Member function overrides should be marked 'override'</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>overrides a member function but is not marked ‘override’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-override'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INCREMENT_BOOL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "increment-bool",
    "name": "Published Standards/Compiler Warnings/Increment Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wincrement-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not increment a boolean with the <code>++</code> operator.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>ISO C++17 does not allow incrementing expression of type bool</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wincrement-bool'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INFINITE_RECURSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "infinite-recursion",
    "name": "Published Standards/Compiler Warnings/Infinite Recursion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winfinite-recursion</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for all paths through a function calling itself, leading to infinite recursion</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>all paths through this function will call itself</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winfinite-recursion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INITIALIZER_OVERRIDES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Compiler: Default", "Warnings"],
    "key": "initializer-overrides",
    "name": "Published Standards/Compiler Warnings/Initializer Overrides",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winitializer-overrides</p>",
        "<p><b>Summary</b></p>",
        "<p>In an initializer (such as an array or struct by using curly braces) do not set the same field multiple times.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 21%'><col style='width: 40%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializer</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>partially</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>overrides prior initialization of this subobject</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 39%'><col style='width: 21%'><col style='width: 40%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializer</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>partially</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>overrides prior initialization of this subobject</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winitializer-overrides'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INJECTED_CLASS_NAME": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "injected-class-name",
    "name": "Published Standards/Compiler Warnings/Injected Class Name",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winjected-class-name</p>",
        "<p><b>Summary</b></p>",
        "<p>When declaring an object instance, appending <code>::TemplateName</code> or <code>::TypeName</code> refers to the constructor, according to the ISO C++ standard. This is true even when preceding the declaration with a <code>typename</code> or <code>template</code> keyword. Therefore, remove this appended part.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 55%'><col style='width: 9%'><col style='width: 20%'><col style='width: 8%'><col style='width: 9%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ specifies that qualified reference to</span>&nbsp;<em>A</em>&nbsp;<span>is a constructor name rather than a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>template name</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in this context, despite preceding</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘typename’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>‘template’</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>keyword</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winjected-class-name'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INLINE_ASM": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "inline-asm",
    "name": "Published Standards/Compiler Warnings/Inline Assembly",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winline-asm</p>",
        "<p><b>Summary</b></p>",
        "<p>Various assembler-specific warnings.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<p>The text of this diagnostic is not controlled by Clang.</p>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winline-asm'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INLINE_NAMESPACE_REOPENED_NONINLINE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "inline-namespace-reopened-noninline",
    "name": "Published Standards/Compiler Warnings/Inline Namespace Reopened Non-Inline",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winline-namespace-reopened-noninline</p>",
        "<p><b>Summary</b></p>",
        "<p>If a namespace is opened with <code>inline</code>, then all other openings of that namespace should also have the <code>inline</code> keyword.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline namespace reopened as a non-inline namespace</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winline-namespace-reopened-noninline'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INLINE_NEW_DELETE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "inline-new-delete",
    "name": "Published Standards/Compiler Warnings/Inline New Delete",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winline-new-delete</p>",
        "<p><b>Summary</b></p>",
        "<p>Replacement functions (such as operator delete and operator new) cannot be declared with the <code>inline</code> keyword.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>replacement function</span>&nbsp;<em>A</em>&nbsp;<span>cannot be declared ‘inline’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winline-new-delete'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INSTANTIATION_AFTER_SPECIALIZATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "instantiation-after-specialization",
    "name": "Published Standards/Compiler Warnings/Instantiation After Specialization",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winstantiation-after-specialization</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not declare the specific declaration (explicit instantiation) after the general declaration (template specialization.)</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit instantiation of</span>&nbsp;<em>A</em>&nbsp;<span>that occurs after an explicit specialization has no effect</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winstantiation-after-specialization'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "int-conversion",
    "name": "Published Standards/Compiler Warnings/Int Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wint-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Various errors for converting integers to pointers or vice-versa.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 34%'><col style='width: 51%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>incompatible integer to pointer conversion</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; dereference with *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; take the address with &amp;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove &amp;</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 34%'><col style='width: 51%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>incompatible pointer to integer conversion</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; dereference with *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; take the address with &amp;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove *</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>; remove &amp;</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INT_IN_BOOL_CONTEXT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "int-in-bool-context",
    "name": "Published Standards/Compiler Warnings/Int in Bool Context",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wint-in-bool-context</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert integers to booleans.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>converting the enum constant to a boolean</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>converting the result of ‘&lt;&lt;’ to a boolean; did you mean ‘(</span><em>A</em><span>) != 0’?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-in-bool-context'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INT_TO_POINTER_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "int-to-pointer-cast",
    "name": "Published Standards/Compiler Warnings/Int to Pointer Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wint-to-pointer-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert an integer to a pointer if the integer size is smaller.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to</span>&nbsp;<em>B</em>&nbsp;<span>from smaller integer type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-to-pointer-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INT_TO_VOID_POINTER_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "int-to-void-pointer-cast",
    "name": "Published Standards/Compiler Warnings/Int to Void Pointer Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wint-to-void-pointer-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert an integer to a pointer if the integer size is smaller.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to</span>&nbsp;<em>B</em>&nbsp;<span>from smaller integer type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wint-to-void-pointer-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INTEGER_OVERFLOW": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "integer-overflow",
    "name": "Published Standards/Compiler Warnings/Integer Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winteger-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>When creating an expression for a large number, make sure that the integers are large enough to prevent overflow. This can be accomplished with suffixes or explicit casts.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overflow in expression; result is</span>&nbsp;<em>A</em>&nbsp;<span>with type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winteger-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INTERRUPT_SERVICE_ROUTINE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "interrupt-service-routine",
    "name": "Published Standards/Compiler Warnings/Interrupt Service Routine",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winterrupt-service-routine</p>",
        "<p><b>Summary</b></p>",
        "<p>Interrupt service routines (functions with the <code>interrupt</code> attribute) should also have the <code>no_caller_saved_registers</code> attribute.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>interrupt service routine should only call a function with attribute ‘no_caller_saved_registers’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winterrupt-service-routine'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_COMMAND_LINE_ARGUMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "invalid-command-line-argument",
    "name": "Published Standards/Compiler Warnings/Invalid Command Line Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-command-line-argument</p>",
        "<p><b>Summary</b></p>",
        "<p>Use the command line arguments correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing plugin argument for plugin</span>&nbsp;<em>A</em>&nbsp;<span>in</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing plugin name in</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the given MCU supports</span>&nbsp;<em>A</em>&nbsp;<span>hardware multiply, but ‘-mhwmult’ is set to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no MCU device specified, but ‘-mhwmult’ is set to ‘auto’, assuming no hardware multiply; use ‘-mmcu’ to specify an MSP430 device, or ‘-mhwmult’ to set the hardware multiply type explicitly</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the given MCU does not support hardware multiply, but ‘-mhwmult’ is set to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the object size sanitizer has no effect at -O0, but is explicitly enabled:</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>optimization level ‘</span><em>A</em><span>’ is not supported; using ‘</span><em>B</em><em>C</em><span>’ instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring extension ‘</span><em>A</em><span>’ because the ‘</span><em>B</em><span>’ architecture does not support it</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-command-line-argument'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_CONSTEXPR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "invalid-constexpr",
    "name": "Published Standards/Compiler Warnings/Invalid Constexpr",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-constexpr</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for invalid constant expressions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 17%'><col style='width: 17%'><col style='width: 6%'><col style='width: 19%'><col style='width: 41%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constexpr</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>consteval</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>never produces a constant expression</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-constexpr'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_IBOUTLET": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "invalid-iboutlet",
    "name": "Published Standards/Compiler Warnings/Invalid IBOutletCollection (Interface Builder Outlet Collection)",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-iboutlet</p>",
        "<p><b>Summary</b></p>",
        "<p>IBOutletCollection properties should be copy/strong and not assign</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 13%'><col style='width: 15%'><col style='width: 72%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>instance variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>property</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>with</span>&nbsp;<em>A</em>&nbsp;<span>attribute must be an object type (invalid</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>IBOutletCollection properties should be copy/strong and not assign</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-iboutlet'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_INITIALIZER_FROM_SYSTEM_HEADER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "invalid-initializer-from-system-header",
    "name": "Published Standards/Compiler Warnings/Invalid Initializer from System Header",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-initializer-from-system-header</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for invalid constructors from classes in system headers</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid constructor from class in system header, should not be explicit</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-initializer-from-system-header'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_IOS_DEPLOYMENT_TARGET": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "invalid-ios-deployment-target",
    "name": "Published Standards/Compiler Warnings/Invalid iOS Deployment Target",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-ios-deployment-target</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for invalid iOS deployment versions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>invalid iOS deployment version ‘</span><em>A</em><span>’, iOS 10 is the maximum deployment target for 32-bit targets</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-ios-deployment-target'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_NO_BUILTIN_NAMES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "invalid-no-builtin-names",
    "name": "Published Standards/Compiler Warnings/Invalid No Builtin Names",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-no-builtin-names</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for invalid builtin names</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not a valid builtin name for</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-no-builtin-names'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_NORETURN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "invalid-noreturn",
    "name": "Published Standards/Compiler Warnings/Invalid Noreturn Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-noreturn</p>",
        "<p><b>Summary</b></p>",
        "<p>Functions declared 'noreturn' should not return</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function declared ‘noreturn’ should not return</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function</span>&nbsp;<em>A</em>&nbsp;<span>declared ‘noreturn’ should not return</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-noreturn'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_OFFSETOF": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "invalid-offsetof",
    "name": "Published Standards/Compiler Warnings/Invalid Offsetof",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-offsetof</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for offsets of non-POD types or non-standard-layout types</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>offset of on non-POD type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>offset of on non-standard-layout type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-offsetof'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_OR_NONEXISTENT_DIRECTORY": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "invalid-or-nonexistent-directory",
    "name": "Published Standards/Compiler Warnings/Invalid or Nonexistent Directory",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-or-nonexistent-directory</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for environment variables pointing to invalid or nonexistent directories</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>environment variable ‘</span><em>A</em><span>’ is set, but points to invalid or nonexistent directory ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unable to find</span>&nbsp;<em>A</em>&nbsp;<span>directory, expected to be in ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-or-nonexistent-directory'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_PARTIAL_SPECIALIZATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "invalid-partial-specialization",
    "name": "Published Standards/Compiler Warnings/Invalid Partial Specialization",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-partial-specialization</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for invalid partial specialization</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 16%'><col style='width: 15%'><col style='width: 69%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>template partial specialization is not more specialized than the primary template</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-partial-specialization'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_PP_TOKEN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "invalid-pp-token",
    "name": "Published Standards/Compiler Warnings/Invalid Preprocessor Token",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-pp-token</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for empty character constants and missing terminating characters</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty character constant</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 59%'><col style='width: 15%'><col style='width: 26%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing terminating</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>‘”’</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>character</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-pp-token'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_SOURCE_ENCODING": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "invalid-source-encoding",
    "name": "Published Standards/Compiler Warnings/Invalid Source Encoding",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-source-encoding</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for illegal character encoding in character and string literals</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>illegal character encoding in character literal</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>illegal character encoding in string literal</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-source-encoding'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_TOKEN_PASTE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "invalid-token-paste",
    "name": "Published Standards/Compiler Warnings/Invalid Token Paste",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-token-paste</p>",
        "<p><b>Summary</b></p>",
        "<p>When using the <code>##</code> operator (preprocessor concatenation operator) to concatenate 2 different pieces of text, the result should be a valid token.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>pasting formed ‘</span><em>A</em><span>’, an invalid preprocessing token</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-token-paste'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_INVALID_UTF8": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "invalid-utf8",
    "name": "Published Standards/Compiler Warnings/Invalid UTF-8",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Winvalid-utf8</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have invalid UTF-8 characters in comments. An editor may render these as question marks in diamonds.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid UTF-8 in comment</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-utf8'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_JUMP_SEH_FINALLY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "jump-seh-finally",
    "name": "Published Standards/Compiler Warnings/Jump SEH (Structured Exception Handling) Finally",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wjump-seh-finally</p>",
        "<p><b>Summary</b></p>",
        "<p>When inside of a <code>__finally</code> block (a feature of structured exception handling), do not jump out of it. For example, jumping can be done with a <code>return</code> or a <code>goto</code> statement.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>jump out of __finally block has undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wjump-seh-finally'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_KEYWORD_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "keyword-compat",
    "name": "Published Standards/Compiler Warnings/Keyword Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wkeyword-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for using an identifier that can be a keyword. These keywords are language extensions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 69%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>keyword ‘</span><em>A</em><span>’ will be made available as an identifier</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>here</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>for the remainder of the translation unit</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wkeyword-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_KEYWORD_MACRO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "keyword-macro",
    "name": "Published Standards/Compiler Warnings/Keyword Macro",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wkeyword-macro</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use a keyword when defining the identifier of a macro</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>keyword is hidden by macro definition</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wkeyword-macro'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_KNR_PROMOTED_PARAMETER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "knr-promoted-parameter",
    "name": "Published Standards/Compiler Warnings/K&R Promoted Parameter",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wknr-promoted-parameter</p>",
        "<p><b>Summary</b></p>",
        "<p>When declaration a function in the K&R style (types after the function parentheses), some types are implicitly changed. Use the conventional function style or write the actual type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 11%'><col style='width: 67%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>promoted type</span>&nbsp;<em>A</em>&nbsp;<span>of K&amp;R function parameter is not compatible with the parameter type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>promoted type of K&amp;R function parameter is not compatible with parameter type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declared in a previous prototype</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wknr-promoted-parameter'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LANGUAGE_EXTENSION_TOKEN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "language-extension-token",
    "name": "Published Standards/Compiler Warnings/Language Extension Token",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlanguage-extension-token</p>",
        "<p><b>Summary</b></p>",
        "<p>It is a language extension to use certain tokens, such as <code>typeof</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extension used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlanguage-extension-token'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LARGE_BY_VALUE_COPY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "large-by-value-copy",
    "name": "Published Standards/Compiler Warnings/Large by Value Copy",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlarge-by-value-copy</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function receives or returns something large, use a reference or a pointer instead.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is a large (</span><em>B</em>&nbsp;<span>bytes) pass-by-value argument; pass it by reference instead ?</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>return value of</span>&nbsp;<em>A</em>&nbsp;<span>is a large (</span><em>B</em>&nbsp;<span>bytes) pass-by-value object; pass it by reference instead ?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlarge-by-value-copy'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LINKER_WARNINGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "linker-warnings",
    "name": "Published Standards/Compiler Warnings/Linker Warnings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlinker-warnings</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings from the linker</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>linking module ‘</span><em>A</em><span>’:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlinker-warnings'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LITERAL_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "literal-conversion",
    "name": "Published Standards/Compiler Warnings/Literal Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wliteral-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>When writing a literal, write it with the intended type, which may have to be accomplished with literal suffixes.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>changes value from</span>&nbsp;<em>C</em>&nbsp;<span>to</span>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion of out of range value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>is undefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wliteral-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LITERAL_RANGE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "literal-range",
    "name": "Published Standards/Compiler Warnings/Literal Range",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wliteral-range</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not compare with a float literal using the <code>==</code> or <code>!=</code> operators. Do not make a float literal with a magnitude that is too small for the type, unless adding a suffix for the appropriate size is possible.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 44%'><col style='width: 10%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>floating-point comparison is always</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; constant cannot be represented exactly in type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>magnitude of floating-point constant too large for type</span>&nbsp;<em>A</em><span>; maximum is</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>magnitude of floating-point constant too small for type</span>&nbsp;<em>A</em><span>; minimum is</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wliteral-range'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LOCAL_TYPE_TEMPLATE_ARGS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "local-type-template-args",
    "name": "Published Standards/Compiler Warnings/Local Type Template Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlocal-type-template-args</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use a local type as a template argument. Instead, define the type outside of the class/struct.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template argument uses local type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlocal-type-template-args'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LOGICAL_NOT_PARENTHESES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "logical-not-parentheses",
    "name": "Published Standards/Compiler Warnings/Logical Not Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlogical-not-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning to clarify what the not-operator does on the left operand of a comparison.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 78%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>logical not is only applied to the left hand side of this</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>comparison</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bitwise operator</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlogical-not-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LOGICAL_OP_PARENTHESES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Warnings"],
    "key": "logical-op-parentheses",
    "name": "Published Standards/Compiler Warnings/Logical Operator Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlogical-op-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>Usage of the logical operators <code>&&</code> and </code>||</code> in the same expression may lead to precedence confusion.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’&amp;&amp;’ within ‘||’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlogical-op-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_LONG_LONG": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "long-long",
    "name": "Published Standards/Compiler Warnings/Long Long",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wlong-long</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>long long</code> type is only a language extension unless using C99 or later, which is done with the <code>-std</code> command-line argument.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘long long’ is an extension when C99 mode is not enabled</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wlong-long'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MACRO_REDEFINED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "macro-redefined",
    "name": "Published Standards/Compiler Warnings/Macro Redefined",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmacro-redefined</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not define macros that are already defined. This can lead to unintended behavior if the macro value is different, especially considering the order of the <code>#include</code> directives.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>macro redefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmacro-redefined'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MAIN": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "main",
    "name": "Published Standards/Compiler Warnings/Main Function Conventions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmain</p>",
        "<p><b>Summary</b></p>",
        "<p>Use the conventions for the <code>main</code> function. Its declaration and return type should be standard, it shouldn't be called, and its address shouldn't be used.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ does not allow ‘main’ to be used by a program</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘main’ is not allowed to be declared _Noreturn</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘main’ is not allowed to be declared variadic</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>only one parameter on ‘main’ declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable named ‘main’ with external linkage has undefined behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>bool literal returned from ‘main’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘main’ should not be declared static</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmain'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MAIN_RETURN_TYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "main-return-type",
    "name": "Published Standards/Compiler Warnings/Main Return Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmain-return-type</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>main</code> function should return an <code>int</code> type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>return type of ‘main’ is not ‘int’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmain-return-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MALFORMED_WARNING_CHECK": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "malformed-warning-check",
    "name": "Published Standards/Compiler Warnings/Malformed Warning Check",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmalformed-warning-check</p>",
        "<p><b>Summary</b></p>",
        "<p>The language extension <code>__has_warning</code> expects a string that looks like compiler warning option, such as \"-Wundef\". It evaluates to true if that warning is available.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__has_warning expected option name (e.g. “-Wundef”)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmalformed-warning-check'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MANY_BRACES_AROUND_SCALAR_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "many-braces-around-scalar-init",
    "name": "Published Standards/Compiler Warnings/Many Braces Around Scalar Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmany-braces-around-scalar-init</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not type too many curly braces around the value when initializing something.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 58%'><col style='width: 23%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>too many braces around</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>scalar</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>initializer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmany-braces-around-scalar-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MAX_TOKENS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "max-tokens",
    "name": "Published Standards/Compiler Warnings/Max Tokens",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmax-tokens</p>",
        "<p><b>Summary</b></p>",
        "<p>At the time of preprocessing, a limit can be set for source code tokens. This is to reduce the size of code or included code. This can be configured with the <code>-fmax-tokens=</code> command-line option for the translation unit. The option is overwritten by the preprocessor pragma <code>clang max_tokens_here</code> for the translation unit or a specific part of a file.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the number of preprocessor source tokens (</span><em>A</em><span>) exceeds this token limit (</span><em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the total number of preprocessor source tokens (</span><em>A</em><span>) exceeds the token limit (</span><em>B</em><span>)</span></p></td></tr></tbody></table>","<p>The warning is issued if the number of pre-processor tokens exceedsthe token limit, which can be set in three ways:</p>","<ol><li><p>As a limit at a specific point in a file, using the <code><span>clang</span> <span>max_tokens_here</span></code>pragma:</p></li><li><p>As a per-translation unit limit, using the <code><span>-fmax-tokens=</span></code> command-lineflag:</p></li><li><p>As a per-translation unit limit using the <code><span>clang</span> <span>max_tokens_total</span></code> pragma,which works like and overrides the <code><span>-fmax-tokens=</span></code> flag:</p></li></ol>","<p>These limits can be helpful in limiting code growth through included files.</p>","<p>Setting a token limit of zero means no limit.</p>","<p>Note that the warning is disabled by default, so -Wmax-tokens must be usedin addition with the pragmas or -fmax-tokens flag to get any warnings.</p>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmax-tokens'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MAX_UNSIGNED_ZERO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "max-unsigned-zero",
    "name": "Published Standards/Compiler Warnings/Max Unsigned Zero",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmax-unsigned-zero</p>",
        "<p><b>Summary</b></p>",
        "<p>When calling <code>max</code> on 0u and another value, the non-zero value is always the result. Remove the u suffix from 0u to treat it as signed zero.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 41%'><col style='width: 25%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>taking the max of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a value and unsigned zero</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unsigned zero and a value</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always equal to the other value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmax-unsigned-zero'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MEMSET_TRANSPOSED_ARGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "memset-transposed-args",
    "name": "Published Standards/Compiler Warnings/Memset Transposed Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmemset-transposed-args</p>",
        "<p><b>Summary</b></p>",
        "<p>For the <code>memset</code> function do not put the <code>int ch</code> and <code>size_t count</code> parameters in the wrong argument positions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 19%'><col style='width: 37%'><col style='width: 44%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘size’ argument to memset is ‘0’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>setting buffer to a ‘sizeof’ expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; did you mean to transpose the last two arguments?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmemset-transposed-args'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MEMSIZE_COMPARISON": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "memsize-comparison",
    "name": "Published Standards/Compiler Warnings/Memsize Comparison",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmemsize-comparison</p>",
        "<p><b>Summary</b></p>",
        "<p>Certain functions require a <code>size_t</code> type, which can result from the <code>sizeof</code> operator, rather than a boolean-like <code>int</code> type that results from a comparison operator.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>size argument in</span>&nbsp;<em>A</em>&nbsp;<span>call is a comparison</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmemsize-comparison'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_ABSTRACT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-abstract",
    "name": "Published Standards/Compiler Warnings/Microsoft Abstract",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-abstract</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>abstract</code> keyword is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘abstract’ keyword is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-abstract'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_ANON_TAG": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "microsoft-anon-tag",
    "name": "Published Standards/Compiler Warnings/Microsoft Anonymous Tag",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-anon-tag</p>",
        "<p><b>Summary</b></p>",
        "<p>A struct/union which is a member of a struct/union is anonymous if there is no identifier after the closing curly brace. This is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 54%'><col style='width: 14%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>types declared in an anonymous</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>are a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 46%'><col style='width: 17%'><col style='width: 37%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>anonymous</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>structs</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unions</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>are a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-anon-tag'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-cast",
    "name": "Published Standards/Compiler Warnings/Microsoft Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>The ability to cast from a function pointer to an object pointer is an language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>static_cast between pointer-to-function and pointer-to-object is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_CHARIZE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "microsoft-charize",
    "name": "Published Standards/Compiler Warnings/Microsoft Charizing Operator",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-charize</p>",
        "<p><b>Summary</b></p>",
        "<p>The charizing operator, which is a preprocessor operator that transforms macro parameter names into character literals, is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>charizing operator #@ is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-charize'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_COMMENT_PASTE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "microsoft-comment-paste",
    "name": "Published Standards/Compiler Warnings/Microsoft Comment Paste",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-comment-paste</p>",
        "<p><b>Summary</b></p>",
        "<p>Using a replacing text macro to combine two slash tokens into a <code>//</code> comment is a langauge extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pasting two ‘/’ tokens into a ‘//’ comment is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-comment-paste'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_CONST_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-const-init",
    "name": "Published Standards/Compiler Warnings/Microsoft Const Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-const-init</p>",
        "<p><b>Summary</b></p>",
        "<p>If objects of certain types are declared without initialization, they are still initialized because of a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 51%'><col style='width: 29%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default initialization of an object of const type</span>&nbsp;<em>A</em></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>without a user-provided default constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-const-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_CPP_MACRO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "microsoft-cpp-macro",
    "name": "Published Standards/Compiler Warnings/Microsoft C++ Macro",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-cpp-macro</p>",
        "<p><b>Summary</b></p>",
        "<p>Certain operators like <code>and</code>, <code>or</code>, etc. are keywords as a language extension by Microsoft. If a macro is defined with these keywords, then the keyword is hidden.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>C++ operator</span>&nbsp;<em>A</em>&nbsp;<span>(aka</span>&nbsp;<em>B</em><span>) used as a macro name</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-cpp-macro'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_DEFAULT_ARG_REDEFINITION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-default-arg-redefinition",
    "name": "Published Standards/Compiler Warnings/Microsoft Default Arg Redefinition",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-default-arg-redefinition</p>",
        "<p><b>Summary</b></p>",
        "<p>The default argument is normally defined in the first declaration of the function. Redefining it afterward is a langauge extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redefinition of default argument</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-default-arg-redefinition'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_DRECTVE_SECTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-drectve-section",
    "name": "Published Standards/Compiler Warnings/Microsoft Drectve Section",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-drectve-section</p>",
        "<p><b>Summary</b></p>",
        "<p>In certain <code>#pragma</code> parameters by Microsoft, the \".drectve\" option was used to pass an option to the linker. Instead of this parameter, use the <code>comment</code> parameter for passing a linker option.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma</span>&nbsp;<em>A</em><span>(“.drectve”) has undefined behavior, use #pragma comment(linker, …) instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-drectve-section'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_END_OF_FILE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "microsoft-end-of-file",
    "name": "Published Standards/Compiler Warnings/Microsoft End of File",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-end-of-file</p>",
        "<p><b>Summary</b></p>",
        "<p>In certain pragmas by Microsoft, \".drectve\" option was used to pass an option to the linker. Instead of this pragma, use the <code>comment</code> pragma for passing a linker option.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>treating Ctrl-Z as end-of-file is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-end-of-file'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_ENUM_FORWARD_REFERENCE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-enum-forward-reference",
    "name": "Published Standards/Compiler Warnings/Microsoft Enum Forward Reference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-enum-forward-reference</p>",
        "<p><b>Summary</b></p>",
        "<p>Declaring an <code>enum</code> before it's defined is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>forward references to ‘enum’ types are a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-enum-forward-reference'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_ENUM_VALUE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "microsoft-enum-value",
    "name": "Published Standards/Compiler Warnings/Microsoft Enum Value",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-enum-value</p>",
        "<p><b>Summary</b></p>",
        "<p>An enumerator with a value that cannot be represented by the type is a language extension by Microsoft. You may want to specify a type, which is done by inserting a colon and a type before the opening curly brace.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumerator value is not representable in the underlying type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-enum-value'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_EXCEPTION_SPEC": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "microsoft-exception-spec",
    "name": "Published Standards/Compiler Warnings/Microsoft Exception Spec",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-exception-spec</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings related to exception specification features that are language extensions by Microsoft. Without the language extension, the declarations should be consistent and the thrown types should be non-void defined types (not incomplete types.)</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception specification of ‘…’ is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 16%'><col style='width: 20%'><col style='width: 65%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>pointer to</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference to</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>incomplete type</span>&nbsp;<em>B</em>&nbsp;<span>is not allowed in exception specification</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception specification in declaration does not match previous declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception specification in explicit instantiation does not match instantiated one</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception specification of overriding function is more lax than base version</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-exception-spec'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_EXISTS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-exists",
    "name": "Published Standards/Compiler Warnings/Microsoft Exists",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-exists</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>__if_exists</code> and <code>__if_not_exists</code> statements are language extensions by Microsoft. When they are given something vague, such as an identifier in the scope of a template <code>__if_exists(T::identifier)</code>, then the whole statement is ignored.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 42%'><col style='width: 25%'><col style='width: 33%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dependent</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>__if_not_exists</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>__if_exists</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declarations are ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-exists'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_EXPLICIT_CONSTRUCTOR_CALL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-explicit-constructor-call",
    "name": "Published Standards/Compiler Warnings/Microsoft Explicit Constructor Call",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-explicit-constructor-call</p>",
        "<p><b>Summary</b></p>",
        "<p>In constrast to instantiating a class with the typical syntax, calling the constructor of the class is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit constructor calls are a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-explicit-constructor-call'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_EXTRA_QUALIFICATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-extra-qualification",
    "name": "Published Standards/Compiler Warnings/Microsoft Extra Qualification",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-extra-qualification</p>",
        "<p><b>Summary</b></p>",
        "<p>Using the scope resolution operator <code>::</code> when it is not neccessary is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra qualification on member</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-extra-qualification'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_FIXED_ENUM": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "microsoft-fixed-enum",
    "name": "Published Standards/Compiler Warnings/Microsoft Fixed Enum",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-fixed-enum</p>",
        "<p><b>Summary</b></p>",
        "<p>Specifying the underlying type of an <code>enum</code> is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration types with a fixed underlying type are a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-fixed-enum'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_FLEXIBLE_ARRAY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "microsoft-flexible-array",
    "name": "Published Standards/Compiler Warnings/Microsoft Flexible Array",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-flexible-array</p>",
        "<p><b>Summary</b></p>",
        "<p>A flexible array is an array without a specific length. Declaring a flexible array inside of certain contexts is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 66%'><col style='width: 12%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flexible array member</span>&nbsp;<em>A</em>&nbsp;<span>in otherwise empty</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enum</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flexible array member</span>&nbsp;<em>A</em>&nbsp;<span>in a union is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-flexible-array'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_GOTO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-goto",
    "name": "Published Standards/Compiler Warnings/Microsoft Goto",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-goto</p>",
        "<p><b>Summary</b></p>",
        "<p>Using a <code>goto</code> statement to skip something like variable instantiation is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>jump from this goto statement to its label is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-goto'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_INACCESSIBLE_BASE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-inaccessible-base",
    "name": "Published Standards/Compiler Warnings/Microsoft Inaccessible Base",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-inaccessible-base</p>",
        "<p><b>Summary</b></p>",
        "<p>When a type inherits an intermediate and a base, the base is inaccessible. The warning -Winaccessible-base shows where this occurs. The ability to convert from the derived type to the base is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>accessing inaccessible direct base</span>&nbsp;<em>A</em>&nbsp;<span>of</span>&nbsp;<em>B</em>&nbsp;<span>is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-inaccessible-base'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_INCLUDE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-include",
    "name": "Published Standards/Compiler Warnings/Microsoft Include",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-include</p>",
        "<p><b>Summary</b></p>",
        "<p>As a Microsoft language extension, the <code>#include</code> directive searches for the file in a more broad way.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#include resolved using non-portable Microsoft search rules as:</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-include'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_MUTABLE_REFERENCE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-mutable-reference",
    "name": "Published Standards/Compiler Warnings/Microsoft Mutable Reference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-mutable-reference</p>",
        "<p><b>Summary</b></p>",
        "<p>It is a Microsoft language extension to have the <code>mutable</code> keyword for a reference.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘mutable’ on a reference type is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-mutable-reference'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_PURE_DEFINITION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-pure-definition",
    "name": "Published Standards/Compiler Warnings/Microsoft Pure Definition",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-pure-definition</p>",
        "<p><b>Summary</b></p>",
        "<p>A pure virtual function is normally defined with a value of 0 and no function body. It is a language extension by Microsoft to have both a value of zero and a function body.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function definition with pure-specifier is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-pure-definition'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_REDECLARE_STATIC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "microsoft-redeclare-static",
    "name": "Published Standards/Compiler Warnings/Microsoft Redeclare Static",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-redeclare-static</p>",
        "<p><b>Summary</b></p>",
        "<p>It is a Microsoft language extension to be inconsistent with the <code>static</code> keyword.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redeclaring non-static</span>&nbsp;<em>A</em>&nbsp;<span>as static is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-redeclare-static'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_SEALED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-sealed",
    "name": "Published Standards/Compiler Warnings/Microsoft Sealed",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-sealed</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>sealed</code> keyword, which is similar to the <code>final</code> keyword, is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘sealed’ keyword is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-sealed'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_STATIC_ASSERT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-static-assert",
    "name": "Published Standards/Compiler Warnings/Microsoft Static Assert",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-static-assert</p>",
        "<p><b>Summary</b></p>",
        "<p>Using a <code>static_assert</code> declaration without including the <code>&lt;assert.h&gt;</code> header is a language extension by Microsoft.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of ‘static_assert’ without inclusion of &lt;assert.h&gt; is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-static-assert'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_TEMPLATE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-template",
    "name": "Published Standards/Compiler Warnings/Microsoft Template",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-template</p>",
        "<p><b>Summary</b></p>",
        "<p>Various language extensions for templates by Microsoft</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicate explicit instantiation of</span>&nbsp;<em>A</em>&nbsp;<span>ignored as a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of member</span>&nbsp;<em>A</em>&nbsp;<span>found via unqualified lookup into dependent bases of class templates is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of member</span>&nbsp;<em>A</em>&nbsp;<span>before its declaration is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using the undeclared type</span>&nbsp;<em>A</em>&nbsp;<span>as a default template argument is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template argument containing a dereference operation is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 9%'><col style='width: 13%'><col style='width: 32%'><col style='width: 31%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class template</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class template partial</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable template</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable template partial</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>function template</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>member function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>static data member</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>member class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>member enumeration</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>specialization of</span>&nbsp;<em>B</em>&nbsp;<span>not in</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a namespace enclosing</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span>&nbsp;<em>C</em>&nbsp;<span>or an enclosing namespace</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template argument for template type parameter must be a type; omitted ‘typename’ is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘static’ can only be specified inside the class definition</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of undeclared identifier</span>&nbsp;<em>A</em><span>; unqualified lookup into dependent bases of class template</span>&nbsp;<em>B</em>&nbsp;<span>is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unqualified base initializer of class templates is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-template'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_TEMPLATE_SHADOW": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-template-shadow",
    "name": "Published Standards/Compiler Warnings/Microsoft Template Shadow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-template-shadow</p>",
        "<p><b>Summary</b></p>",
        "<p>Declaration shadowing template parameter</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration of</span>&nbsp;<em>A</em>&nbsp;<span>shadows template parameter</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-template-shadow'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_UNION_MEMBER_REFERENCE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-union-member-reference",
    "name": "Published Standards/Compiler Warnings/Microsoft Union Member Reference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-union-member-reference</p>",
        "<p><b>Summary</b></p>",
        "<p>Union member with a Microsoft extension reference type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>union member</span>&nbsp;<em>A</em>&nbsp;<span>has reference type</span>&nbsp;<em>B</em><span>, which is a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-union-member-reference'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_UNQUALIFIED_FRIEND": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-unqualified-friend",
    "name": "Published Standards/Compiler Warnings/Microsoft Unqualified Friend",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-unqualified-friend</p>",
        "<p><b>Summary</b></p>",
        "<p>Unqualified friend declaration</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-unqualified-friend'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_USING_DECL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-using-decl",
    "name": "Published Standards/Compiler Warnings/Microsoft Using Decl",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-using-decl</p>",
        "<p><b>Summary</b></p>",
        "<p>Declaration referring to an inaccessible member</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using declaration referring to inaccessible member ‘</span><em>A</em><span>’ (which refers to accessible member ‘</span><em>B</em><span>’) is a Microsoft compatibility extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-using-decl'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MICROSOFT_VOID_PSEUDO_DTOR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "microsoft-void-pseudo-dtor",
    "name": "Published Standards/Compiler Warnings/Microsoft Void Pseudo Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmicrosoft-void-pseudo-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>Pseudo-destructors on type void are a Microsoft extension</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pseudo-destructors on type void are a Microsoft extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-void-pseudo-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISEXPECT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "misexpect",
    "name": "Published Standards/Compiler Warnings/Misuse of __builtin_expect()",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmisexpect</p>",
        "<p><b>Summary</b></p>",
        "<p>Potential performance regression from use of __builtin_expect()</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Potential performance regression from use of __builtin_expect(): Annotation was correct on</span>&nbsp;<em>A</em>&nbsp;<span>of profiled executions.</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmisexpect'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISLEADING_INDENTATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Warnings"],
    "key": "misleading-indentation",
    "name": "Published Standards/Compiler Warnings/Misleading Indentation",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmisleading-indentation</p>",
        "<p><b>Summary</b></p>",
        "<p>Misleading indentation</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 76%'><col style='width: 14%'><col style='width: 10%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>misleading indentation; statement is not part of the previous ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>if</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>else</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>for</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>while</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmisleading-indentation'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISMATCHED_NEW_DELETE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "mismatched-new-delete",
    "name": "Published Standards/Compiler Warnings/Mismatched New Delete",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmismatched-new-delete</p>",
        "<p><b>Summary</b></p>",
        "<p>After allocating with the <code>new</code> or <code>new[]</code> operator, be consistent by deleting with the <code>delete</code> or <code>delete[]</code> operator, respectively.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 22%'><col style='width: 8%'><col style='width: 30%'><col style='width: 8%'><col style='width: 17%'><col style='width: 8%'><col style='width: 7%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘delete</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>[]</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ applied to a pointer that was allocated with ‘new</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>[]</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘; did you mean ‘delete</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>[]</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-new-delete'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISMATCHED_TAGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "mismatched-tags",
    "name": "Published Standards/Compiler Warnings/Mismatched Tags",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmismatched-tags</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent with declarations, for example with the <code>class</code> and <code>struct</code> keywords, to avoid linker errors.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 24%'><col style='width: 8%'><col style='width: 9%'><col style='width: 17%'><col style='width: 8%'><col style='width: 9%'><col style='width: 26%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>C</em>&nbsp;<span>defined as</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a class</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>template</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>here but previously declared as</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a class</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>template</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; this is valid, but may result in linker errors under the Microsoft C++ ABI</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 9%'><col style='width: 8%'><col style='width: 10%'><col style='width: 27%'><col style='width: 8%'><col style='width: 10%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>template</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>C</em>&nbsp;<span>was previously declared as a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>template</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; this is valid, but may result in linker errors under the Microsoft C++ ABI</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-tags'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_BRACES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "missing-braces",
    "name": "Published Standards/Compiler Warnings/Missing Braces",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-braces</p>",
        "<p><b>Summary</b></p>",
        "<p>When initializing an object with curly braces, each subobject inside should also have curly braces.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>suggest braces around initialization of subobject</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-braces'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_CONSTINIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "missing-constinit",
    "name": "Published Standards/Compiler Warnings/Missing Constinit",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-constinit</p>",
        "<p><b>Summary</b></p>",
        "<p>If something is declared with the <code>constinit</code> keyword, its other declarations should also have that keyword.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘constinit’ specifier missing on initializing declaration of</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-constinit'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_DECLARATIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "missing-declarations",
    "name": "Published Standards/Compiler Warnings/Missing Declarations",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-declarations</p>",
        "<p><b>Summary</b></p>",
        "<p>When something is declared, it should have a valid identifier and correct keywords.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration does not declare anything</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not permitted on a declaration of a type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>typedef requires a name</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ ignored on this declaration</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-declarations'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_EXCEPTION_SPEC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "missing-exception-spec",
    "name": "Published Standards/Compiler Warnings/Missing Exception Spec",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-exception-spec</p>",
        "<p><b>Summary</b></p>",
        "<p>Declarations should be consistent with exception specification, which can be shown with attributes or the <code>throw</code> and <code>noexcept</code> keywords.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is missing exception specification ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-exception-spec'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_FIELD_INITIALIZERS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "missing-field-initializers",
    "name": "Published Standards/Compiler Warnings/Missing Field Initializers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-field-initializers</p>",
        "<p><b>Summary</b></p>",
        "<p>When initializing a <code>struct</code>, assign a value to all fields.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing field</span>&nbsp;<em>A</em>&nbsp;<span>initializer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-field-initializers'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_METHOD_RETURN_TYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "missing-method-return-type",
    "name": "Published Standards/Compiler Warnings/Missing Method Return Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-method-return-type</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for methods with missing return types</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>method has no return type specified; defaults to ‘id’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-method-return-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_NORETURN": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "missing-noreturn",
    "name": "Published Standards/Compiler Warnings/Missing Noreturn Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-noreturn</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function does not return to its caller (because it terminates the application, throws an exception, loops indefinitely, etc.), then add the <code>noreturn</code> attribute.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>block could be declared with attribute ‘noreturn’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 20%'><col style='width: 16%'><col style='width: 64%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>could be declared with attribute ‘noreturn’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-noreturn'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_PROTOTYPE_FOR_CC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "missing-prototype-for-cc",
    "name": "Published Standards/Compiler Warnings/Missing Prototype for Calling Convention",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-prototype-for-cc</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for calling conventions used by functions with no prototype</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function with no prototype cannot use the</span>&nbsp;<em>A</em>&nbsp;<span>calling convention</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-prototype-for-cc'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_PROTOTYPES": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "missing-prototypes",
    "name": "Published Standards/Compiler Warnings/Missing Prototypes",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-prototypes</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for missing function prototypes</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no previous prototype for function</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-prototypes'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_SELECTOR_NAME": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "missing-selector-name",
    "name": "Published Standards/Compiler Warnings/Missing Selector Name",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-selector-name</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks if previous parameter name was used instead of relevent selector</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>used as the name of the previous parameter rather than as part of the selector</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-selector-name'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_SYSROOT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "missing-sysroot",
    "name": "Published Standards/Compiler Warnings/Missing Sysroot",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-sysroot</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for a missing sysroot directory</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no such sysroot directory: ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-sysroot'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSING_VARIABLE_DECLARATIONS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "missing-variable-declarations",
    "name": "Published Standards/Compiler Warnings/Missing Variable Declarations",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmissing-variable-declarations</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for missing extern declarations for non-static variables</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no previous extern declaration for non-static variable</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-variable-declarations'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MISSPELLED_ASSUMPTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "misspelled-assumption",
    "name": "Published Standards/Compiler Warnings/Misspelled Assumption",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmisspelled-assumption</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>assume</code> attribute expects a specific string, which is used to provide additional information to the optimizer. It should be spelled correctly.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown assumption string ‘</span><em>A</em><span>’ may be misspelled; attribute is potentially ignored, did you mean ‘</span><em>B</em><span>’?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmisspelled-assumption'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MODULE_CONFLICT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "module-conflict",
    "name": "Published Standards/Compiler Warnings/Module Conflict",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmodule-conflict</p>",
        "<p><b>Summary</b></p>",
        "<p>Module conflicts can result from importing the same module multiple times or from importing non-system modules with angle bracket syntax.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>module ‘</span><em>A</em><span>’ conflicts with already-imported module ‘</span><em>B</em><span>’:</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>module file ‘</span><em>A</em><span>’ was validated as a system module and is now being imported as a non-system module; any difference in diagnostic options will be ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-conflict'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MODULE_FILE_CONFIG_MISMATCH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "module-file-config-mismatch",
    "name": "Published Standards/Compiler Warnings/Module File Config Mismatch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmodule-file-config-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>A file should not import its own exported module.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>module file</span>&nbsp;<em>A</em>&nbsp;<span>cannot be loaded due to a configuration mismatch with the current compilation</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-file-config-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MODULE_FILE_EXTENSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "module-file-extension",
    "name": "Published Standards/Compiler Warnings/Module File Extension",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmodule-file-extension</p>",
        "<p><b>Summary</b></p>",
        "<p>When using the <code>-ftest-module-file-extension</code> compiler option to test multiple modules, the argument is parsed like blockname:major:minor:hashed:user. The blockname part should not be duplicated.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicate module file extension block name ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-file-extension'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MODULE_IMPORT_IN_EXTERN_C": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "module-import-in-extern-c",
    "name": "Published Standards/Compiler Warnings/Module Import in Extern C",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmodule-import-in-extern-c</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not import C++ modules inside of the <code>extern \"C\" { }</code> language linkage.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>import of C++ module ‘</span><em>A</em><span>’ appears within extern “C” language linkage specification</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-import-in-extern-c'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MODULES_AMBIGUOUS_INTERNAL_LINKAGE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "modules-ambiguous-internal-linkage",
    "name": "Published Standards/Compiler Warnings/Modules Ambiguous Internal Linkage",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmodules-ambiguous-internal-linkage</p>",
        "<p><b>Summary</b></p>",
        "<p>When a module is imported multiple times (possible if it is imported in different ways), the linkage may be ambiguous.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ambiguous use of internal linkage declaration</span>&nbsp;<em>A</em>&nbsp;<span>defined in multiple modules</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodules-ambiguous-internal-linkage'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MODULES_IMPORT_NESTED_REDUNDANT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "modules-import-nested-redundant",
    "name": "Published Standards/Compiler Warnings/Modules Import Nested Redundant",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmodules-import-nested-redundant</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not <code>#include</code> modules multiple times.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>redundant #include of module ‘</span><em>A</em><span>’ appears within</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmodules-import-nested-redundant'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MSVC_NOT_FOUND": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "msvc-not-found",
    "name": "Published Standards/Compiler Warnings/MSVC Not Found",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmsvc-not-found</p>",
        "<p><b>Summary</b></p>",
        "<p>On Windows, Clang relies on tools from Microsoft by default. Install Visual Studio or an alternative like MinGW. If using Visual Studio, first open the Developer Command Prompt of Visual Studio.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unable to find a Visual Studio installation; try running Clang from a developer command prompt</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmsvc-not-found'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MULTICHAR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "multichar",
    "name": "Published Standards/Compiler Warnings/Multiple Characters in Character Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmultichar</p>",
        "<p><b>Summary</b></p>",
        "<p>A character literal should have one character, in constrast to a string literal.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multi-character character constant</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmultichar'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_MULTIPLE_MOVE_VBASE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "multiple-move-vbase",
    "name": "Published Standards/Compiler Warnings/Multiple Move Virtual Base",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wmultiple-move-vbase</p>",
        "<p><b>Summary</b></p>",
        "<p>When certain criteria are met for virtual inheritance, the move operator will move the virutal base class multiple times. See the notes of -Wmultiple-move-vbase for more information.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>defaulted move assignment operator of</span>&nbsp;<em>A</em>&nbsp;<span>will move assign virtual base class</span>&nbsp;<em>B</em>&nbsp;<span>multiple times</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wmultiple-move-vbase'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NESTED_ANON_TYPES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "nested-anon-types",
    "name": "Published Standards/Compiler Warnings/Nested Anon-Types",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnested-anon-types</p>",
        "<p><b>Summary</b></p>",
        "<p>It is a language extension to have an anonymous struct/union inside of an anonymous struct/union.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 61%'><col style='width: 14%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>anonymous types declared in an anonymous</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>are an extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnested-anon-types'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NEW_RETURNS_NULL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "new-returns-null",
    "name": "Published Standards/Compiler Warnings/New Returns Null",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnew-returns-null</p>",
        "<p><b>Summary</b></p>",
        "<p>When defining a <code>new</code> or <code>new[]</code> operator which can return a null pointer, add <code>throw()</code> or <code>noexcept</code> to the declaration.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 78%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>should not return a null pointer unless it is declared ‘throw()’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>or ‘noexcept’</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnew-returns-null'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NEWLINE_EOF": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "newline-eof",
    "name": "Published Standards/Compiler Warnings/Newline EOF (End of File)",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnewline-eof</p>",
        "<p><b>Summary</b></p>",
        "<p>It is defined behavior when missing a newline character at the end of a file.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no newline at end of file</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no newline at end of file</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnewline-eof'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NODEREF": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "noderef",
    "name": "Published Standards/Compiler Warnings/Noderef Attirbute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnoderef</p>",
        "<p><b>Summary</b></p>",
        "<p>If something is declared with the <code>noderef</code> attribute, then do not dereference it or cast it to a type without that attribute.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dereferencing</span>&nbsp;<em>A</em><span>; was declared with a ‘noderef’ type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dereferencing expression marked as ‘noderef’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>casting to dereferenceable pointer removes ‘noderef’ attribute</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnoderef'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NON_C_TYPEDEF_FOR_LINKAGE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "non-c-typedef-for-linkage",
    "name": "Published Standards/Compiler Warnings/Non-C Typedef for Linkage",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-c-typedef-for-linkage</p>",
        "<p><b>Summary</b></p>",
        "<p>Add a tag name to <code>typedef</code> definitions immediately before the curly brace.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 61%'><col style='width: 11%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>anonymous non-C-compatible type given name for linkage purposes by</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>typedef</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>alias</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration; add a tag name here</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-c-typedef-for-linkage'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NON_LITERAL_NULL_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "non-literal-null-conversion",
    "name": "Published Standards/Compiler Warnings/Non-Literal Null Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-literal-null-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert an expression with the value of zero to a pointer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression which evaluates to zero treated as a null pointer constant of type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-literal-null-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NON_POD_VARARGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "non-pod-varargs",
    "name": "Published Standards/Compiler Warnings/Non-POD (Plain Old Data) Variadic Arguments",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-pod-varargs</p>",
        "<p><b>Summary</b></p>",
        "<p>Variadic arguments should be simple types.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 26%'><col style='width: 10%'><col style='width: 37%'><col style='width: 10%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>cannot pass object of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>non-POD</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-trivial</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>B</em>&nbsp;<span>through variadic</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; call will abort at runtime</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 20%'><col style='width: 9%'><col style='width: 35%'><col style='width: 9%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>cannot pass</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>non-POD</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-trivial</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>object of type</span>&nbsp;<em>B</em>&nbsp;<span>to variadic</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; expected type from format string was</span>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>second argument to ‘va_arg’ is of non-POD type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>second argument to ‘va_arg’ is of ARC ownership-qualified type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-pod-varargs'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NON_POWER_OF_TWO_ALIGNMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "non-power-of-two-alignment",
    "name": "Published Standards/Compiler Warnings/Non-Power of Two Alignment",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-power-of-two-alignment</p>",
        "<p><b>Summary</b></p>",
        "<p>When specifying the alignment, it should be a power of 2.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>requested alignment is not a power of 2</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-power-of-two-alignment'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NON_VIRTUAL_DTOR": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "non-virtual-dtor",
    "name": "Published Standards/Compiler Warnings/Non-Virtual Destructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnon-virtual-dtor</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent with the <code>virtual</code> keyword when declaring/defining methods.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has virtual functions but non-virtual destructor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-virtual-dtor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NONNULL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "nonnull",
    "name": "Published Standards/Compiler Warnings/Null as an Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnonnull</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function receives a pointer, do not give it null. Likewise, if a function returns a pointer, do not return null.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>null passed to a callee that requires a non-null argument</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 45%'><col style='width: 15%'><col style='width: 40%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>null returned from</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>that requires a non-null return value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonnull'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NONPORTABLE_INCLUDE_PATH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "nonportable-include-path",
    "name": "Published Standards/Compiler Warnings/Non-Portable Include Path",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnonportable-include-path</p>",
        "<p><b>Summary</b></p>",
        "<p>Make sure that includes are correct for different systems, even the capitalization.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-portable path to file ‘</span><em>A</em><span>’; specified path differs in case from file name on disk</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-include-path'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NONPORTABLE_SYSTEM_INCLUDE_PATH": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "nonportable-system-include-path",
    "name": "Published Standards/Compiler Warnings/Non-Portable System Include Path",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnonportable-system-include-path</p>",
        "<p><b>Summary</b></p>",
        "<p>Make sure that system includes are correct for different systems, even the capitalization.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-portable path to file ‘</span><em>A</em><span>’; specified path differs in case from file name on disk</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-system-include-path'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NONPORTABLE_VECTOR_INITIALIZATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "nonportable-vector-initialization",
    "name": "Published Standards/Compiler Warnings/Non-Portable Vector Initialization",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnonportable-vector-initialization</p>",
        "<p><b>Summary</b></p>",
        "<p>When using the built-in types of the NEON architecture extension, do not use vector initializers. Instead, see the note of <code>-Wnonportable-vector-initialization</code> for alternatives.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>vector initializers are not compatible with NEON intrinsics in big endian mode</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-vector-initialization'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NONTRIVIAL_MEMACCESS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "nontrivial-memaccess",
    "name": "Published Standards/Compiler Warnings/Nontrivial Memory Access",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnontrivial-memaccess</p>",
        "<p><b>Summary</b></p>",
        "<p>When something is non-trivial to initialize or copy, keep these operations to a minimum. If this is not desired, then explicitly cast its pointer to the expected type, which is <code>void *</code> usually.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 10%'><col style='width: 12%'><col style='width: 63%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>destination for</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>source of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>first operand of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>second operand of</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>this</span>&nbsp;<em>B</em>&nbsp;<span>call is a pointer to record</span>&nbsp;<em>C</em>&nbsp;<span>that is not trivial to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>primitive-default-initialize</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>primitive-copy</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnontrivial-memaccess'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NULL_ARITHMETIC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "null-arithmetic",
    "name": "Published Standards/Compiler Warnings/Null Arithmetic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-arithmetic</p>",
        "<p><b>Summary</b></p>",
        "<p>Instead of <code>NULL</code>, use the integer literal for zero in arithmetic expressions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of NULL in arithmetic operation</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 58%'><col style='width: 42%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison between NULL and non-pointer</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>(</span><em>B</em>&nbsp;<span>and NULL)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>(NULL and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-arithmetic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NULL_CHARACTER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "null-character",
    "name": "Published Standards/Compiler Warnings/Null Character",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-character</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for using the null character, which may be invisible, in code or in a string literal. In code, it is ignored. In a string literal, it is not ignored, so it ends the string.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 62%'><col style='width: 16%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>null character(s) preserved in</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>char</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>string</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>literal</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>null character ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-character'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NULL_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "null-conversion",
    "name": "Published Standards/Compiler Warnings/Null Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert from <code>NULL</code> or <code>nullptr</code> to another type. Instead, explicitly convert the type or convert from 0.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 48%'><col style='width: 14%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>NULL</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>nullptr</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>constant to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NULL_DEREFERENCE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "null-dereference",
    "name": "Published Standards/Compiler Warnings/Null Dereference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-dereference</p>",
        "<p><b>Summary</b></p>",
        "<p>If something is a reference type, then do not assign it a value of null. If a pointer is null, and it's not volatile, then do not dereference it.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>binding dereferenced null pointer to reference has undefined behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>indirection of non-volatile null pointer will be deleted, not trap</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-dereference'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NULL_POINTER_ARITHMETIC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "null-pointer-arithmetic",
    "name": "Published Standards/Compiler Warnings/Null Pointer Arithmetic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-pointer-arithmetic</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not perform pointer arithmetic with a null pointer</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 70%'><col style='width: 30%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>performing pointer arithmetic on a null pointer has undefined behavior</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>if the offset is nonzero</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-pointer-arithmetic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_NULL_POINTER_SUBTRACTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "null-pointer-subtraction",
    "name": "Published Standards/Compiler Warnings/Null Pointer Subtraction",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wnull-pointer-subtraction</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not perform subtraction with a null pointer</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 62%'><col style='width: 14%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>performing pointer subtraction with a null pointer</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>has</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>may have</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-pointer-subtraction'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OBJC_BOOL_CONSTANT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "objc-bool-constant-conversion",
    "name": "Published Standards/Compiler Warnings/Objective-C Bool Constant Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wobjc-bool-constant-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Constant values should not be implicitly converted to BOOL</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from constant value</span>&nbsp;<em>A</em>&nbsp;<span>to ‘BOOL’; the only well defined values for ‘BOOL’ are YES and NO</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wobjc-bool-constant-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OBJC_CIRCULAR_CONTAINER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "objc-circular-container",
    "name": "Published Standards/Compiler Warnings/Objective-C Circular Container",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wobjc-circular-container</p>",
        "<p><b>Summary</b></p>",
        "<p>One should not cause potential circular dependencies in a container</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>adding</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>might cause circular dependency in container</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wobjc-circular-container'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OBJC_MULTIPLE_METHOD_NAMES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "objc-multiple-method-names",
    "name": "Published Standards/Compiler Warnings/Objective-C Multiple Method Names",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wobjc-multiple-method-names</p>",
        "<p><b>Summary</b></p>",
        "<p>Multiple methods should not share the same name</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple methods named</span>&nbsp;<em>A</em>&nbsp;<span>found</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wobjc-multiple-method-names'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OBJC_READONLY_WITH_SETTER_PROPERTY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "objc-readonly-with-setter-property",
    "name": "Published Standards/Compiler Warnings/Objective-C Readonly with Setter Property",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wobjc-readonly-with-setter-property</p>",
        "<p><b>Summary</b></p>",
        "<p>Setters cannot be specified for a readonly property</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>setter cannot be specified for a readonly property</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wobjc-readonly-with-setter-property'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OBJC_SIGNED_CHAR_BOOL_IMPLICIT_FLOAT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "objc-signed-char-bool-implicit-float-conversion",
    "name": "Published Standards/Compiler Warnings/Objective-C Signed Char Bool Implicit Float Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wobjc-signed-char-bool-implicit-float-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Floating-point types should not be converted implicitly to BOOL</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from floating-point type</span>&nbsp;<em>A</em>&nbsp;<span>to ‘BOOL’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wobjc-signed-char-bool-implicit-float-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OBJC_SIGNED_CHAR_BOOL_IMPLICIT_INT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "objc-signed-char-bool-implicit-int-conversion",
    "name": "Published Standards/Compiler Warnings/Objective-C Signed Char Bool Implicit Int Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wobjc-signed-char-bool-implicit-int-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Integral types should not be converted implicitly to BOOL</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from integral type</span>&nbsp;<em>A</em>&nbsp;<span>to ‘BOOL’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wobjc-signed-char-bool-implicit-int-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ODR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "odr",
    "name": "Published Standards/Compiler Warnings/One Definition Rule",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wodr</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings to ensure that declarations/definitions are consistent</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template parameter lists have a different number of parameters (</span><em>A</em>&nbsp;<span>vs</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template parameter has different kinds in different translation units</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>field</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>external function</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>instance variable</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template parameter declared with incompatible types in different translation units (</span><em>A</em>&nbsp;<span>vs.</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 10%'><col style='width: 8%'><col style='width: 81%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>method</span>&nbsp;<em>B</em>&nbsp;<span>has a different number of parameters in different translation units (</span><em>C</em>&nbsp;<span>vs.</span>&nbsp;<em>D</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 10%'><col style='width: 8%'><col style='width: 82%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>method</span>&nbsp;<em>B</em>&nbsp;<span>has a parameter with a different types in different translation units (</span><em>C</em>&nbsp;<span>vs.</span>&nbsp;<em>D</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 9%'><col style='width: 81%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>method</span>&nbsp;<em>B</em>&nbsp;<span>has incompatible result types in different translation units (</span><em>C</em>&nbsp;<span>vs.</span>&nbsp;<em>D</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 15%'><col style='width: 12%'><col style='width: 73%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>method</span>&nbsp;<em>B</em>&nbsp;<span>is variadic in one translation unit and not variadic in another</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 45%'><col style='width: 9%'><col style='width: 19%'><col style='width: 9%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property</span>&nbsp;<em>A</em>&nbsp;<span>is implemented with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>@synthesize</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@dynamic</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in one translation but</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>@dynamic</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@synthesize</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in another translation unit</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>class</span>&nbsp;<em>A</em>&nbsp;<span>has incompatible superclasses</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property</span>&nbsp;<em>A</em>&nbsp;<span>is synthesized to different ivars in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 61%'><col style='width: 14%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parameter kind mismatch; parameter is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>not a</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>parameter pack</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type</span>&nbsp;<em>A</em>&nbsp;<span>has incompatible definitions in different translation units</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>external variable</span>&nbsp;<em>A</em>&nbsp;<span>defined in multiple translation units</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>external variable</span>&nbsp;<em>A</em>&nbsp;<span>declared with incompatible types in different translation units (</span><em>B</em>&nbsp;<span>vs.</span>&nbsp;<em>C</em><span>)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wodr'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OLD_STYLE_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "old-style-cast",
    "name": "Published Standards/Compiler Warnings/Old Style Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wold-style-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Old-style casts should be avoided</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of old-style cast</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wold-style-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OPENMP_51_EXTENSIONS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "openmp-51-extensions",
    "name": "Published Standards/Compiler Warnings/OpenMP 51 Extensions",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wopenmp-51-extensions</p>",
        "<p><b>Summary</b></p>",
        "<p>An OpenMP directive is made with <code>#pragma omp</code> with OpenMP versions before 5.1, and the <code>[[]]</code> syntax is an OpenMP 5.1 extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>specifying OpenMP directives with [[]] is an OpenMP 5.1 extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-51-extensions'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OPENMP_CLAUSES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "openmp-clauses",
    "name": "Published Standards/Compiler Warnings/OpenMP Clauses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wopenmp-clauses</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for the OpenMP clauses, which can be used with the <code>#pragma omp</code> syntax.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>aligned clause will be ignored because the requested alignment is not a power of 2</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>allocator with the ‘thread’ trait access has unspecified behavior on ‘</span><em>A</em><span>’ directive</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the context property ‘</span><em>A</em><span>’ is not valid for the context selector ‘</span><em>B</em><span>’ and the context set ‘</span><em>C</em><span>’; property ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the context selector ‘</span><em>A</em><span>’ in the context set ‘</span><em>B</em><span>’ cannot have a score (‘</span><em>C</em><span>’); score ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the context selector ‘</span><em>A</em><span>’ is not valid for the context set ‘</span><em>B</em><span>’; selector ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the context selector ‘</span><em>A</em><span>’ in context set ‘</span><em>B</em><span>’ requires a context property defined in parentheses; selector ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 23%'><col style='width: 9%'><col style='width: 48%'><col style='width: 9%'><col style='width: 11%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the context</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>set</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>selector</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>property</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’ was used already in the same ‘omp declare variant’ directive;</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>set</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>selector</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>property</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not a valid context property for the context selector ‘</span><em>B</em><span>’ and the context set ‘</span><em>C</em><span>’; property ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not a valid context selector for the context set ‘</span><em>B</em><span>’; selector ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is not a valid context set in a `declare variant`; set ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘</span><em>A</em><span>’ after the</span>&nbsp;<em>B</em><span>; ‘</span><em>A</em><span>’ assumed</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 53%'><col style='width: 11%'><col style='width: 11%'><col style='width: 11%'><col style='width: 14%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected identifier or string literal describing a context</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>set</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>selector</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>property</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>;</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>set</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>selector</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>property</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>skipped</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 48%'><col style='width: 30%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>zero linear step (</span><em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>and other variables in clause</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>should probably be const)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>more than one ‘device_type’ clause is specified</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>interop type ‘</span><em>A</em><span>’ cannot be specified more than once</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reserved locator ‘omp_all_memory’ cannot be specified more than once</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 73%'><col style='width: 10%'><col style='width: 17%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>valid</span>&nbsp;<em>A</em>&nbsp;<span>clauses start with</span>&nbsp;<em>B</em><span>;</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>token</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>tokens</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>will be ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>clause should not be followed by arguments; tokens will be ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 33%'><col style='width: 20%'><col style='width: 26%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>allocate directive specifies</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>default</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>B</em><span>’</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>allocator while previously used</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>default</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>D</em><span>’</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-clauses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OPENMP_LOOP_FORM": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "openmp-loop-form",
    "name": "Published Standards/Compiler Warnings/OpenMP Loop Form",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wopenmp-loop-form</p>",
        "<p><b>Summary</b></p>",
        "<p>An OpenMP for-loop should set the iteration variable, and that variable cannot be more than 64 bits.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialization clause of OpenMP for loop is not in canonical form (‘var = init’ or ‘T var = init’)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>OpenMP loop iteration variable cannot have more than 64 bits size and will be narrowed</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-loop-form'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OPENMP_MAPPING": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "openmp-mapping",
    "name": "Published Standards/Compiler Warnings/OpenMP Mapping",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wopenmp-mapping</p>",
        "<p><b>Summary</b></p>",
        "<p>When mapping variables to threads in OpenMP, for example through the <code>firstprivate</code> clause, the type of the variable should be as easy to copy as a primitive type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Type</span>&nbsp;<em>A</em>&nbsp;<span>is not trivially copyable and not guaranteed to be mapped correctly</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-mapping'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OPENMP_TARGET": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "openmp-target",
    "name": "Published Standards/Compiler Warnings/OpenMP Target",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wopenmp-target</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have duplicates in the <code>-fopenmp-targets</code> option. Before a function is used, use <code>#pragma omp declare target</code> to specify the device target of the declaration.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>OpenMP offloading target ‘</span><em>A</em><span>’ is similar to target ‘</span><em>B</em><span>’ already specified; will be ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration marked as declare target after first use, it may lead to incorrect results</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration is not declared in any declare target region</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-target'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OPTION_IGNORED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "option-ignored",
    "name": "Published Standards/Compiler Warnings/Option Ignored",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Woption-ignored</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for when a compiling/linking option is ignored, due to a lack of support or compatibility.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>option ‘-ffine-grained-bitfield-accesses’ cannot be enabled together with a sanitizer; flag ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>-fjmc works only for ELF; option ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>requires debug info. Use</span>&nbsp;<em>B</em>&nbsp;<span>or debug options that enable debugger’s stepping function; option ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ does not support ‘-</span><em>B</em><span>’; flag ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ does not support ‘-moutline’; flag ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>requires HVX, use -mhvx/-mhvx= to enable it</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>option ‘</span><em>A</em><span>’ was ignored by the</span>&nbsp;<em>B</em>&nbsp;<span>toolchain, using ‘-fPIC’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 64%'><col style='width: 24%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘-mlong-calls’ option as it is not currently supported with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>the implicit usage of</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>-mabicalls</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘</span><em>A</em><span>’ option for offload arch ‘</span><em>B</em><span>’ as it is not currently supported there. Use it with an offload arch containing ‘</span><em>C</em><span>’ instead</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘</span><em>A</em><span>’ option as it is not currently supported for target ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 61%'><col style='width: 16%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘</span><em>A</em><span>’ option as it cannot be used with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>implicit usage of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>-mabicalls and the N64 ABI</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘-msmall-data-limit=’ with -mcmodel=large for -fpic or RV64</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woption-ignored'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ORDERED_COMPARE_FUNCTION_POINTERS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "ordered-compare-function-pointers",
    "name": "Published Standards/Compiler Warnings/Ordered Compare Function Pointers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wordered-compare-function-pointers</p>",
        "<p><b>Summary</b></p>",
        "<p>Other than the equality operators <code>==</code> and <code>!=</code>, do not compare functions with the comparison operators.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ordered comparison of function pointers (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ordered comparison of function pointers (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wordered-compare-function-pointers'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OUT_OF_LINE_DECLARATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "out-of-line-declaration",
    "name": "Published Standards/Compiler Warnings/Out of Line Declaration",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wout-of-line-declaration</p>",
        "<p><b>Summary</b></p>",
        "<p>When outside of the curly braces of a class/struct, do not declare a member. Instead, define the member with value or a function body.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>out-of-line declaration of a member must be a definition</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wout-of-line-declaration'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OUT_OF_SCOPE_FUNCTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "out-of-scope-function",
    "name": "Published Standards/Compiler Warnings/Out of Scope Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wout-of-scope-function</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not declare an identifier out of the scope. If it is already properly declared in scope, it is because it appears in the same curly brace block, or any surrounding block.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 53%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of out-of-scope declaration of</span>&nbsp;<em>A</em></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>whose type is not compatible with that of an implicit declaration</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wout-of-scope-function'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OVER_ALIGNED": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "over-aligned",
    "name": "Published Standards/Compiler Warnings/Over Aligned",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wover-aligned</p>",
        "<p><b>Summary</b></p>",
        "<p>For the <code>aligned</code> attribute, do not use a number that is too large for the default allocator.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type</span>&nbsp;<em>A</em>&nbsp;<span>requires</span>&nbsp;<em>B</em>&nbsp;<span>bytes of alignment and the default allocator only guarantees</span>&nbsp;<em>C</em>&nbsp;<span>bytes</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wover-aligned'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OVERLENGTH_STRINGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "overlength-strings",
    "name": "Published Standards/Compiler Warnings/Long String Literals",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Woverlength-strings</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not make a string literal that is longer than supported by the standard.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 71%'><col style='width: 8%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>string literal of length</span>&nbsp;<em>A</em>&nbsp;<span>exceeds maximum length</span>&nbsp;<em>B</em>&nbsp;<span>that</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>C90</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>ISO C99</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>C++</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>compilers are required to support</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverlength-strings'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OVERLOADED_SHIFT_OP_PARENTHESES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "overloaded-shift-op-parentheses",
    "name": "Published Standards/Compiler Warnings/Overloaded Shift Operator Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Woverloaded-shift-op-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>Overloaded operators have the same precedence as non-overloaded operators. When using overloaded <code>&lt;&lt;</code> or <code>&gt;&gt;</code> operators near comparison operators, clarify the order by adding parentheses.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 45%'><col style='width: 11%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overloaded operator</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&gt;&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>&lt;&lt;</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>has higher precedence than comparison operator</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-shift-op-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OVERLOADED_VIRTUAL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "overloaded-virtual",
    "name": "Published Standards/Compiler Warnings/Overloaded Virtual",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Woverloaded-virtual</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent with the <code>virtual</code> keyword.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 81%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>hides overloaded virtual</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>functions</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-virtual'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OVERRIDE_MODULE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "override-module",
    "name": "Published Standards/Compiler Warnings/Override Module",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Woverride-module</p>",
        "<p><b>Summary</b></p>",
        "<p>For LLVM intermediate representation (LLVM IR), specify the target triple in the .ll file or with the <code>-triple</code> option.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overriding the module target triple with</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverride-module'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_OVERRIDING_T_OPTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "overriding-t-option",
    "name": "Published Standards/Compiler Warnings/Overriding Slash T Option",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Woverriding-t-option</p>",
        "<p><b>Summary</b></p>",
        "<p>Options may be overridden because they are cancelled out by other later options. To see all options, including those that are implicit, use the <code>-###</code> option.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overriding ‘</span><em>A</em><span>’ option with ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#woverriding-t-option'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PACKED": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "packed",
    "name": "Published Standards/Compiler Warnings/Packed Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpacked</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>packed</code> attribute is not necessary if the fields/members already lack padding.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>packed attribute is unnecessary for</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpacked'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PADDED": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "padded",
    "name": "Published Standards/Compiler Warnings/Implicit Padding",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpadded</p>",
        "<p><b>Summary</b></p>",
        "<p>Informs you of the implicit padding that the compiler adds to structs and unions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 23%'><col style='width: 10%'><col style='width: 34%'><col style='width: 8%'><col style='width: 6%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>padding</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>with</span>&nbsp;<em>C</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>byte</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bit</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to align anonymous bit-field</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 22%'><col style='width: 10%'><col style='width: 33%'><col style='width: 7%'><col style='width: 6%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>padding</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>interface</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>class</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>with</span>&nbsp;<em>C</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>byte</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bit</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to align</span>&nbsp;<em>E</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 64%'><col style='width: 9%'><col style='width: 7%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>padding size of</span>&nbsp;<em>A</em>&nbsp;<span>with</span>&nbsp;<em>B</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>byte</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>bit</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to alignment boundary</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpadded'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PARENTHESES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Warnings"],
    "key": "parentheses",
    "name": "Published Standards/Compiler Warnings/Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wparentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use the incorrect operator, for example <code>=</code> instead of <code>==</code> in a condition. If there was no mistake, use parentheses around the operation to clarify intention.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using the result of an assignment as a condition without parentheses</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has lower precedence than</span>&nbsp;<em>B</em><span>;</span>&nbsp;<em>B</em>&nbsp;<span>will be evaluated first</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>operator ‘?:’ has lower precedence than ‘</span><em>A</em><span>’; ‘</span><em>A</em><span>’ will be evaluated first</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wparentheses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PARENTHESES_EQUALITY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "parentheses-equality",
    "name": "Published Standards/Compiler Warnings/Parentheses Equality",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wparentheses-equality</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not include parentheses around an equality comparison if they are not necessary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>equality comparison with extraneous parentheses</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wparentheses-equality'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PASS_FAILED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "pass-failed",
    "name": "Published Standards/Compiler Warnings/Pass Failed",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpass-failed</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for when a compiler pass is requested to do a transformation, but fails. Specific transformations can be watched for.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<p>The text of this diagnostic is not controlled by Clang.</p>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpass-failed'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PCH_DATE_TIME": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "pch-date-time",
    "name": "Published Standards/Compiler Warnings/PCH (Precompiled Header) Date Time",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpch-date-time</p>",
        "<p><b>Summary</b></p>",
        "<p>If a precompiled header or module uses the <code>__DATE__</code> or <code>__TIME__</code> macro, then it will be inconsistent with the rest of the code at preprocessing time.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 24%'><col style='width: 29%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>precompiled header</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>module</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>uses __DATE__ or __TIME__</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpch-date-time'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PEDANTIC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "pedantic",
    "name": "Published Standards/Compiler Warnings/Pedantic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpedantic</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings to comform to strict ISO C or ISO C++ standards</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 13%'><col style='width: 49%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression is not an</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>integer</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>integral</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>constant expression; folding it to a constant is a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>designated initializers are a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ does not allow ‘main’ to be used by a program</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 89%'><col style='width: 11%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>C++98 requires an accessible copy constructor for class</span>&nbsp;<em>C</em>&nbsp;<span>when binding a reference to a temporary; was</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>private</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>protected</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 41%'><col style='width: 15%'><col style='width: 44%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>anonymous</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>cannot be ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ requires the name after ‘::~’ to be found in the same scope as the name before ‘::~’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ considers this destructor name lookup to be ambiguous</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 26%'><col style='width: 21%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no viable constructor</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>copying variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying parameter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing template parameter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing statement expression result</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>throwing object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying member subobject</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying array element</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>allocating object</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copying temporary</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing base subobject</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing vector element</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>capturing value</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of type</span>&nbsp;<em>B</em><span>; C++98 requires a copy constructor when binding a reference to a temporary</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ standards before C++17 do not allow new expression for type</span>&nbsp;<em>A</em>&nbsp;<span>to use list-initialization</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invoking a pointer to a ‘const &amp;’ member function on an rvalue is a C++20 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>qualifier in explicit instantiation of</span>&nbsp;<em>A</em>&nbsp;<span>requires a template-id (a typedef is not permitted)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 27%'><col style='width: 12%'><col style='width: 41%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration without a prototype is deprecated</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>in all versions of C</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 31%'><col style='width: 13%'><col style='width: 56%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>static</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>is used in an inline function with external linkage</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C forbids forward references to ‘enum’ types</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 82%'><col style='width: 11%'><col style='width: 7%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C restricts enumerator values to range of ‘int’ (</span><em>A</em>&nbsp;<span>is too</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>small</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>large</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializer for aggregate is not a compile-time constant</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>flexible array members are a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid application of ‘</span><em>A</em><span>’ to a function type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid application of ‘</span><em>A</em><span>’ to a void type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C90 does not allow subscripting non-lvalue array</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C forbids taking the address of an expression of type ‘void’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ordered comparison between pointer and zero (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>) is an extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>equality comparison between function pointer and void pointer (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C does not support ‘++’/’–’ on complex integer type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C does not support ‘~’ for complex conjugation of</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>complex numbers are an extension in a freestanding C99 implementation</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast between pointer-to-function and pointer-to-object is an extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 57%'><col style='width: 10%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion from array size expression of type</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>integral</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>enumeration</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>type</span>&nbsp;<em>C</em>&nbsp;<span>is a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 12%'><col style='width: 57%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>converts between void pointer and function pointer</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>kernel function</span>&nbsp;<em>A</em>&nbsp;<span>is a member function; this may not be accepted by nvcc</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>C99 forbids conditional expressions with only one void side</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>C99 forbids casting nonscalar type</span>&nbsp;<em>A</em>&nbsp;<span>to the same type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 54%'><col style='width: 14%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>types declared in an anonymous</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>struct</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>union</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>are a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 58%'><col style='width: 15%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overloaded</span>&nbsp;<em>A</em>&nbsp;<span>with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>no</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a defaulted</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>more than one</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>parameter is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 71%'><col style='width: 16%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>format specifies type</span>&nbsp;<em>A</em>&nbsp;<span>but the argument has</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>underlying type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 34%'><col style='width: 15%'><col style='width: 51%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>void</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;<span>should not return void expression</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>mixing declarations and code is a C99 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 19%'><col style='width: 24%'><col style='width: 21%'><col style='width: 16%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>qualifier in</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>static</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>array size</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>‘[*] ‘</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>is a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Clang permits use of type ‘double’ regardless pragma if ‘cl_khr_fp64’ is supported</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 54%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extra ‘;’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>outside of a function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>inside a</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>inside instance variable list</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>after member function definition</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘__thread’ before ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type-less parameter names in function declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable declaration in for loop is a C99-specific feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>compound literals are a C99-specific feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>commas at the end of enumerator lists are a C99-specific feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>commas at the end of enumerator lists are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enumeration types with a fixed underlying type are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ is a C99 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of GNU array range extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>exception specification of ‘…’ is a Microsoft extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 43%'><col style='width: 19%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attributes on</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a namespace</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an enumerator</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration are a C++17 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>extern templates are a C++11 extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multi-line // comment</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>// comments are not allowed in this language</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no newline at end of file</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of non-standard escape character ‘\\</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>hexadecimal floating constants are a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>hexadecimal floating literals are a C++17 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#ident is a language extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 56%'><col style='width: 18%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#warning is a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>C2x</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>C++2b</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comma operator in operand of #if</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__VA_ARGS__ can only appear in the expansion of a C99 variadic macro</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variadic macros are a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>named variadic macros are a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty macro arguments are a C99 feature</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variadic macros are a Clang extension in OpenCL</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>C requires #line number to be less than</span>&nbsp;<em>A</em><span>, allowed as extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>macro expansion producing ‘defined’ has undefined behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicate ‘</span><em>A</em><span>’ declaration specifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘enable_if’ is a clang extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘diagnose_if’ is a clang extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpedantic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PEDANTIC_CORE_FEATURES": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pedantic-core-features",
    "name": "Published Standards/Compiler Warnings/Pedantic Core Features",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpedantic-core-features</p>",
        "<p><b>Summary</b></p>",
        "<p>Some core features of a language may not be supported for some target systems. Do not use language extensions if they are now core features of the language.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 41%'><col style='width: 13%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is a core feature in</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>OpenCL C</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>C++ for OpenCL</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>version</span>&nbsp;<em>C</em>&nbsp;<span>but not supported on this target</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>OpenCL extension</span>&nbsp;<em>A</em>&nbsp;<span>is core feature or supported optional core feature - ignoring</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpedantic-core-features'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PESSIMIZING_MOVE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "pessimizing-move",
    "name": "Published Standards/Compiler Warnings/Pessimizing Move",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpessimizing-move</p>",
        "<p><b>Summary</b></p>",
        "<p>Calling <code>std::move</code> can prevent copy elision in certain situations. As a result, the object is copied even though there may be a way to avoid this.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>moving a temporary object prevents copy elision</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>moving a local object in a return statement prevents copy elision</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpessimizing-move'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POINTER_ARITH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-arith",
    "name": "Published Standards/Compiler Warnings/Pointer Arithmetic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-arith</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not get or use the size of functions, void, or anything with a size of zero.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid application of ‘</span><em>A</em><span>’ to a function type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid application of ‘</span><em>A</em><span>’ to a void type</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>subtraction of pointers to type</span>&nbsp;<em>A</em>&nbsp;<span>of zero size has undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-arith'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POINTER_BOOL_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-bool-conversion",
    "name": "Published Standards/Compiler Warnings/Pointer Bool Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-bool-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Nonnull function call and parameter pointers will evaluate to 'true' on first encounter. Address of function and array pointers will always evaluate to 'true'.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 31%'><col style='width: 16%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>nonnull</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function call</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’ will evaluate to ‘true’ on first encounter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 31%'><col style='width: 19%'><col style='width: 51%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>address of</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p>&nbsp;<span>array</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’ will always evaluate to ‘true’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-bool-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POINTER_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-compare",
    "name": "Published Standards/Compiler Warnings/Pointer Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>When attempting to compare a pointer to null or (void*)0, the result may unintentionally end up comparing to a null pointer constant.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 77%'><col style='width: 15%'><col style='width: 8%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparing a pointer to a null character constant; did you mean to compare to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>NULL</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>(void *)0</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POINTER_INTEGER_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-integer-compare",
    "name": "Published Standards/Compiler Warnings/Pointer Integer Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-integer-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Warns when a comparison between a pointer and integer occurs.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison between pointer and integer (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-integer-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POINTER_SIGN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-sign",
    "name": "Published Standards/Compiler Warnings/Pointer Sign",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-sign</p>",
        "<p><b>Summary</b></p>",
        "<p>Assigning, passing, returning, converting, initializing, sending, and casting parameters, expressions, types, etc. converts between pointers to integer types either with a different sign or where one is of the unique plain 'char' type and the other is not.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 9%'><col style='width: 42%'><col style='width: 23%'><col style='width: 26%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>converts between pointers to integer types</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>with different sign</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>where one is of the unique plain ‘char’ type and the other is not</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-sign'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POINTER_TO_ENUM_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-to-enum-cast",
    "name": "Published Standards/Compiler Warnings/Pointer to Enum Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-to-enum-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Cast to smaller integer from type to type in enum.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to smaller integer type</span>&nbsp;<em>B</em>&nbsp;<span>from</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-enum-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POINTER_TO_INT_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-to-int-cast",
    "name": "Published Standards/Compiler Warnings/Pointer to Int Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-to-int-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Cast to smaller integer from type to type.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to smaller integer type</span>&nbsp;<em>B</em>&nbsp;<span>from</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-int-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POINTER_TYPE_MISMATCH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pointer-type-mismatch",
    "name": "Published Standards/Compiler Warnings/Pointer Type Mismatch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpointer-type-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>In a conditional ternary operator, be consistent with the types of the 2 possible resulting expressions when at least one is a pointer. This may be done by type casting.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 37%'><col style='width: 63%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pointer type mismatch</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>(</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-type-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POISON_SYSTEM_DIRECTORIES": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "poison-system-directories",
    "name": "Published Standards/Compiler Warnings/Poison System Directories",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpoison-system-directories</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of the way that includes are searched for, do not compile for other targets inside of certain system directories. Instead, run the command in another directory, or set the directory with options.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>include location ‘</span><em>A</em><span>’ is unsafe for cross-compilation</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpoison-system-directories'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_POTENTIALLY_EVALUATED_EXPRESSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "potentially-evaluated-expression",
    "name": "Published Standards/Compiler Warnings/Potentially Evaluated Expression",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpotentially-evaluated-expression</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have side effects in the expression of the <code>typeid</code> operator. This could be directly changing memory or calling a function that does so.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression with side effects will be evaluated despite being used as an operand to ‘typeid’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpotentially-evaluated-expression'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRAGMA_CLANG_ATTRIBUTE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "pragma-clang-attribute",
    "name": "Published Standards/Compiler Warnings/Pragma Clang Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpragma-clang-attribute</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>annotate</code> attribute should have code to annotate before the attribute is popped.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused attribute</span>&nbsp;<em>A</em>&nbsp;<span>in ‘#pragma clang attribute push’ region</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-clang-attribute'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRAGMA_ONCE_OUTSIDE_HEADER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "pragma-once-outside-header",
    "name": "Published Standards/Compiler Warnings/Pragma once Outside Header",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpragma-once-outside-header</p>",
        "<p><b>Summary</b></p>",
        "<p>A main file shouldn't be included, so <code>#pragma once</code> shouldn't be necessary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma once in main file</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-once-outside-header'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRAGMA_PACK": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pragma-pack",
    "name": "Published Standards/Compiler Warnings/Pragma Pack",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpragma-pack</p>",
        "<p><b>Summary</b></p>",
        "<p>The pragma <code>#pragma pack(push, ...)</code> should eventually be followed by <code>#pragma pack(pop, ...)</code> before the end of the file, especially if the file is included.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the current #pragma pack alignment value is modified in the included file</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unterminated ‘#pragma pack (push, …)’ at end of file</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-pack'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRAGMA_PACK_SUSPICIOUS_INCLUDE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pragma-pack-suspicious-include",
    "name": "Published Standards/Compiler Warnings/Pragma Pack Suspicious Include",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpragma-pack-suspicious-include</p>",
        "<p><b>Summary</b></p>",
        "<p>When using pragmas that change the alignment, such as <code>pack</code> and <code>align</code>, do not include files. The included files may not work as intended.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-default #pragma pack value changes the alignment of struct or union members in the included file</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-pack-suspicious-include'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRAGMA_SYSTEM_HEADER_OUTSIDE_HEADER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "pragma-system-header-outside-header",
    "name": "Published Standards/Compiler Warnings/Pragma System Header Outside Header",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpragma-system-header-outside-header</p>",
        "<p><b>Summary</b></p>",
        "<p>The pragma <code>system_header</code>, which tells the compiler to consider the rest of the file a system header, should not be used in main files.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma system_header ignored in main file</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-system-header-outside-header'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRAGMAS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pragmas",
    "name": "Published Standards/Compiler Warnings/Pragmas",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpragmas</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for when pragma features are not supported or when pragmas are not used properly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Setting the floating point evaluation method to `source` on a target without SSE is not supported.</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 74%'><col style='width: 12%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma redefine_extname is applicable to external C declarations only; not applied to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpragmas'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRE_CPP14_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pre-c++14-compat",
    "name": "Published Standards/Compiler Warnings/Pre C++14 Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpre-c++14-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for using C++14 features that are not compatible with some previous C++ standards.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 47%'><col style='width: 14%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of this statement in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple return statements in constexpr function is incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constexpr function with no return statements is incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 47%'><col style='width: 14%'><col style='width: 39%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable declaration in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 46%'><col style='width: 15%'><col style='width: 40%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>type definition in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘decltype(auto)’ type specifier is incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>return type deduction is incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>digit separators are incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>generic lambdas are incompatible with C++11</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialized lambda captures are incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable templates are incompatible with C++ standards before C++14</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-14-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRE_CPP17_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pre-c++17-compat",
    "name": "Published Standards/Compiler Warnings/Pre C++17 Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpre-c++17-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for using C++20 features that are not compatible with some previous C++ standards.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 59%'><col style='width: 41%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>class template argument deduction is incompatible with C++ standards before C++17</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; for compatibility, use explicit type name</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constexpr if is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constexpr on lambda expressions is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>decomposition declarations are incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pack fold expression is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 19%'><col style='width: 14%'><col style='width: 67%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>if</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>switch</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>initialization statements are incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline variables are incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>nested namespace definition is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>by value capture of ‘*this’ is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘static_assert’ with no message is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template parameters declared with</span>&nbsp;<em>A</em>&nbsp;<span>are incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template template parameter using ‘typename’ is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unicode literals are incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default scope specifier for attributes is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pack expansion using declaration is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘begin’ and ‘end’ returning different types (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>) is incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-17-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRE_CPP17_COMPAT_PEDANTIC": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pre-c++17-compat-pedantic",
    "name": "Published Standards/Compiler Warnings/Pre C++17 Compatibility Pedantic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpre-c++17-compat-pedantic</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for using C++17 features that are not compatible with some previous C++ standards.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 36%'><col style='width: 16%'><col style='width: 48%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>attributes on</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a namespace</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an enumerator</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration are incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>hexadecimal floating literals are incompatible with C++ standards before C++17</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-17-compat-pedantic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRE_CPP20_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pre-c++20-compat",
    "name": "Published Standards/Compiler Warnings/Pre C++20 Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpre-c++20-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for using C++14 features that are not compatible with some previous C++ standards.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>default member initializer for bit-field is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 47%'><col style='width: 14%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of this statement in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 46%'><col style='width: 15%'><col style='width: 39%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function try block in constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 48%'><col style='width: 14%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>uninitialized variable in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>virtual constexpr functions are incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 39%'><col style='width: 30%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>decomposition declaration declared</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>B</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>with ‘</span><em>B</em><span>’ specifiers</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>defaulted comparison operators are incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 33%'><col style='width: 17%'><col style='width: 50%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicitly defaulting this</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>default constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copy constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>move constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>copy assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>move assignment operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>with a type different from the implicit type is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit capture of ‘this’ with a capture default of ‘=’ is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit(bool) is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>range-based for loop initialization statements are incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initialized lambda capture packs are incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline nested namespace definition is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 20%'><col style='width: 25%'><col style='width: 56%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>default construction</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assignment</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of lambda is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicit template parameter list for lambdas is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing no argument for the ‘…’ parameter of a variadic macro is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’&lt;=&gt;’ operator is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-type template parameter of type</span>&nbsp;<em>A</em>&nbsp;<span>is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘char8_t’ type specifier is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>member using declaration naming non-class ‘</span><em>A</em><span>’ enumerator is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>using enum declaration is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-20-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRE_CPP20_COMPAT_PEDANTIC": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pre-c++20-compat-pedantic",
    "name": "Published Standards/Compiler Warnings/Pre C++20 Compatibility Pedantic",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpre-c++20-compat-pedantic</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for using C++20 features that are not compatible with some previous C++ standards.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>designated initializers are incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invoking a pointer to a ‘const &amp;’ member function on an rvalue is incompatible with C++ standards before C++20</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-20-compat-pedantic'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRE_CPP2B_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pre-c++2b-compat",
    "name": "Published Standards/Compiler Warnings/Pre C++2B Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpre-c++2b-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for using C++2b features that are not compatible with some previous C++ standards.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 58%'><col style='width: 15%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overloaded</span>&nbsp;<em>A</em>&nbsp;<span>with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>no</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a defaulted</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>more than one</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>parameter is a C++2b extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>alias declaration in this context is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘auto’ as a functional-style cast is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>consteval if is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 47%'><col style='width: 14%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of this statement in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 26%'><col style='width: 18%'><col style='width: 18%'><col style='width: 11%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>definition of a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>static variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>thread_local variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable of non-literal type</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>in a constexpr</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>an attribute specifier sequence in this position is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘size_t’ suffix for literals is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 34%'><col style='width: 18%'><col style='width: 48%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of a ‘#</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&lt;BUG IF SEEN&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>elifdef</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>elifndef</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ directive is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#warning is incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 20%'><col style='width: 17%'><col style='width: 63%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>delimited</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>named</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>escape sequences are incompatible with C++ standards before C++2b</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-2b-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRE_C2X_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pre-c2x-compat",
    "name": "Published Standards/Compiler Warnings/Pre C2X Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpre-c2x-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for using C++2x features that are not compatible with some previous C++ standards.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘_BitInt’ is incompatible with C standards before C2x</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘_Static_assert’ with no message is incompatible with C standards before C2x</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘_BitInt’ suffix for literals is incompatible with C standards before C2x</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>digit separators are incompatible with C standards before C2x</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 35%'><col style='width: 19%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of a ‘#</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&lt;BUG IF SEEN&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>elifdef</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>elifndef</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ directive is incompatible with C standards before C2x</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#warning is incompatible with C standards before C2x</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2x-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRE_OPENMP_51_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "pre-openmp-51-compat",
    "name": "Published Standards/Compiler Warnings/Pre OpenMP 51 Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpre-openmp-51-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>For compatibility with OpenMP standards before OpenMP 5.1, use the <code>#pragma omp directive_here</code> syntax instead of the <code>[[omp::directive(directive_here)]]</code> syntax.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>specifying OpenMP directives with [[]] is incompatible with OpenMP standards before OpenMP 5.1</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-openmp-51-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PREDEFINED_IDENTIFIER_OUTSIDE_FUNCTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "predefined-identifier-outside-function",
    "name": "Published Standards/Compiler Warnings/Predefined Identifier Outside Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpredefined-identifier-outside-function</p>",
        "<p><b>Summary</b></p>",
        "<p>Some predefined identifiers (non-standard identifiers defined by the compiler) are only allowed inside of functions.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>predefined identifier is only valid inside function</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpredefined-identifier-outside-function'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRIVATE_EXTERN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings"],
    "key": "private-extern",
    "name": "Published Standards/Compiler Warnings/Private Extern",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wprivate-extern</p>",
        "<p><b>Summary</b></p>",
        "<p>Because <code>__private_extern__</code> is deprecated and may not work, use the <code>visibility(\"hidden\")</code> attribute instead.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprivate-extern'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PRIVATE_HEADER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "private-header",
    "name": "Published Standards/Compiler Warnings/Private Header",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wprivate-header</p>",
        "<p><b>Summary</b></p>",
        "<p>Private header should not be used outside of its module</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>use of private header from outside its module: ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprivate-header'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PROFILE_INSTR_MISSING": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "profile-instr-missing",
    "name": "Published Standards/Compiler Warnings/Profile Instrumented Code Missing",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wprofile-instr-missing</p>",
        "<p><b>Summary</b></p>",
        "<p>Functions should not be empty in order to have accurate profiling data.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 54%'><col style='width: 7%'><col style='width: 20%'><col style='width: 8%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>profile data may be incomplete: of</span>&nbsp;<em>A</em>&nbsp;<span>function</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>,</span>&nbsp;<em>B</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>has</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>have</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>no data</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-missing'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PROFILE_INSTR_OUT_OF_DATE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "profile-instr-out-of-date",
    "name": "Published Standards/Compiler Warnings/Profile Instrumented Code Out of Date",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wprofile-instr-out-of-date</p>",
        "<p><b>Summary</b></p>",
        "<p>After changing a function, update the profiling data using a flag that starts with <code>-fprofile</code></p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 48%'><col style='width: 6%'><col style='width: 17%'><col style='width: 7%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>profile data may be out of date: of</span>&nbsp;<em>A</em>&nbsp;<span>function</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>s</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>,</span>&nbsp;<em>B</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>has</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>have</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>mismatched data that will be ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-out-of-date'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PROFILE_INSTR_UNPROFILED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "profile-instr-unprofiled",
    "name": "Published Standards/Compiler Warnings/Profile Instrumented Code Unprofiled",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wprofile-instr-unprofiled</p>",
        "<p><b>Summary</b></p>",
        "<p>Add profiling data for a file using a flag that starts with <code>-fprofile</code></p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>no profile data available for file “</span><em>A</em><span>”</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-unprofiled'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_PSABI": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "psabi",
    "name": "Published Standards/Compiler Warnings/PSABI (Processor-Specific Application Binary Interface)",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wpsabi</p>",
        "<p><b>Summary</b></p>",
        "<p>AVX vector arguments of certain types changes the ABI, unless a target feature is enabled like the <code>-target-feature +avx</code> option.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 27%'><col style='width: 10%'><col style='width: 63%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>AVX vector</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>return</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>argument</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>of type</span>&nbsp;<em>B</em>&nbsp;<span>without ‘</span><em>C</em><span>’ enabled changes the ABI</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wpsabi'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_QUALIFIED_VOID_RETURN_TYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "qualified-void-return-type",
    "name": "Published Standards/Compiler Warnings/Qualified Void Return Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wqualified-void-return-type</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>void</code> type should not have qualifiers like <code>const</code>, <code>volatile</code>, or <code>strict</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>function cannot return qualified void type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wqualified-void-return-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RANGE_LOOP_BIND_REFERENCE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "range-loop-bind-reference",
    "name": "Published Standards/Compiler Warnings/Range Loop Bind Reference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wrange-loop-bind-reference</p>",
        "<p><b>Summary</b></p>",
        "<p>When using a reference type for the loop variable of a range-based <code>for</code> loop, use <code>&&</code> or <code>const &</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>loop variable</span>&nbsp;<em>A</em>&nbsp;<span>binds to a temporary value produced by a range of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-bind-reference'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RANGE_LOOP_CONSTRUCT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "range-loop-construct",
    "name": "Published Standards/Compiler Warnings/Range Loop Construct",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wrange-loop-construct</p>",
        "<p><b>Summary</b></p>",
        "<p>To avoid copying in a range-based <code>for</code> loop, a loop variable should be a reference to the same type as the element.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 61%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>loop variable</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>of type</span>&nbsp;<em>B</em>&nbsp;<span>binds to a temporary constructed from type</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>binds to a temporary constructed from a different type</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>loop variable</span>&nbsp;<em>A</em>&nbsp;<span>creates a copy from type</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-construct'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REDECLARED_CLASS_MEMBER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "redeclared-class-member",
    "name": "Published Standards/Compiler Warnings/Re-Declared Class Member",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wredeclared-class-member</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not declare members of a class multiple times.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>class member cannot be redeclared</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredeclared-class-member'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REDUNDANT_CONSTEVAL_IF": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "redundant-consteval-if",
    "name": "Published Standards/Compiler Warnings/Redundant Consteval If",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wredundant-consteval-if</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>if consteval</code> statement is used to see if a <code>constexpr</code> function is being called in a constant expression context. There is no need for nesting them within each other, or within a <code>consteval</code> function.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 61%'><col style='width: 19%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>consteval if is always true in an</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>unevaluated</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>immediate</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>context</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-consteval-if'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REDUNDANT_MOVE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "redundant-move",
    "name": "Published Standards/Compiler Warnings/Redundant Move",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wredundant-move</p>",
        "<p><b>Summary</b></p>",
        "<p>Except with cases of return value optimization, returning a value moves it, so <code>std::move</code> is not necessary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redundant move in return statement</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-move'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REDUNDANT_PARENS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "redundant-parens",
    "name": "Published Standards/Compiler Warnings/Redundant Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wredundant-parens</p>",
        "<p><b>Summary</b></p>",
        "<p>Too many parentheses in a declaration are not necessary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redundant parentheses surrounding declarator</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-parens'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REGISTER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "register",
    "name": "Published Standards/Compiler Warnings/Register Keyword",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wregister</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>register</code> keyword is not allowed in ISO C++17.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>ISO C++17 does not allow ‘register’ storage class specifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wregister'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REINTERPRET_BASE_CLASS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "reinterpret-base-class",
    "name": "Published Standards/Compiler Warnings/Reinterpret Base Class",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreinterpret-base-class</p>",
        "<p><b>Summary</b></p>",
        "<p>Casting with <code>reinterpret_cast</code> to/from a base class works differently from <code>static_cast</code> and the class instance may not work as intended.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 21%'><col style='width: 6%'><col style='width: 18%'><col style='width: 6%'><col style='width: 10%'><col style='width: 12%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘reinterpret_cast’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>from</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>to</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>class</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>to</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>from</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>its</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>virtual base</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>base at non-zero offset</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>behaves differently from ‘static_cast’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreinterpret-base-class'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REORDER_CTOR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "reorder-ctor",
    "name": "Published Standards/Compiler Warnings/Reorder Constructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreorder-ctor</p>",
        "<p><b>Summary</b></p>",
        "<p>The order of data members in the constructor initializer and declarations should be consistent. They are initialized in the order of the declarations, so the constructor initializer should show this.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 16%'><col style='width: 14%'><col style='width: 45%'><col style='width: 11%'><col style='width: 14%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>base class</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>will be initialized after</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>base</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>initializer order does not match the declaration order</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder-ctor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REORDER_INIT_LIST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "reorder-init-list",
    "name": "Published Standards/Compiler Warnings/Reorder Initializer List",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreorder-init-list</p>",
        "<p><b>Summary</b></p>",
        "<p>The order of data members in the initializer list and declarations should be consistent. They are initialized in the order of the declarations, so the initializer list should show this.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ requires field designators to be specified in declaration order; field</span>&nbsp;<em>B</em>&nbsp;<span>will be initialized after field</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder-init-list'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RESERVED_IDENTIFIER": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "reserved-identifier",
    "name": "Published Standards/Compiler Warnings/Reserved Identifier",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreserved-identifier</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not name identifiers using the conventions of reserved identifiers</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 66%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>identifier</span>&nbsp;<em>A</em>&nbsp;<span>is reserved because</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>&lt;ERROR&gt;</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>it starts with ‘_’ at global scope</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>it starts with ‘_’ and has C language linkage</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>it starts with ‘__’</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>it starts with ‘_’ followed by a capital letter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>it contains ‘__’</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-identifier'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RESERVED_MACRO_IDENTIFIER": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "reserved-macro-identifier",
    "name": "Published Standards/Compiler Warnings/Reserved Macro Identifier",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreserved-macro-identifier</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use a reserved identifier for a macro name.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>macro name is a reserved identifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-macro-identifier'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RESERVED_USER_DEFINED_LITERAL": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "reserved-user-defined-literal",
    "name": "Published Standards/Compiler Warnings/Reserved User Defined Literal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreserved-user-defined-literal</p>",
        "<p><b>Summary</b></p>",
        "<p>Only valid suffixes should be immediately after string literals. If it's invalid, then it's treated as an identifier.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid suffix on literal; C++11 requires a space between literal and identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>invalid suffix on literal; C++11 requires a space between literal and identifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-user-defined-literal'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RESTRICT_EXPANSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "restrict-expansion",
    "name": "Published Standards/Compiler Warnings/Restrict Expansion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wrestrict-expansion</p>",
        "<p><b>Summary</b></p>",
        "<p>Certain macros can be marked as unsafe by the <code>restrict_expansion</code> pragma.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 76%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>macro</span>&nbsp;<em>A</em>&nbsp;<span>has been marked as unsafe for use in headers</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>:</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrestrict-expansion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RETAINED_LANGUAGE_LINKAGE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "retained-language-linkage",
    "name": "Published Standards/Compiler Warnings/Retained Language Linkage",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wretained-language-linkage</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function is declared with language linkage with the <code>extern</code> keyword, then is declared with the <code>friend</code> keyword, linking it to that language is a language extension.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>friend function</span>&nbsp;<em>A</em>&nbsp;<span>retaining previous language linkage is an extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wretained-language-linkage'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RETURN_STACK_ADDRESS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "return-stack-address",
    "name": "Published Standards/Compiler Warnings/Return Stack Address",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreturn-stack-address</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not return an address/reference to something that is local/temporary.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>returning address of label, which is local</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 45%'><col style='width: 21%'><col style='width: 34%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>returning</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>address of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference to</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>local temporary object</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 14%'><col style='width: 14%'><col style='width: 30%'><col style='width: 15%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>address of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>reference to</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>stack memory associated with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>local variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>returned</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-stack-address'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RETURN_TYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "return-type",
    "name": "Published Standards/Compiler Warnings/Return Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreturn-type</p>",
        "<p><b>Summary</b></p>",
        "<p>Non-void functions should always return something of the expected type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 19%'><col style='width: 23%'><col style='width: 58%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>void function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>void method</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>constructor</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>destructor</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;<span>should not return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 37%'><col style='width: 16%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>non-void</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;<span>should return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void coroutine does not return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void function does not return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void lambda does not return a value</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void coroutine does not return a value in all control paths</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void function does not return a value in all control paths</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-void lambda does not return a value in all control paths</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 37%'><col style='width: 16%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>non-void</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;<span>should return a value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RETURN_TYPE_C_LINKAGE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "return-type-c-linkage",
    "name": "Published Standards/Compiler Warnings/Return Type C Linkage",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wreturn-type-c-linkage</p>",
        "<p><b>Summary</b></p>",
        "<p>Functions that have C-linkage should return complete types which do not have methods.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has C-linkage specified, but returns user-defined type</span>&nbsp;<em>B</em>&nbsp;<span>which is incompatible with C</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has C-linkage specified, but returns incomplete type</span>&nbsp;<em>B</em>&nbsp;<span>which could be incompatible with C</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type-c-linkage'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_REWRITE_NOT_BOOL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "rewrite-not-bool",
    "name": "Published Standards/Compiler Warnings/Rewrite Not Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wrewrite-not-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>The return type of an <code>operator==</code> function should be <code>bool</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++20 requires return type of selected ‘operator==’ function for rewritten ‘</span><em>B</em><span>’ comparison to be ‘bool’, not</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrewrite-not-bool'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_RTTI": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "rtti",
    "name": "Published Standards/Compiler Warnings/Run-Time Type Information",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wrtti</p>",
        "<p><b>Summary</b></p>",
        "<p>The <code>dynamic_cast</code> and <code>typeid</code> keywords will not work when RTTI data is disabled by the <code>-fno-rtti-data</code> or <code>/GR-</code> option.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 79%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dynamic_cast will not work since RTTI data is disabled by</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>-fno-rtti-data</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>/GR-</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 78%'><col style='width: 22%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>typeid will not work since RTTI data is disabled by</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>-fno-rtti-data</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>/GR-</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wrtti'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SARIF_FORMAT_UNSTABLE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "sarif-format-unstable",
    "name": "Published Standards/Compiler Warnings/SARIF Format Unstable",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsarif-format-unstable</p>",
        "<p><b>Summary</b></p>",
        "<p>Exporting diagnostics to a SARIF file (with the <code>-fdiagnostics-format=SARIF</code> flag) is not a stable feature when this warning shows.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>diagnostic formatting in SARIF mode is currently unstable</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsarif-format-unstable'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SECTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "section",
    "name": "Published Standards/Compiler Warnings/Section Attributes",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsection</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent but not redundant with the <code>code_seg</code> and <section>section</section> attributes for declarations/definitions of the same things.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>section attribute is specified on redeclared variable</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>duplicate code segment specifiers</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 26%'><col style='width: 20%'><col style='width: 53%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>codeseg</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>section</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>does not match previous declaration</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsection'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SELF_ASSIGN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "self-assign",
    "name": "Published Standards/Compiler Warnings/Self Assign",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wself-assign</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not assign any variable to itself.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 61%'><col style='width: 39%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicitly assigning value of variable of type</span>&nbsp;<em>A</em>&nbsp;<span>to itself</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; did you mean to assign to member</span>&nbsp;<em>C</em><span>?</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SELF_ASSIGN_FIELD": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "self-assign-field",
    "name": "Published Standards/Compiler Warnings/Self Assign Field",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wself-assign-field</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not assign a data member to itself.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 48%'><col style='width: 27%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>assigning</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>instance variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to itself</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-field'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SELF_ASSIGN_OVERLOADED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "self-assign-overloaded",
    "name": "Published Standards/Compiler Warnings/Self Assign Overloaded",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wself-assign-overloaded</p>",
        "<p><b>Summary</b></p>",
        "<p>For types that can have overloaded assignment operators or compound assignment operators, do not assign an instance to itself.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 61%'><col style='width: 39%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicitly assigning value of variable of type</span>&nbsp;<em>A</em>&nbsp;<span>to itself</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; did you mean to assign to member</span>&nbsp;<em>C</em><span>?</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-overloaded'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SELF_MOVE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "self-move",
    "name": "Published Standards/Compiler Warnings/Self Move",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wself-move</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use <code>std::move</code> to move a variable to itself.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 60%'><col style='width: 40%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>explicitly moving variable of type</span>&nbsp;<em>A</em>&nbsp;<span>to itself</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; did you mean to move to member</span>&nbsp;<em>C</em><span>?</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wself-move'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SENTINEL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "sentinel",
    "name": "Published Standards/Compiler Warnings/Sentinel Attribute",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsentinel</p>",
        "<p><b>Summary</b></p>",
        "<p>When a function has the <code>__sentinel__</code> attribute, call it by ending with the sentinel argument(s), which is <code>(void*) 0</code> by default.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 69%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing sentinel in</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function call</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>method dispatch</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block call</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>not enough variable arguments in</span>&nbsp;<em>A</em>&nbsp;<span>declaration to fit a sentinel</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsentinel'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SERIALIZED_DIAGNOSTICS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "serialized-diagnostics",
    "name": "Published Standards/Compiler Warnings/Serialized Diagnostics",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wserialized-diagnostics</p>",
        "<p><b>Summary</b></p>",
        "<p>Warnings for when the serialized diagnostics command-line arguments fail</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unable to open file</span>&nbsp;<em>A</em>&nbsp;<span>for serializing diagnostics (</span><em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Received warning after diagnostic serialization teardown was underway:</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unable to merge a subprocess’s serialized diagnostics</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wserialized-diagnostics'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHADOW": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "shadow",
    "name": "Published Standards/Compiler Warnings/Shadowing Identifiers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshadow</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not shadow, or use the same identifier, when it already was declared in a higher scope</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 53%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration shadows a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>local variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable in</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>static data member of</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field of</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>typedef in</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>type alias in</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>structured binding</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHADOW_FIELD": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "shadow-field",
    "name": "Published Standards/Compiler Warnings/Shadowing Field",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshadow-field</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not shadow, or use the same identifier, when it already was declared by class/struct inheritance</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 13%'><col style='width: 17%'><col style='width: 15%'><col style='width: 23%'><col style='width: 33%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>parameter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>non-static data member</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>of</span>&nbsp;<em>B</em>&nbsp;</p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>shadows member inherited from type</span>&nbsp;<em>C</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHADOW_FIELD_IN_CONSTRUCTOR": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "shadow-field-in-constructor",
    "name": "Published Standards/Compiler Warnings/Shadowing Field in Constructor",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshadow-field-in-constructor</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not shadow, or use the same identifier as a constructor parameter, when it already was declared as a member of the class/struct</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>constructor parameter</span>&nbsp;<em>A</em>&nbsp;<span>shadows the field</span>&nbsp;<em>B</em>&nbsp;<span>of</span>&nbsp;<em>C</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field-in-constructor'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHADOW_FIELD_IN_CONSTRUCTOR_MODIFIED": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "shadow-field-in-constructor-modified",
    "name": "Published Standards/Compiler Warnings/Shadowing Field in Constructor Modified",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshadow-field-in-constructor-modified</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not shadow, or use the same identifier as a constructor parameter, when it already was declared as a member of the class/struct</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>modifying constructor parameter</span>&nbsp;<em>A</em>&nbsp;<span>that shadows a field of</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field-in-constructor-modified'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHADOW_UNCAPTURED_LOCAL": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "shadow-uncaptured-local",
    "name": "Published Standards/Compiler Warnings/Shadowing Uncaptured Local",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshadow-uncaptured-local</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not shadow, or use the same identifier, when it already was declared</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 53%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration shadows a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>local variable</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>variable in</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>static data member of</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>field of</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>typedef in</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>type alias in</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>structured binding</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-uncaptured-local'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHIFT_COUNT_NEGATIVE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-count-negative",
    "name": "Published Standards/Compiler Warnings/Shift Count Negative",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-count-negative</p>",
        "<p><b>Summary</b></p>",
        "<p>The right operand of a bitshift operation should not be negative</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>shift count is negative</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-negative'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHIFT_COUNT_OVERFLOW": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-count-overflow",
    "name": "Published Standards/Compiler Warnings/Shift Count Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-count-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>The right operand of a bitshift operation should be less than the width of the type of the left operand</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>shift count &gt;= width of type</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHIFT_NEGATIVE_VALUE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-negative-value",
    "name": "Published Standards/Compiler Warnings/Shift Negative Value",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-negative-value</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not bitshift if the left operand is negative</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>shifting a negative signed value is undefined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-negative-value'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHIFT_OP_PARENTHESES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-op-parentheses",
    "name": "Published Standards/Compiler Warnings/Shift Operator Parentheses",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-op-parentheses</p>",
        "<p><b>Summary</b></p>",
        "<p>When using a bitshift opereator near other operators, use parentheses for clarity</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>operator ‘</span><em>A</em><span>’ has lower precedence than ‘</span><em>B</em><span>’; ‘</span><em>B</em><span>’ will be evaluated first</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-op-parentheses'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHIFT_OVERFLOW": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "shift-overflow",
    "name": "Published Standards/Compiler Warnings/Shift Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not bitshift too much (right operand) when the size of the left operand is too small</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>signed shift result (</span><em>A</em><span>) requires</span>&nbsp;<em>B</em>&nbsp;<span>bits to represent, but</span>&nbsp;<em>C</em>&nbsp;<span>only has</span>&nbsp;<em>D</em>&nbsp;<span>bits</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHIFT_SIGN_OVERFLOW": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "shift-sign-overflow",
    "name": "Published Standards/Compiler Warnings/Shift Sign Overflow",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshift-sign-overflow</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not bitshift too much (right operand) so that the signed integer being shifted (left operand) becomes negative</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>signed shift result (</span><em>A</em><span>) sets the sign bit of the shift expression’s type (</span><em>B</em><span>) and becomes negative</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-sign-overflow'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SHORTEN_64_TO_32": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "shorten-64-to-32",
    "name": "Published Standards/Compiler Warnings/Shorten Integer Type Width",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wshorten-64-to-32</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly convert an integer to a smaller integer</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion loses integer precision:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wshorten-64-to-32'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIGN_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "sign-compare",
    "name": "Published Standards/Compiler Warnings/Sign Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsign-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent with the types when comparing integers, especially if one is signed and one is unsigned</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of integers of different signs:</span>&nbsp;<em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsign-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIGN_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "sign-conversion",
    "name": "Published Standards/Compiler Warnings/Sign Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsign-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent with the types when converting integers, especially if one is signed and one is unsigned</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion changes signedness:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>operand of ? changes signedness:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the resulting value is always non-negative after implicit conversion</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsign-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIGNED_ENUM_BITFIELD": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "signed-enum-bitfield",
    "name": "Published Standards/Compiler Warnings/Signed Enum Bitfield",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsigned-enum-bitfield</p>",
        "<p><b>Summary</b></p>",
        "<p>To be consistent no matter the target, specify the underlying type of an enum with the <code>: type</code> syntax immediately before the braces</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>enums in the Microsoft ABI are signed integers by default; consider giving the enum</span>&nbsp;<em>A</em>&nbsp;<span>an unsigned underlying type to make this code portable</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsigned-enum-bitfield'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIGNED_UNSIGNED_WCHAR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "signed-unsigned-wchar",
    "name": "Published Standards/Compiler Warnings/Signed Unsigned Wchar",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsigned-unsigned-wchar</p>",
        "<p><b>Summary</b></p>",
        "<p>Wchar cannot be signed or unsigned</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>’</span><em>A</em><span>’ cannot be signed or unsigned</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsigned-unsigned-wchar'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SINGLE_BIT_BITFIELD_CONSTANT_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "single-bit-bitfield-constant-conversion",
    "name": "Published Standards/Compiler Warnings/Single Bit Bitfield Constant Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsingle-bit-bitfield-constant-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>In a struct, truncation occurs when assigning a value too large for the bit-field width constraint.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit truncation from</span>&nbsp;<em>C</em>&nbsp;<span>to bit-field changes value from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-constant-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIZEOF_ARRAY_ARGUMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-array-argument",
    "name": "Published Standards/Compiler Warnings/Sizeof Array Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-array-argument</p>",
        "<p><b>Summary</b></p>",
        "<p>Sizeof on array function parameter may return unexpected value</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>sizeof on array function parameter will return size of</span>&nbsp;<em>A</em>&nbsp;<span>instead of</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-argument'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIZEOF_ARRAY_DECAY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-array-decay",
    "name": "Published Standards/Compiler Warnings/Sizeof Array Decay",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-array-decay</p>",
        "<p><b>Summary</b></p>",
        "<p>Sizeof on pointer operation may return unexpected value</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>sizeof on pointer operation will return size of</span>&nbsp;<em>A</em>&nbsp;<span>instead of</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-decay'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIZEOF_ARRAY_DIV": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-array-div",
    "name": "Published Standards/Compiler Warnings/Sizeof Array Division",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-array-div</p>",
        "<p><b>Summary</b></p>",
        "<p>Expression does not compute the number of elements in this array</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression does not compute the number of elements in this array; element type is</span>&nbsp;<em>A</em><span>, not</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-div'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIZEOF_POINTER_DIV": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-pointer-div",
    "name": "Published Standards/Compiler Warnings/Sizeof Pointer Division",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-pointer-div</p>",
        "<p><b>Summary</b></p>",
        "<p>Size of the pointer will be returned, not the size of the array itself</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ will return the size of the pointer, not the array itself</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-div'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SIZEOF_POINTER_MEMACCESS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "sizeof-pointer-memaccess",
    "name": "Published Standards/Compiler Warnings/Sizeof Pointer Memory Access",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsizeof-pointer-memaccess</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use <code>sizeof</code> on a pointer when you should size of the entire struct, array, etc.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’</span><em>A</em><span>’ call operates on objects of type</span>&nbsp;<em>B</em>&nbsp;<span>while the size is based on a different type</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 63%'><col style='width: 8%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument to ‘sizeof’ in</span>&nbsp;<em>A</em>&nbsp;<span>call is the same pointer type</span>&nbsp;<em>B</em>&nbsp;<span>as the</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>destination</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>source</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>; expected</span>&nbsp;<em>D</em>&nbsp;<span>or an explicit length</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-memaccess'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SLASH_U_FILENAME": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "slash-u-filename",
    "name": "Published Standards/Compiler Warnings/Slash U Filename",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wslash-u-filename</p>",
        "<p><b>Summary</b></p>",
        "<p>The /U option of cl.exe is used to undefine a macro. Form your command-line arguments properly so that an argument starting with /U, such as a file path, is not used in this way</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’/U</span><em>A</em><span>’ treated as the ‘/U’ option</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wslash-u-filename'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SLH_ASM_GOTO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "slh-asm-goto",
    "name": "Published Standards/Compiler Warnings/SLH (Speculative Load Hardening) Assembly Goto",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wslh-asm-goto</p>",
        "<p><b>Summary</b></p>",
        "<p>Speculative load hardening does not protect functions with asm goto</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Speculative load hardening does not protect functions with asm goto</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wslh-asm-goto'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SOMETIMES_UNINITIALIZED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "sometimes-uninitialized",
    "name": "Published Standards/Compiler Warnings/Sometimes Uninitialized",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsometimes-uninitialized</p>",
        "<p><b>Summary</b></p>",
        "<p>Variable is sometimes uninitialized</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 36%'><col style='width: 8%'><col style='width: 18%'><col style='width: 39%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable</span>&nbsp;<em>A</em>&nbsp;<span>is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>used</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>captured</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>uninitialized whenever</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 77%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>D</em><span>’ condition is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 52%'><col style='width: 48%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>D</em><span>’ loop</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>is entered</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>exits because its condition is false</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 52%'><col style='width: 48%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>D</em><span>’ loop</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>condition is true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>exits because its condition is false</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>switch</span>&nbsp;<em>D</em>&nbsp;<span>is taken</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>its declaration is reached</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>D</em>&nbsp;<span>is called</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsometimes-uninitialized'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SOURCE_USES_OPENMP": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "source-uses-openmp",
    "name": "Published Standards/Compiler Warnings/Source Uses OpenMP",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsource-uses-openmp</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings for incorrectly using <code>#pragma omp</code> for the OpenMP API</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’#pragma omp declare variant’ cannot be applied to the function that was defined already; the original function might be used</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’#pragma omp declare variant’ cannot be applied for function after first usage; the original function might be used</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variant function in ‘#pragma omp declare variant’ is itself marked as ‘#pragma omp declare variant’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>score expressions in the OpenMP context selector need to be constant;</span>&nbsp;<em>A</em>&nbsp;<span>is not and will be ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>OpenMP only allows an ordered construct with the simd clause nested in a simd construct</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘#pragma omp end declare target’ at end of file to match ‘#pragma omp</span>&nbsp;<em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unexpected ‘#pragma omp …’ in program</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>isa trait ‘</span><em>A</em><span>’ is not known to the current target; verify the spelling or consider restricting the context selector with the ‘arch’ selector further</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsource-uses-openmp'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SPIR_COMPAT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "spir-compat",
    "name": "Published Standards/Compiler Warnings/SPIR (Sampler Initializer) Compatibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wspir-compat</p>",
        "<p><b>Summary</b></p>",
        "<p>Sampler initializer has invalid bits</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>sampler initializer has invalid</span>&nbsp;<em>A</em>&nbsp;<span>bits</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wspir-compat'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STACK_EXHAUSTED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "stack-exhausted",
    "name": "Published Standards/Compiler Warnings/Stack Exhausted",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstack-exhausted</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks if stack is nearly exhausted</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>stack nearly exhausted; compilation time may suffer, and crashes due to stack overflow are likely</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstack-exhausted'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STACK_PROTECTOR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "stack-protector",
    "name": "Published Standards/Compiler Warnings/Stack Protector",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstack-protector</p>",
        "<p><b>Summary</b></p>",
        "<p>Unable to protect inline asm</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Unable to protect inline asm that clobbers stack pointer against stack clash</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstack-protector'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STATIC_FLOAT_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "static-float-init",
    "name": "Published Standards/Compiler Warnings/Static Float Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstatic-float-init</p>",
        "<p><b>Summary</b></p>",
        "<p>In-class initializer for static data member requires 'constexpr' specifier</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>in-class initializer for static data member of type</span>&nbsp;<em>A</em>&nbsp;<span>requires ‘constexpr’ specifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-float-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STATIC_IN_INLINE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "static-in-inline",
    "name": "Published Standards/Compiler Warnings/Static in Inline",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstatic-in-inline</p>",
        "<p><b>Summary</b></p>",
        "<p>Static object is used in an inline function with external linkage</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 31%'><col style='width: 13%'><col style='width: 56%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>static</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>is used in an inline function with external linkage</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 31%'><col style='width: 13%'><col style='width: 56%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>static</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>is used in an inline function with external linkage</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-in-inline'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STATIC_INLINE_EXPLICIT_INSTANTIATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "static-inline-explicit-instantiation",
    "name": "Published Standards/Compiler Warnings/Static Inline Explicit Instantiation",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstatic-inline-explicit-instantiation</p>",
        "<p><b>Summary</b></p>",
        "<p>Static inline explicit instantiation</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 16%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>static</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>inline</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ keyword on explicit template instantiation</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-inline-explicit-instantiation'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STATIC_LOCAL_IN_INLINE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "static-local-in-inline",
    "name": "Published Standards/Compiler Warnings/Static Local in Inline",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstatic-local-in-inline</p>",
        "<p><b>Summary</b></p>",
        "<p>Non-constant static local variable in inline function may be different in different files</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>non-constant static local variable in inline function may be different in different files</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-local-in-inline'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STATIC_SELF_INIT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "static-self-init",
    "name": "Published Standards/Compiler Warnings/Static Self Init",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstatic-self-init</p>",
        "<p><b>Summary</b></p>",
        "<p>Static variable suspiciously used within its own initialization</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>static variable</span>&nbsp;<em>A</em>&nbsp;<span>is suspiciously used within its own initialization</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-self-init'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STDLIBCXX_NOT_FOUND": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "stdlibcxx-not-found",
    "name": "Published Standards/Compiler Warnings/LibStdC++ Headers Not Found",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstdlibcxx-not-found</p>",
        "<p><b>Summary</b></p>",
        "<p>Include path for libstdc++ headers not found</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>include path for libstdc++ headers not found; pass ‘-stdlib=libc++’ on the command line to use the libc++ standard library instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstdlibcxx-not-found'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRICT_POTENTIALLY_DIRECT_SELECTOR": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "strict-potentially-direct-selector",
    "name": "Published Standards/Compiler Warnings/Strict Potentially Direct Selector",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstrict-potentially-direct-selector</p>",
        "<p><b>Summary</b></p>",
        "<p>Selector expression formed with potentially direct selector</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>@selector expression formed with potentially direct selector</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrict-potentially-direct-selector'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRICT_PROTOTYPES": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "strict-prototypes",
    "name": "Published Standards/Compiler Warnings/Strict Prototypes",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstrict-prototypes</p>",
        "<p><b>Summary</b></p>",
        "<p>Declaration without a prototype is deprecated</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 27%'><col style='width: 12%'><col style='width: 41%'><col style='width: 19%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>a</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>block</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>declaration without a prototype is deprecated</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>in all versions of C</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrict-prototypes'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRICT_SELECTOR_MATCH": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "strict-selector-match",
    "name": "Published Standards/Compiler Warnings/Strict Selector Match",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstrict-selector-match</p>",
        "<p><b>Summary</b></p>",
        "<p>Multiple methods should not share the same name</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple methods named</span>&nbsp;<em>A</em>&nbsp;<span>found</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrict-selector-match'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRING_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "string-compare",
    "name": "Published Standards/Compiler Warnings/String Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstring-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Result of the string comparison is unspecified</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 39%'><col style='width: 16%'><col style='width: 45%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison against</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a string literal</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>@encode</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is unspecified (use an explicit string comparison function instead)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRING_CONCATENATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "string-concatenation",
    "name": "Published Standards/Compiler Warnings/String Concatenation",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstring-concatenation</p>",
        "<p><b>Summary</b></p>",
        "<p>Suspicious concatenation of string literals in an array initialization</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-concatenation'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRING_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "string-conversion",
    "name": "Published Standards/Compiler Warnings/String Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstring-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Implicit conversion turns string literal into a bool</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit conversion turns string literal into bool:</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRING_PLUS_CHAR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "string-plus-char",
    "name": "Published Standards/Compiler Warnings/String Plus Char",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstring-plus-char</p>",
        "<p><b>Summary</b></p>",
        "<p>Adding char to a string pointer does not append to the string</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>adding</span>&nbsp;<em>A</em>&nbsp;<span>to a string pointer does not append to the string</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-char'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRING_PLUS_INT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "string-plus-int",
    "name": "Published Standards/Compiler Warnings/String Plus Int",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstring-plus-int</p>",
        "<p><b>Summary</b></p>",
        "<p>Adding int to a string does not append to the string</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>adding</span>&nbsp;<em>A</em>&nbsp;<span>to a string does not append to the string</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-int'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRLCPY_STRLCAT_SIZE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "strlcpy-strlcat-size",
    "name": "Published Standards/Compiler Warnings/Strlcpy Strlcat Size",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstrlcpy-strlcat-size</p>",
        "<p><b>Summary</b></p>",
        "<p>Size argument in strlcpy or strlcat should be size of the destination, not size of the source</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>size argument in</span>&nbsp;<em>A</em>&nbsp;<span>call appears to be size of the source; expected the size of the destination</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrlcpy-strlcat-size'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_STRNCAT_SIZE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "strncat-size",
    "name": "Published Standards/Compiler Warnings/Strncat Size",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wstrncat-size</p>",
        "<p><b>Summary</b></p>",
        "<p>Incorrect values to the size argument to strncat</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the value of the size argument in ‘strncat’ is too large, might lead to a buffer overflow</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>size argument in ‘strncat’ call appears to be size of the source</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the value of the size argument to ‘strncat’ is wrong</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wstrncat-size'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SUGGEST_DESTRUCTOR_OVERRIDE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "suggest-destructor-override",
    "name": "Published Standards/Compiler Warnings/Suggest Destructor Override",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsuggest-destructor-override</p>",
        "<p><b>Summary</b></p>",
        "<p>Method overrides a destructor but is not marked 'override'</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>overrides a destructor but is not marked ‘override’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsuggest-destructor-override'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SUGGEST_OVERRIDE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "suggest-override",
    "name": "Published Standards/Compiler Warnings/Suggest Override",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsuggest-override</p>",
        "<p><b>Summary</b></p>",
        "<p>Method overrides a member function but is not marked 'override'</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>overrides a member function but is not marked ‘override’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsuggest-override'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SUPER_CLASS_METHOD_MISMATCH": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "super-class-method-mismatch",
    "name": "Published Standards/Compiler Warnings/Super Class Method Mismatch",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsuper-class-method-mismatch</p>",
        "<p><b>Summary</b></p>",
        "<p>Super class method mismatch</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 38%'><col style='width: 62%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>method parameter type</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>A</em>&nbsp;<span>does not match super class method parameter type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>does not match super class method parameter type</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsuper-class-method-mismatch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SUSPICIOUS_BZERO": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "suspicious-bzero",
    "name": "Published Standards/Compiler Warnings/Suspicious Argument for Bzero Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsuspicious-bzero</p>",
        "<p><b>Summary</b></p>",
        "<p>Size argument to bzero is '0'</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘size’ argument to bzero is ‘0’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsuspicious-bzero'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SWITCH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "switch",
    "name": "Published Standards/Compiler Warnings/Switch Statements",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wswitch</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have a number in a case statement that is too large for the switch condition type. If the switch type is an enum, then list all of the enumerator values and not invalid values.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overflow converting case value to switch condition type (</span><em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 12%'><col style='width: 88%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration value</span>&nbsp;<em>B</em>&nbsp;<span>not handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration values</span>&nbsp;<em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em>&nbsp;<span>not handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration values</span>&nbsp;<em>B</em><span>,</span>&nbsp;<em>C</em><span>, and</span>&nbsp;<em>D</em>&nbsp;<span>not handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>A</em>&nbsp;<span>enumeration values not handled in switch:</span>&nbsp;<em>B</em><span>,</span>&nbsp;<em>C</em><span>,</span>&nbsp;<em>D</em><span>…</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>case value not in enumerated type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SWITCH_BOOL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "switch-bool",
    "name": "Published Standards/Compiler Warnings/Switch Bool",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wswitch-bool</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have a boolean in a switch condition. Instead, use the boolean in an if condition.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>switch condition has boolean value</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch-bool'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SWITCH_ENUM": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "switch-enum",
    "name": "Published Standards/Compiler Warnings/Switch Enum",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wswitch-enum</p>",
        "<p><b>Summary</b></p>",
        "<p>If the switch type is an enum, then list all of the enumerator values and not invalid values.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 12%'><col style='width: 88%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration value</span>&nbsp;<em>B</em>&nbsp;<span>not explicitly handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration values</span>&nbsp;<em>B</em>&nbsp;<span>and</span>&nbsp;<em>C</em>&nbsp;<span>not explicitly handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>enumeration values</span>&nbsp;<em>B</em><span>,</span>&nbsp;<em>C</em><span>, and</span>&nbsp;<em>D</em>&nbsp;<span>not explicitly handled in switch</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>A</em>&nbsp;<span>enumeration values not explicitly handled in switch:</span>&nbsp;<em>B</em><span>,</span>&nbsp;<em>C</em><span>,</span>&nbsp;<em>D</em><span>…</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch-enum'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_SYNC_FETCH_AND_NAND_SEMANTICS_CHANGED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "sync-fetch-and-nand-semantics-changed",
    "name": "Published Standards/Compiler Warnings/Sync Fetch And Nand Semantics Changed",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wsync-fetch-and-nand-semantics-changed</p>",
        "<p><b>Summary</b></p>",
        "<p>GCC 4.4 and later implement <code>__sync_fetch_and_nand</code> as <code>*ptr = ~(tmp & value)</code> instead of <code>*ptr = ~tmp & value</code></p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the semantics of this intrinsic changed with GCC version 4.4 - the newer semantics are provided here</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wsync-fetch-and-nand-semantics-changed'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TARGET_CLONES_MIXED_SPECIFIERS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "target-clones-mixed-specifiers",
    "name": "Published Standards/Compiler Warnings/Target Clones Mixed Specifiers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtarget-clones-mixed-specifiers</p>",
        "<p><b>Summary</b></p>",
        "<p>Be consistent with comma usage in the <code>target_clones</code> attribute</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>mixing ‘target_clones’ specifier mechanisms is permitted for GCC compatibility; use a comma separated sequence of string literals, or a string literal containing a comma-separated list of versions</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtarget-clones-mixed-specifiers'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_BITWISE_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "tautological-bitwise-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Bitwise Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-bitwise-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not do a bitwise comparison (bitwise-and, bitwise-or) if the result is always the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 82%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>bitwise comparison always evaluates to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>false</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>bitwise or with non-zero value always evaluates to true</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-bitwise-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "tautological-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not compare if the result is always the same. Do not align something to 1 byte because a byte is the fundamental unit of alignment.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 17%'><col style='width: 41%'><col style='width: 26%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>aligning a value</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>the result of checking whether a value is aligned</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to 1 byte is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a no-op</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>always true</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 18%'><col style='width: 18%'><col style='width: 34%'><col style='width: 30%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>self-</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>array</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>comparison always evaluates to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a constant</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>‘std::strong_ordering::equal’</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_CONSTANT_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tautological-constant-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Constant Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-constant-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not convert types or compare if the result is always the same</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>converting the result of ‘?:’ with integer constants to a boolean always evaluates to ‘true’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 85%'><col style='width: 15%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>converting the result of ‘&lt;&lt;’ to a boolean always evaluates to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>false</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 27%'><col style='width: 18%'><col style='width: 12%'><col style='width: 22%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constant</span>&nbsp;<em>A</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>expression of type</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>boolean expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>E</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_CONSTANT_OUT_OF_RANGE_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tautological-constant-out-of-range-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Constant Out of Range Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-constant-out-of-range-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not do a range comparison (less-than, greater-than, etc.) if the result is always the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 27%'><col style='width: 18%'><col style='width: 12%'><col style='width: 22%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>constant</span>&nbsp;<em>A</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>expression of type</span>&nbsp;<em>C</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>boolean expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>E</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-out-of-range-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_OVERLAP_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "tautological-overlap-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Overlap Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-overlap-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not do overlapping comparisons (2 comparisons then logical-and or logical-or) if the result is always the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 82%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overlapping comparisons always evaluate to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>false</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>true</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-overlap-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_POINTER_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tautological-pointer-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Pointer Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-pointer-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of attributes like <code>nonnull</code> and <code>returns_nonnull</code>, it is not necessary to compare these expressions with the null pointer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 25%'><col style='width: 10%'><col style='width: 22%'><col style='width: 9%'><col style='width: 15%'><col style='width: 7%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of nonnull</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function call</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>parameter</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>not</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>equal to a null pointer is ‘</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>‘ on first encounter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 25%'><col style='width: 10%'><col style='width: 24%'><col style='width: 10%'><col style='width: 22%'><col style='width: 8%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>address of</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>array</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>’</span><em>B</em><span>’</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>not</span>&nbsp;</p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>equal to a null pointer is always</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-pointer-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_TYPE_LIMIT_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "tautological-type-limit-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Type Limit Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-type-limit-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not do comparisons that always have the same result because of type limits.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 36%'><col style='width: 10%'><col style='width: 17%'><col style='width: 10%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>D</em></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>B</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>C</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>D</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>E</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-type-limit-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_UNDEFINED_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tautological-undefined-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Undefined Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-undefined-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>References and <code>this</code> cannot be null in well-defined C++ code, so do not compare them with null.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 90%'><col style='width: 10%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 89%'><col style='width: 11%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘this’ pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>true</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>false</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-undefined-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_UNSIGNED_CHAR_ZERO_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "tautological-unsigned-char-zero-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Unsigned Char Zero Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-unsigned-char-zero-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>On systems where a <code>char</code> is unsigned, do not compare it with negatives because the result it always the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 27%'><col style='width: 11%'><col style='width: 12%'><col style='width: 11%'><col style='width: 39%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>D</em></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>char expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>C</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>char expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>D</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>E</em><span>, since char is interpreted as unsigned</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-char-zero-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_UNSIGNED_ENUM_ZERO_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "tautological-unsigned-enum-zero-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Unsigned Enum Zero Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-unsigned-enum-zero-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>On systems where an <code>enum</code> is unsigned, do not compare it with negatives because the result it always the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 30%'><col style='width: 16%'><col style='width: 14%'><col style='width: 16%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>D</em></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unsigned enum expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>C</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>unsigned enum expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>D</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>E</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-enum-zero-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_UNSIGNED_ZERO_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "tautological-unsigned-zero-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Unsigned Zero Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-unsigned-zero-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not compare an unsigned value with negatives because the result it always the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 32%'><col style='width: 15%'><col style='width: 14%'><col style='width: 15%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>D</em></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unsigned expression</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>C</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>unsigned expression</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>D</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>E</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-zero-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TAUTOLOGICAL_VALUE_RANGE_COMPARE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "tautological-value-range-compare",
    "name": "Published Standards/Compiler Warnings/Tautological Value Range Compare",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtautological-value-range-compare</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not do a range comparison (less-than, greater-than, etc.) between an expression and a constant if the result is always the same.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 21%'><col style='width: 27%'><col style='width: 9%'><col style='width: 27%'><col style='width: 16%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of comparison of</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>E</em></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 46%'><col style='width: 25%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em><span>-bit</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>signed</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unsigned</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>value</span></p></td></tr></tbody></table></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>D</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 46%'><col style='width: 25%'><col style='width: 29%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><em>B</em><span>-bit</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>signed</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>unsigned</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>value</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><em>E</em></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>is always</span>&nbsp;<em>F</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-value-range-compare'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TCB_ENFORCEMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "tcb-enforcement",
    "name": "Published Standards/Compiler Warnings/TCB (Trusted Computing Base) Enforcement",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtcb-enforcement</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for violations of Trusted Computing Base.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>calling</span>&nbsp;<em>A</em>&nbsp;<span>is a violation of trusted computing base ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtcb-enforcement'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TENTATIVE_DEFINITION_INCOMPLETE_TYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "tentative-definition-incomplete-type",
    "name": "Published Standards/Compiler Warnings/Tentative Definition Incomplete Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtentative-definition-incomplete-type</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not define a variable before the type is completely defined</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>tentative definition of variable with internal linkage has incomplete non-array type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtentative-definition-incomplete-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_THREAD_SAFETY_ANALYSIS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "thread-safety-analysis",
    "name": "Published Standards/Compiler Warnings/Thread Safety Analysis",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wthread-safety-analysis</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings that help improve thread safety</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ must be acquired before ‘</span><em>C</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>Cycle in acquired_before/after dependencies, starting with ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot resolve lock expression</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>acquiring</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ that is already held</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expecting</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ to be held at start of each loop</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expecting</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ to be held at the end of function</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cannot call function ‘</span><em>B</em><span>’ while</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>C</em><span>’ is held</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 72%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>calling function</span>&nbsp;<em>B</em>&nbsp;<span>requires holding</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’ exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>calling function</span>&nbsp;<em>A</em>&nbsp;<span>requires negative capability ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ is acquired exclusively and shared in the same scope</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ is not held on every path through here</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ is still held at the end of function</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>releasing</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ that was not held</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 54%'><col style='width: 9%'><col style='width: 17%'><col style='width: 9%'><col style='width: 10%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>releasing</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ using</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>shared</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>exclusive</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>access, expected</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>shared</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>exclusive</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>access</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 14%'><col style='width: 11%'><col style='width: 57%'><col style='width: 18%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reading</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>writing</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>the value pointed to by</span>&nbsp;<em>A</em>&nbsp;<span>requires holding</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>any mutex</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>any mutex exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 9%'><col style='width: 56%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reading</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>writing</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>the value pointed to by</span>&nbsp;<em>B</em>&nbsp;<span>requires holding</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’ exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 15%'><col style='width: 12%'><col style='width: 54%'><col style='width: 20%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reading</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>writing</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>variable</span>&nbsp;<em>A</em>&nbsp;<span>requires holding</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>any mutex</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>any mutex exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 12%'><col style='width: 9%'><col style='width: 53%'><col style='width: 26%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reading</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>writing</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>variable</span>&nbsp;<em>B</em>&nbsp;<span>requires holding</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’ exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-analysis'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_THREAD_SAFETY_ATTRIBUTES": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "thread-safety-attributes",
    "name": "Published Standards/Compiler Warnings/Thread Safety Attributes",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wthread-safety-attributes</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not incorrectly use thread safety attributes</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute requires arguments whose type is annotated with ‘capability’ attribute; type here is</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute can only be applied in a context annotated with ‘capability’ attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>only applies to pointer types; type here is</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring</span>&nbsp;<em>A</em>&nbsp;<span>attribute because its argument is invalid</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute without capability arguments refers to ‘this’, but</span>&nbsp;<em>B</em>&nbsp;<span>isn’t annotated with ‘capability’ or ‘scoped_lockable’ attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>attribute without capability arguments can only be applied to non-static methods of a class</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-attributes'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_THREAD_SAFETY_BETA": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "thread-safety-beta",
    "name": "Published Standards/Compiler Warnings/Thread Safety Beta",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wthread-safety-beta</p>",
        "<p><b>Summary</b></p>",
        "<p>New features of various warnings that help improve thread safety</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>thread safety beta warning</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-beta'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_THREAD_SAFETY_NEGATIVE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "thread-safety-negative",
    "name": "Published Standards/Compiler Warnings/Thread Safety Negative",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wthread-safety-negative</p>",
        "<p><b>Summary</b></p>",
        "<p>Use the <code>EXCLUSIVE_LOCKS_REQUIRED(!mutex)</code> attribute if a function acquires that mutex</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>acquiring</span>&nbsp;<em>A</em>&nbsp;<span>’</span><em>B</em><span>’ requires negative capability ‘</span><em>C</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-negative'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_THREAD_SAFETY_PRECISE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "thread-safety-precise",
    "name": "Published Standards/Compiler Warnings/Thread Safety Precise",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wthread-safety-precise</p>",
        "<p><b>Summary</b></p>",
        "<p>Mutex expressions should match precisely</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 72%'><col style='width: 28%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>calling function</span>&nbsp;<em>B</em>&nbsp;<span>requires holding</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’ exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 11%'><col style='width: 9%'><col style='width: 56%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reading</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>writing</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>the value pointed to by</span>&nbsp;<em>B</em>&nbsp;<span>requires holding</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’ exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 12%'><col style='width: 9%'><col style='width: 53%'><col style='width: 26%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>reading</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>writing</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>variable</span>&nbsp;<em>B</em>&nbsp;<span>requires holding</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’ exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-precise'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_THREAD_SAFETY_REFERENCE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "thread-safety-reference",
    "name": "Published Standards/Compiler Warnings/Thread Safety Reference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wthread-safety-reference</p>",
        "<p><b>Summary</b></p>",
        "<p>Various warnings that help improve thread safet when using references</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 73%'><col style='width: 27%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing variable</span>&nbsp;<em>B</em>&nbsp;<span>by reference requires holding</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’ exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 75%'><col style='width: 25%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing the value that</span>&nbsp;<em>B</em>&nbsp;<span>points to by reference requires holding</span>&nbsp;<em>A</em>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>‘</span><em>C</em><span>’ exclusively</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-reference'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_THREAD_SAFETY_VERBOSE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "thread-safety-verbose",
    "name": "Published Standards/Compiler Warnings/Thread Safety Verbose",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wthread-safety-verbose</p>",
        "<p><b>Summary</b></p>",
        "<p>More verbose warnings that help improve thread safety</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>thread safety verbose warning</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-verbose'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TRIGRAPHS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "trigraphs",
    "name": "Published Standards/Compiler Warnings/Trigraphs",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtrigraphs</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use trigraphs, which are certain combinations of 3 characters that start with 2 question marks</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>trigraph converted to ‘</span><em>A</em><span>’ character</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>trigraph ends block comment</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>trigraph ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignored trigraph would end block comment</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtrigraphs'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TYPE_SAFETY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "type-safety",
    "name": "Published Standards/Compiler Warnings/Type Safety",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtype-safety</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function has a type tag attribute, then use it properly. Type tags allow for type safety checks that can't be enforced by the C type system.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>specified</span>&nbsp;<em>A</em>&nbsp;<span>type tag requires a null pointer</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 77%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument type</span>&nbsp;<em>A</em>&nbsp;<span>doesn’t match specified</span>&nbsp;<em>B</em>&nbsp;<span>type tag</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>that requires</span>&nbsp;<em>D</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>this type tag was not designed to be used with this function</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtype-safety'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TYPEDEF_REDEFINITION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "typedef-redefinition",
    "name": "Published Standards/Compiler Warnings/Typedef Redefinition",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtypedef-redefinition</p>",
        "<p><b>Summary</b></p>",
        "<p>Redefinition of a typedef is a C11 feature.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redefinition of typedef</span>&nbsp;<em>A</em>&nbsp;<span>is a C11 feature</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtypedef-redefinition'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_TYPENAME_MISSING": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "typename-missing",
    "name": "Published Standards/Compiler Warnings/Typename Missing",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wtypename-missing</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of the ambiguity of templates, place the <code>typename</code> keyword before types when referring to a type of a template</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>missing ‘typename’ prior to dependent type name ‘</span><em>A</em><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wtypename-missing'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNABLE_TO_OPEN_STATS_FILE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unable-to-open-stats-file",
    "name": "Published Standards/Compiler Warnings/Unable to Open Stats File",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunable-to-open-stats-file</p>",
        "<p><b>Summary</b></p>",
        "<p>Warning for when the <code>-stats-file</code> command line argument fails to open the output file</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unable to open statistics output file ‘</span><em>A</em><span>’: ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunable-to-open-stats-file'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNALIGNED_ACCESS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unaligned-access",
    "name": "Published Standards/Compiler Warnings/Unaligned Access",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunaligned-access</p>",
        "<p><b>Summary</b></p>",
        "<p>If a struct is aligned in a certain way (<code>packed</code> or <code>aligned</code> attribute), then be sure to properly align its struct members</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>field</span>&nbsp;<em>B</em>&nbsp;<span>within</span>&nbsp;<em>A</em>&nbsp;<span>is less aligned than</span>&nbsp;<em>C</em>&nbsp;<span>and is usually due to</span>&nbsp;<em>A</em>&nbsp;<span>being packed, which can lead to unaligned accesses</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunaligned-access'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNALIGNED_QUALIFIER_IMPLICIT_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unaligned-qualifier-implicit-cast",
    "name": "Published Standards/Compiler Warnings/Unaligned Qualifier Implicit Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunaligned-qualifier-implicit-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not implicitly cast from a type with the <code>__unaligned</code> modifier to a type that does not have it</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>implicit cast from type</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em>&nbsp;<span>drops __unaligned qualifier</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunaligned-qualifier-implicit-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEF": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "undef",
    "name": "Published Standards/Compiler Warnings/Undefined Macros",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundef</p>",
        "<p><b>Summary</b></p>",
        "<p>Define macros before they are used</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is not defined, evaluates to 0</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundef'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEF_PREFIX": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "undef-prefix",
    "name": "Published Standards/Compiler Warnings/Undefined Macros of a Certain Prefix",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundef-prefix</p>",
        "<p><b>Summary</b></p>",
        "<p>Define macros of a certain prefix (prefix is specified in the command line argument) before they are used</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is not defined, evaluates to 0</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundef-prefix'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEFINED_BOOL_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "undefined-bool-conversion",
    "name": "Published Standards/Compiler Warnings/Undefined Bool Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-bool-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not compare a reference to null, because it cannot be null in well-defined C++ code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘this’ pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-bool-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEFINED_FUNC_TEMPLATE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "undefined-func-template",
    "name": "Published Standards/Compiler Warnings/Undefined Function Template",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-func-template</p>",
        "<p><b>Summary</b></p>",
        "<p>In a template class, provide a definition for a member function that has the <code>exclude_from_explicit_instantiation</code> attribute</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>instantiation of function</span>&nbsp;<em>A</em>&nbsp;<span>required here, but no definition is available</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-func-template'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEFINED_INLINE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "undefined-inline",
    "name": "Published Standards/Compiler Warnings/Undefined Inline",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-inline</p>",
        "<p><b>Summary</b></p>",
        "<p>If an inline function is called, then it should be defined.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>inline function</span>&nbsp;<em>A</em>&nbsp;<span>is not defined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-inline'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEFINED_INTERNAL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "undefined-internal",
    "name": "Published Standards/Compiler Warnings/Undefined Internal",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-internal</p>",
        "<p><b>Summary</b></p>",
        "<p>If a function/variable with internal linkage is called/used, then it should be defined</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 20%'><col style='width: 17%'><col style='width: 63%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>has internal linkage but is not defined</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEFINED_INTERNAL_TYPE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "undefined-internal-type",
    "name": "Published Standards/Compiler Warnings/Undefined Internal Type",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-internal-type</p>",
        "<p><b>Summary</b></p>",
        "<p>If a type with internal linkage is used, then it should be defined</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 50%'><col style='width: 11%'><col style='width: 39%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ requires a definition in this translation unit for</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>because its type does not have linkage</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal-type'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEFINED_REINTERPRET_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "undefined-reinterpret-cast",
    "name": "Published Standards/Compiler Warnings/Undefined Reinterpret Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-reinterpret-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Casting with <code>reinterpret_cast</code> in certain ways has undefined behavior.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dereference of type</span>&nbsp;<em>B</em>&nbsp;<span>that was reinterpret_cast from type</span>&nbsp;<em>A</em>&nbsp;<span>has undefined behavior</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reinterpret_cast from</span>&nbsp;<em>A</em>&nbsp;<span>to</span>&nbsp;<em>B</em>&nbsp;<span>has undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-reinterpret-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDEFINED_VAR_TEMPLATE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "undefined-var-template",
    "name": "Published Standards/Compiler Warnings/Undefined Var Template",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wundefined-var-template</p>",
        "<p><b>Summary</b></p>",
        "<p>A member variable template should have a definition.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>instantiation of variable</span>&nbsp;<em>A</em>&nbsp;<span>required here, but no definition is available</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-var-template'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNDERALIGNED_EXCEPTION_OBJECT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "underaligned-exception-object",
    "name": "Published Standards/Compiler Warnings/Underaligned Exception Object",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunderaligned-exception-object</p>",
        "<p><b>Summary</b></p>",
        "<p>If an object is thrown, then it and its members should not be aligned with too many bytes. This can be fixed with the <code>aligned</code> attribute.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>underaligned exception object thrown</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunderaligned-exception-object'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNEVALUATED_EXPRESSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unevaluated-expression",
    "name": "Published Standards/Compiler Warnings/Unevaluated Expression",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunevaluated-expression</p>",
        "<p><b>Summary</b></p>",
        "<p>If an expression may not be evaluated, then do not have side effects, such as assignments or modifications of a variable</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression with side effects has no effect in an unevaluated context</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunevaluated-expression'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNGUARDED_AVAILABILITY": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unguarded-availability",
    "name": "Published Standards/Compiler Warnings/Unguarded Availability",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunguarded-availability</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of the <code>availability</code> attribute, do not use things that are unavailable for the target system</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is only available on</span>&nbsp;<em>B</em>&nbsp;<em>C</em>&nbsp;<span>or newer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNGUARDED_AVAILABILITY_NEW": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unguarded-availability-new",
    "name": "Published Standards/Compiler Warnings/Unguarded Availability New",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunguarded-availability-new</p>",
        "<p><b>Summary</b></p>",
        "<p>Because of the <code>availability</code> attribute, do not use things that are unavailable for the target system</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>is only available on</span>&nbsp;<em>B</em>&nbsp;<em>C</em>&nbsp;<span>or newer</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability-new'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNICODE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unicode",
    "name": "Published Standards/Compiler Warnings/Unicode Escape Sequences",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunicode</p>",
        "<p><b>Summary</b></p>",
        "<p>When using universal character names, escape sequences correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty delimited universal character name; treating as ‘' ‘</span><em>A</em><span>’ ‘{‘ ‘}’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incomplete delimited universal character name; treating as ‘' ‘</span><em>A</em><span>’ ‘{‘ identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incomplete universal character name; treating as ‘' followed by identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>\\</span><em>A</em>&nbsp;<span>used with no following hex digits; treating as ‘' followed by identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>universal character name refers to a surrogate character</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>universal character names are only valid in C99 or C++; treating as ‘' followed by identifier</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>universal character names are only valid in C99 or C++</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNICODE_HOMOGLYPH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unicode-homoglyph",
    "name": "Published Standards/Compiler Warnings/Unicode Homoglyph",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunicode-homoglyph</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for Unicode character homoglyphs being treated as identifier characters rather than symbols</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>treating Unicode character &lt;U+</span><em>A</em><span>&gt; as identifier character rather than as ‘</span><em>B</em><span>’ symbol</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-homoglyph'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNICODE_WHITESPACE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unicode-whitespace",
    "name": "Published Standards/Compiler Warnings/Unicode Whitespace",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunicode-whitespace</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for Unicode characters being treated as whitespace</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>treating Unicode character as whitespace</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-whitespace'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNICODE_ZERO_WIDTH": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unicode-zero-width",
    "name": "Published Standards/Compiler Warnings/Unicode Zero Width",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunicode-zero-width</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not have identifiers with zero-width unicode characters. They may not show in some editors.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>identifier contains Unicode character &lt;U+</span><em>A</em><span>&gt; that is invisible in some environments</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-zero-width'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNINITIALIZED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "uninitialized",
    "name": "Published Standards/Compiler Warnings/Uninitialized",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wuninitialized</p>",
        "<p><b>Summary</b></p>",
        "<p>Initialize classes and variables before they are used</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>base class</span>&nbsp;<em>A</em>&nbsp;<span>is uninitialized when used here to access</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>field</span>&nbsp;<em>A</em>&nbsp;<span>is uninitialized when used here</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference</span>&nbsp;<em>A</em>&nbsp;<span>is not yet bound to a value when used here</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 63%'><col style='width: 15%'><col style='width: 23%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>block pointer variable</span>&nbsp;<em>A</em>&nbsp;<span>is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>uninitialized</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>null</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>when captured by block</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable</span>&nbsp;<em>A</em>&nbsp;<span>is uninitialized when used within its own initialization</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>reference</span>&nbsp;<em>A</em>&nbsp;<span>is not yet bound to a value when used within its own initialization</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 79%'><col style='width: 21%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable</span>&nbsp;<em>A</em>&nbsp;<span>is uninitialized when</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>used here</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>captured by block</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNINITIALIZED_CONST_REFERENCE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "uninitialized-const-reference",
    "name": "Published Standards/Compiler Warnings/Uninitialized Const Reference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wuninitialized-const-reference</p>",
        "<p><b>Summary</b></p>",
        "<p>Initialize variables before they are used as const references</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable</span>&nbsp;<em>A</em>&nbsp;<span>is uninitialized when passed as a const reference argument here</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized-const-reference'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNKNOWN_ARGUMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unknown-argument",
    "name": "Published Standards/Compiler Warnings/Unknown Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-argument</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use command line arguments that are available and spelled correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown argument ignored in clang-cl: ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown argument ignored in clang-cl ‘</span><em>A</em><span>’; did you mean ‘</span><em>B</em><span>’?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-argument'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNKNOWN_ASSUMPTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unknown-assumption",
    "name": "Published Standards/Compiler Warnings/Unknown Assumption",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-assumption</p>",
        "<p><b>Summary</b></p>",
        "<p>A string in the <code>assume</code> attribute is used to provide information to the optimizer. Only use strings that are available and spelled correctly.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown assumption string ‘</span><em>A</em><span>’; attribute is potentially ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-assumption'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNKNOWN_ATTRIBUTES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unknown-attributes",
    "name": "Published Standards/Compiler Warnings/Unknown Attributes",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-attributes</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use attributes that are available and spelled correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown attribute</span>&nbsp;<em>A</em>&nbsp;<span>ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-attributes'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNKNOWN_DIRECTIVES": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unknown-directives",
    "name": "Published Standards/Compiler Warnings/Unknown Directives",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-directives</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use preprocessing directives that are available and spelled correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 53%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>invalid preprocessing directive</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>, did you mean ‘#</span><em>B</em><span>’?</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-directives'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNKNOWN_ESCAPE_SEQUENCE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unknown-escape-sequence",
    "name": "Published Standards/Compiler Warnings/Unknown Escape Sequence",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-escape-sequence</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use escape sequences that are available</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown escape sequence ‘\\</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-escape-sequence'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNKNOWN_PRAGMAS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unknown-pragmas",
    "name": "Published Standards/Compiler Warnings/Unknown Pragmas",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-pragmas</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use pragmas that are available, spelled correctly, and used correctly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected ‘ON’ or ‘OFF’ or ‘DEFAULT’ in pragma</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expected end of directive in pragma</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown pragma in STDC namespace</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pragma diagnostic pop could not pop, no matching push</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pragma diagnostic expected ‘error’, ‘warning’, ‘ignored’, ‘fatal’, ‘push’, or ‘pop’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pragma diagnostic expected option name (e.g. “-Wundef”)</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unexpected token in pragma diagnostic</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma execution_character_set expected ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma execution_character_set invalid value ‘</span><em>A</em><span>’, only ‘UTF-8’ is supported</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma execution_character_set expected ‘push’ or ‘pop’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown pragma ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pragma include_alias expected ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pragma include_alias expected include filename</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>angle-bracketed include &lt;</span><em>A</em><span>&gt; cannot be aliased to double-quoted include “</span><em>B</em><span>”</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>double-quoted include “</span><em>A</em><span>” cannot be aliased to angle-bracketed include &lt;</span><em>B</em><span>&gt;</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma warning expected ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma warning expected a warning number</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma warning(push, level) requires a level between 0 and 4</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>#pragma warning expected ‘push’, ‘pop’, ‘default’, ‘disable’, ‘error’, ‘once’, ‘suppress’, 1, 2, 3, or 4</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>pragma STDC FENV_ROUND is not supported</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-pragmas'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNKNOWN_SANITIZERS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unknown-sanitizers",
    "name": "Published Standards/Compiler Warnings/Unknown Sanitizers",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-sanitizers</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use strings that are available and spelled correctly for strings in any sanitizer attribute</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown sanitizer ‘</span><em>A</em><span>’ ignored</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-sanitizers'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNKNOWN_WARNING_OPTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unknown-warning-option",
    "name": "Published Standards/Compiler Warnings/Unknown Warning Option",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunknown-warning-option</p>",
        "<p><b>Summary</b></p>",
        "<p>Only use command line arguments that are available and spelled correctly for arguments starting with -W and use them properly</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown warning group ‘</span><em>A</em><span>’, ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 28%'><col style='width: 11%'><col style='width: 29%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>remark</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>option ‘</span><em>B</em><span>’</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; did you mean ‘</span><em>D</em><span>’?</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unknown</span>&nbsp;<em>A</em>&nbsp;<span>warning specifier: ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-warning-option'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNNAMED_TYPE_TEMPLATE_ARGS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unnamed-type-template-args",
    "name": "Published Standards/Compiler Warnings/Unnamed Type Template Args",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunnamed-type-template-args</p>",
        "<p><b>Summary</b></p>",
        "<p>If a template argument expects a type, then give it a type</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>template argument uses unnamed type</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunnamed-type-template-args'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNNEEDED_INTERNAL_DECLARATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unneeded-internal-declaration",
    "name": "Published Standards/Compiler Warnings/Unneeded Internal Declaration",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunneeded-internal-declaration</p>",
        "<p><b>Summary</b></p>",
        "<p>It is not necessary to define unused functions. They may be unused because of templates. In a header, a <code>static</code> function should be the <code>static inline</code> for clarification.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 21%'><col style='width: 17%'><col style='width: 62%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em>&nbsp;<span>is not needed and will not be emitted</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘static’ function</span>&nbsp;<em>A</em>&nbsp;<span>declared in header file should be declared ‘static inline’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunneeded-internal-declaration'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNNEEDED_MEMBER_FUNCTION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unneeded-member-function",
    "name": "Published Standards/Compiler Warnings/Unneeded Member Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunneeded-member-function</p>",
        "<p><b>Summary</b></p>",
        "<p>It is not necessary to define unused member functions. They may be unused because of templates.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>member function</span>&nbsp;<em>A</em>&nbsp;<span>is not needed and will not be emitted</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunneeded-member-function'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNQUALIFIED_STD_CAST_CALL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unqualified-std-cast-call",
    "name": "Published Standards/Compiler Warnings/Unqualified Standard Cast Call",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunqualified-std-cast-call</p>",
        "<p><b>Summary</b></p>",
        "<p>When calling functions like <code>std::move</code>, remember to do something with the result, such as an assignment</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unqualified call to ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunqualified-std-cast-call'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNREACHABLE_CODE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unreachable-code",
    "name": "Published Standards/Compiler Warnings/Unreachable Code",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunreachable-code</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unreachable code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>code will never be executed</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNREACHABLE_CODE_BREAK": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unreachable-code-break",
    "name": "Published Standards/Compiler Warnings/Unreachable Code Break",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunreachable-code-break</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unreachable break in code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘break’ will never be executed</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-break'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNREACHABLE_CODE_FALLTHROUGH": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unreachable-code-fallthrough",
    "name": "Published Standards/Compiler Warnings/Unreachable Code Fallthrough",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunreachable-code-fallthrough</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unreachable fallthrough in code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>fallthrough annotation in unreachable code</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-fallthrough'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNREACHABLE_CODE_GENERIC_ASSOC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unreachable-code-generic-assoc",
    "name": "Published Standards/Compiler Warnings/Unreachable Code Generic Assoc",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunreachable-code-generic-assoc</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unreachable association in code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 88%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>due to lvalue conversion of the controlling expression, association of type</span>&nbsp;<em>A</em>&nbsp;<span>will never be selected because it is</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>of array type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>qualified</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-generic-assoc'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNREACHABLE_CODE_LOOP_INCREMENT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unreachable-code-loop-increment",
    "name": "Published Standards/Compiler Warnings/Unreachable Code Loop Increment",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunreachable-code-loop-increment</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unreachable loop increment in code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>loop will run at most once (loop increment never executed)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-loop-increment'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNREACHABLE_CODE_RETURN": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unreachable-code-return",
    "name": "Published Standards/Compiler Warnings/Unreachable Code Return",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunreachable-code-return</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unreachable return in code</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>‘return’ will never be executed</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-return'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSEQUENCED": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unsequenced",
    "name": "Published Standards/Compiler Warnings/Unsequenced Modifications",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsequenced</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unsequenced modification(s)</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>multiple unsequenced modifications to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unsequenced modification and access to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsequenced'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_ABI": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unsupported-abi",
    "name": "Published Standards/Compiler Warnings/Unsupported ABI (Application Binary Interface)",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-abi</p>",
        "<p><b>Summary</b></p>",
        "<p>When a certain floating point type is not available by a library, change the ABI with the -mfloat-abi command line argument</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>float ABI ‘</span><em>A</em><span>’ is not supported by current library</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-abi'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_ABS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unsupported-abs",
    "name": "Published Standards/Compiler Warnings/Unsupported Absolute Value Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-abs</p>",
        "<p><b>Summary</b></p>",
        "<p>If the architecture does not support the arg of the <code>-mabs</code> command line argument, then change it to a supported one</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘-mabs=2008’ option because the ‘</span><em>A</em><span>’ architecture does not support it</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘-mabs=legacy’ option because the ‘</span><em>A</em><span>’ architecture does not support it</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-abs'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_AVAILABILITY_GUARD": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unsupported-availability-guard",
    "name": "Published Standards/Compiler Warnings/Unsupported Availability Guard",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-availability-guard</p>",
        "<p><b>Summary</b></p>",
        "<p>Use the correct keyword for your build system when using <code>@available</code> or <code>__builtin_available</code></p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 15%'><col style='width: 20%'><col style='width: 34%'><col style='width: 20%'><col style='width: 12%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>@available</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>__builtin_available</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>does not guard availability here; use if (</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>@available</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>__builtin_available</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>) instead</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-availability-guard'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_CB": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unsupported-cb",
    "name": "Published Standards/Compiler Warnings/Unsupported Compact Branches",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-cb</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use the <code>'-mcompact-branches</code> command line argument if it is not supported by the target architecture</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘-mcompact-branches=’ option because the ‘</span><em>A</em><span>’ architecture does not support it</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-cb'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_DLL_BASE_CLASS_TEMPLATE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unsupported-dll-base-class-template",
    "name": "Published Standards/Compiler Warnings/Unsupported DLL Base Class Template",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-dll-base-class-template</p>",
        "<p><b>Summary</b></p>",
        "<p>If a specialized class template uses a dll attribute, then the base class template should also with <code>__declspec(dllexport)</code> or <code>__declspec(dllimport)</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 40%'><col style='width: 19%'><col style='width: 41%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>propagating dll attribute to</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>already instantiated</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>explicitly specialized</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>base class template without dll attribute is not supported</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-dll-base-class-template'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_FLOATING_POINT_OPT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unsupported-floating-point-opt",
    "name": "Published Standards/Compiler Warnings/Unsupported Floating Point Option",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-floating-point-opt</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use command line arguments for floats that are unavailable for the target. These may be <code>-ffp-exception-behavior</code>, <code>-frounding-math</code>, or <code>-fno-rounding-math</code>.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overriding currently unsupported use of floating point exceptions on this target</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>overriding currently unsupported rounding mode on this target</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-floating-point-opt'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_FRIEND": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unsupported-friend",
    "name": "Published Standards/Compiler Warnings/Unsupported Friend",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-friend</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not make friend declarations that are unsupported</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dependent nested name specifier ‘</span><em>A</em><span>’ for friend template declaration is not supported; ignoring this friend declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dependent nested name specifier ‘</span><em>A</em><span>’ for friend class declaration is not supported; turning off access control for</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-friend'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_GPOPT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unsupported-gpopt",
    "name": "Published Standards/Compiler Warnings/Unsupported GPopt (Gaussian Process Optimization)",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-gpopt</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use the <code>-mgpopt</code> command line argument if the <code>-mabicalls</code> argument is changed (changed explicitly or implicitly)</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 60%'><col style='width: 26%'><col style='width: 13%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘-mgpopt’ option as it cannot be used with</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>the implicit usage of</span>&nbsp;</p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>-mabicalls</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-gpopt'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_NAN": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unsupported-nan",
    "name": "Published Standards/Compiler Warnings/Unsupported Nan Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-nan</p>",
        "<p><b>Summary</b></p>",
        "<p>If the architecture does not support the arg of the <code>-mnan</code> command line argument, then change it to a supported one</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘-mnan=2008’ option because the ‘</span><em>A</em><span>’ architecture does not support it</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring ‘-mnan=legacy’ option because the ‘</span><em>A</em><span>’ architecture does not support it</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-nan'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_TARGET_OPT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unsupported-target-opt",
    "name": "Published Standards/Compiler Warnings/Unsupported Target Option",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-target-opt</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not use a debug information command line argument if it is not supported by the target</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>debug information option ‘</span><em>A</em><span>’ is not supported; requires DWARF-</span><em>C</em>&nbsp;<span>but target ‘</span><em>B</em><span>’ only provides DWARF-</span><em>D</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>debug information option ‘</span><em>A</em><span>’ is not supported for target ‘</span><em>B</em><span>’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-target-opt'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNSUPPORTED_VISIBILITY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unsupported-visibility",
    "name": "Published Standards/Compiler Warnings/Unsupported Visibility",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunsupported-visibility</p>",
        "<p><b>Summary</b></p>",
        "<p>For the <code>visibility</code> attribute, do not use \"protected\" if it is not supported by the target</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>target does not support ‘protected’ visibility; using ‘default’</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-visibility'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSABLE_PARTIAL_SPECIALIZATION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unusable-partial-specialization",
    "name": "Published Standards/Compiler Warnings/Unusable Partial Specialization",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunusable-partial-specialization</p>",
        "<p><b>Summary</b></p>",
        "<p>Be more specific with template specialization if the types cannot be deduced</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 10%'><col style='width: 9%'><col style='width: 29%'><col style='width: 14%'><col style='width: 38%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>class</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>template partial specialization contains</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>a template parameter</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>template parameters</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>that cannot be deduced; this partial specialization will never be used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunusable-partial-specialization'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_BUT_SET_PARAMETER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "unused-but-set-parameter",
    "name": "Published Standards/Compiler Warnings/Unused but Set Parameter",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-but-set-parameter</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks set but unused parameter</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parameter</span>&nbsp;<em>A</em>&nbsp;<span>set but not used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-but-set-parameter'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_BUT_SET_VARIABLE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-but-set-variable",
    "name": "Published Standards/Compiler Warnings/Unused but Set Variable",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-but-set-variable</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for set but unused variable</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable</span>&nbsp;<em>A</em>&nbsp;<span>set but not used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-but-set-variable'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_COMMAND_LINE_ARGUMENT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unused-command-line-argument",
    "name": "Published Standards/Compiler Warnings/Unused Command Line Argument",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-command-line-argument</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused command line argument</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument ‘</span><em>A</em><span>’ requires profile-guided optimization information</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument ‘</span><em>A</em><span>’ requires profile-guided optimization information</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>joined argument expects additional value: ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 59%'><col style='width: 41%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em><span>: ‘</span><em>B</em><span>’ input unused</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>when ‘</span><em>D</em><span>’ is present</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em><span>: ‘</span><em>B</em><span>’ input unused in cpp mode</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 61%'><col style='width: 9%'><col style='width: 30%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring invalid /arch: argument ‘</span><em>A</em><span>’; for</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>64</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>32</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p><span>-bit expected one of</span>&nbsp;<em>C</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 53%'><col style='width: 47%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em><span>: previously preprocessed input</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>unused when ‘</span><em>C</em><span>’ is present</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>argument unused during compilation: ‘</span><em>A</em><span>’</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>’-x</span>&nbsp;<em>A</em><span>’ after last input file has no effect</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>the flag ‘</span><em>A</em><span>’ has been deprecated and will be ignored</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring -fdiscard-value-names for LLVM Bitcode</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring -fverify-debuginfo-preserve-export=</span><em>A</em>&nbsp;<span>because -fverify-debuginfo-preserve wasn’t enabled</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-command-line-argument'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_COMPARISON": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unused-comparison",
    "name": "Published Standards/Compiler Warnings/Unused Comparison",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-comparison</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused comparison result</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 28%'><col style='width: 25%'><col style='width: 46%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>equality</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>inequality</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>relational</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>three-way</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>comparison result unused</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-comparison'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_CONST_VARIABLE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-const-variable",
    "name": "Published Standards/Compiler Warnings/Unused Const Variable",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-const-variable</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused const variable</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused variable</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-const-variable'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_EXCEPTION_PARAMETER": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unused-exception-parameter",
    "name": "Published Standards/Compiler Warnings/Unused Exception Parameter",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-exception-parameter</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused exception parameter</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused exception parameter</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-exception-parameter'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_FUNCTION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-function",
    "name": "Published Standards/Compiler Warnings/Unused Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-function</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused function</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused function</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-function'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_GETTER_RETURN_VALUE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "unused-getter-return-value",
    "name": "Published Standards/Compiler Warnings/Unused Getter Return Value",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-getter-return-value</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused getter return value</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>property access result unused - getters should not be used for side effects</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-getter-return-value'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_LABEL": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-label",
    "name": "Published Standards/Compiler Warnings/Unused Label",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-label</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused label</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused label</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-label'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_LAMBDA_CAPTURE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-lambda-capture",
    "name": "Published Standards/Compiler Warnings/Unused Lambda Capture",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-lambda-capture</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused lambda capture</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 69%'><col style='width: 31%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>lambda capture</span>&nbsp;<em>A</em>&nbsp;<span>is not</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>used</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>required to be captured for this use</span></p></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-lambda-capture'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_LOCAL_TYPEDEF": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-local-typedef",
    "name": "Published Standards/Compiler Warnings/Unused Local Typedef",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-local-typedef</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused local typedefs</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 52%'><col style='width: 24%'><col style='width: 24%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>typedef</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>type alias</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-local-typedef'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_MACROS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unused-macros",
    "name": "Published Standards/Compiler Warnings/Unused Macros",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-macros</p>",
        "<p><b>Summary</b></p>",
        "<p>Macro is unused.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>macro is not used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-macros'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_MEMBER_FUNCTION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unused-member-function",
    "name": "Published Standards/Compiler Warnings/Unused Member Function",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-member-function</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused member functions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused member function</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-member-function'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_PARAMETER": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Extra", "Warnings"],
    "key": "unused-parameter",
    "name": "Published Standards/Compiler Warnings/Unused Parameter",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-parameter</p>",
        "<p><b>Summary</b></p>",
        "<p>Parameter is unused.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused parameter</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-parameter'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_PRIVATE_FIELD": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-private-field",
    "name": "Published Standards/Compiler Warnings/Unused Private Field",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-private-field</p>",
        "<p><b>Summary</b></p>",
        "<p>Private class field is unused.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>private field</span>&nbsp;<em>A</em>&nbsp;<span>is not used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-private-field'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_PROPERTY_IVAR": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-property-ivar",
    "name": "Published Standards/Compiler Warnings/Unused Property IVar (Instance Variable)",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-property-ivar</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused property iVar</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ivar</span>&nbsp;<em>A</em>&nbsp;<span>which backs the property is not referenced in this property’s accessor</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-property-ivar'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_RESULT": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unused-result",
    "name": "Published Standards/Compiler Warnings/Unused Result",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-result</p>",
        "<p><b>Summary</b></p>",
        "<p>Result is unused.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring return value of function declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring return value of function declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-result'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_TEMPLATE": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "unused-template",
    "name": "Published Standards/Compiler Warnings/Unused Template",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-template</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused template</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 42%'><col style='width: 17%'><col style='width: 41%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>function</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>variable</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>template</span>&nbsp;<em>B</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-template'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_VALUE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unused-value",
    "name": "Published Standards/Compiler Warnings/Unused Value",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-value</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused value</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring return value of function declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>left operand of comma operator has no effect</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring temporary created by a constructor declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ignoring temporary created by a constructor declared with</span>&nbsp;<em>A</em>&nbsp;<span>attribute:</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>container access result unused - container access should not be used for side effects</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression result unused</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression result unused; should this cast be to ‘void’?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-value'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_VARIABLE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Warnings"],
    "key": "unused-variable",
    "name": "Published Standards/Compiler Warnings/Unused Variable",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-variable</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused variables</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>unused variable</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-variable'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_UNUSED_VOLATILE_LVALUE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "unused-volatile-lvalue",
    "name": "Published Standards/Compiler Warnings/Unused Volatile Lvalue",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wunused-volatile-lvalue</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for unused volatile lvalues</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>expression result unused; assign into a variable to force a volatile load</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-volatile-lvalue'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_USED_BUT_MARKED_UNUSED": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "used-but-marked-unused",
    "name": "Published Standards/Compiler Warnings/Used but Marked Unused",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wused-but-marked-unused</p>",
        "<p><b>Summary</b></p>",
        "<p>Item marked as unused but used.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>was marked unused but was used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wused-but-marked-unused'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_USER_DEFINED_LITERALS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "user-defined-literals",
    "name": "Published Standards/Compiler Warnings/User Defined Literals",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wuser-defined-literals</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for user-defined literals</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 67%'><col style='width: 33%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>user-defined literal suffixes not starting with ‘_’ are reserved</span></p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>; no literal will invoke this operator</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-literals'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_USER_DEFINED_WARNINGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: All", "Compiler: Most", "Compiler: Default", "Warnings"],
    "key": "user-defined-warnings",
    "name": "Published Standards/Compiler Warnings/User Defined Warnings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wuser-defined-warnings</p>",
        "<p><b>Summary</b></p>",
        "<p>Display user-defined warnings</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<p>The text of this diagnostic is not controlled by Clang.</p>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-warnings'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VARARGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "varargs",
    "name": "Published Standards/Compiler Warnings/Variadic Arguments",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvarargs</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks validity of arguments given to 'va_start' and 'va_arg'</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>second argument to ‘va_start’ is not the last named parameter</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>second argument to ‘va_arg’ is of promotable type</span>&nbsp;<em>A</em><span>; this va_arg has undefined behavior because arguments will be promoted to</span>&nbsp;<em>B</em></p></td></tr></tbody></table>","<table><colgroup><col style='width: 31%'><col style='width: 37%'><col style='width: 32%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>passing</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>an object that undergoes default argument promotion</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>an object of reference type</span></p></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>a parameter declared with the ‘register’ keyword</span></p></td></tr></tbody></table></td><td style='vertical-align:middle;white-space:nowrap'><p>&nbsp;<span>to ‘va_start’ has undefined behavior</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvarargs'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VARIADIC_MACROS": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "variadic-macros",
    "name": "Published Standards/Compiler Warnings/Variadic Macros",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvariadic-macros</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for variadic macros</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>named variadic macros are a GNU extension</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>__VA_OPT__ can only appear in the expansion of a variadic macro</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variadic macros are a C99 feature</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvariadic-macros'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VEC_ELEM_SIZE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "vec-elem-size",
    "name": "Published Standards/Compiler Warnings/Vector Element Size",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvec-elem-size</p>",
        "<p><b>Summary</b></p>",
        "<p>Vector operands must have the same element sizes</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>error:</span>&nbsp;<span>vector operands do not have the same elements sizes (</span><em>A</em>&nbsp;<span>and</span>&nbsp;<em>B</em><span>)</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvec-elem-size'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VECTOR_CONVERSION": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "vector-conversion",
    "name": "Published Standards/Compiler Warnings/Vector Conversion",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvector-conversion</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not perform incompatible vector conversions</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 36%'><col style='width: 64%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>incompatible vector types</span>&nbsp;</p></td><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>assigning to</span>&nbsp;<em>A</em>&nbsp;<span>from</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>assigning to different types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>passing</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>passing to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>returning</span>&nbsp;<em>A</em>&nbsp;<span>from a function with result type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>returning from function with different return type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>converting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>converting between types</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>initializing</span>&nbsp;<em>A</em>&nbsp;<span>with an expression of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>initializing with expression of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>sending</span>&nbsp;<em>A</em>&nbsp;<span>to parameter of type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>sending to parameter of different type</span></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>casting</span>&nbsp;<em>A</em>&nbsp;<span>to type</span>&nbsp;<em>B</em></p></td></tr></tbody></table></td></tr><tr><td style='vertical-align:middle;white-space:nowrap' style='border-top:0.1em solid #777'><p><span>casting between types</span></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvector-conversion'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VEXING_PARSE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "vexing-parse",
    "name": "Published Standards/Compiler Warnings/Vexing Parse Occurrences",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvexing-parse</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks for ambiguous/vexing parse occurrences</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>empty parentheses interpreted as a function declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parentheses were disambiguated as a function declaration</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>parentheses were disambiguated as redundant parentheses around declaration of variable named</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvexing-parse'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VISIBILITY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "visibility",
    "name": "Published Standards/Compiler Warnings/Visibility of Declarations",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvisibility</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks that a declaration or redeclaration will be visible outside a given function</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>declaration of</span>&nbsp;<em>A</em>&nbsp;<span>will not be visible outside of this function</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>redefinition of</span>&nbsp;<em>A</em>&nbsp;<span>will not be visible outside of this function</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvisibility'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VLA": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "vla",
    "name": "Published Standards/Compiler Warnings/VLA (Variable Length Array)",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvla</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks to see if a variable length array is used</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable length array used</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvla'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VLA_EXTENSION": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "vla-extension",
    "name": "Published Standards/Compiler Warnings/VLA (Variable Length Array) Extension",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvla-extension</p>",
        "<p><b>Summary</b></p>",
        "<p>Checks to see if a variable length array extension is needed</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>variable length arrays are a C99 feature</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvla-extension'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VOID_POINTER_TO_ENUM_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "void-pointer-to-enum-cast",
    "name": "Published Standards/Compiler Warnings/Void Pointer to Enum Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvoid-pointer-to-enum-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not cast from a pointer to an enum</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to smaller integer type</span>&nbsp;<em>B</em>&nbsp;<span>from</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-enum-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VOID_POINTER_TO_INT_CAST": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "void-pointer-to-int-cast",
    "name": "Published Standards/Compiler Warnings/Void Pointer to Int Cast",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvoid-pointer-to-int-cast</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not cast from a pointer to an int</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>cast to smaller integer type</span>&nbsp;<em>B</em>&nbsp;<span>from</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-int-cast'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_VOID_PTR_DEREFERENCE": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "void-ptr-dereference",
    "name": "Published Standards/Compiler Warnings/Void Pointer Dereference",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wvoid-ptr-dereference</p>",
        "<p><b>Summary</b></p>",
        "<p>Do not dereference a void pointer.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++ does not allow indirection on operand of type</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-ptr-dereference'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_WASM_EXCEPTION_SPEC": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings"],
    "key": "wasm-exception-spec",
    "name": "Published Standards/Compiler Warnings/Wasm Exception Spec",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wwasm-exception-spec</p>",
        "<p><b>Summary</b></p>",
        "<p>Dynamic exception specifications with types are currently ignored in wasm</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>dynamic exception specifications with types are currently ignored in wasm</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wwasm-exception-spec'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_WEAK_VTABLES": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "weak-vtables",
    "name": "Published Standards/Compiler Warnings/Weak VTables (Virtual Tables)",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wweak-vtables</p>",
        "<p><b>Summary</b></p>",
        "<p>A class has no out-of-line virtual method definitions and its vtable will be emitted in every translation unit</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<em>A</em>&nbsp;<span>has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wweak-vtables'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_WRITABLE_STRINGS": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "writable-strings",
    "name": "Published Standards/Compiler Warnings/Writable Strings",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wwritable-strings</p>",
        "<p><b>Summary</b></p>",
        "<p>Avoid conversion from string literal per ISO C++11</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>ISO C++11 does not allow conversion from string literal to</span>&nbsp;<em>A</em></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wwritable-strings'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_XOR_USED_AS_POW": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Default", "Warnings", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75" ],
    "key": "xor-used-as-pow",
    "name": "Published Standards/Compiler Warnings/Xor Used as Power",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wxor-used-as-pow</p>",
        "<p><b>Summary</b></p>",
        "<p>XOR and Pow use the same symbol '^' and the intended use can be ambiguous.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of ‘</span><em>A</em><span>’ is</span>&nbsp;<em>B</em><span>; did you mean exponentiation?</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of ‘</span><em>A</em><span>’ is</span>&nbsp;<em>B</em><span>; did you mean ‘</span><em>C</em><span>’?</span></p></td></tr></tbody></table>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>result of ‘</span><em>A</em><span>’ is</span>&nbsp;<em>B</em><span>; did you mean ‘</span><em>C</em><span>’ (</span><em>D</em><span>)?</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wxor-used-as-pow'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ZERO_AS_NULL_POINTER_CONSTANT": {
    "tags": [ "Standard: Compiler Warnings", "Warnings"],
    "key": "zero-as-null-pointer-constant",
    "name": "Published Standards/Compiler Warnings/Zero as Null Pointer Constant",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wzero-as-null-pointer-constant</p>",
        "<p><b>Summary</b></p>",
        "<p>Literal 0 used as null.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>zero as null pointer constant</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wzero-as-null-pointer-constant'>LLVM Documentation</a></p>"
      ]
    }
  },
  "CPP_WARN_ZERO_LENGTH_ARRAY": {
    "tags": [ "Standard: Compiler Warnings", "Compiler: Pedantic", "Warnings"],
    "key": "zero-length-array",
    "name": "Published Standards/Compiler Warnings/Zero Length Array",
    "desc": {
      "text": "",
      "html": [
        "<p>Report findings of the compiler warning flag: -Wzero-length-array</p>",
        "<p><b>Summary</b></p>",
        "<p>Zero size arrays are an extension of clang and not in standard C++.</p>",
        "<p><strong>Diagnostic Text</strong></p><p></p>","<table><colgroup><col style='width: 100%'></colgroup><tbody><tr><td style='vertical-align:middle;white-space:nowrap'><p><span>warning:</span>&nbsp;<span>zero size arrays are an extension</span></p></td></tr></tbody></table>",
        "<p><a href='https://releases.llvm.org/16.0.0/tools/clang/docs/DiagnosticsReference.html#wzero-length-array'>LLVM Documentation</a></p>"
      ]
    }
  }
}
