{
  "CPP_CT_BUGPRONE_ASSERT_SIDE_EFFECT": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "bugprone-assert-side-effect",
    "name": "All Checks/Language Specific/C and C++/Warnings/Assert Side Effect",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Assert Side Effect</p>",
        "<p><b>Description</b></p>",
        "<p>Find <code>assert</code> macros with side-effects.</p>"
      ]
    },
    "options": [
      {
        "id": "bugprone-assert-side-effect.AssertMacros",
        "text": "Comma-separated list of assert macro names",
        "value": "assert"
      }
    ]
  },
  "CPP_CT_BUGPRONE_BRANCH_CLONE": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "bugprone-branch-clone",
    "name": "All Checks/Language Specific/C and C++/Warnings/Branch Clone",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Branch Clone</p>",
        "<p><b>Description</b></p>",
        "<p>Find repeated conditional branches.</p>"
      ]
    }
  },
  "CPP_CT_BUGPRONE_COPY_CONSTRUCTOR_INIT": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "bugprone-copy-constructor-init",
    "name": "All Checks/Language Specific/C and C++/Warnings/Copy Constructor Init",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Copy Constructor Init</p>",
        "<p><b>Description</b></p>",
        "<p>Find copy constructors that don't call the copy constructor of ",
        "the base class.</p>"
      ]
    }
  },
  "CPP_CT_BUGPRONE_INFINITE_LOOP": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "bugprone-infinite-loop",
    "name": "All Checks/Language Specific/C and C++/Warnings/Infinte Loop",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Infinte Loop</p>",
        "<p><b>Description</b></p>",
        "<p>Find loops where the condition variable is never changed.</p>"
      ]
    }
  },
  "CPP_CT_BUGPRONE_MACRO_REPEATED_SIDE_EFFECTS": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "bugprone-macro-repeated-side-effects",
    "name": "All Checks/Language Specific/C and C++/Warnings/Macro Side Effects",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Macro Side Effects</p>",
        "<p><b>Description</b></p>",
        "<p>Find repeated macro arguments with side-effects.</p>"
      ]
    }
  },
  "CPP_CT_BUGPRONE_NOT_NULL_TERMINATED_RESULT": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "bugprone-not-null-terminated-result",
    "name": "All Checks/Language Specific/C and C++/Warnings/Missing Null Terminator",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Missing Null Terminator</p>",
        "<p><b>Description</b></p>",
        "<p>Find string allocations that don't allocate enough space for the ",
        "null terminator character.</p>"
      ]
    }
  },
  "CPP_CT_BUGPRONE_REDUNDANT_BRANCH_CONDITION": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "bugprone-redundant-branch-condition",
    "name": "All Checks/Language Specific/C and C++/Warnings/Redundant Condition",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Redundant Condition</p>",
        "<p><b>Description</b></p>",
        "<p>Find duplicated nested condition variables where the variable ",
        "never changes.</p>"
      ]
    }
  },
  "CPP_CT_MODERNIZE_USE_NULLPTR": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:"],
    "key": "modernize-use-nullptr",
    "name": "All Checks/Language Specific/C and C++/Warnings/Null Pointer Keyword",
    "msg": "Use the `nullptr` keyword",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Null Pointer Keyword</p>",
        "<p><b>Description</b></p>",
        "<p>Use the <code>nullptr</code> keyword instead of literal ",
        "<code>0</code> or the <code>NULL</code> macro.</p>"
      ]
    }
  },
  "CPP_CT_MODERNIZE_USE_DEFAULT_MEMBER_INIT": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:"],
    "key": "modernize-use-default-member-init",
    "name": "All Checks/Language Specific/C and C++/Warnings/Default Member Init",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Default Member Init</p>",
        "<p><b>Description</b></p>",
        "<p>Use default member initializers instead of constructor member ",
        "initializer lists.</p>"
      ]
    },
    "options": [
      {
        "id": "modernize-use-default-member-init.UseAssignment",
        "text": "Use assignment syntax instead of curly braces",
        "value": false
      }
    ]
  },
  "CPP_CT_MODERNIZE_USE_EQUALS_DEFAULT": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:"],
    "key": "modernize-use-equals-default",
    "name": "All Checks/Language Specific/C and C++/Warnings/Default Member Function",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Default Member Function</p>",
        "<p><b>Description</b></p>",
        "<p>Replace the empty body of special member functions with ",
        "<code>= default</code>.</p>"
      ]
    }
  },
  "CPP_CT_MODERNIZE_USE_EQUALS_DELETE": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:"],
    "key": "modernize-use-equals-delete",
    "name": "All Checks/Language Specific/C and C++/Warnings/Delete Member Function",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Delete Member Function</p>",
        "<p><b>Description</b></p>",
        "<p>Mark unimplemented special member functions with ",
        "<code>= delete</code>.</p>"
      ]
    },
    "options": [
      {
        "id": "modernize-use-equals-delete.SuggestPublic",
        "text": "Suggest making deleted special member functions public",
        "value": true
      }
    ]
  },
  "CPP_CT_READABILITY_DELETE_NULL_POINTER": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "readability-delete-null-pointer",
    "name": "All Checks/Language Specific/C and C++/Warnings/Delete Null Pointer",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Delete Null Pointer</p>",
        "<p><b>Description</b></p>",
        "<p>Don't check pointers for null before deleting them. The check is ",
        "unnecessary. Deleting a null pointer has no effect.</p>"
      ]
    }
  },
  "CPP_CT_READABILITY_REDUNDANT_CASTING": {
    "tags": ["Language: C", "Language: C++", "Warnings", "Standard:", "Recommended", "Standard: SciTools' Recommended Checks", "Severity: 75"],
    "key": "readability-redundant-casting",
    "name": "All Checks/Language Specific/C and C++/Warnings/Redundant Cast",
    "desc": {
      "html": [
        "<p><b>Title</b></p>",
        "<p>Redundant Cast</p>",
        "<p><b>Description</b></p>",
        "<p>Avoid casts where the source and destination types are the same.</p>"
      ]
    }
  }
}
