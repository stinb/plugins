our %regexptests = (
#Add tests here in the form:
# 'test name' => 'regular expression',
#'Don\'t use the letter a' => '[aA]',
'Blank spaces before and after + binary operator' => '\S+\+|\+\S',
'Blank spaces before and after - binary operator' => '[\S]+[-]|[-][\S]',
'Blank spaces before and after * binary operator' => '[\S]+[*]|[*][\S]',
'Blank spaces before and after / binary operator' => '[\S]+[/]|[/][\S]',
'Blank spaces before and after /= binary operator' => '[\S]+[/][=]|[/][=][\S]',
'Blank spaces before and after <= binary operator' => '[\S]+[<][=]|[<][=][\S]',
'Blank spaces before and after => binary operator' => '[\S]+[=][>]|[=][>][\S]',
'Blank spaces before and after := binary operator' => '[\S]+[:][=]|[:][=][\S]',
'Blank spaces before and after => binary operator' => '[\S]+[=][>]|[=][>][\S]',
'Blank spaces before and after | binary operator' => '[\S]+[|]|[|][\S]',
'Blank spaces before and after <> binary operator' => '[\S]+[<][>]|[<][>][\S]',
'Blank spaces before and after < binary operator' => '[\S]+[<]|[<][\S]',
'Blank spaces before and after = binary operator' => '[\S]+[=]|[=][\S]',
'Blank spaces before and after > binary operator' => '[\S]+[>]|[>][\S]',
'Blank spaces before and after : binary operator' => '[\S]+[:]|[:][\S]',
'Blank spaces after commas' => '[\w]+[\s]+[,]|[,][\S]+[\w]+',
'Blank spaces after semicolons' => '[\w]+[\s]+[;]|[;][\S]+[\w]+'
);



#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;
use warnings;


# Required - Return the short name of the check
sub name { return "6.3 Lexical Elements - Blank Spaces";}

# Required - Return the short description of the check
sub description { return "User Defined Regular Expresions";}

# Required - Return the long description of the check
sub detailed_description { return "To modify these tests, edit the start of the file Code Walkthrough Activities for ADA/6 - Readability/6.3 - Lexical Elements/Blank Spaces.upl";}

# Required - Test the language of the current file, the check will be 
# skipped if this returns 0
sub test_language {
  my $language = shift;
  return 1;
}

# Required - Return 1 if this check will be run on a per-entity basis
# Currently only supported on a per-file basis
sub test_entity { return 1;}

# Required - Return 1 if this check should be run on the entire project
# regardless of what files are selected. Should only be used for 
# project-level checks
sub test_global { return 0;}

# Optional - define configurable options for the check.
sub define_options{
  my $check = shift;  
  foreach my $test (keys %regexptests){
    $check->option->checkbox($test,"Run the test: $test",1);
  }
}


# Required - Run the check and return violations if any.
# This is called for each file if test_entity is set to 1 and $file is the Understand::Ent object for the file
# it is also called once with $file set to null if test_global is set to 1
sub check {
  my $check = shift; #The check object, needed to report violations and lookup option values
  my $file = shift;  # Will be empty if test_global set to 1 and test_entity set to 0
  
  # test_entity only runs on files for now, but could change in the future, so force the check to only run on files
  return unless $file->kind->check("file"); 
  
  
  #Open a file lexer
  my $lexer = $file->lexer;
  return unless $lexer;
  my $lexeme = $lexer->first();
  my $isLine; #Keep track of when we finish a line by tracking when we hit newline
  my $line; #The text of the current line, added to be each lexeme except comments
  LEX: while ($lexeme){
    my $lineNum = $lexeme->line_begin();
    $isLine = 1 if $lexeme->text =~ /\n/; 
    $line .= $lexeme->text unless $lexeme->token eq "Comment";
    if ($isLine){ #We just finished reading in a line, process it
      TEST:foreach my $test (keys %regexptests){
        next TEST unless $check->option->lookup($test);
        my $label = "Violation: $test"; #The output label we want for the error message
        #Escape html characters from output;
        $label =~ s/&/&amp;/g;
        $label =~ s/>/&gt;/g;
        $label =~ s/</&lt;/g;
        if ($line =~ /$regexptests{$test}/){
          $check->violation(0,$file,$lineNum,-1,$label);
          last TEST;
        }
      }
     $isLine = 0;
     $line = "";
    }
    $lexeme=$lexeme->next;
  };
  
}