import understand
import os.path

def name():
  """
  Required, the name of the graph.
  """
  return "Arch Graph with Clustering"

def description():
  return '''A sample graph with clusters.
    <p>This graph extends the "Arch Graph with Custom Dependencies"
    plugin by adding clusters. Read more about it in the <a href=
    "https://blog.scitools.com/making-a-custom-cluster-graph/">blog article
    </a></p>
    <br>
    <img src=".doc/arch_cluster.png"/>
  '''

def tags():
  return [
    'Target: Architectures',
    'Blog Article'
  ]


def test_architecture(arch):
  """
  Optional, return True if the graph exists for the given architecture

  If True, this graph will appear in the Graphical Views menu for the
  architecture.
  """
  return True;

def grabCluster(graph, clusters, arch):
  if not arch:
    return graph
  if arch not in clusters:
    parcluster = grabCluster(graph,clusters,arch.parent())
    clusters[arch] = parcluster.cluster(arch.name(),arch)
  return clusters[arch]

def grabNode(graph, nodes, clusters, arch):
  """
  This is a custom function for this script to get a graphviz node
  """
  if arch in nodes:
    node = nodes[arch]
  else:
    par = arch.parent()
    if arch.children():
      par = arch
    node = grabCluster(graph,clusters,par).node(arch.name())
    node.sync(arch); # architectures must be synced instead of given at creation
    if arch.children():
      # If there's an edge to this node and this node has child nodes,
      # make the edge look like it's going to the cluster label
      node.set("shape","plaintext")
      grabCluster(graph,clusters,par).set("label","")
    nodes[arch] = node

  return node


def draw(graph, target):
  """
  Draw the graph

  """

  # Load an oracle file
  oracle = dict()
  path = graph.db().name()[:-4] + "_oracle.csv"
  if os.path.exists(path):
    fin = open(path,'r')
    line = fin.readline()
    while line:
      parts = line.split(',')
      src = graph.db().lookup_arch(parts[0].strip())
      dest = graph.db().lookup_arch(parts[-1].strip())
      if src and dest:
        oracle.setdefault(src,[]).append(dest)
      line = fin.readline()
    fin.close()

  graph.set("rankdir", "LR")

  # store the arch->graphviz node so that each arch node appears only
  # once no matter how many edges
  nodes = dict()
  clusters = dict()
  visited = set()

  curLevel = []
  curLevel.append(target)

  while curLevel:
    nextLevel = []
    for arch in curLevel:
      # Avoid cycles
      if arch in visited:
        continue
      visited.add(arch)

      tail = grabNode(graph, nodes, clusters, arch)
      # depends() returns a dictionary from architectures to references. Here
      # only the architecture keys are used
      for child in arch.depends():
        edge = graph.edge(tail,grabNode(graph,nodes, clusters, child))
        nextLevel.append(child)
      for child in oracle.get(arch,[]):
        edge = graph.edge(tail,grabNode(graph,nodes, clusters, child))
        edge.set("color","blue")
        nextLevel.append(child)
    curLevel = nextLevel
