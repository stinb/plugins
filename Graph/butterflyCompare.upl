# The original Butterfly Compare graph plugin. This plugin has been replaced
# with a Python version.

our $comparison_db;
our @color_kind = ("#4e8cb9", "#afd870", "#e45721"); # Allows for access via kind integers (Both=0, New=1, Old=2) (Blue, Green, Red)
our $color_unkown = "#8f8f8f";

our $forward;
our $inverse;
our $forwardRel;
our $inverseRel;
our $result;

use base ("Understand::Graph::Gv");
use strict;


sub name { return "Butterfly"; }
sub style { return "Perl Compare (Classic)"; }


sub test_entity {
  my $entity = shift;

  if ($entity->kind->check("ada entry, ada function, ada package, ada procedure, ada protected, ada task,"
    ."assembly label,"
    ."basic method,"
    ."c function,"
    ."cobol program,"
    ."csharp method,"
    ."fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,"
    ."java method,"
    ."jovial file, jovial subroutine,"
    ."pascal compunit, pascal function, pascal procedure,"
    ."php function,"
    ."vhdl procedure, vhdl function, vhdl process, vhdl architecture")) {
    $forward = "Call";
    $forwardRel = "ada call ~dispatch,"
    ."ada with,"
    ."assembly call,"
    ."basic call ~virtual, basic use ptr,"
    ."c call ~virtual, c use ptr,"
    ."cobol call,"
    ."csharp call ~virtual, csharp use ptr,"
    ."fortran call,"
    ."java call,"
    ."jovial call, jovial asm use,"
    ."pascal call ~virtual,"
    ."php call,"
    ."vhdl call";
    $inverse = "Callby";
    $inverseRel = "ada callby,"
    ."ada withby,"
    ."assembly callby,"
    ."basic callby, basic useby ptr,"
    ."c callby ~inactive, c useby ptr,"
    ."cobol callby,"
    ."csharp callby, csharp useby ptr,"
    ."fortran callby,"
    ."java callby,"
    ."jovial callby, jovial asm useby,"
    ."pascal callby,"
    ."php callby,"
    ."vhdl callby";
    $result  = 1;
  } elsif ($entity->kind->check("basic class, basic struct,csharp class, csharp struct,c class, c struct, c union")) {
    $forward = "Derive";
    $forwardRel ="derive";
    $inverse = "Base";
    $inverseRel="base";
    $result  = 1;
  } elsif ($entity->kind->check("pascal class, pascal interface,java class ~anonymous, java interface")) {
    $forward = "Extended By";
    $forwardRel ="derive,extendby ~implicit";
    $inverse = "Extends";
    $inverseRel="derivefrom,extend ~implicit";
    $result  = 1;
  } elsif ($entity->kind->check("ada type")) {
    $forward = "Derive";
    $forwardRel ="derive";
    $inverse = "Derive From";
    $inverseRel="derivefrom";
    $result  = 1;
  } elsif ($entity->kind->check("c file, fortran file, pascal file")) {
    $forward = "Include";
    $forwardRel = "include ~inactive";
    $inverse = "Includeby";
    $inverseRel= "includeby ~inactive";
    $result = 1;
  } elsif ($entity->kind->check("vhdl entity,vhdl architecture,vhdl package,vhdl configuration")) {
    $forward = "Use";
    $forwardRel = "vhdl use name";
    $inverse = "Useby";
    $inverseRel= "vhdl useby name";
    $result = 1;
  } elsif ($entity->kind->check("cobol paragraph, cobol section")) {
    $forward = "Perform";
    $forwardRel = "cobol perform,cobol goto";
    $inverse = "Performby";
    $inverseRel = "cobol performby,cobol gotoby";
    $result = 1;
  } else {
    $result  = -1;
  }

  return $result;
}


sub test_global { return -1; }


sub init {
  my $graph = shift;

  $graph->options->define("$forward Depth",[ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ], "3");
  $graph->options->define("$inverse Depth",[ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ], "3");
  $graph->options->define("Name", ["Shortname", "Fullname", "None (Overview Mode)"], "Shortname");
  $graph->options->define("File Name",["Shortname","Fullname","Relative","None"],"None");
  $graph->options->define("Unresolved",["On","Off"],"On");
  $graph->options->define("Virtual Calls",["On","Off"],"Off") if $forward eq "Call";
  $graph->options->define("Intrinsic Functions",["On","Off"],"On");
  $graph->options->define("Modified Entities", ["Ignore comments/spaces/newlines", "Include all modifications"], "Ignore comments/spaces/newlines");
  $graph->options->define("Background Colors",["On","Off"],"On");
  $graph->options->define("Show Version Differences",["Both","Added Only","Removed Only"],"Both");

  $graph->legend->define("refBoth", "arrow", "Reference in Both", "", "", "0,0");
  $graph->legend->define("refNew", "arrow", "Added Reference", $color_kind[1], $color_kind[0], "1,0");
  $graph->legend->define("refOld", "arrow", "Removed Reference", $color_kind[2], $color_kind[2], "2,0");
  $graph->legend->define("entBoth", "roundedrect", "Entity in Both", "", "", "0,1");
  $graph->legend->define("entMod", "roundedrect", "Modified Entity", "", $color_kind[0], "1,1");
  $graph->legend->define("entNew", "roundedrect", "Added Entity", "", $color_kind[1], "2,1");
  $graph->legend->define("entOld", "roundedrect", "Removed Entity", "", $color_kind[2], "3,1");
  $graph->legend->define("entUnknown", "roundedrect", "Unresolved Entity", "", $color_unkown, "4,1");

  $comparison_db = $graph->db->comparison_db;
}


sub do_load {
  my $graph  = shift;
  my $entity = shift;

  if (!defined $comparison_db) {
    return;
  }

  my $comp_entity = $comparison_db->lookup_uniquename($entity->uniquename());
  my $kind;
  if ($comp_entity) {
    if (compare_contents($entity, $comp_entity, $graph)) {
      $kind = 3;
    } else {
      $kind = 0;
    }
  } else {
    $kind = 1;
  }

  $graph->default("rankdir","LR","graph");
  $graph->default("shape","box","node");

  if ($graph->options->lookup("Background Colors") eq "On") {
    $graph->legend->setvalue("refBoth", "color", "");
    $graph->legend->setvalue("refNew", "color", $color_kind[1]);
    $graph->legend->setvalue("refOld", "color", $color_kind[2]);

    $graph->legend->setvalue("entBoth","color", "");
    $graph->legend->setvalue("entMod","color", "");
    $graph->legend->setvalue("entNew", "color", "");
    $graph->legend->setvalue("entOld", "color", "");
    $graph->legend->setvalue("entUnknown", "color", "");
    $graph->legend->setvalue("entBoth","fillcolor", "");
    $graph->legend->setvalue("entMod","fillcolor", $color_kind[0]);
    $graph->legend->setvalue("entNew", "fillcolor", $color_kind[1]);
    $graph->legend->setvalue("entOld", "fillcolor", $color_kind[2]);
    $graph->legend->setvalue("entUnknown", "fillcolor", $color_unkown);
  } else {
    $graph->legend->setvalue("refBoth", "color","");
    $graph->legend->setvalue("refNew", "color", $color_kind[1]);
    $graph->legend->setvalue("refOld", "color", $color_kind[2]);

    $graph->legend->setvalue("entBoth","color", "");
    $graph->legend->setvalue("entMod","color", $color_kind[0]);
    $graph->legend->setvalue("entNew", "color", $color_kind[1]);
    $graph->legend->setvalue("entOld", "color", $color_kind[2]);
    $graph->legend->setvalue("entUnknown", "color", $color_unkown);
    $graph->legend->setvalue("entBoth","fillcolor", "");
    $graph->legend->setvalue("entMod","fillcolor", "");
    $graph->legend->setvalue("entNew", "fillcolor", "");
    $graph->legend->setvalue("entOld", "fillcolor", "");
    $graph->legend->setvalue("entUnknown", "fillcolor", "");
  }

  # create start node
  my %nodes = ();
  my $start = get_node(\%nodes,$graph,$entity,$comp_entity,$kind,1);
  my %save_nodes = %nodes;

  # Mark start node
  $start->set("fontsize", "15");

  # draw forward relations
  draw_tree($graph,$entity,$kind,\%nodes,0,$forward,$forwardRel,1);

  # draw inverse relations
  %nodes = %save_nodes;
  draw_tree($graph,$entity,$kind,\%nodes,0,$inverse,$inverseRel,0);
}


# Compare new/old entity contents to check for modifications
sub compare_contents {
  my $ent       = shift;
  my $comp_ent  = shift;
  my $graph     = shift;

  my $cont = $ent->contents;
  my $comp_cont = $comp_ent->contents;

  if ($graph->options->lookup("Modified Entities") eq "Ignore comments/spaces/newlines") {
    # Get language
    my $lang = $ent->language();

    # Remove comments
    if ($lang eq "Ada" || $lang eq "VHDL") {
      # Remove any -- style comments
      $cont =~ s/\-\-.*?\n//g;
      $comp_cont =~ s/\-\-.*?\n//g;
    } elsif ($lang eq "C" || $lang eq "C#" || $lang eq "Java" || $lang eq "Plm") {
      # Remove any // style comments
      $cont =~ s/\/\/.*?\n//g;
      $comp_cont =~ s/\/\/.*?\n//g;
      # Remove any /* */ style comments
      $cont =~ s/\/\*.*?\*\///gs;
      $comp_cont =~ s/\/\*.*?\*\///gs;
    } elsif ($lang eq "Fortran") {
      # Remove any ! style comments
      $cont =~ s/\!.*?\n//g;
      $comp_cont =~ s/\!.*?\n//g;
      # Remove any (c,C,*,d,D) first character comments
      $cont =~ s/^[cC*dD].*?\n//g;
      $comp_cont =~ s/^[cC*dD].*?\n//g;
    } elsif ($lang eq "Jovial") {
      # Remove any " " style comments
      $cont =~ s/\".*?\"//gs;
      $comp_cont =~ s/\".*?\"//gs;
      # Remove any % % style comments
      $cont =~ s/\%.*?\%//gs;
      $comp_cont =~ s/\%.*?\%//gs;
    } elsif ($lang eq "Pascal") {
      # Remove any // style comments
      $cont =~ s/\/\/.*?\n//g;
      $comp_cont =~ s/\/\/.*?\n//g;
      # Remove any (* *) style comments
      $cont =~ s/\(\*.*?\*\)//gs;
      $comp_cont =~ s/\(\*.*?\*\)//gs;
      # Remove any { } style comments
      $cont =~ s/\{.*?\}//gs;
      $comp_cont =~ s/\{.*?\}//gs;
    } elsif ($lang eq "Web") {
      # Remove any <!--  --> style comments (HTML)
      $cont =~ s/\<\!\-\-.*?\-\-\>//gs;
      $comp_cont =~ s/\<\!\-\-.*?\-\-\>//gs;
      # Remove any // style comments (PHP/Javascript)
      $cont =~ s/\/\/.*?\n//g;
      $comp_cont =~ s/\/\/.*?\n//g;
      # Remove any /* */ style comments (PHP/Javascript)
      $cont =~ s/\/\*.*?\*\///gs;
      $comp_cont =~ s/\/\*.*?\*\///gs;
    }

    #Remove all whitespaces (\s) and newlines (\r\n)
    $cont =~ s/[\s\r\n]+//g;
    $comp_cont =~ s/[\s\r\n]+//g;
  }

  my $result;
  if ($cont eq $comp_cont) {
    $result = 1;
    return $result;
  }
  $result = 0;
  return $result;
}


sub get_node {
  my $nodes    = shift;
  my $graph    = shift;
  my $ent      = shift;
  my $comp_ent = shift;
  my $kind     = shift;
  my $create   = shift;

  # build id
  my $id = $ent->uniquename();

  # return existing node
  return $$nodes{$id} if exists($$nodes{$id});

  # don't create new node
  return 0 if !$create;

  # build label
  my $label = " ";
  if ($graph->options->lookup("Name") eq "Fullname") {
    $label = $ent->longname;
  } elsif ($graph->options->lookup("Name") eq "Shortname") {
    $label = $ent->name;
  }

  my $filenameopt = $graph->options->lookup("File Name");
  my $deffile = $ent->ref("definein,declarein");

  if ($deffile && $filenameopt ne "None" && ! $ent->kind->check("file")) {
    $label .= "\n".$deffile->file->name if $filenameopt eq "Shortname";
    $label .= "\n".$deffile ->file->longname if $filenameopt eq "Fullname";
    $label .= "\n".$deffile->file->relname if $filenameopt eq "Relative";
  }
  $label =~ s/\\/\\\\/g;

  # build node
  my $node = $graph->node($ent,$label);
  $$nodes{$id} = $node;

  # set attributes
  if ($ent->kind->check("unresolved,unknown,undefined")) {
    $node->set("shape","octagon");
    if ($graph->options->lookup("Background Colors") eq "On") {
      $node->set("style", "filled");
      $node->set("fillcolor",$color_unkown);
    } else {
      $node->set("color",$color_unkown);
    }
    $ent = 0;
  } else {
    if ($graph->options->lookup("Background Colors") eq "On") {
      $node->set("style", "filled");
      if ($kind < 3) {
        $node->set("fillcolor",$color_kind[$kind]);
      }
    } elsif ($kind < 3) {
      $node->set("color",$color_kind[$kind]);
    }
  }

  if ($comp_ent && $comp_ent->kind->check("unresolved,unknown,undefined")) {
    $comp_ent = 0;
  }

  if ($kind == 2) {
    $node->diffsync(0, $ent);
  } else {
    $node->diffsync($ent, $comp_ent);
  }

  return $node;
}


sub get_virtual_node {
  my $nodes  = shift;
  my $graph  = shift;
  my $ent    = shift;
  my $kind   = shift;
  my $create = shift;

  # build id
  my $id = "v". $ent->uniquename();

  # return existing node
  return $$nodes{$id} if exists($$nodes{$id});

  # don't create new node
  return 0 if !$create;

  # build label
  my $label = "Virtual";

  # build node
  my $node = $graph->node($ent,$label);
  $$nodes{$id} = $node;

  # set attributes
  $node->set("shape","plaintext");
  $node->set("style","bold");

  return $node;
}


sub new_edge {
  my $graph     = shift;
  my $start     = shift;
  my $end       = shift;
  my $edge_kind = shift;
  my $dir       = shift;

  my $edge = $dir? $graph->edge($start,$end) : $graph->edge($end,$start);

  if ($edge_kind != 3) {
    $edge->set("color",$color_kind[$edge_kind]);
  }

  $edge->set("penwidth",2);

  return $edge;
}

sub draw_tree {
  my $graph    = shift;
  my $ent      = shift;
  my $kind     = shift;
  my $nodes    = shift;
  my $depth    = shift;
  my $type     = shift;
  my $typelist = shift;
  my $dir      = shift;

  my $comp_ent = $comparison_db->lookup_uniquename($ent->uniquename()) if ($kind == 0 || $kind == 3);

  # don't draw some entities
  return 0 if $depth > $graph->options->lookup($type . " Depth");
  return 0 if $graph->options->lookup("Unresolved") eq "Off" && $ent->kind->check("unresolved,unknown,undefined");
  return 0 if $graph->options->lookup("Intrinsic Functions") eq "Off" && $ent->kind->check("intrinsic");

  # Don't create node if new/old not included in graph
  my $verDiffShow = 0;
  if ($graph->options->lookup("Show Version Differences") eq "Added Only") {
    $verDiffShow = 1;
  } elsif ($graph->options->lookup("Show Version Differences") eq "Removed Only") {
    $verDiffShow = 2;
  }

  if ($verDiffShow == 1 && $kind eq 2) {
    return 0;
  } elsif ($verDiffShow == 2 && $kind eq 1) {
    return 0;
  }

  # lookup existing node
  my $start = get_node($nodes,$graph,$ent,$comp_ent,$kind,0);
  return $start if $start && $depth > 0;

  # create node
  $start = get_node($nodes,$graph,$ent,$comp_ent,$kind,1) if !$start;

  # build list of main refs to follow
  my @refs = $ent->refs($typelist,"",1);
  my @comp_refs = $comp_ent->refs($typelist,"",1) if ($kind == 0 || $kind == 3);

  # add refs from cobol child paragraphs and parent sections
  if ($ent->kind->check("cobol section")) {
    foreach my $paragraph ($ent->ents("define","paragraph")) {
      push @refs, $paragraph->refs($typelist,"",1);
    }
    if ($kind == 0 || $kind == 3) {
      foreach my $comp_paragraph ($comp_ent->ents("define","paragraph")) {
        push @comp_refs, $comp_paragraph->refs($typelist,"",1);
      }
    }
  } elsif ($ent->kind->check("cobol paragraph")) {
    foreach my $section ($ent->ents("definein","section")) {
      push @refs, $section->refs($typelist,"",1);
    }
    if ($kind == 0 || $kind == 3) {
      foreach my $comp_section ($comp_ent->ents("definein","section")) {
        push @comp_refs, $comp_section->refs($typelist,"",1);
      }
    }
  }

  # Hash children/comparison children by their uniquenames
  my %children;
  foreach my $childRef (@refs) {
    my $child = $childRef->ent;
    my $child_uniquename = $child->uniquename;
    $children{$child_uniquename} = $child;
  }
  my %comp_children;
  foreach my $childRef (@comp_refs) {
    my $child = $childRef->ent;
    my $child_uniquename = $child->uniquename;
    $comp_children{$child_uniquename} = $child;
  }

  # Get lists of new, old, and both children
  my @child_both = ();
  my @child_new = ();
  my @child_old = ();

  if ($kind == 0 || $kind == 3) {         # Exists in both
    my @child_key_both = grep { exists $comp_children{$_} } keys %children;
    foreach my $key (@child_key_both) { push @child_both, $children{$key}; }

    my @child_key_new = grep { !exists $comp_children{$_} } keys %children;
    foreach my $key (@child_key_new) { push @child_new, $children{$key}; }

    my @child_key_old = grep { !exists $children{$_} } keys %comp_children;
    foreach my $key (@child_key_old) { push @child_old, $comp_children{$key}; }
  } elsif ($kind == 1) {  # New entity
    @child_new = values %children;
  } else {                  # Old entity
    @child_old = values %children;
  }

  @child_both = sort{$a->name cmp $b->name} @child_both;
  @child_new = sort{$a->name cmp $b->name} @child_new;
  @child_old = sort{$a->name cmp $b->name} @child_old;

  my %ent_children;
  foreach my $child (@child_both) {  # Ent in both versions, ref in both versions
    my $comp_child = $comparison_db->lookup_uniquename($child->uniquename);
    my $node;
    if (compare_contents($child, $comp_child, $graph)) {
      $node = draw_tree($graph,$child,3,$nodes,$depth+1,$type,$typelist,$dir);
    } else {
      $node = draw_tree($graph,$child,0,$nodes,$depth+1,$type,$typelist,$dir);
    }
    if ($node && !exists($ent_children{$node})) {
      new_edge($graph,$start,$node,3,$dir);
      $ent_children{$node} = 1;
    }
  }
  foreach my $child (@child_new) {
    if ( $verDiffShow != 2 ) {
      my $lookup = $comparison_db->lookup_uniquename($child->uniquename);
      if (defined $lookup) {           # Ent in both versions, new reference
        my $comp_child = $comparison_db->lookup_uniquename($child->uniquename);
        my $node;
        if (compare_contents($child, $comp_child, $graph)) {
          $node = draw_tree($graph,$child,3,$nodes,$depth+1,$type,$typelist,$dir);
        } else {
          $node = draw_tree($graph,$child,0,$nodes,$depth+1,$type,$typelist,$dir);
        }
        if ($node && !exists($ent_children{$node})) {
          new_edge($graph,$start,$node,1,$dir);
          $ent_children{$node} = 1;
        }
      } else {                        # New entity, new reference
        my $node = draw_tree($graph,$child,1,$nodes,$depth+1,$type,$typelist,$dir);
        if ($node && !exists($ent_children{$node})) {
          new_edge($graph,$start,$node,1,$dir);
          $ent_children{$node} = 1;
        }
      }
    }
  }
  foreach my $child (@child_old) {
    if ( $verDiffShow != 1 ) {
      my $lookup = $graph->db->lookup_uniquename($child->uniquename);
      if (defined $lookup) {           # In both versions, old reference (removed)
        my $node;
        if (compare_contents($child, $lookup, $graph)) {
          $node = draw_tree($graph,$lookup,3,$nodes,$depth+1,$type,$typelist,$dir);
        } else {
          $node = draw_tree($graph,$lookup,0,$nodes,$depth+1,$type,$typelist,$dir);
        }
        if ($node && !exists($ent_children{$node})) {
          new_edge($graph,$start,$node,2,$dir);
          $ent_children{$node} = 1;
        }
      } else {                        # Old entity, old reference (both removed)
        my $node = draw_tree($graph,$child,2,$nodes,$depth+1,$type,$typelist,$dir);
        if ($node && !exists($ent_children{$node})) {
          new_edge($graph,$start,$node,2,$dir);
          $ent_children{$node} = 1;
        }
      }
    }
  }

  # handle virtual calls
  if ($graph->options->lookup("Virtual Calls") eq "On" && $dir) {
    my @virtual_refs = $ent->refs("java call, call virtual","function, method",1);
    my @comp_virtual_refs = $comp_ent->refs("java call, call virtual","function, method",1) if ($kind == 0 || $kind == 3);

    my @virtEnts = @virtual_refs;
    foreach my $childRef (@virtual_refs) {
      foreach my $orRef ($childRef->ent->refs("overriddenby,overrideby","",1)) {
        push @virtEnts, $orRef;
      }
    }
    my @compVirtEnts = @comp_virtual_refs;
    foreach my $childRef (@comp_virtual_refs) {
      foreach my $orRef ($childRef->ent->refs("overriddenby,overrideby","",1)) {
        push @compVirtEnts, $orRef;
      }
    }

    my %virtuals;
    foreach my $childRef (@virtual_refs) {
      my $child = $childRef->ent;
      my $child_uniquename = $child->uniquename;
      $virtuals{$child_uniquename} = $child;
    }
    my %comp_virtuals;
    foreach my $childRef (@comp_virtual_refs) {
      my $child = $childRef->ent;
      my $child_uniquename = $child->uniquename;
      $comp_virtuals{$child_uniquename} = $child;
    }

    # Get lists of new, old, and both children
    my @virtual_both = ();
    my @virtual_new = ();
    my @virtual_old = ();

    if ($kind == 0 || $kind == 3) {         # Exists in both
      my @virtual_key_both = grep { exists $comp_virtuals{$_} } keys %virtuals;
      foreach my $key (@virtual_key_both) { push @virtual_both, $virtuals{$key}; }

      my @virtual_key_new = grep { !exists $comp_virtuals{$_} } keys %virtuals;
      foreach my $key (@virtual_key_new) { push @virtual_new, $virtuals{$key}; }

      my @virtual_key_old = grep { !exists $virtuals{$_} } keys %comp_virtuals;
      foreach my $key (@virtual_key_old) { push @virtual_old, $comp_virtuals{$key}; }
    } elsif ($kind == 1) {  # New entity
      @virtual_new = values %virtuals;
    } else {                  # Old entity
      @virtual_old = values %virtuals;
    }

    @virtual_both = sort{$a->name cmp $b->name} @virtual_both;
    @virtual_new = sort{$a->name cmp $b->name} @virtual_new;
    @virtual_old = sort{$a->name cmp $b->name} @virtual_old;

    my $virNode;
    if (@virtual_refs and @comp_virtual_refs ) {    # Both
      $virNode = get_virtual_node($nodes,$graph,$ent,0,1);
      my $edge = new_edge($graph,$start,$virNode,3,$dir);
    } elsif (@virtual_refs) {                     # New
      $virNode = get_virtual_node($nodes,$graph,$ent,1,1);
      my $edge = new_edge($graph,$start,$virNode,1,$dir);
    } elsif (@comp_virtual_refs) {                # Old
      $virNode = get_virtual_node($nodes,$graph,$ent,2,1);
      my $edge = new_edge($graph,$start,$virNode,2,$dir);
    }

    if ($virNode) {
      foreach my $child (@virtual_both) {   # Virt in both versions, ref in both versions
        my $child_node = draw_tree($graph,$child,0,$nodes,$depth+1,$type,$typelist,$dir);
        new_edge($graph,$virNode,$child_node,3,$dir) if $child_node;
      }
      foreach my $child (@virtual_new) {
        if ( $verDiffShow != 2 ) {
          my $lookup = $comparison_db->lookup_uniquename($child->uniquename);
          if (defined $lookup) {               # Virt in both versions, new reference
            my $child_node = draw_tree($graph,$child,0,$nodes,$depth+1,$type,$typelist,$dir);
            new_edge($graph,$virNode,$child_node,1,$dir) if $child_node;
          } else {                            # New virtual, new reference
            my $child_node = draw_tree($graph,$child,1,$nodes,$depth+1,$type,$typelist,$dir);
            new_edge($graph,$virNode,$child_node,1,$dir) if $child_node;
          }
        }
      }
      foreach my $child (@virtual_old) {
        if ( $verDiffShow != 1 ) {
          my $lookup = $graph->db->lookup_uniquename($child->uniquename);
          if (defined $lookup) {               # Virt in both versions, old reference (removed)
            my $child_node = draw_tree($graph,$lookup,0,$nodes,$depth+1,$type,$typelist,$dir); # Pass lookup as child, is version in current db
            new_edge($graph,$virNode,$child_node,2,$dir) if $child_node;
          } else {                            # Old virtual, old reference (both removed)
            my $child_node = draw_tree($graph,$child,2,$nodes,$depth+1,$type,$typelist,$dir);
            new_edge($graph,$virNode,$child_node,2,$dir) if $child_node;
          }
        }
      }
    }
  }

  # handle virtual callbys
  if ($graph->options->lookup("Virtual Calls") eq "On" && !$dir) {
    my @virtEnts = ();
    foreach my $orRef ($ent->refs("overrides,override","",1)) {
      my @virtual_refs = $orRef->ent->refs("java callby,callby virtual","function, method",1);
      push @virtEnts, @virtual_refs;
    }
    my @compVirtEnts = ();
    if ($kind == 0 || $kind == 3) {
      foreach my $orRef ($comp_ent->refs("overrides,override","",1)) {
        my @comp_virtual_refs = $orRef->ent->refs("java callby,callby virtual","function, method",1);
        push @compVirtEnts, @comp_virtual_refs;
      }
    }

    my %virtuals;
    foreach my $childRef (@virtEnts) {
      my $child = $childRef->ent;
      my $child_uniquename = $child->uniquename;
      $virtuals{$child_uniquename} = $child;
    }
    my %comp_virtuals;
    foreach my $childRef (@compVirtEnts) {
      my $child = $childRef->ent;
      my $child_uniquename = $child->uniquename;
      $comp_virtuals{$child_uniquename} = $child;
    }

    # Get lists of new, old, and both children
    my @virtual_both = ();
    my @virtual_new = ();
    my @virtual_old = ();

    @virtual_both = sort{$a->name cmp $b->name} @virtual_both;
    @virtual_new = sort{$a->name cmp $b->name} @virtual_new;
    @virtual_old = sort{$a->name cmp $b->name} @virtual_old;

    if ($kind == 0 || $kind == 3) {         # Exists in both
      my @virtual_key_both = grep { exists $comp_virtuals{$_} } keys %virtuals;
      foreach my $key (@virtual_key_both) { push @virtual_both, $virtuals{$key}; }

      my @virtual_key_new = grep { !exists $comp_virtuals{$_} } keys %virtuals;
      foreach my $key (@virtual_key_new) { push @virtual_new, $virtuals{$key}; }

      my @virtual_key_old = grep { !exists $virtuals{$_} } keys %comp_virtuals;
      foreach my $key (@virtual_key_old) { push @virtual_old, $comp_virtuals{$key}; }
    } elsif ($kind == 1) {  # New entity
      @virtual_new = values %virtuals;
    } else {                  # Old entity
      @virtual_old = values %virtuals;
    }

    my $virNode;
    if (@virtEnts and @compVirtEnts ) {    # Both
      $virNode = get_virtual_node($nodes,$graph,$ent,0,1);
      my $edge = new_edge($graph,$start,$virNode,3,$dir);
    } elsif (@virtEnts) {                     # New
      $virNode = get_virtual_node($nodes,$graph,$ent,1,1);
      my $edge = new_edge($graph,$start,$virNode,1,$dir);
    } elsif (@compVirtEnts) {                # Old
      $virNode = get_virtual_node($nodes,$graph,$ent,2,1);
      my $edge = new_edge($graph,$start,$virNode,2,$dir);
    }

    if ($virNode) {
      foreach my $child (@virtual_both) {   # Virt in both versions, ref in both versions
        my $comp_child = $comparison_db->lookup_uniquename($child->uniquename);
        my $child_node;
        if (compare_contents($child, $comp_child, $graph)) {
          $child_node = draw_tree($graph,$child,3,$nodes,$depth+1,$type,$typelist,$dir);
        } else {
          $child_node = draw_tree($graph,$child,0,$nodes,$depth+1,$type,$typelist,$dir);
        }
        new_edge($graph,$virNode,$child_node,3,$dir) if $child_node;
      }
      foreach my $child (@virtual_new) {
        if ( $verDiffShow != 2 ) {
          my $lookup = $comparison_db->lookup_uniquename($child->uniquename);
          if (defined $lookup) {               # Virt in both versions, new reference
            my $child_node;
            if (compare_contents($child, $lookup, $graph)) {
              $child_node = draw_tree($graph,$child,3,$nodes,$depth+1,$type,$typelist,$dir);
            } else {
              $child_node = draw_tree($graph,$child,0,$nodes,$depth+1,$type,$typelist,$dir);
            }
            new_edge($graph,$virNode,$child_node,1,$dir) if $child_node;
          } else {                            # New virtual, new reference
            my $child_node = draw_tree($graph,$child,1,$nodes,$depth+1,$type,$typelist,$dir);
            new_edge($graph,$virNode,$child_node,1,$dir) if $child_node;
          }
        }
      }
      foreach my $child (@virtual_old) {
        if ( $verDiffShow != 1 ) {
          my $lookup = $graph->db->lookup_uniquename($child->uniquename);
          if (defined $lookup) {               # Virt in both versions, old reference (removed)
            my $child_node;
            if (compare_contents($child, $lookup, $graph)) {
              $child_node = draw_tree($graph,$child,3,$nodes,$depth+1,$type,$typelist,$dir);
            } else {
              $child_node = draw_tree($graph,$child,0,$nodes,$depth+1,$type,$typelist,$dir);
            }
            new_edge($graph,$virNode,$child_node,2,$dir) if $child_node;
          } else {                            # Old virtual, old reference (both removed)
            my $child_node = draw_tree($graph,$child,2,$nodes,$depth+1,$type,$typelist,$dir);
            new_edge($graph,$virNode,$child_node,2,$dir) if $child_node;
          }
        }
      }
    }
  }

  return $start;
}
