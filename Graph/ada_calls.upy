import understand


def name():
    """
    Required, the name of the graph.
    """
    return "Ada Calls"


def style():
    """
    Optional, the name as it appears in the graph variants drop down.

    This defaults to "Custom"
    """
    return ""


def description():
    """
    Optional, the description to display in the plugin manager.
    """
    return '''A calls graph for Ada files, packages and functions.'''


def tags():
    """
    Optional, the tags to display in the plugin manager
    """
    return [
        'Target: Ada Files',
        'Target: Ada Packages',
        'Target: Ada Functions',
        'Language: Ada',
    ]


def test_global(db):
    """
    Optional, return True if this graph is a project level graph

    If True, this graph will appear in the top level Graph Menu.
    """
    return False


def test_entity(ent):
    """
    Optional, return True if the graph exists for the given entity

    If True, this graph will appear in the Graphical Views menu for the
    entity.
    """
    return ent.kind().check("Ada File, Ada Package, Ada Procedure")


def test_architecture(arch):
    """
    Optional, return True if the graph exists for the given architecture

    If True, this graph will appear in the Graphical Views menu for the
    architecture.
    """
    return False


def init(graph, target):
    """
    Initialize the graph

    This function is called once on graph creation. Use it to define the
    available graph options and/or a legend.
    """
    # Use isinstance on the target to see if it's an entity, architecture, or
    # project level graph (if your plugin supports multiple). You can use the
    # target to customize available options.
    if isinstance(target, understand.Ent):
        graph.options().define("Depth", ["1", "2", "3", "4", "5"], "3")

    # Defining a legend is optional. You can add multiple entries to the legend.
    graph.legend().define("func", "circle", "Function", "#86E6F7")
    graph.legend().define("pack", "rectangle", "Package", "#2A74DB")
    graph.legend().define("file", "rectangle", "File", "#444444")


def grabCluster(graph, clusters, root):
    if not root:
        return graph
    if root not in clusters:
        parcluster = grabCluster(graph, clusters, root.parent())
        clusters[root] = parcluster.cluster(root.name())
        clusters[root].set("penwidth", "2")

        if root.kind().check("Package"):
            clusters[root].set("pencolor", "#2A74DB")
        elif root.kind().check("File"):
            clusters[root].set("pencolor", "#444444")

    return clusters[root]


def grabNode(graph, nodes, ent, clusters):
    """
    This is a custom function for this script to get a graphviz node
    """
    if ent in nodes:
        node = nodes[ent]
    else:
        par = ent.parent() if ent.parent() else ent
        node = grabCluster(graph, clusters, par).node(ent.name(), ent)

        if ent.kind().check("Procedure"):
            node.set("shape", "ellipse")
            node.set("color", "#86E6F7")
            node.set("penwidth", "2")

        nodes[ent] = node

    return node


def draw(graph, target):
    """
    Draw the graph

    The second argument can be a database, architecture, or an entity depending
    which test functions return True.
    """
    # Use set to change graph, node, and edge attributes
    graph.set("rankdir", "LR")

    # store the ent->graphviz node so that each entity node appears only
    # once no matter how many calls to it there are.
    nodes = dict()
    clusters = dict()

    # avoid visiting any node more than once
    visited = set()

    # If the graph can be more than one type, use isinstance to determine the type
    depth = 1
    curLevel = []

    if target.kind().check("Procedure"):
        curLevel.append(target)
    else:
        for pack_ref in target.refs("Define, Declare", "Package", True):
            for func_ref in pack_ref.ent().refs("Define, Declare", "Procedure", True):
                curLevel.append(func_ref.ent())

        for func_ref in target.refs("Define, Declare", "Procedure", True):
            curLevel.append(func_ref.ent())

    depth = int(graph.options().lookup("Depth"))

    # Loop over the levels of the tree
    while depth > 0:
        depth -= 1
        nextLevel = []
        for ent in curLevel:

            # avoid visiting nodes multiple times
            if ent in visited:
                continue
            visited.add(ent)

            # Get a graphviz node for the entity
            tail = grabNode(graph, nodes, ent, clusters)

            # Add edges for each call
            for ref in ent.refs("call", unique=True):
                headEnt = ref.ent()
                nextLevel.append(headEnt)
                head = grabNode(graph, nodes, headEnt, clusters)

                # create an edge
                edge = graph.edge(tail, head)
                # Use sync so that clicking on the edge will visit the reference
                edge.sync(ref)

            # Add edges for each callby
            for ref in ent.refs("callby", unique=True):
                if ref.ent() in visited:
                    continue

                headEnt = ref.ent()
                head = grabNode(graph, nodes, headEnt, clusters)

                # create an edge
                edge = graph.edge(head, tail)
                # Use sync so that clicking on the edge will visit the reference
                edge.sync(ref)

        curLevel = nextLevel
