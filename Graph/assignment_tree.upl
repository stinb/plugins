our $forward;
our $inverse;
our $forwardRel;
our $inverseRel;
our $result;

use base ("Understand::Graph::Gv");
use strict;


sub name { return "Assignment Tree"; }

sub description {
    return "
This Understand Perl API script generates a graph that visualizes the assignment relationships between entities in your codebase.

<h2>Purpose:</h2>
<p>This script is designed to help developers gain insights into the structure and flow of data assignments within their code, making it easier to understand complex codebases
 and potentially identify areas for refactoring or optimization.</p>

<h2>Key Features:</h2>
<ul>
    <li><b>Directional Relationships:</b> Shows both the entities that an entity assigns (<i>Assignments</i>) and the entities that assign it (<i>Assigned By</i>).</li>
    <li><b>Depth Control:</b> Allows you to configure the depth of exploration for both assignment directions.</li>
    <li><b>Customization:</b> Provides options to display short or full names, include file information, and toggle the visibility of unresolved entities.</li>
    <li><b>Random Edge Colors:</b> Optionally adds visual variety to the edges in the graph.</li>
    <li><b>Virtual Call Handling:</b> (If applicable) Optionally displays virtual call relationships.</li>
    <li><b>Intrinsic Function Filtering:</b> Optionally excludes intrinsic functions from the graph.</li>
</ul>

<h2>How it Works:</h2>
<ol>
    <li><b>Node Creation:</b> It creates a node for each entity involved in an assignment relationship.</li>
    <li><b>Edge Drawing:</b> It draws edges between nodes to represent the assignments, with the directionality controlled by user settings.</li>
    <li><b>Node Styling:</b> Nodes are color-coded and shaped based on their resolution status (e.g., unresolved entities are octagonal).</li>
    <li><b>Labeling:</b> Nodes can be labeled with short names, full names, or no names at all.</li>
    <li><b>File Information:</b> Optionally, file information can be added to the node labels.</li>
</ol>

<img src=\".doc/assignment_tree.png\" width=\"200\">
";
}


sub style { return "Classic"; }


sub test_entity {
  my $entity = shift;

  if ($entity->refs("assign, assignby")) {
    $forward = "Assignments";
    $forwardRel = "c assign";

    $inverse = "Assigned By";
    $inverseRel = "c assignby";

    $result  = 1;
  } else {
    $result  = -1;
  }

  return $result;
}


sub test_global { return -1; }


sub init {
  my $graph = shift;

  $graph->options->define("$forward Depth",[ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ], "3");
  $graph->options->define("$inverse Depth",[ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ], "3");
  $graph->options->define("Name", ["Shortname", "Fullname", "None (Overview Mode)"], "Shortname");
  $graph->options->define("Filename",["None","Shortname","Fullname","Relative"],"None");
  $graph->options->define("Unresolved",["Off","On"],"On");
  $graph->options->define("Random Edge Color",["Off","On"],"Off");
  $graph->options->define("Virtual Calls",["Off","On"],"Off") if $forward eq "Call";
  $graph->options->define("Intrinsic",["Off","On"],"On");

}


sub do_load {
  my $graph  = shift;
  my $entity = shift;

  $graph->default("rankdir","LR","graph");
  $graph->default("color","#90c4e4","node");
  $graph->default("shape","box","node");
  $graph->default("color","#4e8cb9","edge");

  # create start node
  my %nodes = ();
  my $start = get_node(\%nodes,$graph,$entity,1);
  my %save_nodes = %nodes;
  $start->set("fillcolor","#1976d2");
  $start->set("fontcolor","white");

  # draw forward relations
  draw_tree($graph,$entity,\%nodes,0,$forward,$forwardRel,1);

  # draw inverse relations
  %nodes = %save_nodes;
  draw_tree($graph,$entity,\%nodes,0,$inverse,$inverseRel,0);
}


sub get_node {
  my $nodes = shift;
  my $graph = shift;
  my $ent = shift;
  my $create = shift;

  # build id
  my $id = $ent->id();

  # return existing node
  return $$nodes{$id} if exists($$nodes{$id});

  # don't create new node
  return 0 if !$create;

  # build label
  my $label = " ";
  if ($graph->options->lookup("Name") eq "Fullname") {
    $label = $ent->longname;
  } elsif ($graph->options->lookup("Name") eq "Shortname") {
    $label = $ent->name;
  }

  my $filenameopt = $graph->options->lookup("File Name");
  my $deffile = $ent->ref("definein,declarein");

  if ($deffile && $filenameopt ne "None" && ! $ent->kind->check("file")) {
    $label .= "\n".$deffile->file->name if $filenameopt eq "Shortname";
    $label .= "\n".$deffile ->file->longname if $filenameopt eq "Fullname";
    $label .= "\n".$deffile->file->relname if $filenameopt eq "Relative";
  }
$label =~ s/\\/\\\\/g;

  # build node
  my $node = $graph->node($ent,$label);
  $$nodes{$id} = $node;

  # set attributes
  if ($ent->kind->check("unresolved,unknown,undefined")) {
    $node->set("shape","octagon");
    $node->set("color","gray");
  }

  return $node;
}


sub get_virtual_node {
  my $nodes = shift;
  my $graph = shift;
  my $ent = shift;
  my $create = shift;

  # build id
  my $id = "v". $ent->id();

  # return existing node
  return $$nodes{$id} if exists($$nodes{$id});

  # don't create new node
  return 0 if !$create;

  # build label
  my $label = "Virtual";

  # build node
  my $node = $graph->node($ent,$label);
  $$nodes{$id} = $node;

  # set attributes
  $node->set("shape","plaintext");
  $node->set("style","bold");

  return $node;
}


sub new_edge {
  my $graph = shift;
  my $start = shift;
  my $end = shift;
  my $dir = shift;

  my $edge = $dir? $graph->edge($start,$end) : $graph->edge($end,$start);
  if ($graph->options->lookup("Random Edge Color") eq "On") {
    $edge->set("color",randomColor());
  }

  return $edge;
}


sub draw_tree {
  my $graph    = shift;
  my $ent      = shift;
  my $nodes    = shift;
  my $depth    = shift;
  my $type     = shift;
  my $typelist = shift;
  my $dir      = shift;

  # don't draw some entities
  return 0 if $depth > $graph->options->lookup($type . " Depth");
  return 0 if $graph->options->lookup("Unresolved") eq "Off" && $ent->kind->check("unresolved,unknown,undefined");
  return 0 if $graph->options->lookup("Intrinsic Functions") eq "Off" && $ent->kind->check("intrinsic");

  # lookup existing node
  my $start = get_node($nodes,$graph,$ent,0);
  return $start if $start && $depth > 0;

  # create node
  $start = get_node($nodes,$graph,$ent,1) if !$start;

  # build list of main refs to follow
  my @refs = $ent->refs($typelist,"",1);

  # add refs from cobol child paragraphs and parent sections
  if ($ent->kind->check("cobol section")) {
    foreach my $paragraph ($ent->ents("define","paragraph")) {
      push @refs, $paragraph->refs($typelist,"",1);
    }
  } elsif ($ent->kind->check("cobol paragraph")) {
    foreach my $section ($ent->ents("definein","section")) {
      push @refs, $section->refs($typelist,"",1);
    }
  }

  # process refs
  my %children;
  foreach my $childRef (sort{$a->line <=> $b->line;} @refs) {
    my $child = $childRef->ent;
    my $node = draw_tree($graph,$child,$nodes,$depth+1,$type,$typelist,$dir);
    if ($node && !exists($children{$node})) {
      new_edge($graph,$start,$node,$dir);
      $children{$node} = 1;
    }
  }

  return $start;
}


sub randomColor{
  my @bgc=('','','');
  foreach my $c (@bgc){
    my $r=int(rand(180));
    $c=sprintf("%X",$r);
  }
  my $color = join("",@bgc);
  return "#".$color;
}
