# This plugin relies on local imports that must be copied if this plugin
# is copied.

import und_lib.kind_util as kind_util
from und_lib.graphs.metric_charts import SizeColorMetricChart, list_function_metrics
import understand

def name():
  return "Class Contents Treemap"

def description():
  return '''<p>Visualize the functions in C++ class by visibility</p>

    <p>This chart plots the methods in a class with the selected size and color
    metrics in a treemap. The treemap clusters the methods by visibility:
    public, protected, or private.</p>

    <br><img width="432" src=".doc/class_contents_treemap.svg"/>
  '''

def tags():
  return [
    'Target: Classes',
    'Language: Basic',
    'Language: C++',
    'Language: C#',
    'Language: Java',
    'Language: Pascal',
    'Language: Python',
    'Language: Web',
    'Layout: Treemap',
    'Metrics Chart',
  ]

def test_entity(ent):
  return ent.kind().check("c class ~unknown ~unresolved")

def init(graph, target):
  metlist = list_function_metrics(graph.db())
  graph.options().define("Size Metric", metlist, "CountLine")
  graph.options().define("Color Metric", metlist, "Cyclomatic")
  SizeColorMetricChart.define_options(graph)

def draw(graph, target):
  graph.set("layout", "treemap") # Override default layout algorithm (Usually dot)

  chart = ClassVisibility(graph, target)
  chart.hierarchical_draw(graph, target)

class ClassVisibility(SizeColorMetricChart):
  def __init__(self, graph, target):
    self.class_ent = target
    cmetric = graph.options().lookup("Color Metric")
    smetric = graph.options().lookup("Size Metric")
    super().__init__(graph, smetric, cmetric)
    self.color_scale.gradient_fill = True

  def target_parent(self, target):
    if target == self.class_ent:
      return None
    return self.class_ent

  def target_cluster_children(self, target):
    if target == self.class_ent:
      return ["Public", "Private", "Protected"]
    return []

  def target_node_children(self, target, recursive=False):
    if not recursive and target == self.class_ent:
      return []
    kstr = "member function"
    if target != self.class_ent:
      kstr += " " + target
    ents = []
    for ref in self.class_ent.refs("define,declare", kstr, True):
      ents.append(ref.ent())
    return ents

  def cluster_label(self, target):
    if target == self.class_ent:
      return target.name()
    return target

  def cluster_tooltip(self, sval, cval, target):
    if self.color_metric is None:
      return "{}\nSum {}={}".format(target, self.size_metric, sval)
    return "{}\nSum {}={}\nMax {}={}".format(target, self.size_metric, sval, self.color_metric, cval)
