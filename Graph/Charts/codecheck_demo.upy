# Graph using codecheck

colors = [ "#4e8cb9", "#569f38", "#90c4e4","#a1d870","#e46721"]

def name():
  return "Top Checks"

def description():
  return '''Visualize the top CodeCheck violations
    <p>This plugin visualizes the top CodeCheck violations found in your project using a bubble chart. Each bubble represents a specific code check, and the size of the bubble corresponds to the number of violations found for that check. This allows you to quickly identify the most frequent code check violations and prioritize your code improvement efforts.</p>
    <p>The plugin displays up to 7 top checks, providing a concise overview of the most prevalent issues. By highlighting these violations, the plugin helps you focus on areas of your code that require the most attention, promoting better code quality and maintainability.</p>
  '''

def test_inspection(inspection):
  return True

# Report generation
def draw(graph, inspection):
  graph.set("layout", "flatbubble") # Override default layout algorithm (Usually dot)
  graph.default("fontcolor", "#FFFFFF", "node")

  countsByCheck = dict()
  for v in inspection.violations():
    countsByCheck[v.check_id()] = countsByCheck.get(v.check_id(),0) + 1

  cur = 0
  for check, cnt in sorted(countsByCheck.items(),key=lambda item: item[1], reverse=True):
    n = graph.node(str(cnt))
    n.set("area",str(cnt))
    n.set("tooltip", "{} ({})\n{} Violations".format(inspection.config().check_name(check), check, cnt))
    n.set("color", colors[cur % len(colors)])
    n.set("fillcolor", colors[cur % len(colors)])
    cur += 1
    if cur >= 7:
      break # Only show top checks
