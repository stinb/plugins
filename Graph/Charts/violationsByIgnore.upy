# Graph using codecheck

colors = [ "#4e8cb9", "#569f38", "#90c4e4","#a1d870","#e46721"]

def name():
  return "Violations By Ignore"

def description():
  return '''Visualize CodeCheck violations by ignore status
    <p>This plugin visualizes the distribution of CodeCheck violations based on their ignore status using a sunburst diagram. It categorizes violations into "Not Ignored" and various ignore sources, allowing you to understand how many violations are actively addressed compared to those that are suppressed or ignored for specific reasons.</p>
    <p>The sunburst diagram presents a clear visual representation of the proportions of violations in each category. This helps you assess the effectiveness of your CodeCheck process and identify potential areas where ignored violations might need further review or action.</p>
  '''

def test_inspection(inspection):
  return True

# Report generation
def draw(graph, inspection):
  graph.set("layout","sunburst")
  graph.set("r1","72")
  graph.set("sweep","180")

  cnts = dict()
  for v in inspection.violations():
    if not v.ignores():
      cnts["Not Ignored"] = cnts.get("Not Ignored",0) + 1
    for source, note in v.ignores():
      cnts[source] = cnts.get(source, 0) + 1

  cur = 0
  legendCluster = graph.cluster()
  legendCluster.set("legend", "top")
  for source, cnt in sorted(cnts.items(), reverse=True):
    l = legendCluster.node("{}: {}".format(source, cnt))
    l.set("color", colors[cur % len(colors)])
    l.set("fillcolor", colors[cur % len(colors)])
    cur += 1

  cur -= 1
  for source, cnt in sorted(cnts.items()):
    n = graph.node()
    n.set("area", str(cnt))
    n.set("tooltip", "{}: {}".format(source, cnt))
    n.set("color", colors[cur % len(colors)])
    n.set("fillcolor", colors[cur % len(colors)])
    cur -= 1

