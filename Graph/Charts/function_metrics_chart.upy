# This plugin relies on local imports that must be copied if this plugin
# is copied.

import und_lib.kind_util as kind_util
from und_lib.graphs.metric_charts import SizeColorMetricChart, list_function_metrics
import understand

def name():
  return "Functions Metric Chart"

def description():
  return '''Visualize the functions in the project / architecture / file / class.

  <p>This chart allows selecting a size metric and a color metric. Functions are
  nodes with size determined by size metric and the color scaled by color metric.
  Several layouts are available.</p>

  <p>See also the similar metric charts for
  <a href="und://plugin/graph/Architecture%20Metric%20Chart-Custom">architectures</a>,
  <a href="und://plugin/graph/Files%20Metric%20Chart-Custom">files</a>,
  and <a href="und://plugin/graph/Classes%20Metric%20Chart-Custom">classes</a>
  .</p>

  <br><img src=".doc/functions_metric_chart.png"/>
  '''

def tags():
  return [
    'Target: Classes',
    'Target: Files',
    'Target: Architectures',
    'Target: Project',
    'Language: Any',
    'Metrics Chart',
    'Layout: Treemap',
    'Layout: Flat Bubble',
    'Layout: Pie',
    'Layout: Sunburst'
  ]

def test_global(db):
  return kind_util.can_contain_functions(db)

def test_architecture(arch):
  return kind_util.can_contain_functions(arch)

def test_entity(ent):
  return kind_util.can_contain_functions(ent)

def init(graph, target):
  metlist = list_function_metrics(graph.db())
  SizeColorMetricChart.define_options(graph, labels="Size Metric Value", metlist=metlist, colorMetric="Cyclomatic", layout_target=target)

def draw(graph, target):
  layout = graph.options().lookup("Layout")
  if layout == "hiearchical_treemap" or layout == "sunburst":
    chart = FunctionChildren(graph)
    chart.hierarchical_draw(graph, target)
  else:
    chart = SizeColorMetricChart(graph)
    chart.flat_draw(graph, kind_util.list_functions(target))


class FunctionChildren(SizeColorMetricChart):
  def __init__(self, graph):
    super().__init__(graph)

  def target_node_children(self, target, recursive=False):
    return kind_util.list_functions(target, arch_recursive=recursive)
