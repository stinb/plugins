# The layout this graph plugin uses requires build 1191 or later

import understand

colors = [ "#4652ac","#4685ac","#ac4652" ]


def name():
  return "Unused Entities"


def test_global(db):
  return True;


def init(graph, db):
  graph.options().define("Legend", ["None", "top", "left", "right", "bottom"], "bottom")
  graph.options().define("RankDir", ["LR", "RL", "TB", "BT"], "LR")

def cap_values(numbers, max_value=350):
    """
    Cap values in a list at a specified maximum.

    Args:
        numbers (list): List of numbers to cap.
        max_value (int, optional): Maximum allowed value. Defaults to 25.

    Returns:
        list: List with capped values.
    """
    capped_numbers = [min(num, max_value) for num in numbers]
    return capped_numbers


def draw(graph, db):
  graph.set("layout", "bar") # Override default layout algorithm (Usually dot)
  graph.set("rankdir", graph.options().lookup("RankDir"))

  legendCluster = None
  legend = graph.options().lookup("Legend")
  if legend != "None":
    legendCluster = graph.cluster()
    legendCluster.set("legend", legend)

  metrics = []

  unused_functions = 0
  unused_locals    = 0
  unused_globals   = 0

  ents = db.ents("file ~unknown ~unresolved")
  for ent in ents:

    # Gather violations from the database for populating graph
    viol_list = ent.violations()

    for viol in viol_list:
      check_id = viol.check_id()
      
      if check_id == "CPP_F003":      # Unused functions
        unused_functions += 1
      elif check_id == "CPP_V007":    # Unused local variables
        unused_locals += 1
      elif check_id == "CPP_V008":    # Unused global variables
        unused_globals += 1


  metrics.append(unused_functions)
  metrics.append(unused_locals)
  metrics.append(unused_globals)
  print(metrics)

  capped_metrics = cap_values(metrics)
  print(capped_metrics)

  # Sort data by the second parameter (index 1) in descending order
  data = [("Unused Functions",capped_metrics[0],colors[0]),
          ("Unused Local Variables",capped_metrics[1],colors[1]),
          ("Unused Global Variables",capped_metrics[2],colors[2])]

  sorted_data = sorted(data, key=lambda x: x[1],reverse=False)

  # Draw the sunburst chart
  for name, area, color in sorted_data:
    n = graph.node()
    n.set("color", color)
    n.set("fillcolor", color)
    n.set("area", str(area))
    if legendCluster:
      ln = legendCluster.node(name)
      ln.set("color", color)
      ln.set("fillcolor", color)