# The bar layout this graph plugin uses requires build 1191 or later

import understand

lineMetrics = [
  "CountLineCode",
  "CountLineComment",
  "CountLineInactive",
  "CountLinePreprocessor",
  "CountLineBlank"
]

lineColors = [ "#4e8cb9", "#569f38", "#90c4e4","#a1d870","#e46721"]

def name():
  return "Tutorial: Lines Bar Chart"

def description():
  return '''Display a bar chart of line counts for each architecture component
    <p>This plugin generates a bar chart that visualizes the number of lines of code, comments, inactive code, preprocessor directives, and blank lines for each component in your architecture. This allows you to quickly compare the composition of different components and identify areas with high proportions of specific line types.</p>

    <p>The plugin offers several customization options:</p>
    <ul>
      <li><b>Legend:</b> Control the placement or hiding of the legend.</li>
      <li><b>RankDir:</b> Choose the orientation of the bars (left-to-right, right-to-left, top-to-bottom, bottom-to-top).</li>
      <li><b>Axis Labels:</b> Display component names or full names as labels.</li>
      <li><b>Metrics:</b> Select specific line count metrics to include in the chart.</li>
      <li><b>Counts:</b> Show or hide the numeric counts on the bars.</li>
      <li><b>Min/Max:</b> Set minimum and maximum values to filter components in the chart.</li>
      <li><b>Hide Empty:</b> Exclude components with no lines of code from the chart.</li>
    </ul>

    <p>This bar chart provides a visual representation of the code distribution within your architecture, helping you understand its structure and identify potential areas for improvement.</p>
  '''
  
def test_architecture(arch):
  return True;

def init(graph, arch):
  graph.options().define("Legend", ["None", "top", "left", "right", "bottom"], "bottom")
  graph.options().define("RankDir", ["LR", "RL", "TB", "BT"], "LR")
  graph.options().define("Axis Labels", ["None", "Name", "Full Name"], "Name")
  graph.options().define("Metrics", ["All"] + lineMetrics, "All")
  graph.options().define("Counts", ["Off","On"], "Off")
  graph.options().define("Min", ["0","10","100", "1,000", "10,000", "100,000", "1,000,000"], "100")
  graph.options().define("Max", ["0","10","100", "1,000", "10,000", "100,000", "1,000,000"], "0")
  graph.options().define("Hide Empty", ["Off", "On"], "On")


def draw(graph, arch):
  """
  Draw the graph

  The second argument can be a database, an architecture or an entity depending
  on whether the graph was created at a project, architecture, or entity level.
  """
  graph.set("layout", "bar") # Override default layout algorithm (Usually dot)
  graph.set("rankdir", graph.options().lookup("RankDir"))

  format = graph.options().lookup("Axis Labels")

  mets = graph.options().lookup("Metrics")
  clusters = format != "None" or mets == "All"
  counts = graph.options().lookup("Counts") == "On"
  empty = graph.options().lookup("Hide Empty") == "Off"
  minimum = int(graph.options().lookup("Min").replace(',',''))
  maximum = int(graph.options().lookup("Max").replace(',',''))

  if mets == "All":
    mets = list(zip(lineMetrics, lineColors))
  else:
    mets = [(mets, lineColors[lineMetrics.index(mets)])]

  for child in arch.children() + arch.ents(False):
    valList = []
    for metric, color in mets:
      val = child.metric([metric])[metric]
      if val and val > minimum and (not maximum or val < maximum):
        valList.append((val, color))
    if not valList and not empty:
      continue
    par = graph.cluster(label(child,format)) if clusters else graph
    for val, color in valList:
      n = par.node(str(val) if counts else "")
      n.set("color", color)
      n.set("fillcolor", color)
      n.set("fontcolor", "#FFFFFF")
      n.set("area", str(val))

  legend = graph.options().lookup("Legend")
  if legend != "None":
    legendCluster = graph.cluster()
    legendCluster.set("legend", legend)
    for metric, color in mets:
      n = legendCluster.node(metric)
      n.set("color", color)
      n.set("fillcolor", color)

def label(child, format):
  if format == "Name":
    return child.name()
  elif format == "Full Name":
    return child.longname()
  return ""
