from und_lib.graphs.metric_charts import SizeColorMetricChart, list_arch_metrics
import understand

def name():
  return "Architecture Metric Chart"

def description():
  return '''Visualize metrics for the architecture's immediate children.

  <p>This chart allows selecting a size metric and a color metric. Child
  architectures (or root architectures if the target is a database) are
  nodes with size determined by size metric and the color scaled by color metric.
  The layout can be flat bubble, pie, or a treemap.</p>

  <p>See also the similar metric charts for
  <a href="und://plugin/graph/Files%20Metric%20Chart-Custom">files</a>,
  <a href="und://plugin/graph/Classes%20Metric%20Chart-Custom">classes</a>,
  and <a href="und://plugin/graph/Functions%20Metric%20Chart-Custom">functions</a>
  .</p>

  <br><img src=".doc/arch_metric_chart.png"/>
  '''

def tags():
  return [
    'Target: Architectures',
    'Target: Project',
    'Metrics Chart',
    'Layout: Treemap',
    'Layout: Flat Bubble',
    'Layout: Pie'
  ]

def test_global(db):
  return True

def test_architecture(arch):
  return len(arch.children()) > 0 or len(arch.ents(False)) > 0

def init(graph, target):
  metlist = list_arch_metrics(graph.db())
  graph.options().define("Size Metric", metlist, "CountLine")
  graph.options().define("Color Metric", ["None"] + metlist, "RatioCommentToCode")

  layouts = ["flatbubble", "treemap", "pie"]
  graph.options().define("Layout", layouts, "treemap")
  graph.options().define("Include Entities", ["Off", "On"], "Off")

  SizeColorMetricChart.define_options(graph, labels="Name")

def draw(graph, target):
  cmetric = graph.options().lookup("Color Metric")
  smetric = graph.options().lookup("Size Metric")

  layout = graph.options().lookup("Layout")

  graph.set("layout", layout)

  chart = SizeColorMetricChart(graph, smetric, cmetric)

  targets = []
  if isinstance(target, understand.Db):
    targets = target.root_archs()
  else:
    targets = target.children()
    if graph.options().lookup("Include Entities") == "On":
      targets.extend(target.ents(False))

  chart.flat_draw(graph, targets)
