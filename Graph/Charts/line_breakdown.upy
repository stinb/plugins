# The bar layout this graph plugin uses requires build 1191 or later

import understand

lineMetrics = [
  "CountLineCode",
  "CountLineComment",
  "CountLineInactive",
  "CountLinePreprocessor",
  "CountLineBlank"
]

colors = {
  "CountLineCode" : "#4e8cb9",
  "CountLineComment" : "#569f38",
  "CountLineInactive" : "#90c4e4",
  "CountLinePreprocessor" : "#a1d870",
  "CountLineBlank" : "#e46721"
}

def name():
  return "Line Breakdown"

def description():
  return '''Visualize the breakdown of different line types in the codebase
    <p>This plugin visualizes the breakdown of different line types in your
    codebase (code, comments, inactive code, preprocessor directives, and blank
    lines) using a half donut chart. This representation allows you to quickly
    understand the proportions of each line type and how they contribute to the
    overall code size.</p>
  '''

def test_global(db):
  return True

def test_architecture(arch):
  return True

def test_entity(ent):
  return ent.metric("CountLine")

def draw(graph, target):
  """
  Draw the graph

  The second argument can be a database, an architecture or an entity depending
  on whether the graph was created at a project, architecture, or entity level.
  """
  graph.set("layout", "sunburst") # Override default layout algorithm (Usually dot)
  graph.set("r1","72")
  graph.set("sweep","180")

  vals = target.metric(lineMetrics)

  legendCluster = graph.cluster()
  legendCluster.set("legend", "top")
  for metric in lineMetrics:
    if vals[metric]:
      n = legendCluster.node("{}: {:,}".format(metric[9:], vals[metric]))
      n.set("color", colors[metric])
      n.set("fillcolor", colors[metric])

  for metric in reversed(lineMetrics):
    if vals[metric]:
      n = graph.node()
      n.set("color", colors[metric])
      n.set("fillcolor", colors[metric])
      n.set("area", str(vals[metric]))
      n.set("tooltip", "{}: {:,}".format(metric[9:], vals[metric]))
