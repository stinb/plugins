# The bar layout this graph plugin uses requires build 1191 or later

import entity_histogram
import kind_util
import understand

BINS=10

def name():
  return "Functions Metric Histogram"

def description():
  return '''<p>Display a histogram of metric values for functions.</p>
    <p>For a file, architecture, or project, create a histogram of the function
    values for the selected metric (defaults to Cyclomatic).</p>
  '''

def test_global(db):
  return kind_util.can_contain_functions(db)

def test_architecture(arch):
  return kind_util.can_contain_functions(arch)

def test_entity(ent):
  return kind_util.can_contain_functions(ent)

def init(graph, target):
  metlist = understand.Metric.list(kind_util.FUNCTION_KIND_STR)
  # Because understand.Metric.list(kindstring) does not have a database argument
  # it won't contain metric plugins (whose test_available function provides
  # a database). Even if it did take a database, it would only list
  # enabled plugins. So, it's not ideal, but manually list metric plugins that
  # ireports using this histogram may request.
  metlist.extend([
    # HIS Metrics
    "RatioCommentsWithBeforeToCode",
    "CountGoTo",
    "CountCallbyUnique",
    "CountCallsUnique",
    "CountParams",
    "MaxCallDepth",
    "CountEarlyExit",
    "LanguageScope",
    "MinRecursiveDepth",
    "StabilityIndex",
    "HISNOMV",

    # Diff Metrics
    "CountLineChanged",
    "CountLineRemoved",
    "CountLineNew",
  ])

  graph.options().define("Metric", metlist, "Cyclomatic")
  entity_histogram.define_histogram_opts(graph)

def draw(graph, target):
  ents = kind_util.list_functions(target, include_unresolved=True)
  metric = graph.options().lookup("Metric")
  entity_histogram.draw_entity_histogram(graph, ents, metric, tooltip_kindstr=" function(s) ")
