import understand

COLORS = [ "#4e8cb9", "#569f38", "#90c4e4","#a1d870","#e46721"]
FUNCTION_KIND_STR="function,method,procedure,basic sub"
FILE_KIND_STR="file ~unresolved ~unknown"

def name():
  return "Most Complex Functions"

def description():
  return '''Visualize the top functions by complexity.
    <p>This plugin visualizes the most complex functions found in your project
    using a bubble chart. Each bubble represents a specific function, and the
    size of the bubble corresponds to the complexity. This allows you to quickly
    identify the complext functions and prioritize your code improvement efforts.</p>

    <p>The plugin displays up to 7 functions, providing a concise overview of
    the most prevalent issues. By highlighting these functions, the plugin
    helps you focus on areas of your code that require the most attention,
    promoting better code quality and maintainability.</p>
  '''

def test_architecture(arch):
  return True;

def test_entity(ent):
  return ent.kind().check("file ~unknown ~unresolved")

def test_global(db):
  return True

def init(graph, target):
  graph.options().define("Metric", ["Cyclomatic", "CyclomaticModified", "CyclomaticStrict", "CyclomaticStrictModified"], "Cyclomatic")
  # Messy, since we really just want to pass in an integer, but support integers
  # between 3 and 21
  cutoffs = []
  for i in range(3,22):
    cutoffs.append(str(i))
  graph.options().define("Top", cutoffs, "7")

# Report generation
def draw(graph, target):
  graph.set("layout", "flatbubble") # Override default layout algorithm (Usually dot)
  graph.default("fontcolor", "#FFFFFF", "node")

  complexity = dict()
  ents = set()
  if isinstance(target, understand.Arch):
    for ent in target.ents(True):
      if ent.kind().check(FUNCTION_KIND_STR):
        ents.add(ent)
      elif ent.kind().check(FILE_KIND_STR):
        file_ents(ent, ents)
  elif isinstance(target, understand.Db):
    ents = target.ents(FUNCTION_KIND_STR)
  elif isinstance(target, understand.Ent):
    file_ents(target, ents)

  met = graph.options().lookup("Metric")
  for ent in ents:
    val = ent.metric(met)
    if val:
      complexity[ent] = val

  cur = 0
  top = int(graph.options().lookup("Top"))
  for ent, val in sorted(complexity.items(),key=lambda item: item[1], reverse=True):
    n = graph.node(str(val))
    n.set("area",str(val))
    n.sync(ent)
    n.set("color", COLORS[cur % len(COLORS)])
    n.set("fillcolor", COLORS[cur % len(COLORS)])
    cur += 1
    if cur >= top:
      break # Only show top values

def file_ents(file, ents):
  for ref in file.filerefs("define, ada declare body, vhdl declare", FUNCTION_KIND_STR, True):
    ents.add(ref.ent())
