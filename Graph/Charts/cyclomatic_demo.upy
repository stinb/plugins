import und_lib.kind_util as kind_util
import understand

COLORS = [ "#4e8cb9", "#569f38", "#90c4e4","#a1d870","#e46721"]

def name():
  return "Most Complex Functions"

def description():
  return '''<p>Visualize the top functions by complexity.</p>
    <p>This plugin visualizes the most complex functions found in your project
    using a bubble chart. Each bubble represents a specific function, and the
    size of the bubble corresponds to the complexity. This allows you to quickly
    identify the most complex functions and prioritize your code improvement
    efforts.</p>

    <p>The plugin is a sample of how to recreate the chart on the welcome
    page, and also allows changing the metric to another Cyclomatic metric.
    </p>

   <br><img src=".doc/cyclomatic_demo.svg"/>
  '''

def tags():
  return [
    'Target: Files',
    'Target: Classes',
    'Target: Architectures',
    'Target: Project',
    'Layout: Flat Bubble',
    'Welcome Page',
    'Demo',
  ]

def test_global(db):
  return kind_util.can_contain_functions(db)

def test_architecture(arch):
  return kind_util.can_contain_functions(arch)

def test_entity(ent):
  return kind_util.can_contain_functions(ent)

def init(graph, target):
  graph.options().define("Metric", ["Cyclomatic", "CyclomaticModified", "CyclomaticStrict", "CyclomaticStrictModified"], "Cyclomatic")
  # Messy, since we really just want to pass in an integer, but support integers
  # between 3 and 21
  cutoffs = []
  for i in range(3,22):
    cutoffs.append(str(i))
  graph.options().define("Top", cutoffs, "7")

# Report generation
def draw(graph, target):
  graph.set("layout", "flatbubble") # Override default layout algorithm (Usually dot)
  graph.default("fontcolor", "#FFFFFF", "node")

  complexity = dict()
  ents = kind_util.list_functions(target)

  met = graph.options().lookup("Metric")
  for ent in ents:
    val = ent.metric(met)
    if val:
      complexity[ent] = val

  cur = 0
  top = int(graph.options().lookup("Top"))
  for ent, val in sorted(complexity.items(),key=lambda item: item[1], reverse=True):
    n = graph.node(str(val))
    n.set("area",str(val))
    n.sync(ent)
    n.set("color", COLORS[cur % len(COLORS)])
    n.set("fillcolor", COLORS[cur % len(COLORS)])
    cur += 1
    if cur >= top:
      break # Only show top values

