# A sample treemap chart
import und_lib.graphs.und_colors as und_colors # This is a local file, make sure to copy if this plugin is copied

sizeMetric = "CountLineCode"
colorMetric = "MaxCyclomatic"

def name():
  return "Treemap Demo"

def description():
  return '''Visualize the architecture hierarchy using a treemap
    <p>This plugin visualizes the architecture hierarchy using a treemap, where
    each rectangle represents a component in the architecture. The size of the
    rectangle corresponds to the component's lines of code, and the color
    represents its cyclomatic complexity. This combined representation provides
    insights into both the size and complexity of different parts of your
    codebase.</p>

    <p>The treemap layout allows for efficient use of space and clear
    visualization of hierarchical relationships. By observing the size and color
    variations in the treemap, you can identify areas of high complexity or
    large code concentration, which might require further attention or
    refactoring.</p>
  '''

def test_architecture(arch):
  return True;

def draw(graph, arch):
  graph.set("layout","treemap")

  # Init color scale
  color_scale = und_colors.ColorScale(True)
  for ent in arch.ents(True):
    color_scale.update_val_range(ent.metric(colorMetric))

  # Recursively draw the architecture
  clusters = {arch.parent() : graph}
  drawArch(arch, clusters, color_scale)

def drawArch(arch, clusters, color_scale):
  # create a cluster for this architecture
  par = clusters.get(arch.parent())
  cluster = par.cluster(arch.name(),arch)
  clusters[arch] = cluster

  # Recurse on architecture children. This treemap colors clusters by the max
  # color of it's children, so track max color value
  archColorValue = 0
  for child in arch.children():
    childColorValue = drawArch(child, clusters, color_scale)
    archColorValue = max(archColorValue, childColorValue)

  # Add the entity nodes
  for ent in arch.ents(False):
    # Size value
    size = ent.metric(sizeMetric)
    if not size:
      continue

    tooltip = "{}\n{}={}".format(ent.longname(),sizeMetric, size)
    # Color Value
    entColorValue = ent.metric(colorMetric)
    if entColorValue is not None:
      archColorValue = max(archColorValue, entColorValue)
      tooltip += "\n{}={}".format(colorMetric, entColorValue)

    n = cluster.node(ent.name(),ent)
    n.set("area", str(size))
    n.set("tooltip", tooltip)
    color_scale.set_colors(n, entColorValue)

  # Set the color for this architecture
  color_scale.set_colors(cluster, archColorValue)

  # Return the max for the parent
  return archColorValue
