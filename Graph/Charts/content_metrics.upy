import und_lib.kind_util as kind_util
import und_lib.graphs.und_colors as und_colors
import understand

METRICS_BY_KIND = {
  "c file ~unresolved ~unknown" : [
    "CountCFileLocalFunctions",
    "CountCFileLocalConstants",
    "CountCFileLocalVariables",

    "CountCFileGlobalFunctions",
    "CountCFileGlobalConstants",
    "CountCFileGlobalVariables",

    "CountCFileLocalMacros",
    "CountCFileLocalTypes",
    "CountCFileLocalFunctionStaticVariables",

    "CountCFileGlobalMacros",
    "CountCFileGlobalTypes",
    "CountCFileMemberVariables",

    # These metrics overlap with metrics above
    #"CountCFileMemberFunctions",
    #"CountCFileMemberTypes",

  ],
  "c class ~unresolved, c struct ~unresolved" : [
    "CountDeclInstanceVariablePublic",
    "CountDeclInstanceVariablePrivate",
    "CountDeclInstanceVariableProtected",
    "CountDeclMethodPublic",
    "CountDeclMethodPrivate",
    "CountDeclMethodProtected",
  ]
}

def name():
  return "Content Metrics"

def description():
  return '''<p>Display content metrics in a flat bubble chart.</p>

   <br><img src=".doc/content_metrics.svg"/>
  '''

def tags():
  return [
    'Target: Files',
    'Target: Classes',
    'Language: C',
    'Language: C++',
    'Layout: Flat Bubble'
  ]

def test_global(db):
  return False

def test_architecture(arch):
  return False

def test_entity(ent):
  for kstr in METRICS_BY_KIND.keys():
    if ent.kind().check(kstr):
      return True
  return False

def init(graph, ent):
  pass

# Report generation
def draw(graph, ent):
  graph.set("layout", "flatbubble") # Override default layout algorithm (Usually dot)

  colors = und_colors.DiscreteColorScale()

  mets = []
  for kstr, m in METRICS_BY_KIND.items():
    if ent.kind().check(kstr):
      mets = m
      break

  vals = ent.metric(mets)
  for met, val in sorted(vals.items(),key=lambda i: i[1], reverse=True):
    if not val:
      continue
    n = graph.node("{}\n{}".format(val, "\n".join(understand.Metric.name(met).split())))
    n.set("tooltip", "{} {}".format(val, understand.Metric.name(met)))
    n.set("area",str(val))
    colors.set_colors(n, idx=mets.index(met))
