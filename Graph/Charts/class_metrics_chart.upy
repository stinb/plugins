# This plugin relies on local imports that must be copied if this plugin
# is copied.

import und_lib.kind_util as kind_util
from und_lib.graphs.metric_charts import SizeColorMetricChart, list_class_metrics
import understand

def name():
  return "Classes Metric Chart"

def description():
  return '''Visualize the classes in the project / architecture / file.

  <p>This chart allows selecting a size metric and a color metric. Classes are
  nodes with size determined by size metric and the color scaled by color metric.
  The layout can be either flat bubble or a treemap. </p>
  '''

def test_global(db):
  return kind_util.can_contain_classes(db)

def test_architecture(arch):
  return kind_util.can_contain_classes(arch)

def test_entity(ent):
  return kind_util.can_contain_classes(ent)

def init(graph, target):
  metlist = list_class_metrics(graph.db())
  graph.options().define("Size Metric", metlist, "CountLine")
  graph.options().define("Color Metric", ["None"] + metlist, "CountDeclMethod")
  SizeColorMetricChart.define_options(graph, labels="Size Metric Value", layout_target=target)

def draw(graph, target):
  cmetric = graph.options().lookup("Color Metric")
  smetric = graph.options().lookup("Size Metric")

  layout = graph.options().lookup("Layout")
  if layout == "hiearchical_treemap" or layout == "sunburst":
    chart = ClassChildren(graph, smetric, cmetric)
    chart.hierarchical_draw(graph, target)
  else:
    chart = SizeColorMetricChart(graph, smetric, cmetric)
    chart.flat_draw(graph, kind_util.list_classes(target))

class ClassChildren(SizeColorMetricChart):
  def __init__(self, graph, smetric, cmetric):
    super().__init__(graph, smetric, cmetric)

  def target_node_children(self, target, recursive=False):
    return kind_util.list_classes(target, arch_recursive=recursive)

