import understand

def name():
  """
  Required, the name of the graph.
  """
  return "Tutorial: Architecture Tree"

def description():
  return '''
Visually displays the hierarchical structure of a software architecture.

<p>This plugin provides a graphical representation of the parent-child relationships within an Understand architecture. 
It starts from a selected architecture and recursively displays its children, creating a tree-like structure where each 
node represents an architectural component. This allows developers to easily understand the organization of different components 
within the system.
<br>
<p>Blog Article: <a href="https://blog.scitools.com/making-a-custom-architecture-tree/">Making a Custom Architecture Tree</a></p>
<br>
<b>Example:</b><br>
<img src=".doc/archTree.png">
'''

def test_architecture(arch):
  """
  Optional, return True if the graph exists for the given architecture

  If True, this graph will appear in the Graphical Views menu for the
  architecture.
  """
  return True;

def init(graph, target):
  """
  Initialize the graph

  This function is called once on graph creation. Use it to define the
  available graph options and/or a legend.
  """
  pass

def grabNode(graph, nodes, arch):
  """
  This is a custom function for this script to get a graphviz node
  """
  if arch in nodes:
    node = nodes[arch]
  else:
    node = graph.node(arch.name())
    node.sync(arch); # architectures must be synced instead of given at creation
    nodes[arch] = node

  return node


def draw(graph, target):
  """
  Draw the graph

  The second argument can be a database or an entity depending on whether
  the graph was created at a project level or entity level.
  """

  graph.set("rankdir", "LR")

  # store the arch->graphviz node so that each arch node appears only
  # once no matter how many edges
  nodes = dict()

  curLevel = []
  curLevel.append(target)

  while curLevel:
    nextLevel = []
    for arch in curLevel:
      tail = grabNode(graph, nodes, arch)
      for child in arch.children():
        edge = graph.edge(tail,grabNode(graph,nodes,child))
        nextLevel.append(child)
    curLevel = nextLevel
