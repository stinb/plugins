# The original Calls With Global Objects graph plugin. This plugin has been
# replaced with a Python version.

use base ("Understand::Graph::Gv");
use strict;

our $ent_filter =
  "function ~unknown ~unresolved," .
  "method ~unknown ~unresolved," .
  "procedure ~unknown ~unresolved," .
  "vhdl process, vhdl architecture," .
  "cobol paragraph, cobol section";

our $ref_filter = "call, cobol perform, cobol goto";

our %funcEnts;
our %globals;

sub name { return "Calls"; }
sub style { return "Perl With Global Objects (Classic)"; }

sub test_entity {
  my $entity = shift;
  return ($entity->kind()->check($ent_filter)) ? 1 : -1;
}

sub test_global { return -1; }


sub init {
  my $graph = shift;
  %funcEnts = ();
  %globals = ();

  $graph->options->define("Calls Depth", [ "1", "2", "3", "4", "5", "All" ], "3");
  $graph->options->define("Name", ["Shortname", "Fullname", "None (Overview Mode)"], "Shortname");
  $graph->options->define("File Name", ["Shortname", "Fullname", "Relative", "None"], "None");
  $graph->options->define("Unresolved", ["On", "Off"], "On");
  $graph->options->define("References", ["Simple", "All"], "All");
}


sub do_load {
  my $graph = shift;
  my $ent = shift;

  $graph->default("rankdir", "LR", "graph");
  $graph->default("color","#90c4e4","node");
  $graph->default("shape","box","node");
  $graph->default("color","#4e8cb9","edge");

  my %nodes;
  %funcEnts = ();
  %globals = ();
  if ($ent) {
    draw_function($graph, $ent, \%nodes, 0);
  } else {
    foreach my $ent ($graph->db->ents($ent_filter)) {
      next if !$ent->ents($ref_filter);
      next if get_node($graph, $ent, \%nodes, 0);
      draw_function($graph, $ent, \%nodes, 0);
    }
  }

  #Draw Global objects and lines to them.
  foreach my $ent(values %funcEnts){
    my %alreadyLinked; #Use this to only show each function/global relationship once
    my @globRefs = $ent->refs("~modify set, ~modify init","global object", 1);
    foreach my $ref (@globRefs){
      my $objNode = get_global_node($graph, $ref->ent, \%nodes);
      my $edge = $graph->edge($nodes{$ent->id}, $objNode);
      $edge->set("color", "#569f38"); #green lines for init/set
      if ($graph->options->lookup("References") eq "All") {
        $edge->set("label", $ref->kindname()) ;
        $edge->sync($ref->file(), $ref->line(), $ref->column());
      }
      $alreadyLinked{$ref->ent->id} = 1;
    }

    @globRefs = $ent->refs("~modify ~set ~init","global object",1);
    foreach my $ref (@globRefs){
      next if $alreadyLinked{$ref->ent->id} && $graph->options->lookup("References") eq "Simple";
      my $objNode = get_global_node($graph, $ref->ent, \%nodes);
      my $edge = $graph->edge($nodes{$ent->id}, $objNode);
      $edge->set("color", "#4e8cb9"); #blue lines for read
      if ($graph->options->lookup("References") eq "All") {
        $edge->set("label", $ref->kindname()) ;
        $edge->sync($ref->file(), $ref->line(), $ref->column());
      }
      $alreadyLinked{$ref->ent->id} = 1;
    }
    @globRefs = $ent->refs("modify ~set ~init","global object",1);
    foreach my $ref (@globRefs){
      next if $alreadyLinked{$ref->ent->id} && $graph->options->lookup("References") eq "Simple";
      my $objNode = get_global_node($graph, $ref->ent, \%nodes);
      my $edge = $graph->edge($nodes{$ent->id}, $objNode);
      $edge->set("color", "#e45721"); #red lines for modify
      if ($graph->options->lookup("References") eq "All") {
        $edge->set("label", $ref->kindname()) ;
        $edge->sync($ref->file(), $ref->line(), $ref->column());
      }
      $alreadyLinked{$ref->ent->id}=1;
    }
  }
}

sub get_global_node{
  my $graph = shift;
  my $ent = shift;
  my $nodes = shift;

  # node already exists
  my $id = $ent->id();
  return $$nodes{$id} if exists $$nodes{$id};

  # create node
  my $node = $graph->node($ent,$ent->name);
  $$nodes{$id} = $node;
  $node->set("shape", "oval");
  return $node;
}

sub get_node {
  my $graph = shift;
  my $ent = shift;
  my $nodes = shift;
  my $create = shift;

  # node already exists
  my $id = $ent->id();
  return $$nodes{$id} if exists $$nodes{$id};

  # don't create new node
  return 0 if !$create;

  # label
  my $label;
  if ($graph->options->lookup("Name") eq "Fullname") {
    $label .= $ent->longname;
  } elsif ($graph->options->lookup("Name") eq "Shortname") {
    $label .= $ent->name;
  }

  my $deffile = $ent->ref("definein,declarein");
  if ($deffile && $graph->options->lookup("File Name") ne "None" && !$ent->kind->check("file")) {
    $label .= "\n".$deffile->file->name      if $graph->options->lookup("File Name") eq "Shortname";
    $label .= "\n".$deffile ->file->longname if $graph->options->lookup("File Name") eq "Fullname";
    $label .= "\n".$deffile->file->relname   if $graph->options->lookup("File Name") eq "Relative";
  }

  # create node
  my $node = $graph->node($ent, $label);
  $$nodes{$id} = $node;

  return $node;
}


sub draw_function {
  my $graph = shift;
  my $ent = shift;
  my $nodes = shift;
  my $depth = shift;

  my $opt_depth = $graph->options->lookup("Calls Depth");
  $opt_depth = 99 if $opt_depth eq "All";
  return 0 if $depth > $opt_depth;
#  return 0 if $graph->options->lookup("Unresolved") eq "Off" && $ent->kind->check("unresolved, unknown, undefined");

  $funcEnts{$ent->id} = $ent;

#  my $node = get_node($graph, $ent, $nodes, 0);
#  return $node if $node && $depth > 0;
#  $node = get_node($graph, $ent, $nodes, 1);


  my $node = get_node($graph, $ent, $nodes, 1);
#  my @refs = $ent->refs($ref_filter, $ent_filter, 1);

  my @refs;
#  if ($depth == 0) {
#    @refs = $ent->refs($ref_filter, $ent_filter, 0);
#  } else {
    @refs = $ent->refs($ref_filter, $ent_filter, 1);
#  }


  foreach my $ref (@refs) {
    my $child = $ref->ent();
    return 0 if $depth == $opt_depth && $child->kind->check($ent_filter);

    my $child_node = get_node($graph, $child, $nodes, 0); # don't create
    if ($child_node) {
      $graph->edge($node, $child_node);
    } else {
      $child_node = get_node($graph, $child, $nodes, 1); # create
      $graph->edge($node, $child_node);
      draw_function($graph, $child, $nodes, $depth+1);
    }
  }
}
