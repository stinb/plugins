def name():
  return 'Object References'

def description():
  return '''
This plugin creates a graph of references to/from the object

<p>It can include function/method calls and inactive (gray) text references. 
The references are color-coded, and you can choose the layout (horizontal or vertical) and whether to include the type in the labels.
</p>

<br>
<b>Example:</b><br>
<img src=".doc/objectReferences.png">
'''

def style():
  return 'Classic'

def is_enabled_by_default():
  return True

def test_entity(entity):
  return entity.kind().check("Object, Macro, Variable, Field, Property")

def init(graph, entity):
  # Options
  graph.options().define("Layout", ["Horizontal", "Vertical"], "Vertical")
  graph.options().define("Type", ["Off", "On"], "Off")
  graph.options().define("References", ["Simple", "All"], "All")
  graph.options().define("Define/Declare", ["Off", "On"], "Off")
  graph.options().define("Set", ["Off", "On"], "On")
  graph.options().define("Use", ["Off", "On"], "On")
  graph.options().define("Modify", ["Off", "On"], "On")

  # Legend
  graph.legend().define("entStart", "ellipse", "Object Graphed", "", "", 0,0)
  graph.legend().define("entFn", "roundedrect", "Function/Method", "#90c4e4", "", 1,0)
  graph.legend().define("entOther", "roundedrect", "General Entity", "", "", 2,0)
  graph.legend().define("refInactive", "arrow", "Ref: Inactive (Gray Text)", "#8f8f8f", "#8f8f8f", 3,0)

  graph.legend().define("refUseby", "arrow", "Ref: Use by", "#4e8cb9", "#4e8cb9", 0,1)
  graph.legend().define("refSetby", "arrow", "Ref: Set by", "#569f38", "#569f38", 1,1)
  graph.legend().define("refModby", "arrow", "Ref: Modify by", "#e45721", "#e45721", 2,1)
  graph.legend().define("refDefDec", "arrow", "Ref: Define/Declare in", "#8f8f8f", "#8f8f8f", 3,1)


def draw(graph, entity):
  # defaults
  graph.default('shape', 'box', 'node')
  if graph.options().lookup("Layout") == "Horizontal":
    graph.default('rankdir', 'LR', 'graph')
  else:
    graph.default('rankdir', 'TB', 'graph')

  # start node
  label = ""
  if graph.options().lookup("Type") == "On":
    type = entity.type()
    if not type:
      type = "unknown"
    label += type + "\n"
  label += entity.longname()
  node = graph.node(label, entity)
  node.set("shape","oval")

  # build refs
  uniq = graph.options().lookup("References") == "Simple"
  refs = []
  if graph.options().lookup("Define/Declare") == "On":
    refs += entity.refs("Definein,Declarein", unique=uniq)

  if graph.options().lookup("Set") == "On":
    refs += entity.refs("SetBy Init",unique=uniq)
    refs += entity.refs("SetBy ~Init",unique=uniq)
  if graph.options().lookup("Modify") == "On":
    refs += entity.refs("Modifyby",unique=uniq)
  if graph.options().lookup("Use") == "On":
    refs += entity.refs("UseBy Return", unique=uniq)
    refs += entity.refs("UseBy ~Return", unique=uniq)

  for ref in refs:
    refent = ref.ent()
    label = ""
    if refent.kind().check("file"):
      label = refent.name()
    else:
      label = refent.longname()

    if not uniq:
      label += "\n" + ref.file().name() + "(" + str(ref.line()) + ")"

    refnode = graph.node(label, refent)
    refnode.set("shape", "rectangle")
    if refent.kind().check("Function, Method"):
      refnode.set("color", "#90c4e4")

    if ref.kind().check("UseBy, TypedBy"):
      edge = graph.edge(node, refnode)
    else:
      edge = graph.edge(refnode, node)
    edge.set("label", ref.kindname())
    if not uniq:
      edge.sync(ref)

    if ref.kind().check("UseBy"):
      edge.set("color", "#4e8cb9")
    if ref.kind().check("Setby"):
      edge.set("color", "#569f38")
    if ref.kind().check("Modifyby"):
      edge.set("color", "#e45721")
    if ref.kind().check("Definein, Declarein"):
      edge.set("color", "#8f8f8f")
    if ref.kind().check("Inactive"):
      edge.set("color", "#8f8f8f")
      edge.set("fontcolor", "#8f8f8f")




