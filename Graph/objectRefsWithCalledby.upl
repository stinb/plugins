# The original Object References with Called By graph plugin. This plugin has
# been replaced with a Python version.

use base ("Understand::Graph::Gv");
use strict;

our $result;
our $callbykind =
  "ada callby,"
  ."c callby ~inactive, c useby ptr,"
  ."cobol callby,"
  ."csharp callby, csharp useby ptr,"
  ."fortran callby,"
  ."java callby,"
  ."jovial callby, jovial asm useby,"
  ."pascal callby,"
  ."vhdl callby,"
  ."php callby";
our $objectrefkind = "setby, useby, modifyby, definein";


sub name { return "Object References"; }
sub style { return "Perl With Called By (Classic)"; }

sub test_entity {
  my $entity = shift;

  return $entity->kind()->check("Object, Macro, Variable, Field, Property") ? 1 : -1;
}

sub test_global { return -1; }

sub init {
  my $graph = shift;

  $graph->options->define("Type", ["Off", "On"], "Off");
  $graph->options->define("Called By Depth", [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ], "3");
  $graph->options->define("Name", ["Shortname", "Fullname", "None (Overview Mode)"], "Shortname");
  $graph->options->define("Filename", ["Shortname", "Fullname", "Relative", "None"], "None");
  $graph->options->define("Unresolved", ["On", "Off"], "On");
  $graph->options->define("References", ["Simple", "All"], "All");
}


sub do_load {
  my $graph  = shift;
  my $entity = shift;

  $graph->default("rankdir", "LR", "graph");
  $graph->default("color","#90c4e4","node");
  $graph->default("shape","box","node");
  $graph->default("color","#4e8cb9","edge");

  # create start node
  my %nodes = ();
  my $start = get_node(\%nodes, $graph, $entity, 1);
  my %save_nodes = %nodes;

  # draw inverse relations
  %nodes = %save_nodes;
  draw_tree($graph, $entity, \%nodes, 0);
}


sub get_node {
  my $nodes = shift;
  my $graph = shift;
  my $ent = shift;
  my $create = shift;

  my $id = $ent->id();

  # return existing node
  return $$nodes{$id} if exists($$nodes{$id});

  # don't create new node
  return 0 if !$create;

  # build label
  my $label = " ";
  if ($graph->options->lookup("Type") eq "On" && $ent->kind->check("Object, Variable, Field, Property")) {
    $label = ($ent->type() ? $ent->type() : "unknown")."\n";
  }
  if ($graph->options->lookup("Name") eq "Fullname") {
    $label .= $ent->longname;
  } elsif ($graph->options->lookup("Name") eq "Shortname") {
    $label .= $ent->name;
  }

  my $filenameopt = $graph->options->lookup("File Name");
  my $deffile = $ent->ref("definein, declarein");

  if ($deffile && $filenameopt ne "None" && ! $ent->kind->check("file")) {
    $label .= "\n".$deffile->file->name      if $filenameopt eq "Shortname";
    $label .= "\n".$deffile ->file->longname if $filenameopt eq "Fullname";
    $label .= "\n".$deffile->file->relname   if $filenameopt eq "Relative";
  }
  $label =~ s/\\/\\\\/g;

  # build node
  my $node = $graph->node($ent, $label);
  $$nodes{$id} = $node;

  if ($ent->kind->check("object, variable, field, property")) {
    $node->set("shape", "oval");
  }
  if ($ent->kind->check("unresolved, unknown, undefined")) {
    $node->set("shape", "octagon");
    $node->set("color", "#8f8f8f");
  }

  return $node;
}

sub draw_tree {
  my $graph    = shift;
  my $ent      = shift;
  my $nodes    = shift;
  my $depth    = shift;

  # don't draw some entities
  return 0 if $depth > $graph->options->lookup("Called By Depth");
  return 0 if $graph->options->lookup("Unresolved") eq "Off" && $ent->kind->check("unresolved, unknown, undefined");

  # lookup existing node
  my $start = get_node($nodes, $graph, $ent, 0);
  return $start if $start && $depth > 0;

  my @refs;
  if ($depth == 0) {
    $start = get_node($nodes, $graph, $ent, 1) if !$start;
    @refs = $ent->refs($objectrefkind, "", 0);
  } else {
    $start = get_node($nodes, $graph, $ent, 1) if !$start;
    @refs = $ent->refs($callbykind, "", 1);
  }


  # process refs
  my %children;
  foreach my $ref (sort { $a->line <=> $b->line; } @refs) {
    my $child = $ref->ent;
    my $node = draw_tree($graph, $child, $nodes, $depth+1);
#    if ($node && !exists($children{$node})) {
    if ($node) {
      my $edge = $graph->edge($node, $start);

      $edge->set("color", "#4e8cb9") if $ref->kind->check("Useby");
      $edge->set("color", "#569f38") if $ref->kind->check("Setby");
      $edge->set("color", "#e45721") if $ref->kind->check("Modifyby");
      $edge->set("color", "#8f8f8f") if $ref->kind->check("Definein");
      if ($graph->options->lookup("References") eq "All") {
        unless ($ref->kind->check("Callby")) {
          $edge->set("label", $ref->kindname()) ;
          $edge->sync($ref->file(), $ref->line(), $ref->column());
        }
    }
      $children{$node} = 1;
    }
  }
  return $start;
}


