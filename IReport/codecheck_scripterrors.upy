# Interactive Report using codecheck

def name():
  return "Inspection Errors"

def description():
  return '''CodeCheck Inspection Errors
    <p>This report gives a summary of a CodeCheck inspection followed by
    a detailed list of errors that occurred during the inspection. </p>

    <br><img src=".doc/inspection_errors.png"/>
  '''

def tags():
  return [
    'Target: CodeCheck'
  ]

def test_inspection(inspection):
  return True

# Report generation
def generate(report, inspection):
  vlist = inspection.violations()
  cnt = len(vlist)

  # Find summary information
  summary = {
    "Total Violations" : cnt,
    "Checks" : len(inspection.config().checks()) if inspection.config() else 0,
    "Files" : len(inspection.files()),
    "Errors" : len(inspection.errors()),
    "Start" : inspection.start_time(),
    "End" : inspection.end_time()
  }

  # Find out if a violation was ignored and how
  hadIgnores = False
  for v in vlist:
    if v.ignores():
      hadIgnores = True
      visited = set()
      for src, note in v.ignores():
        if not src in visited:
          visited.add(src)
          summary[src] = summary.get(src,0) + 1
    else:
      summary["Violations"] = summary.get("Violations",0) + 1

  report.heading(2)
  report.print("Summary")
  report.heading()

  report.table(["Name", "Value"])
  for k,v in sorted(summary.items(),key=lambda item: item[0]):
    report.tablecell()
    report.print(k)
    report.tablecell()
    report.print(str(v))
  report.table()



  if inspection.errors():
    report.heading(2)
    report.print("Errors: {}".format(len(inspection.errors())))
    report.heading()

    for idx, err in enumerate(inspection.errors()):
      report.heading(3)
      report.print(str(idx+1))
      report.heading()
      report.print(err)

  else:
    report.heading(2)
    report.print("No Errors")
    report.heading()



