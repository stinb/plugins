# Dump entity/architecture data using the Understand API

import understand

FREETEXT_KEYS = [
  "AllowExceptions",
  "AttrArrayComponentSize",
  "AttrArrayIndexRanges",
  "AttrComponentFirstBit",
  "AttrComponentLastBit",
  "AttrComponentPosition",
  "AttrRecordAlignment",
  "AttrTypeSize",
  "Bitfield",
  "DefinedInMacro",
  "InitText",
  "InitValue",
  "Inline",
  "InterruptPriority",
  "Linkage",
  "Noexcept",
  "Parameters",
  "Priority",
  "TemplateArguments",
  "ThrowExceptions",
  "UnderlyingType"
]

# overrides
def name():
  return "API Info"

def description():
  return '''Displays Understand API information for the selected entity, architecture, or metric.
    <p>This plugin is primarily intended to help developers learn how to use the Understand API.
    It displays the same information available to Understand plugins when using the API.
    The output of the plugin can be helpful when developing or debugging a plugin.
    For more detailed API documentation, please refer to the Understand API documentation,
    available in the Understand Help menu or
    <a href="https://docs.scitools.com/manuals/python/index.html">online</a>.</p>

    <p>See also the <a href="und://plugin/ireport/API%20Info%20Table">
    API Info Table</a> report which displays the same information in a table
    format instead of a tree.</p>

    <br><img src=".doc/api_info.png">
    '''

def tags():
  return [
    'Target: Files',
    'Target: Functions',
    'Target: Objects',
    'Target: Classes',
    'Target: Architectures',
    'API',
  ]

def is_enabled_by_default():
  return True

def test_global(db):
  return False

def test_entity(ent):
  return True

def test_architecture(arch):
  return True

def init(report):
  pass

def generate(report, target):
  if isinstance(target, understand.Arch):
    report.print("Architecture Information as reported by the API")
    report.tree(1, 1)
    tree_title(report, 1, target.name())

    report.tree(2, 1)
    print_line(report, 2, "name", target.name())
    print_line(report, 2, "longname", target.longname())
    if parent := target.parent():
      print_line(report, 2, "parent", parent.name())

    # children
    if children := target.children():
      tree_title(report, 2, "children ({})".format(len(children)))
      report.tree(3, 0)
      for ent in sorted(children, key=lambda arch: arch.name()):
        print_line(report, 3, "child", ent.name())

    # ents
    if ents := target.ents():
      tree_title(report, 2, "ents({})".format(len(ents)))
      report.tree(3, 0)
      for ent in sorted(ents, key=lambda ent: ent.longname()):
        print_ent_line(report, 3, "ent", ent)

    print_dependency_tree(report, target, 2, False)
    print_dependency_tree(report, target, 2, True)

    # metrics
    if metrics := target.metrics():
      tree_title(report, 2, "metrics")
      report.tree(3, 0)
      for key, value in target.metric(metrics).items():
        description = understand.Metric.description(key)
        print_line(report, 3, key, value, description)

    report.tree()
    report.print("\n")
    return

  assert isinstance(target, understand.Ent)
  report.print("Entity Information as reported by the API")
  report.tree(1, 1)
  tree_title(report, 1, target.name())

  # comments
  tree_title(report, 2, "comments")
  report.tree(3, 0)
  print_line(report, 3, "before", target.comments("before"))
  print_line(report, 3, "after", target.comments("after"))

  # contents
  tree_title(report, 2, "contents")
  report.tree(3, 0)
  print_line(report, 3, None, target.contents())

  # control flow graph
  print_control_flow_graph(report, target)

  # dependencies
  print_dependency_tree(report, target, 2, False)
  print_dependency_tree(report, target, 2, True)

  # ents
  if ents := target.ents(""):
    tree_title(report, 2, "ents")
    report.tree(3, 0)
    for ent in sorted(ents, key=lambda ent: ent.longname()):
      print_ent_line(report, 3, None, ent)

  # freetext - undocumented
  tree_title(report, 2, "freetext")
  report.tree(3, 0)
  for key in FREETEXT_KEYS:
    print_line(report, 3, key, target.freetext(key))

  print_line(report, 2, "id", target.id())
  print_line(report, 2, "kindname", target.kindname())
  print_line(report, 2, "kind.longname", target.kind().longname())
  print_line(report, 2, "language", target.language())
  print_line(report, 2, "library", target.library())
  print_line(report, 2, "longname", target.longname())

  # metrics
  if metrics := target.metrics():
    tree_title(report, 2, "metrics")
    report.tree(3, 0)
    for key, value in target.metric(metrics).items():
      description = understand.Metric.description(key)
      print_line(report, 3, key, value, description)

  print_line(report, 2, "name", target.name())

  if parameters := target.parameters():
    print_line(report, 2, "parameters", parameters)

  if parent := target.parent():
    print_ent_line(report, 2, "parent", parent)

  print_line(report, 2, "parsetime", target.parsetime())

  # refs
  print_refs(report, target, "refs", target.refs())
  #print_refs(report, target, "filerefs", target.filerefs())

  print_line(report, 2, "relname", target.relname())
  print_line(report, 2, "simplename", target.simplename())
  print_line(report, 2, "type", target.type())
  print_line(report, 2, "uniquename", target.uniquename())
  print_line(report, 2, "value", target.value())

  report.tree()
  report.print("\n")

# utility functions
def print_refs(report, target, title, refs):
  if not refs:
    return

  tree_title(report, 2, title)
  report.tree(3, 0)

  for ref in sorted(refs, key=lambda ref: ref.file().name() + str(ref.line())):
    file = ref.file()
    kind = ref.kind().longname()
    report.tree(3, 0)
    report.syncfile(file.longname(), ref.line(), ref.column())
    report.print("{} ({}) {}".format(file.name(), ref.line(), kind))
    report.syncfile()
    report.tree(4, 0)
    print_line(report, 4, "kind.longname", kind)
    print_ent_line(report, 4, "ent.name", ref.ent())
    print_ent_line(report, 4, "scope.name", ref.scope())
    print_line(report, 4, "file.longname", file.longname())
    print_line(report, 4, "line", ref.line())
    print_line(report, 4, "column", ref.column())
    if target.kind().check("c macro") and ref.kind().check("useby ~inactive"):
      lexer = ref.file().lexer(False, 8, True, True)
      if not lexer:
        continue
      text = ""
      lexeme = lexer.lexeme(ref.line(), ref.column())
      while (lexeme and lexeme.line_begin() == ref.line() and
             lexeme.column_begin() == ref.column()):
        text += lexeme.text()
        lexeme = lexeme.next()
      print_line(report, 4, "macro expansion", text)

def print_dependency_tree(report, target, depth, dependsby):
  deps = {}
  if dependsby:
    deps = target.dependsby()
    if deps:
      tree_title(report, depth, "dependsby({})".format(len(deps)))
  else:
    deps = target.depends()
    if deps:
      tree_title(report, depth, "depends({})".format(len(deps)))

  if deps and len(deps) < 250:
    report.tree(depth + 1, 0)
    for target in sorted(deps.keys(), key=lambda target: target.longname()):
      report.tree(depth + 1)
      if isinstance(target, understand.Ent):
        report.entity(target)
        report.print(target.name())
        report.entity()
      else:
        report.print(target.name())
      for ref in deps[target]:
        if ref.file().library():
          continue
        file = ref.file()
        kind = ref.kind().longname()
        report.tree(depth + 2)
        report.syncfile(file.longname(), ref.line(), ref.column())
        report.print("{} ({}) {}".format(file.name(), ref.line(), kind))
        report.syncfile()
        report.tree(depth + 3, 0)
        print_line(report, depth + 3, "kind.longname", kind)
        print_ent_line(report, depth + 3, "ent.name", ref.ent())
        print_ent_line(report, depth + 3, "scope.name", ref.scope())
        print_line(report, depth + 3, "file.longname", file.longname())
        print_line(report, depth + 3, "line", ref.line())
        print_line(report, depth + 3, "column", ref.column())

def print_control_flow_graph(report, ent):
  cfg = ent.control_flow_graph()
  if not cfg:
    return

  tree_title(report, 2, "control_flow_graph")
  report.tree(3, 0)
  for node in cfg.nodes():
    report.tree(3, 0)
    report.print(node_id(node))
    report.tree(4, 0)
    if children := node.children(understand.CFNode_Normal):
      report.bold()
      report.print("node.children({})".format(len(children)))
      report.nobold()
      for child in children:
        report.tree(5, 0)
        if label := node.child_label(child):
          report.bold()
          report.print("{}: ".format(label))
          report.nobold()
        report.print(node_id(child))
    if column_begin := node.column_begin():
      print_line(report, 4, "column_begin", column_begin)
    if column_end := node.column_end():
      print_line(report, 4, "column_end", column_end)
    if end := node.end_node():
      print_line(report, 4, "end_node", node_id(end))
    if line_begin := node.line_begin():
      print_line(report, 4, "line_begin", line_begin)
    if line_end := node.line_end():
      print_line(report, 4, "line_end", line_end)
    print_line(report, 4, "kind", node.kind())

def node_id(node):
  line = node.line_begin()
  return "{}({})".format(node.kind(), line if line else "")

def tree_title(report, depth, title):
  report.tree(depth, 1)
  report.bold()
  report.print(title)
  report.nobold()

def print_line(report, depth, title, value, hover = None):
  if value is None:
    return

  text = str(value)
  if text.isspace():
    return

  report.tree(depth)
  if title and not title.isspace():
    report.bold()
    if hover:
      report.hover(hover)
    report.print("{}: ".format(title))
    if hover:
      report.hover()
    report.nobold()
  report.print(text)

def print_ent_line(report, depth, title, ent):
  if not ent:
    return

  report.tree(depth)
  if title and not title.isspace():
    report.bold()
    report.print("{}: ".format(title))
    report.nobold()
  report.entity(ent)
  report.print(ent.name())
  report.entity()

