import kind_util
import metricreports
import understand

# (id, name, enabled, languages)
LANG_EXCEPT_PYTHON=["Basic", "C++", "C#", "Java", "Pascal", "Web"]
CLASS_METRICS=[
  ("CountClassBase", "Base Classes [aka IFANIN]", True, None),
  ("CountClassDerived", "Derived Classes [aka NOC]", True, None),
  ("CountDeclClassMethod", "Class Methods", True, LANG_EXCEPT_PYTHON),
  ("CountDeclClassVariable", "Class Variables [aka NV]", True, LANG_EXCEPT_PYTHON),
  ("CountDeclInstanceMethod", "Instance Methods [aka NIM]", True, None),
  ("CountDeclInstanceVariable", "Instance Variables [aka NIV]", True, None),

  ("CountDeclInstanceVariableInternal", "Internal Instance Variables", False, ["C#"]),
  ("CountDeclInstanceVariablePrivate", "Private Instance Variables", False, ["C++", "C#", "Web"]),
  ("CountDeclInstanceVariableProtected",   "Protected Instance Variables", False, ["C++", "C#", "Web"]),
  ("CountDeclInstanceVariableProtectedInternal", "Protected Internal Instance Variables", False, ["C#"]),
  ("CountDeclInstanceVariablePublic", "Public Instance Variables", False, ["C++", "C#", "Web"]),

  ("CountDeclMethod", "Methods [aka WMC]", True, None),
  ("CountDeclMethodAll", "All Methods [aka RFC, NM]", True, None),

  ("CountDeclMethodConst", "Const Methods", False, ["C++"]),
  ("CountDeclMethodDefault", "Default Methods", False, ["Java"]),
  ("CountDeclMethodFriend", "Friend Methods [aka NF, NFM]", False, ["C++"]),
  ("CountDeclMethodInternal", "Internal Methods", False, ["C#"]),
  ("CountDeclMethodPrivate", "Private Methods [aka NPRM]", False, LANG_EXCEPT_PYTHON),
  ("CountDeclMethodProtected", "Protected Methods", False, LANG_EXCEPT_PYTHON),
  ("CountDeclMethodProtectedInternal", "Protected Internal Methods", False, ["C#"]),
  ("CountDeclMethodPublic", "Public Methods [aka PM, NPM]", False, LANG_EXCEPT_PYTHON),
  ("CountDeclMethodStrictPrivate", "Strict Private Methods", False, ["Pascal"]),
  ("CountDeclMethodStrictPublished", "Strict Published Methods", False, ["Pascal"]),

  ("CountDeclProperty", "Properties", True, ["C#","Pascal"]),
  ("CountDeclPropertyAuto", "Auto-Implemented Properties", False, ["C#"]),

  ("CountClassCoupled", "Coupled Classes [aka CBO]", False, ["Basic", "C++", "C#", "Java", "Pascal", "Python"]),
  ("MaxInheritanceTree", "Max Inheritance Tree [aka DIT]", True, ["C++","C#","Java","Pascal","Python","Web"]),
  ("PercentLackOfCohesion", "Percent Lack of Cohesion", True, ["Basic", "C++", "C#", "Java", "Pascal"]),
  ("PercentLackOfCohesionModified", "Percent Lack of Cohesion Modified", False, ["Basic","C#","Java","Pascal"]),
  ("CountClassCoupledModified", "Coupled Classes Modified", False, ["Basic","C#","Java","Pascal","Python"]),
]

def name():
  return "Class Metrics"

def description():
  options = []
  for id, name, enabled, langs in CLASS_METRICS:
    options.append("<li>{} ({})</li>".format(name, id))

  return '''<p>Display metrics for classes</p>
  <p>Create a table with each class metric as a column and each class in
  the file, architecture, or database as a row. Metric availability varies
  by project languages</p>
  <h3>Available Metrics</h3>
  <ul> {} </ul>
  '''.format("".join(options))

def test_global(db):
  return kind_util.can_contain_classes(db)

def test_architecture(arch):
  return kind_util.can_contain_classes(arch)

def test_entity(ent):
  return kind_util.can_contain_classes(ent)

def support_abort():
  return True

def init(report, target):
  mets = []
  met_opts=[]
  dblangs = report.db().language()
  for id, name, enabled, languages in CLASS_METRICS:
    if languages is None:
      languages = kind_util.CLASS_LANGUAGES
    if languages and not any(lang in dblangs for lang in languages):
      continue
    mets.append(id)
    met_opts.append((id, "Show {} ({})".format(id, name),enabled))

  def_color_metric = "PercentLackOfCohesion"
  report.options().checkbox("chart", "Show Chart", True)
  report.options().choice("size_metric", "Size Metric", mets, "CountDeclMethod")
  report.options().choice("color_metric", "Color Metric", ["None"] + mets, def_color_metric if def_color_metric in mets else "None")

  for id, txt, enabled in met_opts:
    report.options().checkbox(id, txt,enabled)


def generate(report, target, page):
  metrics = []
  names = dict()
  dblangs = report.db().language()
  for id, name, enabled, languages in CLASS_METRICS:
    if languages and not any(lang in dblangs for lang in languages):
      continue
    if report.options().lookup(id):
      metrics.append(id)
      names[id] = name

  if report.options().lookup("chart"):
    try:
      report.draw(target, "Classes Metric Chart", "Size Metric={};Color Metric={}".format(
        report.options().lookup("size_metric"), report.options().lookup("color_metric")))
    except Exception as e:
      report.print("Could not draw chart: {}".format(str(e)))

  ents = kind_util.list_classes(target, include_unresolved=True)
  metricreports.metricsTable(report, metrics, ents, names=names)
