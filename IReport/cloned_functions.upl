# Identify functions that are similar or identical.

use base ("Understand::IReport");
use Tie::RefHash;
use List::Util qw(min max);

my $verbose = 0;

sub name { return "Cloned Functions"; }

sub test_entity { return -1; }

sub test_global { return 1; }

sub support_progress { return 1; }

sub support_abort { return 1; }
our $abort_called;

sub abort{ $abort_called = 1; }

sub init {
    my $report = shift;
    $abort_called = 0;
    #$report->option->integer("TokenDifference", "Token Difference Percentage <=", 10);
    $report->option->integer("ContentSimilarity", "Contents Similarity (0~100) >=", 70);
    $report->option->integer("NameSimilarity", "Function Name Similarity (0~100) >=", 70);
}

sub generate {
    my $report = shift;
    
    my $opt_token_difference = 10;
    my $opt_content_similarity = $report->option->lookup("ContentSimilarity") / 100;
    my $opt_name_similarity = $report->option->lookup("NameSimilarity") / 100;
    
    my @ents = $report->db->ents("method ~unknown ~unresolved, function ~unknown ~unresolved, fortran subroutine ~unknown ~unresolved, fortran main program ~unknown ~unresolved, ada procedure ~unknown ~unresolved");
    my $num = @ents;
    my $cur = 1;
    my @entities = ();
    foreach my $ent (@ents) {
        next if ($report->db->language =~ /C#/i) && ($ent->longname =~ /^System|^Microsoft/i);
        my $tokens;
        my $definein = $ent->ref("definein");
        if ($definein) {
            my $file = $definein->file;
            my $lineNum = $definein ? $definein->line : 1;
            my $endLine = $ent->ref("end") ? $ent->ref("end")->line : $lineNum;
            my $lexer = $file->lexer;
			next unless $lexer;
            my $stream = $lexer->lexeme($lineNum, 0);
            while ($stream && $stream->line_end <= $endLine) {
                my $token;
                while ($stream->token ne 'Newline') {
                    my $t = $stream->token;
                    if    ($t eq 'Continuation')   { $token .= 'C' }
                    #elsif ($t eq 'Comment')        { $token .= 'M' }
                    elsif ($t eq 'EndOfStatement') { $token .= 'E' }
                    elsif ($t eq 'Identifier')     { $token .= 'I' }
                    elsif ($t eq 'Keyword')        { $token .= 'K' }
                    elsif ($t eq 'Label')          { $token .= 'L' }
                    elsif ($t eq 'Literal')        { $token .= 'T' }
                    #elsif ($t eq 'Newline')        { $token .= 'N' }
                    elsif ($t eq 'Operator')       { $token .= 'O' }
                    elsif ($t eq 'Preprocessor')   { $token .= 'P' }
                    elsif ($t eq 'Punctuation')    { $token .= 'U' }
                    elsif ($t eq 'String')         { $token .= 'S' }
                    #elsif ($t eq 'Whitespace')     { $token .= 'W' }
                    else { $token .= '' }
                    
                    $stream = $stream->next;
                }
                $tokens .= $token;
                $stream = $stream->next;
            }
            push @entities, { ent => \$ent, token => \$tokens };
        }
        $report->progress(int($cur++ / $num * 50));
    }
    
    my @targets = @entities;
    my @clones = ();
    $num = @entities;
    $cur = 1;
    foreach my $src (@entities) {
        my $s_ent = ${$src->{ent}};
        my $s_token = ${$src->{token}};
        my $s_tokenlen = length($s_token);
        
        shift @targets;
        foreach my $target (@targets) {
            my $t_ent = ${$target->{ent}};
            my $t_token = ${$target->{token}};
            my $t_tokenlen = length($t_token);
            
            my $name_distance = distance($s_ent->name, $t_ent->name, 1);
            my $name_dissimilarity = max(length($s_ent->name), length($t_ent->name)) * (1 - $opt_name_similarity);
            if ($name_distance <= $name_dissimilarity) {
                my $content_distance = abs($s_tokenlen - $t_tokenlen) <= $opt_token_difference ? distance($s_token, $t_token, 2) : -1;
                my $content_dissimilarity = max($s_tokenlen, $t_tokenlen) * (1 - $opt_content_similarity);
                if ($content_distance != -1 && $content_distance <= $opt_token_difference && $content_distance <= $content_dissimilarity) {
                    if ($verbose) {
                        push @clones, { s_ent => \$s_ent, s_token => \$s_token, t_ent => \$t_ent, t_token => \$t_token, distance => $content_distance };
                    } else {
                        push @clones, { s_ent => \$s_ent, t_ent => \$t_ent, distance => $content_distance };
                    }
                }
            }
        }
        $report->progress(int(50 + $cur++ / $num * 50));
    }
    undef @entities;
    undef @targets;
    
    $report->bold();
    $report->print(scalar(@clones)." clones\n");
    #$report->print("Token Difference <= ".$report->option->lookup("TokenDifference").",\n");
    $report->print("Content Similarity >= ".$report->option->lookup("ContentSimilarity").",\n");
    $report->print("Function Name Similarity >= ".$report->option->lookup("NameSimilarity")."\n\n\n");
    $report->nobold();
    
    foreach my $clone ( sort { $a->{distance} <=> $b->{distance} } @clones ) {
        $report->fontcolor("red");
        $report->print("Token Similarity Score: ". (100 - ($clone->{distance}))."%\n");
        $report->fontcolor("black");
        
        if ($verbose) {
            $report->print(${$clone->{s_token}}."\n");
            $report->print(${$clone->{t_token}}."\n");
        }
        
        $report->entity(${$clone->{s_ent}});
        $report->print(${$clone->{s_ent}}->name."(".${$clone->{s_ent}}->parameters.")  ");
        $report->entity();
        $report->print(${$clone->{s_ent}}->ref("definein")->file->relname."\n");
        
        $report->entity(${$clone->{t_ent}});
        $report->print(${$clone->{t_ent}}->name."(".${$clone->{t_ent}}->parameters.")  ");
        $report->entity();
        $report->print(${$clone->{t_ent}}->ref("definein")->file->relname."\n");
		
		$report->compare(${$clone->{s_ent}},${$clone->{t_ent}});
		$report->print("View Comparison\n\n");
		$report->compare();
    }
}

sub distance {
    my ($s, $t, $replacecost) = @_;
    
    return 0 if $s eq $t;
    return length($s) if !$t || length($t) == 0;
    return length($t) if !$s || length($s) == 0;
    
    my $s_length = length($s);
    my $t_length = length($t);
    
    my (@v0, @v1);
    my ($i, $j);
    for ($i = 0; $i < $t_length + 1; $i++) {
        $v0[$i] = $i;
    }
    for ($i = 0; $i < $s_length; $i++) {
        $v1[0] = $i + 1;
        for ($j = 0; $j < $t_length; $j++) {
            my $cost = substr($s, $i, 1) eq substr($t, $j, 1) ? 0 : $replacecost;
            $v1[$j + 1] = min($v1[$j] + 1, $v0[$j + 1] + 1, $v0[$j] + $cost);
        }
        for ($j = 0; $j < $t_length + 1; $j++) {
            $v0[$j] = $v1[$j];
        }
    }
    return $v1[$t_length];
}
