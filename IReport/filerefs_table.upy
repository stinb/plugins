# Interactive Report for showing file references as a filterable table

def name():
  return "File References Table"

def test_entity(ent):
  return ent.kind().check("file ~unknown ~unresolved")

def description():
  return '''Shows a a table of references that occurred in the file.
    <p>This report shows all references located in the selected file with
    the folowing columns:
    <ul>
    <li>Scope</li>
    <li>Kind</li>
    <li>Entity</li>
    <li>Line</li>
    <li>Column</li>
    </ul>
    </p>
  '''

# Report generation
def generate(report, ent):
  report.table("""
    [{
      "name" : "Scope",
      "filtertype": "string"
     },{
      "name" : "Kind",
      "filtertype": "string"
     },{
      "name" : "Entity",
      "filtertype": "string"
     },{
      "name" : "Line",
      "filtertype": "numeric",
      "sort" : "ascending"
     },{
      "name" : "Column",
      "filtertype": "numeric"
    }]""")
  for ref in ent.filerefs():
    report.tablecell()
    report.entity(ref.scope())
    report.print(ref.scope().longname())
    report.entity()

    report.tablecell()
    report.print(ref.kind().longname())

    report.tablecell()
    report.entity(ref.ent())
    report.print(ref.ent().longname())
    report.entity()

    report.tablecell()
    report.syncfile(ref.file().longname(), ref.line(), ref.column())
    report.print(str(ref.line()))
    report.syncfile()

    report.tablecell()
    report.print(str(ref.column()))
  report.table()

