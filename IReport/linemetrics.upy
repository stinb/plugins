import archpages
import kind_util
import metricreports
import understand

# (id, name, enabled, languages)
LINE_METRICS=[
  ("CountLine", "Lines", True, None),
  ("CountLineHtml", "Lines (HTML)", False, ["Web"]),
  ("CountLineJavascript", "Lines (JavaScript)", False, ["Web"]),
  ("CountLinePhp", "Lines (PHP)", False, ["Web"]),

  ("CountLineCode", "Code Lines", True, None),
  ("CountLineCodeDecl", "Declarative Code Lines", False, None),
  ("CountLineCodeExe", "Executable Code Lines", False, None),
  ("CountLineCodeWithInactive", "Code Lines (Includes Inactive)", False, ["C++"]),
  ("CountLineCodeJavascript",   "Code Lines (JavaScript)", False, ["Web"]),
  ("CountLineCodePhp",          "Code Lines (PHP)", False, ["Web"]),


  ("CountLineComment", "Comment Lines", True, None),
  ("CountLineCommentWithInactive", "Comment Lines (Includes Inactive)", False, ["C++"]),
  ("CountLineCommentHtml",         "Comment Lines (HTML)", False, ["Web"]),
  ("CountLineCommentJavascript",   "Comment Lines (JavaScript)", False, ["Web"]),
  ("CountLineCommentPhp",          "Comment Lines (PHP)", False, ["Web"]),

  ("CountLineInactive", "Inactive Lines", True, None),
  ("CountLinePreprocessor", "Preprocessor Lines", True, None),

  ("CountLineBlank", "Blank Lines", True, None),
  ("CountLineBlankWithInactive", "Blank Lines (Includes Inactive)", False, ["C++"]),
  ("CountLineBlankHtml",         "Blank Lines (HTML)", False, ["Web"]),
  ("CountLineBlankJavascript",   "Blank Lines (JavaScript)", False, ["Web"]),
  ("CountLineBlankPhp",          "Blank Lines (PHP)", False, ["Web"]),

  ("RatioCommentToCode", "Ratio Comment to Code", True, None),

  ("CountSemicolon", "Semicolons", False, None),
  ("CountStmt", "Statements", False, None),
  ("CountStmtDecl", "Declarative Statements", False, None),
  ("CountStmtDeclJavascript", "Declarative Statements (JavaScript)", False, ["Web"]),
  ("CountStmtDeclPhp", "Declarative Statements (PHP)", False, ["Web"]),
  ("CountStmtEmpty", "Empty Statements", False, None),
  ("CountStmtExe", "Executable Statements", False, None),
  ("CountStmtExeJavascript", "Executable Statements (JavaScript)", False, ["Web"]),
  ("CountStmtExePhp", "Executable Statements (PHP)", False, ["Web"]),
]

def name():
  """
  Required, the name of the ireport.
  """
  return "Line Metrics"

def description():
  ent_def = []
  ent_other = []
  for id, name, enabled, languages in LINE_METRICS:
    entText = "<li>{} - {}</li>".format(name,id)
    if enabled:
      ent_def.append(entText)
    else:
      ent_other.append(entText)

  return '''Line Metrics
    <p>This plugin displays line metrics for the project, architectures, and
    files. The metrics reported by default are:</p>
    <ul> {} </ul>

    <p>Additional available metrics are:</p>
    <ul> {} </ul>

    '''.format("".join(ent_def), "".join(ent_other))


def test_global(db):
  return kind_util.can_contain_functions(db)

def test_architecture(arch):
  return kind_util.can_contain_functions(arch)

def test_entity(ent):
  return kind_util.can_contain_functions(ent)

def support_abort():
  return True

def init(report, target):
  """
  Optional method, define options that can be changed by the user
  """
  report.options().checkbox("chart","Show Chart",True)

  if isinstance(target, understand.Arch):
    report.options().checkbox("filePages","Show File Pages with Function Details",False)
  if isinstance(target, understand.Db):
    report.options().radio_vert("mode", "Mode", ["Files Only", "File Pages with Function Details", "Functions Only"], "Files Only")

  dblangs = report.db().language()

  report.options().label("entmets", "Metrics")
  for id, name, enabled, languages in LINE_METRICS:
    if languages and not any(lang in dblangs for lang in languages):
      continue
    report.options().checkbox(id, "{} - {}".format(name,id), enabled)

def pages(report, target):
  pages = []

  if isinstance(target, understand.Arch):
    pages = archpages.pageslist(target, report.options().lookup("filePages"), kind_util.FILE_KIND_STR)

  elif isinstance(target, understand.Db):
    # Home Page
    pages.append("")
    # File Pages
    if report.options().lookup("mode") == "File Pages with Function Details":
      for ent in sorted(target.ents(kind_util.FILE_KIND_STR), key = lambda e: e.relname()):
        pages.append(str(ent.id()))

  # Entities do not have pages
  return pages

# Report generation
def generate(report, target, page):
  """
  Required, generate the report
  """
  if isinstance(target, understand.Arch):
    ptarget = archpages.breadcrumbs(report, target, page)
    if isinstance(ptarget, understand.Ent):
      entityPage(report, ptarget)
    else:
      archPage(report, ptarget)

  if isinstance(target, understand.Db):
    if page and page.isdigit():
      # Database BreadCrumbs
      ent = report.db().ent_from_id(int(page))
      if ent:
        report.breadcrumbs(["", str(ent.id())], 1, ["Line Metrics", ent.relname()])
        entityPage(report, ent)
        return
    dbPage(report, target)

  # Entities
  if isinstance(target, understand.Ent):
    entityPage(report, target)

def linechart(report, target):
  if not report.options().lookup("chart"):
    return

  try:
    report.draw(target, "Line Breakdown")
  except Exception as e:
    report.print("Unable to draw chart: " + str(e))

def metrics(report):
  dblangs = report.db().language()
  mets = []
  names = dict()
  for id, name, enabled, languages in LINE_METRICS:
    if languages and not any(lang in dblangs for lang in languages):
      continue
    if report.options().lookup(id):
      mets.append(id)
      names[id] = name
  return mets, names

def entityPage(report, file):
  linechart(report, file)
  ents = kind_util.list_functions(file)
  if ents:
    mets, names = metrics(report)
    metricreports.metricsTable(report, mets, ents, names=names)
  else:
    report.print("No functions defined in file")

def archPage(report, arch):
  linechart(report, arch)
  children = arch.children()
  ents = arch.ents()

  prog_max = 100
  prog_min = 0
  if ents and children:
    clen = len(children)
    prog_max = prog_min = clen / (clen + len(ents)) * 100

  mets, names = metrics(report)
  if children:
    report.heading(2)
    report.print("Child Architectures")
    report.heading()
    metricreports.metricsTable(report, mets, children, True, prog_max=prog_max, names=names)

  if ents:
    report.heading(2)
    report.print("Entities")
    report.heading()
    metricreports.metricsTable(report, mets, ents, report.options().lookup("filePages"), "short", prog_min=prog_min, names=names)

  if not ents and not children:
    report.print("Architecture is empty")

def dbPage(report, db):
  linechart(report, db)
  mode = report.options().lookup("mode")
  if mode == "Functions Only":
    report.heading(2)
    report.print("Functions")
    report.heading()
    mets, names = metrics(report)
    metricreports.metricsTable(report, mets, db.ents(kind_util.FUNCTION_KIND_STR), names=names)
  else:
    report.heading(2)
    report.print("Files")
    report.heading()
    mets, names = metrics(report)
    metricreports.metricsTable(report, mets, db.ents(kind_util.FILE_KIND_STR),
                               mode == "File Pages with Function Details",
                               "relative", names=names)
