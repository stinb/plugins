def name():
  return "Ada Project Information"

def test_global(db):
  """
  Optional method, return true for project level reports
  """
  return True

def description():
  return '''A script for Ada projects that generates a text file containing information on its packages.'''

# Report generation
def generate(report, target):
  und_name = target.name()
  und_name = und_name.split("/")[-1].split(".")[0]
  file_name = f"{und_name}_Ada_Project_Information.txt"
  txtfile = open(file_name, 'w')
  packages = target.ents("Ada Package ~Generic")

  for package in packages:
    if package.parent() and (package.parent().library() == "Standard"):
        continue

    ada_files = []

    for file_ent in package.ents("Ada File"):
        ada_files.append(file_ent.name())

        for dep_ent in file_ent.dependsby():
            if not dep_ent.kind().check("Ada File"):
                continue

            ada_files.append(dep_ent.name())
    
    txtfile.write(f"========== PACKAGE: {package.name()} ==========\n\n")

    txtfile.write(f"PROVIDED INTERFACE\n\n")

    txtfile.write(f"\tCONSTANTS:\n")

    const_refs = package.refs("Declare", "Constant Object ~Local", True)

    if not const_refs:
       txtfile.write(f"\t\tNONE\n\n")
       
    for const_ref in const_refs:
        txtfile.write(f"\t\t{const_ref.ent().name()} : {const_ref.ent().type()};\n\n")

    txtfile.write(f"\tTYPES:\n")

    type_refs = package.refs("Declare", "Type ~Local", True)

    if not type_refs:
       txtfile.write(f"\t\tNONE\n\n")

    for type_ref in type_refs:
        txtfile.write(f"\t\t")
        print_type(type_ref, txtfile, None)
        txtfile.write(f";\n\n")

    txtfile.write(f"\tDATA:\n")

    data_refs = package.refs("Declare", "Data ~Local", True)

    if not data_refs:
       txtfile.write(f"\t\tNONE\n\n")

    for data_ref in data_refs:
        txtfile.write(f"\t\t{data_ref.ent().name()} : {data_ref.ent().type()};\n\n")

    txtfile.write(f"\tOPERATIONS:\n")

    package_ops = package.refs("Declare Spec", "Procedure ~Local, Function ~Local", True)

    if not package_ops:
       txtfile.write(f"\t\tNONE\n\n")

    for pack_ref in package_ops:
        txtfile.write(f"\t\t")
        print_op(pack_ref, txtfile, None)
        txtfile.write(f";\n\n")
    
    reqpack_refs = []
    intpack_refs = []

    for pack_ref in package.refs("With, Child Libunit", "Package", True):
        dotby_pack = str(pack_ref.ent().longname()).split(".")[0]

        if dotby_pack == package.name():
            intpack_refs.append(pack_ref)
            continue

        reqpack_refs.append(pack_ref)

    txtfile.write(f"REQUIRED INTERFACE\n\n")

    if not reqpack_refs:
        txtfile.write(f"\tNONE\n\n")
    else:
        types = {}
        constants = {}
        operations = {}
        data = {}
        op_refs = []

        txtfile.write(f"\tPACKAGES:\n")

        for pack_ref in reqpack_refs:
            txtfile.write(f"\t\t{pack_ref.ent().name()}\n\n")

            for dot_ref in pack_ref.ent().refs("Dotby"):
                if dot_ref.file().name() not in ada_files:
                    continue

                get_dotrefs(dot_ref, types, constants, operations, data)

        for pack_ref in package_ops:
            op_refs.extend(pack_ref.ent().refs("Call, Rename", "Procedure ~Local, Function ~Local", True))
        
        txtfile.write(f"\tCONSTANTS:\n")

        if not constants:
            txtfile.write(f"\t\tNONE\n\n")
        
        for const_ent in constants.values():
            txtfile.write(f"\t\t{const_ent.longname()} : {const_ent.type()};\n\n")

        txtfile.write(f"\tTYPES:\n")

        if not types:
            txtfile.write(f"\t\tNONE\n\n")

        for type_ent in types.values():
            txtfile.write(f"\t\t")
            dec_ref = type_ent.ref("Declarein")
            print_type(dec_ref, txtfile, type_ent)
            txtfile.write(f";\n\n")

        txtfile.write(f"\tDATA:\n")

        if not data:
            txtfile.write(f"\t\tNONE\n\n")

        for data_ent in data.values():
            txtfile.write(f"\t\t{data_ent.longname()} : {data_ent.type()};\n\n")

        txtfile.write(f"\tOPERATIONS:\n")

        if not (operations or op_refs):
            txtfile.write(f"\t\tNONE\n\n")

        for op_ent in operations.values():
            txtfile.write(f"\t\t")
            dec_ref = op_ent.ref("Declarein Spec") if op_ent.ref("Declarein Spec") else op_ent.ref("Declarein")
            print_op(dec_ref, txtfile, op_ent)
            txtfile.write(f";\n\n")

        for op_ref in op_refs:
            if op_ref.ent().longname() in operations:
                continue
            
            operations[op_ref.ent().longname()] = None
            txtfile.write(f"\t\t")
            dec_ref = op_ref.ent().ref("Declarein Spec") if op_ref.ent().ref("Declarein Spec") else op_ref.ent().ref("Declarein")
            print_op(dec_ref, txtfile, op_ref.ent())
            txtfile.write(f";\n\n")       

    txtfile.write(f"INTERNAL INTERFACE\n\n")

    const_refs = package.refs("Declare", "Constant Object Local", True)
    type_refs = package.refs("Declare", "Type Local", True)
    data_refs = package.refs("Declare", "Data Local, Object Local ~Constant", True)
    op_refs = package.refs("Declare", "Procedure Local, Function Local", True)
    package_ops.extend(op_refs)

    types = {}
    constants = {}
    operations = {}
    data = {}

    txtfile.write(f"\tPACKAGES:\n")

    if not intpack_refs:
        txtfile.write(f"\t\tNONE\n\n")
    
    for pack_ref in intpack_refs:
        txtfile.write(f"\t\t{pack_ref.ent().longname()}\n\n")

        for dot_ref in pack_ref.ent().refs("Dotby"):
            if dot_ref.file().name() not in ada_files:
                continue
            
            get_dotrefs(dot_ref, types, constants, operations, data)

    txtfile.write(f"\tCONSTANTS:\n")

    if not (constants or const_refs):
        txtfile.write(f"\t\tNONE\n\n")
    
    for const_ent in constants.values():
        txtfile.write(f"\t\t{const_ent.name()} : {const_ent.type()};\n\n")
    
    for const_ref in const_refs:
        txtfile.write(f"\t\t{const_ref.ent().name()} : {const_ref.ent().type()};\n\n")

    txtfile.write(f"\tTYPES:\n")

    if not (types or type_refs):
        txtfile.write(f"\t\tNONE\n\n")

    for type_ent in types.values():
        txtfile.write(f"\t\t")
        dec_ref = type_ent.ref("Declarein")
        print_type(dec_ref, txtfile, None)
        txtfile.write(f";\n\n")
    
    for type_ref in type_refs:
        txtfile.write(f"\t\t")
        print_type(type_ref, txtfile, None)
        txtfile.write(f";\n\n")

    txtfile.write(f"\tDATA:\n")

    if not (data or data_refs):
        txtfile.write(f"\t\tNONE\n\n")

    for data_ent in data.values():
        txtfile.write(f"\t\t{data_ent.name()} : {data_ent.type()};\n\n")

    for data_ref in data_refs:
        txtfile.write(f"\t\t{data_ref.ent().name()} : {data_ref.ent().type()};\n\n")

    txtfile.write(f"\tOPERATIONS:\n")

    local_operations = []

    for op_ent in operations.values():
        if op_ent.kind().check("Local"):
            local_operations.append(op_ent)

    if not (local_operations or op_refs):
        txtfile.write(f"\t\tNONE\n\n")

    for op_ent in local_operations:
        txtfile.write(f"\t\t")
        dec_ref = op_ent.ref("Declarein Spec") if op_ent.ref("Declarein Spec") else op_ent.ref("Declarein")
        print_op(dec_ref, txtfile, None)
        txtfile.write(f";\n\n")

    for op_ref in op_refs:
        txtfile.write(f"\t\t")
        print_op(op_ref, txtfile, None)
        txtfile.write(f";\n\n")
        
    if package_ops:
       txtfile.write(f"OPERATIONS\n\n")
       
       for package_op in package_ops:
            txtfile.write(f"\t")
            dec_ref = package_op.ent().ref("Declarein Spec") if package_op.ent().ref("Declarein Spec") else package_op.ent().ref("Declarein")
            body_ref = package_op.ent().ref("Declarein Body") if package_op.ent().ref("Declarein Body") else package_op.ent().ref("Declarein")
            print_op(dec_ref, txtfile, None)

            txtfile.write(f";\n\n\t\tREQUIRED PACKAGES:\n")
            
            pack_refs = {}

            for pack_ref in package_op.ent().refs("Withaccess, Dot", "Package", True):
                if pack_ref.ent().library() == "Standard":
                    continue

                pack_refs[pack_ref.ent().longname()] = pack_ref
            
            for pack_ref in package_op.ent().refs("Dot", "Package", True):
                if pack_ref.ent().library() == "Standard":
                    continue

                if (pack_ref.line() < body_ref.line()) and pack_ref.ent().longname() in pack_refs:
                    pack_refs.pop(pack_ref.ent().longname())

            if not pack_refs:
                txtfile.write(f"\t\t\tNONE\n\n")

            types = {}
            constants = {}
            operations = {}
            data = {}

            for pack_ref in pack_refs.values():
                if pack_ref.ent().id() == package.id():
                    continue

                for dot_ref in pack_ref.ent().refs("Dotby"):
                    if dot_ref.file().id() != package_op.ent().parent().id():
                        continue

                    get_dotrefs(dot_ref, types, constants, operations, data)
                
                txtfile.write(f"\t\t\t{print_name(pack_ref.ent(), package.name())}\n\n")

            txtfile.write(f"\t\tREQUIRED CONSTANTS:\n")

            const_refs = package_op.ent().refs("Use", "Constant", True)

            if not (constants or const_refs):
                txtfile.write(f"\t\t\tNONE\n\n")

            for const_ent in constants.values():
                txtfile.write(f"\t\t\t{print_name(const_ent, package.name())} : {const_ent.type()};\n\n")                

            for const_ref in const_refs:
                txtfile.write(f"\t\t\t{print_name(const_ref.ent(), package.name())} : {const_ref.ent().type()};\n\n")

            txtfile.write(f"\t\tREQUIRED TYPES:\n")

            type_refs = package_op.ent().refs("Ref", "Type", True)

            for param_ref in package_op.ent().refs("Declare Spec", "Parameter", True):
                type_refs.extend(param_ref.ent().refs("Typed", "Type", True))

            if not (types or type_refs):
                txtfile.write(f"\t\t\tNONE\n\n")

            for type_ent in types.values():
                txtfile.write(f"\t\t\t{print_name(type_ent, package.name())}\n\n")
            
            for type_ref in type_refs:
                if type_ref.ent().longname() in types:
                    continue

                txtfile.write(f"\t\t\t{print_name(type_ref.ent(), package.name())}\n\n")

            txtfile.write(f"\t\tREQUIRED DATA:\n")

            data_refs = package_op.ent().refs("Ref", "Data", True)

            if not (data or data_refs):
                txtfile.write(f"\t\t\tNONE\n\n")

            for data_ent in data.values():
                txtfile.write(f"\t\t\t{print_name(data_ent, package.name())} : {data_ent.type()};\n\n")
            
            for data_ref in data_refs:
                txtfile.write(f"\t\t\t{print_name(data_ref.ent(), package.name())} : {data_ref.ent().type()};\n\n")

            txtfile.write(f"\t\tREQUIRED OPERATIONS:\n")

            op_refs = package_op.ent().refs("Call, Rename", "Procedure, Function", True)

            if not (operations or op_refs):
                txtfile.write(f"\t\t\tNONE\n\n")

            for op_ent in operations.values():
                txtfile.write(f"\t\t\t{print_name(op_ent, package.name())}\n\n")

            for op_ref in op_refs:
                if op_ref.ent().longname() in operations:
                    continue

                txtfile.write(f"\t\t\t{print_name(op_ref.ent(), package.name())}\n\n")

            txtfile.write(f"\t\tINTERNAL CONSTANTS:\n")

            const_refs = package_op.ent().refs("Declare", "Constant", True)

            if not const_refs:
                txtfile.write(f"\t\t\tNONE\n\n")

            for const_ref in const_refs:
                txtfile.write(f"\t\t\t{print_name(const_ref.ent(), package.name())} : {const_ref.ent().type()};\n\n")  

            txtfile.write(f"\t\tINTERNAL TYPES:\n")

            type_refs = package_op.ent().refs("Declare", "Type", True)

            if not type_refs:
                txtfile.write(f"\t\t\tNONE\n\n")
            
            for type_ref in type_refs:
                txtfile.write(f"\t\t\t")
                print_type(type_ref, txtfile, None)
                txtfile.write(f";\n\n")

            txtfile.write(f"\t\tINTERNAL DATA:\n")

            data_refs = package_op.ent().refs("Declare", "Data, Object ~Constant ~Loop", True)

            if not data_refs:
                txtfile.write(f"\t\t\tNONE\n\n")

            for data_ref in data_refs:
                txtfile.write(f"\t\t\t{print_name(data_ref.ent(), package.name())} : {data_ref.ent().type()};\n\n")      

    txtfile.write(f"\n")

  txtfile.close()

  report.print(f"{file_name} has been created in the project folder.")
    

def get_dotrefs(ref, types, constants, operations, data):
    lex = ref.file().lexer().lexeme(ref.line(), ref.column())

    while lex:
        if lex.text() == ".":
            lex = lex.next()
            
            if lex.ent() and lex.ent().kind().check("Type"):
                if lex.ent().longname() in types:
                    break

                types[lex.ent().longname()] = lex.ent()
            elif lex.ent() and lex.ent().kind().check("Constant"):
                if lex.ent().longname() in constants:
                    break

                constants[lex.ent().longname()] = lex.ent()
            elif lex.ent() and lex.ent().kind().check("Procedure, Function"):
                if lex.ent().longname() in operations:
                    break

                operations[lex.ent().longname()] = lex.ent()
            elif lex.ent() and lex.ent().kind().check("Data"):
                if lex.ent().longname() in data:
                    break

                data[lex.ent().longname()] = lex.ent()

            break

        lex = lex.next(True, True)


def print_op(ref, txtfile, op_ent):
    lex = ref.file().lexer(lookup_ents=False).lexeme(ref.line(), ref.column())
    on_body = 0

    while lex and (lex.text() != ";" or on_body):
        if lex.text() == "(":
            on_body += 1
        elif lex.text() == ")":
            on_body -= 1
        elif lex.text() == ref.ent().name():
            pass
        elif (lex.next(True, True).text() == "is") and not on_body:
            break

        if op_ent and (lex.text() == op_ent.name()):
            txtfile.write(f"{op_ent.longname()}")
        else:
            txtfile.write(f"{lex.text()}")

        lex = lex.next(ignore_comments=True)


def print_type(ref, txtfile, type_ent):
    lex = ref.file().lexer(lookup_ents=False).lexeme(ref.line(), ref.column())
    on_record = False

    if lex.previous(True, True).text() == "type":
        lex = lex.previous(True, True)            

    while lex and (lex.text() != ";" or on_record):
        if lex.text() == "record":
            on_record = False if on_record else True

        if type_ent and (lex.text() == type_ent.name()):
            txtfile.write(f"{type_ent.longname()}")
        else:
            txtfile.write(f"{lex.text()}")

        lex = lex.next(ignore_comments=True)


def print_name(ref_ent, package_name):
    if (ref_ent.parent() and (ref_ent.parent().name() == package_name)) or (package_name in ref_ent.longname()):
        return ref_ent.name()
    else:
        return ref_ent.longname()