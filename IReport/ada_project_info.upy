def name():
  return "Ada Project Information"

def test_global(db):
  """
  Optional method, return true for project level reports
  """
  return True

def description():
  return '''A script for Ada projects that generates a text file containing information on its packages.'''

# Report generation
def generate(report, target):
  und_name = target.name()
  und_name = und_name.split("/")[-1].split(".")[0]
  file_name = f"{und_name}_Ada_Project_Information.txt"
  txtfile = open(file_name, 'w')
  files = target.ents("Ada Package ~Generic")

  for file in files:
    if file.parent() and (file.parent().library() == "Standard"):
        continue
    
    txtfile.write(f"===== PACKAGE: {file.name()} =====\n\n")

    txtfile.write(f"PROVIDED INTERFACE\n\n")

    txtfile.write(f"\tCONSTANTS:\n")

    const_refs = file.refs("Define, Declare", "Constant Object ~Local", True)

    if not const_refs:
       txtfile.write(f"\t\tNONE\n")
       
    for ref in const_refs:
        txtfile.write(f"\t\t{ref.ent().name()}\n")

    txtfile.write(f"\n\tTYPES:\n")

    type_refs = file.refs("Define, Declare", "Type ~Local", True)

    if not type_refs:
       txtfile.write(f"\t\tNONE\n")

    for ref in type_refs:
        txtfile.write(f"\t\t{ref.ent().name()}\n")

    txtfile.write(f"\n\tDATA:\n")

    data_refs = file.refs("Define, Declare", "Data ~Local", True)

    if not data_refs:
       txtfile.write(f"\t\tNONE\n")

    for ref in data_refs:
        txtfile.write(f"\t\t{ref.ent().name()}\n")

    txtfile.write(f"\n\tOPERATIONS:\n")

    op_refs = file.refs("Define, Declare", "Procedure ~Local, Function ~Local", True)

    if not op_refs:
       txtfile.write(f"\t\tNONE\n")

    for ref in op_refs:
        txtfile.write(f"\t\t{ref.ent().name()}\n")

    txtfile.write(f"\n\nREQUIRED INTERFACE\n\n")

    # TODO: Get library info

    txtfile.write(f"\n\nINTERNAL INTERFACE \n")

    # TODO: Get library info
        
    txtfile.write(f"\n\n")

  txtfile.close()

  report.print(f"{file_name} is created on the project folder.")
    


