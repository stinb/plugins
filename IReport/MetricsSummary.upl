use base ("Understand::IReport");

sub name { return "Metrics Summary"; }

sub description {
	return "Report main metrices of selected entity.";
}

sub tags {
  return (
    'Target: Functions',
    'Target: Files',
    'Target: Classes',
  );
}

sub test_entity { my $ent = shift; return 1; }

sub test_global { return 0; }

sub init {}

sub generate {
    my $report = shift;
    my $ent = shift;

    my @metricname = (
        "CountLine", "CountLineCode", "CountLineCodeExe", "CountStmt", "CountStmtExe",
        "CountInput", "CountOutput",
        "Cyclomatic", "CyclomaticModified", "CyclomaticStrict", "Essential", "Knots", "MaxNesting",
        "SumCyclomatic", "SumCyclomaticModified", "SumCyclomaticStrict", "SumEssential",
    );

    $report->bold();
    $report->print($ent->kindname());
    $report->nobold();
    $report->print(" ");
    $report->entity($ent);
    $report->print($ent->longname());
    $report->entity();
    $report->print("\n\n");

    foreach my $metric (@metricname) {
        $report->print($metric." : ".$ent->metric($metric)."\n") if $ent->metric($metric);
    }

#    if ($ent->metric("Essential") && $ent->metric("Cyclomatic")) {
#        my $ms = int(($ent->metric("Essential") / $ent->metric("Cyclomatic")) * 100);
#        $report->print("MaintenanceSeverity : $ms\n");
#    }
#    if ($ent->metric("CountInput") && $ent->metric("CountOutput")) {
#        my $ifc = int(($ent->metric("CountInput") * $ent->metric("CountOutput"))**2);
#        my $wifc = int($ifc * $ent->metric("CountStmt"));
#        $report->print("InformationFlowComplexity : $ifc\n");
#        $report->print("WeightedIFC : $wifc\n");
#    }
}


