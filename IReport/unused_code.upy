
"""
====================================================================================================
This iReport plugin generates a report summarizing unused code in the given database.

Notes:
    This script must have the following CodeChecks selected to 'run in background' and any
    violations to be populating the Violation Browser in order for this iReport to generate
    accurate results:
    - CPP_F003 (Unused functions)
    - CPP_V007 (Unused local variables)
    - CPP_V008 (Unused global variables)
    - RECOMMENDED_20 (Duplicate lines of code)
    - RECOMMENDED_00 (Commented lines of code)
    - RECOMMENDED_12 (Unreachable code)
====================================================================================================
"""


def name() -> str:
  """Returns the name of the report."""
  return "Unused Code Report"

def description():
  return '''
  This iReport plugin generates a report summarizing unused code in the given database.

  <p>It requires running the <a href="und://plugin/config/Unused%20Code%20IReport">
  Unused Code IReport</a> configuration in the background.</p>

  <p>See also the charts <a href="und://plugin/graph/Unused%20Entities-Custom">
  Unused Entities</a> and <a href="und://plugin/graph/Unused%20Lines-Custom">Unused
  Lines</a>.</p>
  '''

def tags():
  return [
    'Target: Project',
    'Language: Any',
    'Unused Code',
  ]

def test_global(db) -> bool:
  """Return True for global report."""
  return True


def generate(report, db, page: str = None) -> None:
  """
  Generates the report.

  Args:
  report: The report object.
  db: The database object.
  page: The current page (optional).
  """

  # Navigate between pages with breadcrumbs - TODO
  page = "Unused Code Report"

  if page == "Unused Code Report":
    # Landing page
    report.heading(1)
    report.print("Unused Code Report")
    report.heading()

    report.heading(1)
    report.print(db.name())
    report.heading()

    # Files
    ents = db.ents("file ~unknown ~unresolved")

    if ents:
      if len(ents) > 1:
        graph_unused_funcs = 0
        graph_unused_local = 0
        graph_unused_global = 0

        for ent in ents:
          graph_viol_list = ent.violations()
          for viol in graph_viol_list:
            check_id = viol.check_id()

            if check_id == "CPP_F003":            # Unused functions
              graph_unused_funcs += 1
            elif check_id == "CPP_V007":          # Unused local variables
              graph_unused_local += 1
            elif check_id == "CPP_V008":          # Unused global variables
              graph_unused_global += 1

        try:
          report.draw(db, "Unused Lines", "Legend=right")
        except Exception as e:
          report.print("Unable to draw \"Unused Lines\" chart: ")
          report.print(str(e))
          pass

        if (graph_unused_funcs > 0) or (graph_unused_local > 0) or (graph_unused_global > 0):
          try:
            report.draw(db, "Unused Entities")
          except Exception as e:
            report.print("Unable to draw \"Unused Entities\" chart: ")
            report.print(str(e))
            pass


    # Print File Summary Table
    if ents:
      _print_files_table(report, ents)


def _print_files_table(report, ents) -> None:
  """Prints the files table."""
  report.table(["File", "Lines of Code", "Unused Functions", "Unused Local Variables", "Unused Globals", "Unreachable Code", "Duplicate Lines of Code", "Commented Lines of Code", "Inactive Lines of Code"])

  for ent in ents:

    # Gather violations from the database for populating table
    viol_list = ent.violations()
    unused_funcs = []
    unused_local = []
    unused_global = []
    duplicate_code = []
    commented_code = []
    unreachable_code = []

    for viol in viol_list:
      check_id = viol.check_id()

      if check_id == "CPP_F003":            # Unused functions
        unused_funcs.append(check_id)
      elif check_id == "CPP_V007":          # Unused local variables
        unused_local.append(check_id)
      elif check_id == "CPP_V008":          # Unused global variables
        unused_global.append(check_id)
      elif check_id == "RECOMMENDED_20":    # Duplicate lines of code
        duplicate_code.append(check_id)
      elif check_id == "RECOMMENDED_00":    # Commented lines of code
        commented_code.append(check_id)
      elif check_id == "RECOMMENDED_12":    # Unreachable code
        unreachable_code.append(check_id)

    unused_funcs_count = len(unused_funcs)
    unused_local_count = len(unused_local)
    unused_global_count = len(unused_global)
    duplicate_code_count = len(duplicate_code)
    commented_code_count = len(commented_code)
    unreachable_code_count = len(unreachable_code)

    # Populate Table
    report.tablecell()
    report.print(ent.relname())

    # Lines of Code
    report.tablecell()
    try:
      report.print(str(ent.metric("CountLineCode")))
    except Exception as e:
      logging.error(f"Unable to print file metric: {e}")

    # Unused Functions
    report.tablecell()
    try:
      report.print(str(unused_funcs_count))
    except Exception as e:
      logging.error(f"Unable to print number of unused functions: {e}")

    # Unused Local Variables
    report.tablecell()
    try:
      report.print(str(unused_local_count))
    except Exception as e:
      logging.error(f"Unable to print number of unused locals: {e}")

    # Unused Global Variables
    report.tablecell()
    try:
      report.print(str(unused_global_count))
    except Exception as e:
      logging.error(f"Unable to print number of unused globals: {e}")

    # Unreachable Code
    report.tablecell()
    try:
      report.print(str(unreachable_code_count))
    except Exception as e:
      logging.error(f"Unable to print amount of unreachable code: {e}")

    # Duplicate Lines of Code
    report.tablecell()
    try:
      report.print(str(duplicate_code_count))
    except Exception as e:
      logging.error(f"Unable to print number of duplicate lines of code: {e}")

    # Commented Lines of Code
    report.tablecell()
    try:
      report.print(str(commented_code_count))
    except Exception as e:
      logging.error(f"Unable to print number of commented lines of code: {e}")

    # Inactive Lines of Code
    report.tablecell()
    try:
      report.print(str(ent.metric("CountLineInactive")))
    except Exception as e:
      logging.error(f"Unable to print file metric: {e}")

  report.table()
