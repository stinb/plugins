
"""
====================================================================================================
This iReport plugin generates a report summarizing unused code in the given database.

Notes:
    This script must have the following CodeChecks selected to 'run in background' and any
    violations to be populating the Violation Browser in order for this iReport to generate
    accurate results:
    - CPP_F003 (Unused functions)
    - CPP_V007 (Unused local variables)
    - CPP_V008 (Unused global variables)
    - RECOMMENDED_20 (Duplicate lines of code)
    - RECOMMENDED_00 (Commented lines of code)
    - RECOMMENDED_12 (Unreachable code)
====================================================================================================
"""


def name() -> str:
  """Returns the name of the report."""
  return "Unused Code Report"


def test_global(db) -> bool:
  """Return True for global report."""
  return True


def pages(report, db) -> list[str]:
  """Generates a list of pages for the report."""
  pages = ["Unused Code Report"]
  for ent in db.ents("file ~unknown ~unresolved"):
    pages.append(ent.relname())

  return pages


def generate(report, db, page: str = None) -> None:
  """
  Generates the report.

  Args:
  report: The report object.
  db: The database object.
  page: The current page (optional).
  """

  # Navigate between pages with breadcrumbs - TODO
  page = "Unused Code Report"

  if page == "Unused Code Report":
    # Landing page
    report.heading(1)
    report.print("Unused Code Report")
    report.heading()

    report.heading(1)
    report.print(db.name())
    report.heading()

    # Draw a dependency graph for the project
    arch = db.lookup_arch("Directory Structure")
    try:
      report.draw(arch, "File Dependencies", "Architecture Labels=off")
    except:
      pass

    # Print File Summary Table
    ents = db.ents("file ~unknown ~unresolved")
    if ents:
      _print_files_table(report, ents)


def _print_files_table(report, ents) -> None:
  """Prints the files table."""
  report.table(["File", "Lines of Code", "Unused Functions", "Unused Local Variables", "Unused Globals", "Unreachable Code", "Duplicate Lines of Code", "Commented Lines of Code", "Inactive Lines of Code"])

  for ent in ents:

    # Gather violations from the database for populating table
    viol_list = ent.violations()
    unused_funcs = []
    unused_local = []
    unused_global = []
    duplicate_code = []
    commented_code = []
    unreachable_code = []

    for viol in viol_list:
      check_id = viol.check_id()
      
      if check_id == "CPP_F003":            # Unused functions
        unused_funcs.append(check_id)
      elif check_id == "CPP_V007":          # Unused local variables
        unused_local.append(check_id)
      elif check_id == "CPP_V008":          # Unused global variables
        unused_global.append(check_id)
      elif check_id == "RECOMMENDED_20":    # Duplicate lines of code
        duplicate_code.append(check_id)
      elif check_id == "RECOMMENDED_00":    # Commented lines of code
        commented_code.append(check_id)
      elif check_id == "RECOMMENDED_12":    # Unreachable code
        unreachable_code.append(check_id)

    unused_funcs_count = len(unused_funcs)
    unused_local_count = len(unused_local)
    unused_global_count = len(unused_global)
    duplicate_code_count = len(duplicate_code)
    commented_code_count = len(commented_code)
    unreachable_code_count = len(unreachable_code)

    # Populate Table
    report.tablecell()
    report.pagelink(ent.relname())
    report.print(ent.relname())
    report.pagelink()

    # Lines of Code
    report.tablecell()
    try:
      report.print(str(ent.metric("CountLineCode")))
    except Exception as e:
      logging.error(f"Unable to print file metric: {e}")

    # Unused Functions
    report.tablecell()
    try:
      report.print(str(unused_funcs_count))
    except Exception as e:
      logging.error(f"Unable to print number of unused functions: {e}")

    # Unused Local Variables
    report.tablecell()
    try:
      report.print(str(unused_local_count))
    except Exception as e:
      logging.error(f"Unable to print number of unused locals: {e}")

    # Unused Global Variables
    report.tablecell()
    try:
      report.print(str(unused_global_count))
    except Exception as e:
      logging.error(f"Unable to print number of unused globals: {e}")

    # Unreachable Code
    report.tablecell()
    try:
      report.print(str(unreachable_code_count))
    except Exception as e:
      logging.error(f"Unable to print amount of unreachable code: {e}")

    # Duplicate Lines of Code
    report.tablecell()
    try:
      report.print(str(duplicate_code_count))
    except Exception as e:
      logging.error(f"Unable to print number of duplicate lines of code: {e}")

    # Commented Lines of Code
    report.tablecell()
    try:
      report.print(str(commented_code_count))
    except Exception as e:
      logging.error(f"Unable to print number of commented lines of code: {e}")

    # Inactive Lines of Code
    report.tablecell()
    try:
      report.print(str(ent.metric("CountLineInactive")))
    except Exception as e:
      logging.error(f"Unable to print file metric: {e}")

  report.table()
