import understand

def name():
  return "API Info Table"

def description():
  return """API Info Table
    <p>Provides a table based view of the Understand API for an entity or architecture.</p>

    <br><img src=".doc/api_info_table.png"/>
  """

def tags():
  return [
    'Target: Files',
    'Target: Functions',
    'Target: Objects',
    'Target: Classes',
    'Target: Architectures',
    'API',
  ]

def is_enabled_by_default():
  return True

def test_architecture(arch):
  return True

def test_entity(ent):
  return True

def pages(report, target):
  pages = []
  if isinstance(target, understand.Ent):
    pages = [
      "API Info", # main page
      "Comments",
      "Contents",
      "Dependencies",
      "Entities",
      "Free Text",
      "Metrics",
      "References"
    ]
    if target.control_flow_graph():
      pages.insert(3, "Control Flow")
  elif isinstance(target, understand.Arch):
    pages = [
      "API Info", # main page
      "Children",
      "Dependencies",
      "Entities",
      "Metrics"
    ]
  return pages

# Report generation
def generate(report, target, page):
  """
  Required, generate the report
  """
  if page != "" and page != "API Info":
    report.breadcrumbs(["API Info", page], 1)

  if page in pageFuncMap:
    pageFuncMap[page](report,target)
  else:
    homepage(report, target)

def pageLinkRow(report, name, id, val = True):
  if not val:
    return

  report.tablecell()
  report.print(name)

  report.tablecell()
  report.pagelink(id)
  report.print("View")
  report.pagelink()

def printValueRow(report, name, val, skip_empty = False):
  if val is None or (skip_empty and not val):
    return

  report.tablecell()
  report.print(name)

  printCellValue(report, val, skip_empty)

def printCellValue(report,val, skip_empty = False):
  report.tablecell()
  if val is None or (skip_empty and not val):
    return

  if isinstance(val, understand.Ent):
    report.entity(val)
    report.print(val.name())
    report.entity()
  elif isinstance(val, understand.Arch):
    report.arch(val)
    report.print(val.name())
    report.arch()
  else:
    report.print(str(val))

def homepage(report, target):
  report.heading(2)
  report.print("Methods")
  report.heading()

  report.table(["Method", "Result"])
  if isinstance(target, understand.Ent):
    pageLinkRow(report, "comments", "Comments")
    pageLinkRow(report, "contents", "Contents")
    pageLinkRow(report, "control_flow_graph", "Control Flow", target.control_flow_graph())
    pageLinkRow(report, "depends/dependsby", "Dependencies", target.depends() or target.dependsby())
    pageLinkRow(report, "ents", "Entities", target.ents(""))
    pageLinkRow(report, "freetext", "Free Text")
    printValueRow(report, "id", target.id())
    printValueRow(report, "kindname", target.kindname())
    printValueRow(report, "kind.longname", target.kind().longname())
    printValueRow(report, "language", target.language())
    printValueRow(report, "library", target.library())
    printValueRow(report, "longname", target.longname())
    pageLinkRow(report, "metrics", "Metrics")
    printValueRow(report, "name", target.name())
    printValueRow(report, "parameters", target.parameters(), True)
    printValueRow(report, "parent", target.parent())
    printValueRow(report, "parsetime", target.parsetime())
    pageLinkRow(report, "refs", "References")
    printValueRow(report, "relname", target.relname())
    printValueRow(report, "simplename", target.simplename())
    printValueRow(report, "type", target.type())
    printValueRow(report, "uniquename", target.uniquename())
    printValueRow(report, "value", target.value())

  elif isinstance(target, understand.Arch):
    printValueRow(report, "name", target.name())
    printValueRow(report, "longname", target.longname())
    printValueRow(report, "parent", target.parent())
    pageLinkRow(report, "children", "Children", target.children())
    pageLinkRow(report, "depends/dependsby", "Dependencies")
    pageLinkRow(report, "ents", "Entities", target.ents())
    pageLinkRow(report, "metrics", "Metrics")

  report.table()

def comments_page(report, target):
  report.heading(2)
  report.print("Comments")

  report.heading(3)
  report.print("Before")
  report.heading()
  report.print(target.comments("before"))

  report.heading(3)
  report.print("After")
  report.heading()
  report.print(target.comments("after"))

def contents_page(report, target):
  report.heading(2)
  report.print("Contents")
  report.heading()
  report.print(target.contents())

def cfg_page(report, target):
  report.heading(2)
  report.print("Control Flow Graph")
  report.heading()

  nodes = target.control_flow_graph().nodes()
  report.table("""
    [{
      "name" : "Index",
      "filtertype": "numeric",
      "sort": "ascending"
     },{
      "name" : "Kind",
      "filtertype": "string"
     },{
      "name" : "Line",
      "filtertype": "numeric"
     },{
      "name" : "Column",
      "filtertype": "numeric"
     },{
      "name" : "End Line",
      "filtertype": "numeric"
     },{
      "name" : "End Column",
      "filtertype": "numeric"
     },{
      "name" : "End Node",
      "filtertype": "numeric"
     },{
      "name" : "Children",
      "filtertype": "string"
    }]""")

  for idx, node in enumerate(nodes):
    printCellValue(report, idx)
    printCellValue(report, node.kind())
    printCellValue(report, node.line_begin())
    printCellValue(report, node.column_begin())
    printCellValue(report, node.line_end())
    printCellValue(report, node.column_end())
    e = node.end_node()
    if e:
      e = nodes.index(e)
    printCellValue(report, e)

    childstr = ""
    for child in node.children():
      if childstr:
        childstr += ", "
      i = nodes.index(child)
      lbl = node.child_label(child)
      if lbl:
        childstr += "{}({})".format(i,lbl)
      else:
        childstr = str(i)
    printCellValue(report, childstr)

def refs_table(report, refs):
  report.table("""
    [{
      "name" : "Scope",
      "filtertype": "string"
     },{
      "name" : "Kind",
      "filtertype": "string"
     },{
      "name" : "Entity",
      "filtertype": "string"
     },{
      "name" : "File",
      "filtertype": "string"
     },{
      "name" : "Line",
      "filtertype": "numeric"
     },{
      "name" : "Column",
      "filtertype": "numeric"
    }]""")
  for ref in refs:
    printCellValue(report, ref.scope())
    printCellValue(report, ref.kind().longname())
    printCellValue(report, ref.ent())
    printCellValue(report, ref.file())
    report.syncfile(ref.file().longname(), ref.line(), ref.column())
    printCellValue(report, ref.line())
    report.syncfile()
    printCellValue(report, ref.column())
  report.table()

def print_deps(report, name, deps):
  report.heading(3)
  report.print(name.format(len(deps)))
  report.heading()

  for target in sorted(deps.keys(), key=lambda target: target.longname()):
    report.tree(1)
    if isinstance(target, understand.Ent):
      report.entity(target)
    elif isinstance(target, understand.Arch):
      report.arch(target)

    refs = deps[target]
    report.print("{} ({})".format(target.name(), len(refs)))
    report.entity()
    report.arch()
    for ref in refs[:25]:
      file = ref.file()
      kind = ref.kind().longname()
      report.tree(2)
      report.syncfile(file.longname(), ref.line(), ref.column())
      report.print("{} ({}) {}".format(file.name(), ref.line(), kind))
      report.syncfile()
  report.tree()

def deps_page(report, target):
  report.heading(2)
  report.print("Dependencies")
  report.heading()
  print_deps(report, "depends({})", target.depends())
  print_deps(report, "dependsby({})", target.dependsby())

def refs_page(report, target):
  report.heading(2)
  report.print("References")
  report.heading()
  refs_table(report, target.refs())

def ents_page(report, target):
  report.heading(2)
  report.print("Ents")
  report.heading()
  ents = []
  if isinstance(target, understand.Ent):
    ents = target.ents("")
  elif isinstance(target, understand.Arch):
    ents = target.ents()
  report.table("""
    [{
      "name" : "Entity",
      "filtertype": "string"
     },{
      "name" : "Kind",
      "filtertype": "string"
    }]""")
  for ent in sorted(ents, key=lambda ent: ent.longname()):
    printCellValue(report, ent)
    printCellValue(report, ent.kind().longname())

FREETEXT_KEYS = [
  "AllowExceptions",
  "AttrArrayComponentSize",
  "AttrArrayIndexRanges",
  "AttrComponentFirstBit",
  "AttrComponentLastBit",
  "AttrComponentPosition",
  "AttrRecordAlignment",
  "AttrTypeSize",
  "Bitfield",
  "DefinedInMacro",
  "InitText",
  "InitValue",
  "Inline",
  "InterruptPriority",
  "Linkage",
  "Noexcept",
  "Parameters",
  "Priority",
  "TemplateArguments",
  "ThrowExceptions",
  "UnderlyingType"
]

def freetext_page(report, target):
  report.heading(2)
  report.print("Free Text")
  report.heading()

  report.table(["Key", "Value"])
  for key in FREETEXT_KEYS:
    printValueRow(report, key, target.freetext(key))
  report.table()

def metrics_page(report, target):
  report.heading(2)
  report.print("Metrics")
  report.heading()

  report.table(["Metric", "Value"])
  for k,v in target.metric(target.metrics()).items():
    printValueRow(report, k, v)
  report.table()

def children_page(report, target):
  children = target.children()
  report.heading(2)
  report.print("Children ({})".format(len(children)))
  report.heading()

  for child in sorted(children, key=lambda arch: arch.name()):
    report.tree(1)
    report.arch(child)
    report.print(child.name())
    report.arch()
  report.tree()

pageFuncMap = {
  "API Info" : homepage,
  "Children" : children_page,
  "Comments" : comments_page,
  "Contents" : contents_page,
  "Control Flow" : cfg_page,
  "Dependencies" : deps_page,
  "Entities" : ents_page,
  "Free Text" : freetext_page,
  "Metrics" : metrics_page,
  "References" : refs_page,
}
