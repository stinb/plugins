#
# Find lines of code that have been duplicated across your code base.
#

#This script is designed to run with Understand as an Interactive Report
use base ("Understand::IReport");
use strict;

# Required - Return the short name of the Report, slashes (/) will be used to create directories in the menu
sub name { return "Duplicate Lines";}

# return -1 to indicate this report is never available, nor valid, for any entities.
# otherwise test $entity to determine if the report can be run on that entity and return 0 or 1
sub test_entity {
  my $entity = shift;
  # return $entity->kind->check("function"); # run the report on function entities
  # return $entity->name =~ /^p/i; # run the report on entities whose name starts with the letter 'p'
  return 0; # run the report on any entity by right clicking it and selecting interactive report
}

# return -1 to indicate this report is never available, nor valid, for any architectures.
# otherwise test $arch to determine if the report can be run on that architecture and return 0 or 1
sub test_architecture {
    my $arch = shift;
    return 0;	# any arch is valid, right click on the architecture and select interactive report
}

# Required - Return 1 if this report should be run on the entire project
# and appear in the top level Report menu, otherwise return 0
# Understand must be restarted to view new global reports
sub test_global { return 1;}


# Indicate this report supports displaying the progress bar.
sub support_progress { return 1; }

# Indicate this report supports the cancel button.
sub support_abort { return 1; }
our %lexers;


# Initialization code will be called once, per external report object.
sub init {
  my $report = shift;
  %lexers = ();
  $report->option->integer("minline","Minimum # lines to match",3);
  $report->option->integer("minchar","Minimum # characters to match",20);
  $report->option->checkbox("ignoreWhitespace","Ignore Whitespace",1);
  $report->option->checkbox("ignoreComments","Ignore Comments",1);
}


# Required - This is where the report is actually run
sub generate {
  my $report = shift;
  my @matches = createInitialMatches($report,0,90);
  return if $report->is_aborted();
  @matches = removeDuplicates($report,90,10,@matches);
  return if $report->is_aborted();

  my $dupLines = 0;
  foreach my $match (@matches){
    my $lines = $match->getNumLines;
    $dupLines +=($lines * ($match->getLocCount-1));
    $match->print($report);
  }
  $report->tree();
  close(FILE);
  $report->print("\n$dupLines lines of duplicate code found\n") if $dupLines;
  $report->print("\nNo Duplicated code found\n") unless $dupLines;
  print("\n"); #Make sure to end with a new line, or the last line may not display

}

#*************************************
#Read through each file with a lexer and store a hash for each chunk of text based off the minimums
#Return an array of match objects with locations, but incomplete text
sub createInitialMatches{
  my ($report,$initPercent,$totalPercentage) = @_;
  my %initialMatches;
  my $currentLine;
  my $minline = $report->option->lookup("minline");
  my $minchar = $report->option->lookup("minchar");
  foreach my $file($report->db->ents("file ~unknown ~unresolved")){
    my $lexer = $file->lexer(0);
    return unless $lexer;
    $lexers{$file->id}=$lexer;
    my $lex = $lexer->first();
    my @lines;
    my $linenum;
    while ($lex){
      $linenum = $lex->line_begin;
      if (validToken($lex,$report)){
        $lines[$lex->line_begin].=$lex->text;
      }
      $lex=nextToken($lex,$report);
    }
    #Update status bar
    if ($linenum % 100 == 0){
      my $percent = int((($currentLine + $linenum) / $report->db->metric("CountLine")) * $totalPercentage)+ $initPercent;
      updatePercentage($report,$percent,"Initial Match Identification") ;
      return if $report->is_aborted();
    }
    $currentLine += $file->metric("CountLine");
    foreach (@lines){$_ =~ s/^\s*|\s*$//g;}

    for(my $i=0;$i<$#lines-($minline);$i++){
      my $line = $lines[$i];
      next unless $line;
      for (my $j=1;$j<$minline;$j++){
        $line.= $lines[$i+$j]
      }
      $line =~ s/^\s*|\s*$//g;
      if (length($line)>= $minchar){
        $initialMatches{$line} = new Match($line, $minline) unless $initialMatches{$line};
        $initialMatches{$line}->addLoc($file, $i);
      }
    }
  }
  my @tempArray;
  foreach(values %initialMatches){
    next unless $_->getLocCount > 1 && $_->addLexemes();
    $_->fillUp($report);
    push @tempArray, $_ ;
  }

  foreach(@tempArray){
    #$_->print($report);
  }
  #$report->tree(0);
  #$report->print("\n\n--- Finish initial Matches ---\n\n");

  return @tempArray;


}

sub removeDuplicates{
  my ($report,$initPercent,$totalPercentage, @matches) = @_;
  my %dupList;
  my @finalList;
  my $minline = $report->option->lookup("minline");
  my $minchar = $report->option->lookup("minchar");
  my $counter = 0;

  # Cycle through each match object and create a list of visited locations
  # If a location has already been reported in a specific match add
  foreach my $match (sort{$b->getNumLines() <=> $a->getNumLines();} @matches){

    #Update status bar
    my $percent = int(($counter++/ $#matches) * $totalPercentage)+$initPercent if $#matches;
    updatePercentage($report,$percent,"Removing Duplicates") ;
    return if $report->is_aborted();


    my $i = 0;
    LOC:while($i<$match->getLocCount){
      next LOC if $match->removeDuplicateLocations(\%dupList,$i);
      my ($file,$line) = $match->getLoc($i);
      for (my $j=0;$j<$match->getNumLines();$j++){
        $dupList{$file->id}{$line+$j}=1;
       # $report->print ("dupList ".$file->relname."(".($line+$j).")\n");
      }
      $i++;
    }
    push @finalList, $match if ($match->getLocCount()>1);
  }

  return @finalList;
}

sub updatePercentage{
  my ($report,$percent,$message) = @_;
  $report->progress($percent,$message);
}


sub nextToken{
  my($lex,$report) = @_;
  my $ignoreWhitespace = $report->option->lookup("ignoreWhitespace");
  my $ignoreComments = $report->option->lookup("ignoreComments");
  $lex = $lex->next;
  while ($lex){
    next if $lex->token eq "Comment" && $ignoreComments;
    next if $lex->token =~ /Whitespace|Newline/ && $ignoreWhitespace;
    return $lex;
  }continue{
    $lex = $lex->next;
  }
  return;
}

sub validToken{
  my($lex,$report) = @_;
  my $ignoreWhitespace = $report->option->lookup("ignoreWhitespace");
  my $ignoreComments = $report->option->lookup("ignoreComments");
  return 0 if $lex->token eq "Comment" && $ignoreComments;
  return 0 if $lex->token =~ /Whitespace|Newline/ && $ignoreWhitespace;
  return 1 if $lex;
}

package Match;
sub new{
  my ($class,$text, $numLines) = @_;
  my $self = bless {
    _fileList => [],
    _lineList => [],
    _lexList => [],
    locCount => 0,
    text => $text,
    numLines => $numLines,
    }, $class;
  return $self;
}

sub addLoc{
  my ($self, $fileEnt, $line) = @_;
  push @{$self->{_fileList}},$fileEnt;
  push @{$self->{_lineList}}, $line;
  $self->{locCount}++;
}

sub addLexemes{
  my ($self) = @_;
  for (my $i=0; $i < $self->{locCount};$i++){
    my $lexer = @{$self->{_fileList}}[$i]->lexer();
    return unless $lexer;
    my $lexeme = $lexer->lexeme(@{$self->{_lineList}}[$i],0);
    return unless $lexeme;
    push @{$self->{_lexList}},$lexeme;
  }
  return 1;
}

sub getLoc{
  my ($self, $i) = @_;
  return if  $i >= $self->{locCount};
  return (@{$self->{_fileList}}[$i],@{$self->{_lineList}}[$i]);
}

sub getLex{
  my ($self, $i) = @_;
  return if  $i >= $self->{locCount};
  my $lex =  @{$self->{_lexList}}[$i];
  return $lex;
}

sub getLocCount{
  my ($self) = @_;
  return $self->{locCount};
}

sub getText{
  my ($self) = @_;
  return $self->{text};
}

sub getNumLines{
  my ($self) = @_;
  return $self->{numLines};
}


#Fill the match to the end of the matching locations
sub fillUp{
  my($self,$report) = @_;
  my $ignoreWhitespace = $report->option->lookup("ignoreWhitespace");
  my $ignoreComments = $report->option->lookup("ignoreComments");
  my @lexArray; #used to keep track of the current location in each location
  my @endArray; #keep track of the last matching lexeme in each location

  @lexArray = @{$self->{_lexList}};
  my $textmatched = 1;
    STEP:while ($textmatched){
      for (my $i =0;$i < @lexArray; $i++){
        my $lex = $lexArray[$i];
        $endArray[$i]=$lex;

        #Goto the next code lexeme
        $lex=nextToken($lex,$report);
        $lexArray[$i]=$lex;
      }
      map {$textmatched=0 if ! $_ || !$lexArray[0] || $_->text() ne $lexArray[0]->text();} @lexArray;
    }
    #At this point endArray is on the last matching lexeme in each file location, @lexArray is undef

    #Get the actual text from the first file
    my $lex =  @{$self->{_lexList}}[0];
    my $text;
    while ($lex && ! ($lex->line_begin eq $endArray[0]->line_begin
                && $lex->column_begin eq $endArray[0]->column_begin)){
      $text .= $lex->text unless $lex->token eq "Comment" && $ignoreComments;
      $lex=$lex->next;
    }
    my $lines =  ($endArray[0]->line_end - @{$self->{_lineList}}[0]) + 1;
    $self->{text} = $text;
    $self->{numLines} = $lines;
}

# Given a list of already reported locations and a specific location for this match object
# remove that location from the match object if it has already been reported
sub removeDuplicateLocations{
  my ($self,$hash, $i) = @_;
  my %dupList = %{$hash};
  my @victims;
  return unless $dupList{@{$self->{_fileList}}[$i]->id}{@{$self->{_lineList}}[$i]};
  splice @{$self->{_fileList}}, $i,1;
  splice @{$self->{_lineList}}, $i,1;
  $self->{locCount}--;
  return 1;
}

sub print{
  my ($self, $report) = @_;
  $report->tree(1,1);
  $report->print($self->{numLines}." lines matched in ".$self->{locCount}." locations");
  for (my $i;$i<$self->{locCount};$i++){
    $report->tree(2,1);
    my $file = @{$self->{_fileList}}[$i];
    my $line = @{$self->{_lineList}}[$i];
    $report->syncfile($file,$line,0);
    $report->print($file->relname. "($line)");
    $report->syncfile();
  }
  $report->fontcolor("gray");
  $report->print("\nView Duplicate Lines");
  $report->fontcolor();
  $report->tree(3,0);
  my $text = $self->{text};
  $text =~ s/\t/  /g;
  $report->print($text);
}

sub nextToken{
  my($lex,$report) = @_;
  my $ignoreWhitespace = $report->option->lookup("ignoreWhitespace");
  my $ignoreComments = $report->option->lookup("ignoreComments");
  $lex = $lex->next;
  while ($lex){
    next if $lex->token eq "Comment" && $ignoreComments;
    next if $lex->token =~ /Whitespace|Newline/ && $ignoreWhitespace;
    return $lex;
  }continue{
    $lex = $lex->next;
  }
  return;
}
1;
