import und_lib.reports.arch_pages as archpages

def name():
  return "Architecture Contents"

def description():
  return '''Generate a hierarchical report of the architecture contents
    <p>Provide an overview of an architecture focused on the number of files
    and the lines of code. The report summarizes the largest architecture
    children, by lines of code, with a
    <a href="und://plugin/graph/Architecture%20Biggest%20Children-Custom">pie chart
    </a>. The children are also listed in a more detailed table view, with pages
    for each child that contain more details. Dependencies between children are
    shown with a graph. Finally, the entities in the architecture are listed in
    a detailed table.</p>

    <br><img src=".doc/arch_contents.png"/>
  '''

def tags():
  return [
    'Target: Architectures',
    'Language: Any',
  ]

def test_architecture(arch):
  return True

def pages(report, arch):
  return archpages.pageslist(arch)

# Report generation
def generate(report, arch, page):
  """
  Required, generate the report
  """

  # Navigate between architectures with breadcrumbs
  curArch = archpages.breadcrumbs(report, arch, page)

  # Heading
  report.heading(1)
  report.print(arch.name() + " Report\n" + report.db().name())
  report.heading()

  report.heading(2)
  report.print(curArch.name())
  report.heading()

  # Chart: TBD

  # Children
  children = curArch.children()
  if children:
    if len(children) > 1:
      try:
        report.draw(curArch, "Architecture Biggest Children", "Legend=right")
      except Exception as e:
        report.print("Unable to draw \"Biggest Children\" chart: ")
        report.print(str(e))
        pass

    report.table(["Kind", "Files", "Lines of Code"])
    for child in children:
      report.tablecell()
      report.pagelink(child.longname())
      report.print(child.name())
      report.pagelink()

      report.tablecell()
      report.print(str(len(child.ents(True))))

      report.tablecell()
      report.print(str(child.metric("CountLineCode")))
    report.table()

    try:
      report.draw(curArch, "Dependencies", variant="Internal")
    except:
      pass

  # Members
  ents = curArch.ents(False)
  if ents:
    report.table(["File", "Lines of Code"])

    for ent in ents:
      report.tablecell()
      report.entity(ent)
      report.print(ent.relname())
      report.entity()

      report.tablecell()
      try:
        report.print(str(ent.metric("CountLineCode")))
      except:
        pass


