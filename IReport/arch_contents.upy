def name():
  return "Architecture Contents"

def test_architecture(arch):
  return True

def pages(report, arch):
  pages = []
  pages.append(arch.longname())
  for child in descendents(arch):
    pages.append(child.longname())

  return pages

# Report generation
def generate(report, arch, page):
  """
  Required, generate the report
  """

  # Navigate between architectures with breadcrumbs
  start = arch.longname().split('/')
  all = page.split('/') if page else start

  pageIdList = []
  pageNameList = []
  for i in range(len(start)-1, len(all)):
    pageIdList.append('/'.join(all[0:i+1]))
    pageNameList.append(all[i])
  report.breadcrumbs(pageIdList, pageIdList.index('/'.join(all)), pageNameList)

  curArch = arch
  if page and curArch.longname() != page:
    for child in descendents(arch):
      if child.longname() == page:
        curArch = child
        break

  # Heading
  report.heading(1)
  report.print(arch.name() + " Report\n" + report.db().name())
  report.heading()

  report.heading(2)
  report.print(curArch.name())
  report.heading()

  # Chart: TBD

  # Children
  children = curArch.children()
  if children:
    if len(children) > 1:
      try:
        report.draw(curArch, "Charts/Biggest Children", "Legend=right")
      except:
        pass

    report.table(["Kind", "Files", "Lines of Code"])
    for child in children:
      report.tablecell()
      report.pagelink(child.longname())
      report.print(child.name())
      report.pagelink()

      report.tablecell()
      report.print(str(len(child.ents(True))))

      report.tablecell()
      report.print(str(child.metric("CountLineCode")))
    report.table()

    try:
      report.draw(curArch, "Dependencies", variant="Internal")
    except:
      pass

  # Members
  ents = curArch.ents(False)
  if ents:
    report.table(["File", "Lines of Code"])

    for ent in ents:
      report.tablecell()
      report.entity(ent)
      report.print(ent.relname())
      report.entity()

      report.tablecell()
      try:
        report.print(str(ent.metric("CountLineCode")))
      except:
        pass

def descendents(arch):
  all = []
  for child in arch.children():
    all.append(child)
    all.extend(descendents(child))
  return all
