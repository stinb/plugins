import archpages

def name():
  return "Tutorial: Architecture Contents"

def description():
  return '''Generate a hierarchical report of the architecture contents
    <p>This plugin generates a hierarchical report that provides a detailed
    overview of the contents of an architecture. It includes information about
    the architecture's components, their metrics (e.g., lines of code), and
    dependencies.</p>

    <p>The report presents a structured view of the architecture, starting with
    a top-level summary and drilling down into individual components and their
    members. It uses tables to organize information about each level in the
    hierarchy, including the number of files and lines of code associated with
    each component.</p>

    <p>The report also incorporates visualizations to enhance understanding. It
    includes a "Biggest Children" pie chart to compare the sizes of different
    components and a dependency graph to illustrate the relationships between
    them. These visual aids provide a clearer picture of the architecture's
    structure and organization.</p>
  '''

def test_architecture(arch):
  return True

def pages(report, arch):
  return archpages.pageslist(arch)

# Report generation
def generate(report, arch, page):
  """
  Required, generate the report
  """

  # Navigate between architectures with breadcrumbs
  curArch = archpages.breadcrumbs(report, arch, page)

  # Heading
  report.heading(1)
  report.print(arch.name() + " Report\n" + report.db().name())
  report.heading()

  report.heading(2)
  report.print(curArch.name())
  report.heading()

  # Chart: TBD

  # Children
  children = curArch.children()
  if children:
    if len(children) > 1:
      try:
        report.draw(curArch, "Tutorial: Biggest Children - Architecture Sunburst", "Legend=right")
      except Exception as e:
        report.print("Unable to draw \"Biggest Children\" chart: ")
        report.print(str(e))
        pass

    report.table(["Kind", "Files", "Lines of Code"])
    for child in children:
      report.tablecell()
      report.pagelink(child.longname())
      report.print(child.name())
      report.pagelink()

      report.tablecell()
      report.print(str(len(child.ents(True))))

      report.tablecell()
      report.print(str(child.metric("CountLineCode")))
    report.table()

    try:
      report.draw(curArch, "Dependencies", variant="Internal")
    except:
      pass

  # Members
  ents = curArch.ents(False)
  if ents:
    report.table(["File", "Lines of Code"])

    for ent in ents:
      report.tablecell()
      report.entity(ent)
      report.print(ent.relname())
      report.entity()

      report.tablecell()
      try:
        report.print(str(ent.metric("CountLineCode")))
      except:
        pass


