# Interactive Report for showing the parameters passed in at each call reference

def name():
  """
  Required, the name of the ireport.
  """
  return "Parameters Table"

def description():
  return '''Parameters passed in at each call in a table view
    <p> This report shows a table of parameters passed into the function at
    each call.  The first row shows the default value (if any) for the
    parameters. Clicking on a line number will open the location in the editor.
    Read more about it in the <a href=
    "https://blog.scitools.com/custom-report-finding-parameter-values/">blog
    article.</a></p>

    <p>See also the <a href="und://plugin/ireport/Parameter%20Values">
    Parameter Values</a> interactive report that shows all the values of
    a parameter.</p>

    <br><img src=".doc/parameters_table.png"/>
    '''

def tags():
  return [
    'Target: Functions',
    'Language: C',
    'Language: C++',
    'Blog Article',
  ]

def test_entity(ent):
  """
  Optional method, return true if report is valid for the entity
  """
  # This is valid for c functions with parameters
  return ent.kind().check("c function") and ent.parameters()

# Report generation
def generate(report, ent):
  """
  Required, generate the report
  """

  # Header
  params = ent.parameters().split(",");
  tbldesc = """
    [{
      "name" : "File",
      "filtertype": "string"
     },{
      "name" : "Line",
      "filtertype": "numeric"
     },{
      "name" : "Scope",
      "filtertype": "string",
      "sort" : "ascending"
  """
  for param in params:
    tbldesc += """
    }},{{
      "name" : "{}",
      "filtertype": "string"
    """.format(param)
  tbldesc += "}]";
  report.table(tbldesc)

  # defaults
  defValue = {}
  for ref in ent.refs("define,declare","c parameter", True):
    val = ref.ent().value()
    if val:
      for i in range(len(params)):
        if params[i].endswith(ref.ent().name()):
          defValue[i] = val
          break

  if len(defValue) > 0:
    report.tablecell()
    report.print("Default");
    report.tablecell()
    report.tablecell()
    for i in range(len(params)):
      report.tablecell()
      if i in defValue:
        report.print(defValue[i])

  lexercache = {} # cache lexers for speed
  for ref in ent.refs("callby"):
    report.tablecell()
    report.entity(ref.file())
    report.print(ref.file().name())
    report.entity()

    report.tablecell()
    report.syncfile(ref.file().longname(), ref.line(), ref.column())
    report.print(str(ref.line()))
    report.syncfile()

    report.tablecell()
    report.entity(ref.ent())
    report.print(ref.ent().name())
    report.entity()

    report.tablecell()

    curPos = 0

    lexer = findlexer(ref.file(), lexercache)
    if lexer:
      lexeme = lexer.lexeme(ref.line(), ref.column())
      parens = None
      while lexeme and (parens is None or parens > 0):
        if lexeme.token() == "Punctuation":
          if lexeme.text() == ')':
            parens -= 1
          elif lexeme.text() == '(':
            if parens:
              parens += 1
            else:
              parens = 1
              lexeme = lexeme.next()
              continue
        if (lexeme.token() == "Operator" and  parens and parens == 1
            and lexeme.text() == ',' and (curPos < len(params)-1)):
            # Only increment current position if we're at parentheses level
            # 1, to handle nested functions with their own parameters. To
            # handle variable arguments, only go to next table cell if there
            # is one
            curPos += 1
            report.tablecell()
            lexeme = lexeme.next()
            continue
        if parens:
          # If this lexeme is inside the range mapped to this parameter
          ent = lexeme.ent()
          if ent:
            report.entity(ent)
          # Replace newlines to handle function calls spanning multiple lines
          report.print(lexeme.text().replace('\n',' '))
          if ent:
            report.entity()
        lexeme = lexeme.next()

    while curPos < (len(params)-1):
      report.tablecell()
      curPos += 1


def findlexer(file, lexercache):
  # Lexer creation takes significant time, so keep track of lexers already
  # created instead of recreating them each time
  lexer = None
  if file in lexercache:
    lexer = lexercache[file]
  else:
    try:
      lexer = file.lexer()
      lexercache[file] = lexer
    except:
      pass
  return lexer

