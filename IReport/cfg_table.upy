# Interactive Report for showing control flow graph as a filterable table

def name():
  return "Control Flow Table"

def test_entity(ent):
  return ent.control_flow_graph()

def description():
  return '''A utility script to display control flow nodes in a table.
    <p>The table columns are: </p>
    <ul>
      <li>Index in the node list</li>
      <li>Node Kind</li>
      <li>(Start) Line</li>
      <li>(Start) Column </li>
      <li>End Line</li>
      <li>End Column </li>
      <li>Index of the End Node, if there is one</li>
      <li>Indices and branch labels to each child</li>
    </ul>

    <br><img src=".doc/cfg_table.png"/>
  '''

def tags():
  return [
    'Target: Functions',
    'Language: Any',
    'API',
  ]

# Report generation
def generate(report, ent):
  report.heading(2)
  report.print("Control Flow Graph")
  report.heading()

  nodes = ent.control_flow_graph().nodes()
  report.table("""
    [{
      "name" : "Index",
      "filtertype": "numeric",
      "sort": "ascending"
     },{
      "name" : "Kind",
      "filtertype": "string"
     },{
      "name" : "Line",
      "filtertype": "numeric"
     },{
      "name" : "Column",
      "filtertype": "numeric"
     },{
      "name" : "End Line",
      "filtertype": "numeric"
     },{
      "name" : "End Column",
      "filtertype": "numeric"
     },{
      "name" : "End Node",
      "filtertype": "numeric"
     },{
      "name" : "Children",
      "filtertype": "string"
    }]""")

  for idx, node in enumerate(nodes):
    printCellValue(report, idx)
    printCellValue(report, node.kind())
    printCellValue(report, node.line_begin())
    printCellValue(report, node.column_begin())
    printCellValue(report, node.line_end())
    printCellValue(report, node.column_end())
    e = node.end_node()
    if e:
      e = nodes.index(e)
    printCellValue(report, e)

    childstr = ""
    for child in node.children():
      if childstr:
        childstr += ", "
      i = nodes.index(child)
      lbl = node.child_label(child)
      if lbl:
        childstr += "{}({})".format(i,lbl)
      else:
        childstr = str(i)
    printCellValue(report, childstr)

def printCellValue(report, val):
  report.tablecell()
  if val is not None:
    report.print(str(val))

