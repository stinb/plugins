# Python version of the Perl IReport provided by TechMatrix
# Blog Article: https://blog.scitools.com/cool-plugins-for-code-maintenance/
# Use this report to help find low maintainibility classes. This report
# outputs classes that exceed user-defined thresholds for the metrics
# CountDeclMethod, CountClassCoupled, PercentLackOfCohesion.

def name():
  return "Low Maintainability Classes Table"

def description():
  return '''Finds classes that exceed thresholds for specified metrics.
    <p> This report displays classes exceeding thresholds for CountDeclMethod,
    CountClassCoupled, and PercentLackOfCohesion, aiding in identifying
    potentially hard-to-maintain classes. Read more about it in the <a href=
    "https://blog.scitools.com/cool-plugins-for-code-maintenance/">blog
    article.</a></p>

    <br><img src=".doc/low_maintain_classes.png"/>
  '''

def tags():
  return [
    'Target: Project',
    'Language: Basic',
    'Language: C++',
    'Language: C#',
    'Language: Java',
    'Language: Pascal',
    'Language: Python',
    'Language: Web',
    'Blog Article',
  ]

def test_global(db):
  return True

def is_enabled_by_default():
  return True

def init(report):
  report.options().integer("CountDeclMethod", "CountDeclMethod Threshold :", 20)
  report.options().integer("CountClassCoupled", "CountClassCoupled Threshold :", 20)
  report.options().integer("PercentLackOfCohesion", "PercentLackOfCohesion Threshold :", 90)
  report.options().checkbox("AndCondition", "Use AND condition between thresholds", False)

# Report generation
def generate(report, db):
  th_cdm = max(1, report.options().lookup("CountDeclMethod"))
  th_ccc = max(1, report.options().lookup("CountClassCoupled"))
  th_plc = max(1, report.options().lookup("PercentLackOfCohesion"))
  use_and_condition = report.options().lookup("AndCondition")

  if use_and_condition:
    report.print("CountDeclMethod >= {} and CountClassCoupled >= {} and PercentLackOfCohesion >= {}\n".format(th_cdm, th_ccc, th_plc))
  else:
    report.print("CountDeclMethod >= {} or CountClassCoupled >= {} or PercentLackOfCohesion >= {}\n".format(th_cdm, th_ccc, th_plc))

  report.table(["Name", "CountDeclMethod", "CountClassCoupled", "PercentLackOfCohesion"])
  ents = db.ents("class ~unknown ~unresolved")
  prog = 0
  for ent in sorted(ents, key=lambda ent: ent.name()):
    report.progress(int(prog / len(ents) * 100))
    prog += 1

    if ent.library() == "Standard":
      continue

    cdm = ent.metric("CountDeclMethod")
    ccc = ent.metric("CountClassCoupled")
    plc = ent.metric("PercentLackOfCohesion")

    if use_and_condition:
      condition = (cdm and cdm >= th_cdm) and (ccc and ccc >= th_ccc) and (plc and plc >= th_plc)
    else:
      condition = (cdm and cdm >= th_cdm) or (ccc and ccc >= th_ccc) or (plc and plc >= th_plc)

    if not condition:
      continue

    report.tablecell()
    report.entity(ent)
    report.print(ent.longname())
    report.entity()

    printValue(report, cdm, th_cdm)
    printValue(report, ccc, th_ccc)
    printValue(report, plc, th_plc)

  report.table()

def printValue(report, val, threshold):
  report.tablecell()
  if val is None:
    return
  if val >= threshold:
    report.fontcolor("#ff0000")
  report.print(str(val))
  report.fontcolor()
