# Interactive Report using codecheck

def name():
  return "Codecheck Demo"

def test_inspection(inspection):
  return True

# Report generation
def generate(report, inspection):
  # Graphs can be drawn for inspections. Draw this graph if there are
  # violations (graph not empty)
  vlist = inspection.violations()
  cnt = len(vlist)
  if cnt:
    try:
      report.draw(inspection, "Top Checks")
    except Exception as e:
      report.print("Unable to draw \"Top Checks\" chart: {}\n".format(str(e)))

  report.heading(2)
  report.print("Summary")
  report.heading()

  # Find summary information
  summary = {
    "Total Violations" : cnt,
    "Checks" : len(inspection.config().checks()) if inspection.config() else 0,
    "Files" : len(inspection.files()),
    "Errors" : len(inspection.errors()),
    "Start" : inspection.start_time(),
    "End" : inspection.end_time()
  }

  # Find out if a violation was ignored and how
  for v in vlist:
    if v.ignores():
      visited = set()
      for src, note in v.ignores():
        if not src in visited:
          visited.add(src)
          summary[src] = summary.get(src,0) + 1
    else:
      summary["Violations"] = summary.get("Violations",0) + 1

  report.table(["Name", "Value"])
  for k,v in sorted(summary.items(),key=lambda item: item[0]):
    report.tablecell()
    report.print(k)
    report.tablecell()
    report.print(str(v))
  report.table()

