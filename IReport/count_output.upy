
def name():
  return "Outputs Metric"

def test_entity(ent):
  return ent.kind().check("c function")

def description():
  return '''<p>List the references contributing to the CountOutput metric.</p>

    <br><img src=".doc/count_input.png"/>
  '''

def tags():
  return [
    'Target: Functions',
    'Metric Details'
  ]

# Report generation
def generate(report, ent):
  report.heading(2)
  report.print("CountOutput: {}".format(ent.metric("CountOutput")))
  report.heading()

  report.table("""
    [{
      "name" : "Reference",
      "filtertype": "string"
     },{
      "name" : "Entity",
      "filtertype": "string"
     },{
      "name" : "Entity Kind",
      "filtertype": "string"
    }]""")
  if ent.type() != "void":
    report.tablecell()
    report.print("Non-void return type")
    report.tablecell()
    report.tablecell()

  refs = ent.refs("c set,c modify,c call ~inactive",
      "c global object,c local object,c member object,c parameter,c function",
      True)
  for ref in sorted(refs, key = lambda r: (r.file().relname(), r.line(), r.column())):
    if ref.ent() == ent:
      continue
    if ref.ent().kind().check("local"):
      continue
    if ref.ent().kind().check("parameter"):
      paramtype = ref.ent().type()
      if '&' not in type and ('*' not in type or not ref.kind().check("c deref set")):
        continue
    report.tablecell()
    report.print(ref.kind().name())

    report.tablecell()
    report.entity(ref.ent())
    report.print(ref.ent().longname())
    report.entity()

    report.tablecell()
    report.print(ref.ent().kind().longname())
