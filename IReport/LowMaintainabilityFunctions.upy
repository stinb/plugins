def description(): 
  return '''Finds functions exceeding thresholds for Cyclomatic, CountLine, & MaxNesting metrics.
    <p> This report helps identify potential low-maintainability functions in your codebase. 
    It flags functions based on user-defined thresholds for three key metrics: Cyclomatic Complexity, CountLine, and MaxNesting. 
    By identifying and addressing these functions, you can improve the overall maintainability and quality of your code. </p>'''


# Python version of the Perl IReport provided by Tech Matrix
# Blog Article: https://blog.scitools.com/cool-plugins-for-code-maintenance/
# Use this report to help find low maintainibility functions. This report
# outputs functions that exceed user-defined thresholds for the metrics
# Cyclomatic, CountLine, MaxNesting.


def name():
  return "Low Maintainability Functions"

def test_global(db):
  return True

def is_enabled_by_default():
  return True
  
def init(report):
  report.options().integer("Cyclomatic", "Cyclomatic Threshold :", 20)
  report.options().integer("CountLine", "CountLine Threshold :", 100);
  report.options().integer("MaxNesting", "MaxNesting Threshold :", 5)

# Report generation
def generate(report, db):
  th_cc = max(1, report.options().lookup("Cyclomatic"))
  th_cl = max(1, report.options().lookup("CountLine"))
  th_mn = max(1, report.options().lookup("MaxNesting"))

  report.print("Cyclomatic >= {} or CountLine >= {} or MaxNesting >= {}\n".format(th_cc, th_cl, th_mn))

  report.table(["Name", "Cyclomatic", "CountLine", "MaxNesting"])
  ents = db.ents("function, method, fortran subroutine, fortran main program, ada procedure")
  prog = 0
  for ent in sorted(ents,key= lambda ent: ent.name()):
    report.progress(int(prog / len(ents) * 100))
    prog += 1

    cc = ent.metric("Cyclomatic")
    cl = ent.metric("CountLine")
    mn = ent.metric("MaxNesting")

    if not ((cc and cc >= th_cc) or (cl and cl >= th_cl) or (mn and mn >= th_mn)):
      continue

    report.tablecell()
    report.entity(ent)
    report.print(ent.longname())
    report.entity()

    printValue(report, cc, th_cc)
    printValue(report, cl, th_cl)
    printValue(report, mn, th_mn)

  report.table()

def printValue(report, val, threshold):
  report.tablecell()
  if val is None:
    return
  if val >= threshold:
    report.fontcolor("#ff0000")
  report.print(str(val))
  report.fontcolor()



