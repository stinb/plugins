
def name():
  return "Inputs Metric"

def test_entity(ent):
  return ent.kind().check("c function")

def description():
  return '''List the references contributing to the CountInput metric.'''

# Report generation
def generate(report, ent):
  report.heading(2)
  report.print("CountInput: {}".format(ent.metric("CountInput")))
  report.heading()

  report.table("""
    [{
      "name" : "Reference",
      "filtertype": "string"
     },{
      "name" : "Entity",
      "filtertype": "string"
     },{
      "name" : "Entity Kind",
      "filtertype": "string"
    }]""")

  refs = ent.refs("c use ~ptr ~inactive,c callby ~inactive",
      "c global object,c local object,c member object,c parameter,c function",
      True)

  for ref in sorted(refs, key = lambda r: (r.file().relname(), r.line(), r.column())):
    if ref.ent() == ent:
      continue
    if ref.ent().kind().check("local"):
      continue
    report.tablecell()
    report.print(ref.kind().name())

    report.tablecell()
    report.entity(ref.ent())
    report.print(ref.ent().longname())
    report.entity()

    report.tablecell()
    report.print(ref.ent().kind().longname())
